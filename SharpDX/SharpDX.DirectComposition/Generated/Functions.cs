// Copyright (c) 2010-2014 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Types declaration for SharpDX.DirectComposition namespace.
//     This code was generated by a tool.
//     Date : 6/25/2016 10:38:16 PM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
namespace SharpDX.DirectComposition {

#pragma warning disable 419
#pragma warning disable 1587
#pragma warning disable 1574

        /// <summary>	
        /// Functions	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='SharpDX.DirectComposition.DComp']/*"/>	
    public  partial class DComp {   
        
        /// <summary>	
        /// <p>Creates a new composition surface object that can be bound to a	
        /// Microsoft DirectX swap chain or swap buffer and associated	
        /// with a visual.</p>	
        /// </summary>	
        /// <param name="desiredAccess"><dd>  <p>The requested access to the composition surface object. It can be one of the following values:</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong></strong></dt> <dt>0x0000L</dt> </dl> </td><td> <p>No access.</p> </td></tr> <tr><td><dl> <dt><strong>COMPOSITIONSURFACE_READ</strong></dt> <dt>0x0001L</dt> </dl> </td><td> <p>Read access. For internal use only.</p> </td></tr> <tr><td><dl> <dt><strong>COMPOSITIONSURFACE_WRITE</strong></dt> <dt>0x0002L</dt> </dl> </td><td> <p>Write access. For internal use only.</p> </td></tr> <tr><td><dl> <dt><strong>COMPOSITIONSURFACE_ALL_ACCESS</strong></dt> <dt>0x0003L</dt> </dl> </td><td> <p>Read/write access. Always specify this flag except when duplicating a surface in another process, in which case set <em>desiredAccess</em> to 0.</p> </td></tr> </table> <p>?</p> </dd></param>	
        /// <param name="securityAttributes"><dd>  <p>Contains the security descriptor for the composition surface object, and specifies whether the handle of the composition surface object is inheritable when a child process is created. If this parameter is <c>null</c>, the composition surface object is created with default security attributes  that grant read and write access to the current process,  but do not enable child processes to  inherit the handle.</p> </dd></param>	
        /// <param name="surfaceHandle"><dd>  <p>The handle of the new composition surface object. This parameter must not be <c>null</c>.</p> </dd></param>	
        /// <returns><p>If the function succeeds, it returns <see cref="SharpDX.Result.Ok"/>. Otherwise, it returns an <strong><see cref="SharpDX.Result"/></strong> error code. See DirectComposition Error Codes for a list of error codes.  </p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DCompositionCreateSurfaceHandle']/*"/>	
        /// <msdn-id>hh437360</msdn-id>	
        /// <unmanaged>HRESULT DCompositionCreateSurfaceHandle([In] unsigned int desiredAccess,[In, Optional] SECURITY_ATTRIBUTES* securityAttributes,[Out] void** surfaceHandle)</unmanaged>	
        /// <unmanaged-short>DCompositionCreateSurfaceHandle</unmanaged-short>	
        public static void CreateSurfaceHandle(int desiredAccess, SharpDX.Win32.SecurityAttributes? securityAttributes, out System.IntPtr surfaceHandle) {
            unsafe {
                SharpDX.Win32.SecurityAttributes securityAttributes_;
                if (securityAttributes.HasValue)
                    securityAttributes_ = securityAttributes.Value;				
                SharpDX.Result __result__;
                fixed (void* surfaceHandle_ = &surfaceHandle)
                    __result__= 
    				DCompositionCreateSurfaceHandle_(desiredAccess, (securityAttributes.HasValue)?&securityAttributes_:(void*)IntPtr.Zero, surfaceHandle_);		
                __result__.CheckError();
            }
        }
        [DllImport("dcomp.dll", EntryPoint = "DCompositionCreateSurfaceHandle", CallingConvention = CallingConvention.StdCall)]
        private unsafe static extern int DCompositionCreateSurfaceHandle_(int arg0,void* arg1,void* arg2);
        
        /// <summary>	
        /// <p>Creates a new device object that can be used to create other Microsoft DirectComposition objects.</p>	
        /// </summary>	
        /// <param name="renderingDevice"><dd> <p>An optional reference to a DirectX device to be used to create DirectComposition surface objects. Must be a reference to an object implementing the <strong><see cref="SharpDX.DXGI.Device"/></strong> or <strong><see cref="SharpDX.Direct2D1.Device"/></strong> interfaces.</p> </dd></param>	
        /// <param name="iid"><dd> <p>The identifier of the interface to retrieve. This must be one of __uuidof(<see cref="SharpDX.DirectComposition.Device"/>) or __uuidof(<see cref="SharpDX.DirectComposition.DesktopDevice"/>).</p> </dd></param>	
        /// <param name="dcompositionDevice"><dd> <p>Receives an interface reference to the newly created device object. The reference is of the type specified by the <em>iid</em> parameter. This parameter must not be <c>null</c>.</p> </dd></param>	
        /// <returns><p>If the function succeeds, it returns <see cref="SharpDX.Result.Ok"/>. Otherwise, it returns an <strong><see cref="SharpDX.Result"/></strong> error code. See DirectComposition Error Codes for a list of error codes.</p></returns>	
        /// <remarks>	
        /// <p>A device object serves as the factory for all other DirectComposition objects. It also controls transactional composition through the <see cref="SharpDX.DirectComposition.Device2.Commit"/> method. </p><p>The <em>renderingDevice</em> parameter may point to a DXGI, Direct3D, Direct2D device object, or it may be <c>null</c>. This parameter affects the behavior of the <see cref="SharpDX.DirectComposition.Device2.CreateSurface"/>, <see cref="SharpDX.DirectComposition.Device2.CreateVirtualSurface"/> and <see cref="SharpDX.DirectComposition.Surface.BeginDraw"/> methods. </p><p>If the <em>renderingDevice</em> parameter is <c>null</c> then the returned DirectComposition device cannot directly create DirectComposition surface objects. In particular, <see cref="SharpDX.DirectComposition.Device2.CreateSurface"/> and <see cref="SharpDX.DirectComposition.Device2.CreateVirtualSurface"/> methods return E_INVALIDARG, regardless of the supplied parameters. However, such a DirectComposition device object can still be used to indirectly create surfaces if the application creates a surface factory object via the <see cref="SharpDX.DirectComposition.Device2.CreateSurfaceFactory"/> method. </p><p>If the <em>renderingDevice</em> parameter points to a DXGI device, that device is used to allocate all video memory needed by the <see cref="SharpDX.DirectComposition.Device2.CreateSurface"/> and <see cref="SharpDX.DirectComposition.Device2.CreateVirtualSurface"/> methods. Moreover, the <see cref="SharpDX.DirectComposition.Surface.BeginDraw"/> method returns an interface reference to a DXGI surface that belongs to that same DXGI device. </p><p>If the <em>renderingDevice</em> parameter points to a Direct2D device object, DirectComposition extracts from it the underlying DXGI device object and uses it as if that DXGI device object had been passed in as the <em>renderingDevice</em> parameter. However, passing in a Direct2D object further causes <see cref="SharpDX.DirectComposition.Surface.BeginDraw"/> to accept __uuidof(<see cref="SharpDX.Direct2D1.DeviceContext"/>) for its <em>iid</em> parameter for any objects created with the <see cref="SharpDX.DirectComposition.Device2.CreateSurface"/> or <see cref="SharpDX.DirectComposition.Device2.CreateVirtualSurface"/> methods. In that case, the Direct2D device context object returned by <see cref="SharpDX.DirectComposition.Surface.BeginDraw"/> will belong to the same Direct2D device passed as the <em>renderingDevice</em> parameter. </p><p>If the <em>iid</em> parameter is __uuidof(<see cref="SharpDX.DirectComposition.Device"/>), then the dcompositionDevice parameter receives a reference to a Version 1 <see cref="SharpDX.DirectComposition.Device"/> interface, but the underlying object is a Version 2 desktop device object. The application can later obtain a reference to either the <see cref="SharpDX.DirectComposition.Device2"/> or <see cref="SharpDX.DirectComposition.DesktopDevice"/> interfaces by calling the <strong>QueryInterface</strong> method on that device. Similarly, all DirectComposition objects created from such a device are Version 2 objects under the covers. For example, the <see cref="SharpDX.DirectComposition.Device.CreateVisual"/> method will return an <see cref="SharpDX.DirectComposition.Visual"/> interface to the created visual, but the application can obtain a reference to the <see cref="SharpDX.DirectComposition.Visual2"/> interface via the QueryInterface method. This behavior allows an application written to the DirectComposition V1 API to incrementally adopt DirectComposition V2 features by changing the device creation method from <see cref="SharpDX.DirectComposition.DComp.CreateDevice"/> to <see cref="SharpDX.DirectComposition.DComp.CreateDevice2"/>, while still requesting the <see cref="SharpDX.DirectComposition.Device2"/> interface. This allows the rest of the code to remain unchanged, while allowing the application to use QueryInterface in just the places where new functionality is needed.	
        /// </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DCompositionCreateDevice2']/*"/>	
        /// <msdn-id>dn280347</msdn-id>	
        /// <unmanaged>HRESULT DCompositionCreateDevice2([In, Optional] IUnknown* renderingDevice,[In] const GUID&amp; iid,[Out] void** dcompositionDevice)</unmanaged>	
        /// <unmanaged-short>DCompositionCreateDevice2</unmanaged-short>	
        internal static void CreateDevice2(SharpDX.ComObject renderingDevice, System.Guid iid, out System.IntPtr dcompositionDevice) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* dcompositionDevice_ = &dcompositionDevice)
                    __result__= 
    				DCompositionCreateDevice2_((void*)((renderingDevice == null)?IntPtr.Zero:renderingDevice.NativePointer), &iid, dcompositionDevice_);		
                __result__.CheckError();
            }
        }
        [DllImport("dcomp.dll", EntryPoint = "DCompositionCreateDevice2", CallingConvention = CallingConvention.StdCall)]
        private unsafe static extern int DCompositionCreateDevice2_(void* arg0,void* arg1,void* arg2);
        
        /// <summary>	
        /// <p>Creates a new composition surface object that can be bound to a	
        /// Microsoft DirectX swap chain or swap buffer and associated	
        /// with a visual.</p>	
        /// </summary>	
        /// <param name="statistics"><dd>  <p>The requested access to the composition surface object. It can be one of the following values:</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong></strong></dt> <dt>0x0000L</dt> </dl> </td><td> <p>No access.</p> </td></tr> <tr><td><dl> <dt><strong>COMPOSITIONSURFACE_READ</strong></dt> <dt>0x0001L</dt> </dl> </td><td> <p>Read access. For internal use only.</p> </td></tr> <tr><td><dl> <dt><strong>COMPOSITIONSURFACE_WRITE</strong></dt> <dt>0x0002L</dt> </dl> </td><td> <p>Write access. For internal use only.</p> </td></tr> <tr><td><dl> <dt><strong>COMPOSITIONSURFACE_ALL_ACCESS</strong></dt> <dt>0x0003L</dt> </dl> </td><td> <p>Read/write access. Always specify this flag except when duplicating a surface in another process, in which case set <em>desiredAccess</em> to 0.</p> </td></tr> </table> <p>?</p> </dd></param>	
        /// <param name="minSafeFeaturelLevel"><dd>  <p>Contains the security descriptor for the composition surface object, and specifies whether the handle of the composition surface object is inheritable when a child process is created. If this parameter is <c>null</c>, the composition surface object is created with default security attributes  that grant read and write access to the current process,  but do not enable child processes to  inherit the handle.</p> </dd></param>	
        /// <param name="maxHardwareFeaturelLevel"><dd>  <p>The handle of the new composition surface object. This parameter must not be <c>null</c>.</p> </dd></param>	
        /// <returns><p>If the function succeeds, it returns <see cref="SharpDX.Result.Ok"/>. Otherwise, it returns an <strong><see cref="SharpDX.Result"/></strong> error code. See DirectComposition Error Codes for a list of error codes.  </p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DCompositionGetFrameStatistics']/*"/>	
        /// <msdn-id>hh437360</msdn-id>	
        /// <unmanaged>HRESULT DCompositionGetFrameStatistics([Out] DCOMPOSITION_FRAME_STATISTICS* statistics,[Out, Optional] D3D_FEATURE_LEVEL* minSafeFeaturelLevel,[Out, Optional] D3D_FEATURE_LEVEL* maxHardwareFeaturelLevel)</unmanaged>	
        /// <unmanaged-short>DCompositionGetFrameStatistics</unmanaged-short>	
        internal static void GetFrameStatistics(out SharpDX.DirectComposition.FrameStatistics statistics, out SharpDX.Direct3D.FeatureLevel minSafeFeaturelLevel, out SharpDX.Direct3D.FeatureLevel maxHardwareFeaturelLevel) {
            unsafe {
                statistics = new SharpDX.DirectComposition.FrameStatistics();
                SharpDX.Result __result__;
                fixed (void* statistics_ = &statistics)
                    fixed (void* minSafeFeaturelLevel_ = &minSafeFeaturelLevel)
                        fixed (void* maxHardwareFeaturelLevel_ = &maxHardwareFeaturelLevel)
                            __result__= 
            				DCompositionGetFrameStatistics_(statistics_, minSafeFeaturelLevel_, maxHardwareFeaturelLevel_);		
                __result__.CheckError();
            }
        }
        [DllImport("dcomp.dll", EntryPoint = "DCompositionGetFrameStatistics", CallingConvention = CallingConvention.StdCall)]
        private unsafe static extern int DCompositionGetFrameStatistics_(void* arg0,void* arg1,void* arg2);
        
        /// <summary>	
        /// <p>Creates a new DirectComposition device object, which can be used to create other DirectComposition objects.</p>	
        /// </summary>	
        /// <param name="renderingDevice"><dd>  <p>An optional reference to a DirectX device to be used to create DirectComposition surface objects. Must be a reference to an object implementing the <strong><see cref="SharpDX.DXGI.Device"/></strong> or <strong><see cref="SharpDX.Direct2D1.Device"/></strong> interfaces.</p> </dd></param>	
        /// <param name="iid"><dd>  <p>The identifier of the interface to retrieve. This must be one of __uuidof(<see cref="SharpDX.DirectComposition.Device"/>) or __uuidof(<see cref="SharpDX.DirectComposition.DesktopDevice"/>).</p> </dd></param>	
        /// <param name="dcompositionDevice"><dd>  <p>Receives an interface reference to the newly created device object. The reference is of the type specified by the <em>iid</em> parameter. This parameter must not be <c>null</c>.</p> </dd></param>	
        /// <returns><p>If this function succeeds, it returns <strong><see cref="SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="SharpDX.Result"/></strong> error code.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DCompositionCreateDevice3']/*"/>	
        /// <msdn-id>dn958410</msdn-id>	
        /// <unmanaged>HRESULT DCompositionCreateDevice3([In, Optional] IUnknown* renderingDevice,[In] const GUID&amp; iid,[Out] void** dcompositionDevice)</unmanaged>	
        /// <unmanaged-short>DCompositionCreateDevice3</unmanaged-short>	
        internal static void CreateDevice3(SharpDX.ComObject renderingDevice, System.Guid iid, out System.IntPtr dcompositionDevice) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* dcompositionDevice_ = &dcompositionDevice)
                    __result__= 
    				DCompositionCreateDevice3_((void*)((renderingDevice == null)?IntPtr.Zero:renderingDevice.NativePointer), &iid, dcompositionDevice_);		
                __result__.CheckError();
            }
        }
        [DllImport("dcomp.dll", EntryPoint = "DCompositionCreateDevice3", CallingConvention = CallingConvention.StdCall)]
        private unsafe static extern int DCompositionCreateDevice3_(void* arg0,void* arg1,void* arg2);
        
        /// <summary>	
        /// <p>Creates a new composition surface object that can be bound to a	
        /// Microsoft DirectX swap chain or swap buffer and associated	
        /// with a visual.</p>	
        /// </summary>	
        /// <param name="visual"><dd>  <p>The requested access to the composition surface object. It can be one of the following values:</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong></strong></dt> <dt>0x0000L</dt> </dl> </td><td> <p>No access.</p> </td></tr> <tr><td><dl> <dt><strong>COMPOSITIONSURFACE_READ</strong></dt> <dt>0x0001L</dt> </dl> </td><td> <p>Read access. For internal use only.</p> </td></tr> <tr><td><dl> <dt><strong>COMPOSITIONSURFACE_WRITE</strong></dt> <dt>0x0002L</dt> </dl> </td><td> <p>Write access. For internal use only.</p> </td></tr> <tr><td><dl> <dt><strong>COMPOSITIONSURFACE_ALL_ACCESS</strong></dt> <dt>0x0003L</dt> </dl> </td><td> <p>Read/write access. Always specify this flag except when duplicating a surface in another process, in which case set <em>desiredAccess</em> to 0.</p> </td></tr> </table> <p>?</p> </dd></param>	
        /// <param name="hwnd"><dd>  <p>Contains the security descriptor for the composition surface object, and specifies whether the handle of the composition surface object is inheritable when a child process is created. If this parameter is <c>null</c>, the composition surface object is created with default security attributes  that grant read and write access to the current process,  but do not enable child processes to  inherit the handle.</p> </dd></param>	
        /// <param name="enable"><dd>  <p>The handle of the new composition surface object. This parameter must not be <c>null</c>.</p> </dd></param>	
        /// <returns><p>If the function succeeds, it returns <see cref="SharpDX.Result.Ok"/>. Otherwise, it returns an <strong><see cref="SharpDX.Result"/></strong> error code. See DirectComposition Error Codes for a list of error codes.  </p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DCompositionAttachMouseWheelToHwnd']/*"/>	
        /// <msdn-id>hh437360</msdn-id>	
        /// <unmanaged>HRESULT DCompositionAttachMouseWheelToHwnd([In] IDCompositionVisual* visual,[In] HWND hwnd,[In] BOOL enable)</unmanaged>	
        /// <unmanaged-short>DCompositionAttachMouseWheelToHwnd</unmanaged-short>	
        internal static void AttachMouseWheelToHwnd(SharpDX.DirectComposition.Visual visual, System.IntPtr hwnd, SharpDX.Mathematics.Interop.RawBool enable) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				DCompositionAttachMouseWheelToHwnd_((void*)((visual == null)?IntPtr.Zero:visual.NativePointer), (void*)hwnd, enable);		
                __result__.CheckError();
            }
        }
        [DllImport("dcomp.dll", EntryPoint = "DCompositionAttachMouseWheelToHwnd", CallingConvention = CallingConvention.StdCall)]
        private unsafe static extern int DCompositionAttachMouseWheelToHwnd_(void* arg0,void* arg1,SharpDX.Mathematics.Interop.RawBool arg2);
        
        /// <summary>	
        /// <p>Creates a new device object that can be used to create other Microsoft DirectComposition objects.</p>	
        /// </summary>	
        /// <param name="dxgiDevice"><dd>  <p>The DXGI device to use to create DirectComposition surface objects.</p> </dd></param>	
        /// <param name="iid"><dd>  <p>The identifier of the interface to retrieve. </p> </dd></param>	
        /// <param name="dcompositionDevice"><dd>  <p>Receives an interface reference to the newly created device object. The reference is of the type specified by the <em>iid</em> parameter. This parameter must not be <c>null</c>.</p> </dd></param>	
        /// <returns><p>If the function succeeds, it returns <see cref="SharpDX.Result.Ok"/>. Otherwise, it returns an <strong><see cref="SharpDX.Result"/></strong> error code. See DirectComposition Error Codes for a list of error codes.</p></returns>	
        /// <remarks>	
        /// <p>A  device object serves as the factory for all other DirectComposition objects. It also controls transactional composition through the <strong><see cref="SharpDX.DirectComposition.Device.Commit"/></strong> method.</p><p>The DXGI device specified by <em>dxgiDevice</em> is used to create all DirectComposition surface objects. In particular, the <strong><see cref="SharpDX.DirectComposition.Surface.BeginDraw"/></strong> method returns an interface reference to a DXGI surface that belongs to the device specified by the <em>dxgiDevice</em> parameter. </p><p>When creating the DXGI device, developers must specify the <strong>D3D11_CREATE_DEVICE BGRA_SUPPORT</strong> or <strong>D3D10_CREATE_DEVICE_BGRA_SUPPORT</strong> flag for Direct2D interoperability with Microsoft Direct3D resources.</p><p>The <em>iid</em> parameter must be <code>__uuidof(<see cref="SharpDX.DirectComposition.Device"/>)</code>, and the <em>dcompositionDevice</em> parameter receives a reference to an <strong><see cref="SharpDX.DirectComposition.Device"/></strong> interface.	
        /// </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DCompositionCreateDevice']/*"/>	
        /// <msdn-id>hh437359</msdn-id>	
        /// <unmanaged>HRESULT DCompositionCreateDevice([In, Optional] IDXGIDevice* dxgiDevice,[In] const GUID&amp; iid,[Out] void** dcompositionDevice)</unmanaged>	
        /// <unmanaged-short>DCompositionCreateDevice</unmanaged-short>	
        internal static void CreateDevice(SharpDX.DXGI.Device dxgiDevice, System.Guid iid, out System.IntPtr dcompositionDevice) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* dcompositionDevice_ = &dcompositionDevice)
                    __result__= 
    				DCompositionCreateDevice_((void*)((dxgiDevice == null)?IntPtr.Zero:dxgiDevice.NativePointer), &iid, dcompositionDevice_);		
                __result__.CheckError();
            }
        }
        [DllImport("dcomp.dll", EntryPoint = "DCompositionCreateDevice", CallingConvention = CallingConvention.StdCall)]
        private unsafe static extern int DCompositionCreateDevice_(void* arg0,void* arg1,void* arg2);
    }
        /// <summary>	
        /// Functions	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='SharpDX.DirectComposition.ResultCode']/*"/>	
    public  partial class ResultCode {   
        
        /// <summary>Constant SurfaceNotBeingRendered.</summary>
        /// <unmanaged>DCOMPOSITION_ERROR_SURFACE_NOT_BEING_RENDERED</unmanaged>
        public static readonly SharpDX.ResultDescriptor SurfaceNotBeingRendered = new SharpDX.ResultDescriptor(-0x07767f7fe, "SharpDX.DirectComposition", "DCOMPOSITION_ERROR_SURFACE_NOT_BEING_RENDERED", "SurfaceNotBeingRendered");
        
        /// <summary>Constant SurfaceBeingRendered.</summary>
        /// <unmanaged>DCOMPOSITION_ERROR_SURFACE_BEING_RENDERED</unmanaged>
        public static readonly SharpDX.ResultDescriptor SurfaceBeingRendered = new SharpDX.ResultDescriptor(-0x07767f7ff, "SharpDX.DirectComposition", "DCOMPOSITION_ERROR_SURFACE_BEING_RENDERED", "SurfaceBeingRendered");
        
        /// <summary>Constant WindowAlreadyComposed.</summary>
        /// <unmanaged>DCOMPOSITION_ERROR_WINDOW_ALREADY_COMPOSED</unmanaged>
        public static readonly SharpDX.ResultDescriptor WindowAlreadyComposed = new SharpDX.ResultDescriptor(-0x07767f800, "SharpDX.DirectComposition", "DCOMPOSITION_ERROR_WINDOW_ALREADY_COMPOSED", "WindowAlreadyComposed");
    }
}
