// Copyright (c) 2010-2014 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Types declaration for SharpDX.XAPO namespace.
//     This code was generated by a tool.
//     Date : 6/25/2016 10:38:05 PM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
namespace SharpDX.XAPO {

#pragma warning disable 419
#pragma warning disable 1587
#pragma warning disable 1574
    
    /// <summary>	
    /// <p>Describes the contents of a stream buffer. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This metadata can be used to implement optimizations that require knowledge of a stream buffer's contents. For example, XAPOs that always produce silent output from silent input can check the flag on the input stream buffer to determine if any signal processing is necessary. If silent, the XAPO can simply set the flag on the output stream buffer to silent and return, thus averting the work of processing silent data. </p><p>Likewise, XAPOs that receive valid input data, but generate silence (for any reason), may set the output stream buffer's flag accordingly, rather than writing silent samples to the buffer. </p><p>These flags represent what should be assumed is in the respective buffer. The flags may not reflect what is actually stored in memory. For example, the <see cref="SharpDX.XAPO.BufferFlags.Silent"/> indicates that silent data should be assumed, however the respective memory may be uninitialized </p>	
    /// </remarks>	
    /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAPO_BUFFER_FLAGS']/*"/>	
    /// <msdn-id>microsoft.directx_sdk.xapo.xapo_buffer_flags</msdn-id>	
    /// <unmanaged>XAPO_BUFFER_FLAGS</unmanaged>	
    /// <unmanaged-short>XAPO_BUFFER_FLAGS</unmanaged-short>	
    [Flags]
    public enum BufferFlags : int {	
        
        /// <summary>	
        /// <dd> <p>Stream buffer contains only silent samples.</p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAPO_BUFFER_SILENT']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xapo.xapo_buffer_flags</msdn-id>	
        /// <unmanaged>XAPO_BUFFER_SILENT</unmanaged>	
        /// <unmanaged-short>XAPO_BUFFER_SILENT</unmanaged-short>	
        Silent = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Stream buffer contains audio data to be processed.</p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAPO_BUFFER_VALID']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xapo.xapo_buffer_flags</msdn-id>	
        /// <unmanaged>XAPO_BUFFER_VALID</unmanaged>	
        /// <unmanaged-short>XAPO_BUFFER_VALID</unmanaged-short>	
        Valid = unchecked((int)1),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAPO_PROPERTY_TYPE']/*"/>	
    /// <unmanaged>XAPO_PROPERTY_TYPE</unmanaged>	
    /// <unmanaged-short>XAPO_PROPERTY_TYPE</unmanaged-short>	
    [Flags]
    public enum PropertyFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAPO_FLAG_CHANNELS_MUST_MATCH']/*"/>	
        /// <unmanaged>XAPO_FLAG_CHANNELS_MUST_MATCH</unmanaged>	
        /// <unmanaged-short>XAPO_FLAG_CHANNELS_MUST_MATCH</unmanaged-short>	
        ChannelsMustMatch = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAPO_FLAG_FRAMERATE_MUST_MATCH']/*"/>	
        /// <unmanaged>XAPO_FLAG_FRAMERATE_MUST_MATCH</unmanaged>	
        /// <unmanaged-short>XAPO_FLAG_FRAMERATE_MUST_MATCH</unmanaged-short>	
        FrameRateMustMatch = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAPO_FLAG_BITSPERSAMPLE_MUST_MATCH']/*"/>	
        /// <unmanaged>XAPO_FLAG_BITSPERSAMPLE_MUST_MATCH</unmanaged>	
        /// <unmanaged-short>XAPO_FLAG_BITSPERSAMPLE_MUST_MATCH</unmanaged-short>	
        BitspersampleMustMatch = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAPO_FLAG_BUFFERCOUNT_MUST_MATCH']/*"/>	
        /// <unmanaged>XAPO_FLAG_BUFFERCOUNT_MUST_MATCH</unmanaged>	
        /// <unmanaged-short>XAPO_FLAG_BUFFERCOUNT_MUST_MATCH</unmanaged-short>	
        BufferCountMustMatch = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAPO_FLAG_INPLACE_REQUIRED']/*"/>	
        /// <unmanaged>XAPO_FLAG_INPLACE_REQUIRED</unmanaged>	
        /// <unmanaged-short>XAPO_FLAG_INPLACE_REQUIRED</unmanaged-short>	
        InplaceRequired = unchecked((int)32),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAPO_FLAG_INPLACE_SUPPORTED']/*"/>	
        /// <unmanaged>XAPO_FLAG_INPLACE_SUPPORTED</unmanaged>	
        /// <unmanaged-short>XAPO_FLAG_INPLACE_SUPPORTED</unmanaged-short>	
        InplaceSupported = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAPO_FLAG_DEFAULT']/*"/>	
        /// <unmanaged>XAPO_FLAG_DEFAULT</unmanaged>	
        /// <unmanaged-short>XAPO_FLAG_DEFAULT</unmanaged-short>	
        Default = unchecked((int)31),			
    }
}
