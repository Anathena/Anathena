// Copyright (c) 2010-2014 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Types declaration for SharpDX.XAPO namespace.
//     This code was generated by a tool.
//     Date : 6/25/2016 10:38:11 PM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
namespace SharpDX.XAPO {

// Disable warning : XML comment is not placed on a valid language element
#pragma warning disable 419
#pragma warning disable 1587
#pragma warning disable 1574
    /// <summary>	
    /// <p>Interface that defines an XAPO, allowing it to be used in an XAudio2 effect chain.</p>	
    /// </summary>	
    /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IXAPO']/*"/>	
    /// <msdn-id>microsoft.directx_sdk.ixapo.ixapo</msdn-id>	
    /// <unmanaged>IXAPO</unmanaged>	
    /// <unmanaged-short>IXAPO</unmanaged-short>	
    [Guid("A410B984-9839-4819-A0BE-2856AE6B3ADB")]
    public partial interface AudioProcessor : SharpDX.ICallbackable {
        
        
        /// <summary>	
        /// <p>Returns the registration properties of an XAPO. </p>	
        /// </summary>	
        /// <param name="registrationPropertiesOut"><dd> <p> Receives a reference to a <strong><see cref="SharpDX.XAPO.RegistrationProperties"/></strong> structure containing the registration properties the XAPO was created with; use <strong>XAPOFree</strong> to free the structure. </p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; returns an error code otherwise.</p></returns>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IXAPO::GetRegistrationProperties']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.ixapo.ixapo.getregistrationproperties</msdn-id>	
        /// <unmanaged>HRESULT IXAPO::GetRegistrationProperties([Out] XAPO_REGISTRATION_PROPERTIES** ppRegistrationProperties)</unmanaged>	
        /// <unmanaged-short>IXAPO::GetRegistrationProperties</unmanaged-short>	
        /* public void GetRegistrationProperties(out SharpDX.XAPO.RegistrationProperties registrationPropertiesOut) */
        
        /// <summary>	
        /// <p>Queries if a specific input format is supported for a given output format.</p>	
        /// </summary>	
        /// <param name="outputFormatRef"><dd> <p> Output format.</p> </dd></param>	
        /// <param name="requestedInputFormatRef"><dd> <p> Input format to check for being supported.</p> </dd></param>	
        /// <param name="supportedInputFormatOut"><dd> <p> If not <c>null</c>, and the input format is not supported for the given output format, <em>ppSupportedInputFormat</em> returns a reference to the closest input format that is supported. Use <strong>XAPOFree</strong> to free the returned structure. </p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if the format pair is supported. Returns XAPO_E_FORMAT_UNSUPPORTED if the format pair is not supported.</p></returns>	
        /// <remarks>	
        /// <p>The <strong><see cref="SharpDX.XAPO.AudioProcessor.IsOutputFormatSupported"/></strong> and <strong>IsInputFormatSupported</strong> methods allow an XAPO to indicate which audio formats it is capable of processing. If a requested format is not supported, the XAPO should return the closest format that it does support. The closest format should be determined based on frame rate, bit depth, and channel count, in that order of importance. The behavior of <strong>IsInputFormatSupported</strong> is allowed to change, based on the internal state of the XAPO, but its behavior should remain constant between calls to the <strong><see cref="SharpDX.XAPO.AudioProcessor.LockForProcess"/></strong> and <strong><see cref="SharpDX.XAPO.AudioProcessor.UnlockForProcess"/></strong> methods. </p>	
        /// </remarks>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IXAPO::IsInputFormatSupported']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.ixapo.ixapo.isinputformatsupported</msdn-id>	
        /// <unmanaged>HRESULT IXAPO::IsInputFormatSupported([In] const WAVEFORMATEX* pOutputFormat,[In] const WAVEFORMATEX* pRequestedInputFormat,[Out, Optional] WAVEFORMATEX** ppSupportedInputFormat)</unmanaged>	
        /// <unmanaged-short>IXAPO::IsInputFormatSupported</unmanaged-short>	
        /* public SharpDX.Result IsInputFormatSupported(ref SharpDX.Multimedia.WaveFormat outputFormatRef, ref SharpDX.Multimedia.WaveFormat requestedInputFormatRef, out SharpDX.Multimedia.WaveFormat supportedInputFormatOut) */
        
        /// <summary>	
        /// <p>Queries if a specific output format is supported for a given input format.</p>	
        /// </summary>	
        /// <param name="inputFormatRef"><dd> <p>Input format. </p> </dd></param>	
        /// <param name="requestedOutputFormatRef"><dd> <p>Output format to check for being supported.</p> </dd></param>	
        /// <param name="supportedOutputFormatOut"><dd> <p>If not <c>null</c> and the output format is not supported for the given input format, <em>ppSupportedOutputFormat</em> returns a reference to the closest output format that is supported. Use <strong>XAPOFree</strong> to free the returned structure. </p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if the format pair is supported. Returns XAPO_E_FORMAT_UNSUPPORTED if the format pair is not supported.</p></returns>	
        /// <remarks>	
        /// <p>The <strong><see cref="SharpDX.XAPO.AudioProcessor.IsInputFormatSupported"/></strong> and <strong>IsOutputFormatSupported</strong> methods allow an XAPO to indicate which audio formats it is capable of processing. If a requested format is not supported, the XAPO should return the closest format that it does support. The closest format should be determined based on frame rate, bit depth, and channel count, in that order of importance. The behavior of <strong>IsOutputFormatSupported</strong> is allowed to change, based on the internal state of the XAPO, but its behavior should remain constant between calls to the <strong><see cref="SharpDX.XAPO.AudioProcessor.LockForProcess"/></strong> and <strong><see cref="SharpDX.XAPO.AudioProcessor.UnlockForProcess"/></strong> methods.</p>	
        /// </remarks>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IXAPO::IsOutputFormatSupported']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.ixapo.ixapo.isoutputformatsupported</msdn-id>	
        /// <unmanaged>HRESULT IXAPO::IsOutputFormatSupported([In] const WAVEFORMATEX* pInputFormat,[In] const WAVEFORMATEX* pRequestedOutputFormat,[Out, Optional] WAVEFORMATEX** ppSupportedOutputFormat)</unmanaged>	
        /// <unmanaged-short>IXAPO::IsOutputFormatSupported</unmanaged-short>	
        /* public SharpDX.Result IsOutputFormatSupported(ref SharpDX.Multimedia.WaveFormat inputFormatRef, ref SharpDX.Multimedia.WaveFormat requestedOutputFormatRef, out SharpDX.Multimedia.WaveFormat supportedOutputFormatOut) */
        
        /// <summary>	
        /// <p>Performs any effect-specific initialization.</p>	
        /// </summary>	
        /// <param name="dataRef"><dd> <p> Effect-specific initialization parameters, may be <c>null</c> if <em>DataByteSize</em> is 0.</p> </dd></param>	
        /// <param name="dataByteSize"><dd> <p> Size of <em>pData</em> in bytes, may be 0 if <em>pData</em> is <c>null</c>.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful, an error code otherwise.</p></returns>	
        /// <remarks>	
        /// <p>The contents of <em>pData</em> are defined by a given XAPO. Immutable parameters (constant for the lifetime of the XAPO) should be set in this method. Once initialized, an XAPO cannot be initialized again. An XAPO should be initialized before passing it to XAudio2 as part of an effect chain. </p><p><strong>Note</strong>??XAudio2 does not call this method, it should be called by the client before passing the XAPO to XAudio2.</p>	
        /// </remarks>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IXAPO::Initialize']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.ixapo.ixapo.initialize</msdn-id>	
        /// <unmanaged>HRESULT IXAPO::Initialize([In, Buffer, Optional] const void* pData,[In] unsigned int DataByteSize)</unmanaged>	
        /// <unmanaged-short>IXAPO::Initialize</unmanaged-short>	
        /* public void Initialize(System.IntPtr dataRef, int dataByteSize) */
        
        /// <summary>	
        /// <p>Resets variables dependent on frame history.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>Constant and locked parameters such as the input and output formats remain unchanged. Variables set by <strong><see cref="SharpDX.XAPO.ParameterProvider.SetParameters"/></strong> remain unchanged. </p><p>For example, an effect with delay should zero out its delay line during this method, but should not reallocate anything as the XAPO remains locked with a constant input and output configuration. </p><p>XAudio2 only calls this method if the XAPO is locked. </p><p>This method is called from the realtime thread and should not block.	
        /// </p>	
        /// </remarks>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IXAPO::Reset']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.ixapo.ixapo.reset</msdn-id>	
        /// <unmanaged>void IXAPO::Reset()</unmanaged>	
        /// <unmanaged-short>IXAPO::Reset</unmanaged-short>	
        /* public void Reset() */
        
        /// <summary>	
        /// <p>Called by XAudio2 to lock the input and output configurations of an XAPO allowing it to do any final initialization before <strong>Process</strong> is called on the realtime thread.</p>	
        /// </summary>	
        /// <param name="inputLockedParameterCount">No documentation.</param>	
        /// <param name="inputLockedParametersRef">No documentation.</param>	
        /// <param name="outputLockedParameterCount">No documentation.</param>	
        /// <param name="outputLockedParametersRef">No documentation.</param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful, an error code otherwise.</p></returns>	
        /// <remarks>	
        /// <p>Once locked, the input and output configuration and any other locked parameters remain constant until <strong>UnLockForProcess</strong> is called. After an XAPO is locked, further calls to <strong>LockForProcess</strong> have no effect until the <strong>UnLockForProcess</strong> function is called. </p><p>An XAPO indicates what specific formats it supports through its implementation of the <strong>IsInputFormatSupported</strong> and <strong>IsOutputFormatSupported</strong> methods. An XAPO should assert the input and output configurations are supported and that any required effect-specific initialization is complete. The <strong>IsInputFormatSupported</strong>, <strong>IsOutputFormatSupported</strong>, and <strong>Initialize</strong> methods should be used as necessary before calling this method. </p><p>Because <strong>Process</strong> is a nonblocking method, all internal memory buffers required for <strong>Process</strong> should be allocated in <strong>LockForProcess</strong>. </p><p> <strong>Process</strong> is never called before <strong>LockForProcess</strong> returns successfully. </p><p><strong>LockForProcess</strong> is called directly by XAudio2 and should not be called by the client code. </p>	
        /// </remarks>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IXAPO::LockForProcess']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.ixapo.ixapo.lockforprocess</msdn-id>	
        /// <unmanaged>HRESULT IXAPO::LockForProcess([In] unsigned int InputLockedParameterCount,[In, Buffer] const XAPO_LOCKFORPROCESS_BUFFER_PARAMETERS* pInputLockedParameters,[In] unsigned int OutputLockedParameterCount,[In, Buffer] const XAPO_LOCKFORPROCESS_BUFFER_PARAMETERS* pOutputLockedParameters)</unmanaged>	
        /// <unmanaged-short>IXAPO::LockForProcess</unmanaged-short>	
        /* public void LockForProcess(int inputLockedParameterCount, SharpDX.XAPO.LockParameters[] inputLockedParametersRef, int outputLockedParameterCount, SharpDX.XAPO.LockParameters[] outputLockedParametersRef) */
        
        /// <summary>	
        /// <p>Deallocates variables that were allocated with the <strong>LockForProcess</strong> method.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>Unlocking an XAPO instance allows it to be reused with different input and output formats.</p>	
        /// </remarks>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IXAPO::UnlockForProcess']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.ixapo.ixapo.unlockforprocess</msdn-id>	
        /// <unmanaged>void IXAPO::UnlockForProcess()</unmanaged>	
        /// <unmanaged-short>IXAPO::UnlockForProcess</unmanaged-short>	
        /* public void UnlockForProcess() */
        
        /// <summary>	
        /// <p>Runs the XAPO's digital signal processing (DSP) code on the given input and output buffers.</p>	
        /// </summary>	
        /// <param name="inputProcessParameterCount"><dd> <p> Number of elements in pInputProcessParameters. </p> <p><strong>Note</strong>??XAudio2 currently supports only one input stream and one output stream.</p> </dd></param>	
        /// <param name="inputProcessParametersRef"><dd> <p> Input array of <strong><see cref="SharpDX.XAPO.BufferParameters"/></strong> structures. </p> </dd></param>	
        /// <param name="outputProcessParameterCount"><dd> <p>Number of elements in <em>pOutputProcessParameters</em>. </p> <p><strong>Note</strong>??XAudio2 currently supports only one input stream and one output stream.</p> </dd></param>	
        /// <param name="outputProcessParametersRef"><dd> <p>Output array of <strong><see cref="SharpDX.XAPO.BufferParameters"/></strong> structures. On input, the value of <strong><see cref="SharpDX.XAPO.BufferParameters"/></strong>. <strong>ValidFrameCount</strong> indicates the number of frames that the XAPO should write to the output buffer. On output, the value of <strong><see cref="SharpDX.XAPO.BufferParameters"/></strong>. <strong>ValidFrameCount</strong> indicates the actual number of frames written.</p> </dd></param>	
        /// <param name="isEnabled"><dd> <p> TRUE to process normally; <see cref="SharpDX.Result.False"/> to process thru. See Remarks for additional information.</p> </dd></param>	
        /// <remarks>	
        /// <p>Implementations of this function should not block, as the function is called from the realtime audio processing thread. </p><p>All code that could cause a delay, such as format validation and memory allocation, should be put in the <strong><see cref="SharpDX.XAPO.AudioProcessor.LockForProcess"/></strong> method, which is not called from the realtime audio processing thread.  </p><p>For in-place processing, the <em>pInputProcessParameters</em> parameter will not necessarily be the same as <em>pOutputProcessParameters</em>. Rather, their <em>pBuffer</em> members will point to the same memory.  </p><p>Multiple input and output buffers may be used with in-place XAPOs, though the input buffer count must equal the output buffer count. For in-place processing when multiple input and output buffers are used, the XAPO may assume the number of input buffers equals the number of output buffers.  </p><p>In addition to writing to the output buffer, as appropriate, an XAPO is responsible for setting the output stream's buffer flags and valid frame count.  </p><p>When <em>IsEnabled</em> is <see cref="SharpDX.Result.False"/>, the XAPO should not apply its normal processing to the given input/output buffers during. It should instead pass data from input to output with as little modification possible. Effects that perform format conversion should continue to do so. Effects must ensure transitions between normal and thru processing do not introduce discontinuities into the signal.  </p><p>When writing a <strong>Process</strong> method, it is important to note XAudio2 audio data is interleaved, which means data from each channel is adjacent for a particular sample number. For example, if there was a 4-channel wave playing into an XAudio2 source voice, the audio data would be a sample of channel 0, a sample of channel 1, a sample of channel 2, a sample of channel 3, and then the next sample of channels 0, 1, 2, 3, and so on.	
        /// </p>	
        /// </remarks>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IXAPO::Process']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.ixapo.ixapo.process</msdn-id>	
        /// <unmanaged>void IXAPO::Process([In] unsigned int InputProcessParameterCount,[In, Buffer, Optional] const XAPO_PROCESS_BUFFER_PARAMETERS* pInputProcessParameters,[In] unsigned int OutputProcessParameterCount,[In, Buffer] XAPO_PROCESS_BUFFER_PARAMETERS* pOutputProcessParameters,[In] BOOL IsEnabled)</unmanaged>	
        /// <unmanaged-short>IXAPO::Process</unmanaged-short>	
        /* public void Process(int inputProcessParameterCount, SharpDX.XAPO.BufferParameters[] inputProcessParametersRef, int outputProcessParameterCount, SharpDX.XAPO.BufferParameters[] outputProcessParametersRef, SharpDX.Mathematics.Interop.RawBool isEnabled) */
        
        /// <summary>	
        /// <p>Returns the number of input frames required to generate the given number of output frames.</p>	
        /// </summary>	
        /// <param name="outputFrameCount"><dd> <p> The number of output frames desired.</p> </dd></param>	
        /// <returns><p>Returns the number of input frames required.</p></returns>	
        /// <remarks>	
        /// <p>XAudio2 calls this method to determine what size input buffer an XAPO requires to generate the given number of output frames. This method only needs to be called once while an XAPO is locked. <strong>CalcInputFrames</strong> is only called by XAudio2 if the XAPO is locked. </p><p>This function should not block, because it may be called from the realtime audio processing thread. </p>	
        /// </remarks>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IXAPO::CalcInputFrames']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.ixapo.ixapo.calcinputframes</msdn-id>	
        /// <unmanaged>unsigned int IXAPO::CalcInputFrames([In] unsigned int OutputFrameCount)</unmanaged>	
        /// <unmanaged-short>IXAPO::CalcInputFrames</unmanaged-short>	
        /* public int CalcInputFrames(int outputFrameCount) */
        
        /// <summary>	
        /// <p>Returns the number of output frames that will be generated from a given number of input frames.</p>	
        /// </summary>	
        /// <param name="inputFrameCount"><dd> <p> The number of input frames.</p> </dd></param>	
        /// <returns><p>Returns the number of output frames that will be produced. </p></returns>	
        /// <remarks>	
        /// <p>XAudio2 calls this method to determine how large of an output buffer an XAPO will require for a certain number of input frames. <strong>CalcOutputFrames</strong> is only called by XAudio2 if the XAPO is locked. </p><p>This function should not block, because it may be called from the realtime audio processing thread. </p>	
        /// </remarks>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IXAPO::CalcOutputFrames']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.ixapo.ixapo.calcoutputframes</msdn-id>	
        /// <unmanaged>unsigned int IXAPO::CalcOutputFrames([In] unsigned int InputFrameCount)</unmanaged>	
        /// <unmanaged-short>IXAPO::CalcOutputFrames</unmanaged-short>	
        /* public int CalcOutputFrames(int inputFrameCount) */
    }
    /// <summary>	
    /// <p>Interface that defines an XAPO, allowing it to be used in an XAudio2 effect chain.</p>	
    /// </summary>	
    /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IXAPO']/*"/>	
    /// <msdn-id>microsoft.directx_sdk.ixapo.ixapo</msdn-id>	
    /// <unmanaged>IXAPO</unmanaged>	
    /// <unmanaged-short>IXAPO</unmanaged-short>	
    [Guid("A410B984-9839-4819-A0BE-2856AE6B3ADB")]
    public partial class AudioProcessorNative : SharpDX.ComObjectCallback, SharpDX.XAPO.AudioProcessor {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.XAPO.AudioProcessorNative"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public AudioProcessorNative(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.XAPO.AudioProcessorNative"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.XAPO.AudioProcessorNative(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.XAPO.AudioProcessorNative(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Returns the registration properties of an XAPO. </p>	
        /// </summary>	
        /// <param name="registrationPropertiesOut"><dd> <p> Receives a reference to a <strong><see cref="SharpDX.XAPO.RegistrationProperties"/></strong> structure containing the registration properties the XAPO was created with; use <strong>XAPOFree</strong> to free the structure. </p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; returns an error code otherwise.</p></returns>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IXAPO::GetRegistrationProperties']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.ixapo.ixapo.getregistrationproperties</msdn-id>	
        /// <unmanaged>HRESULT IXAPO::GetRegistrationProperties([Out] XAPO_REGISTRATION_PROPERTIES** ppRegistrationProperties)</unmanaged>	
        /// <unmanaged-short>IXAPO::GetRegistrationProperties</unmanaged-short>	
        internal void GetRegistrationProperties_(out SharpDX.XAPO.RegistrationProperties registrationPropertiesOut) {
            unsafe {
                var registrationPropertiesOut_ = new SharpDX.XAPO.RegistrationProperties.__Native();
                SharpDX.Result __result__;
                __result__= 
				SharpDX.XAudio2.LocalInterop.Calliint(_nativePointer, &registrationPropertiesOut_,((void**)(*(void**)_nativePointer))[3]);		
                registrationPropertiesOut = new SharpDX.XAPO.RegistrationProperties();
                registrationPropertiesOut.__MarshalFrom(ref registrationPropertiesOut_);
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Queries if a specific input format is supported for a given output format.</p>	
        /// </summary>	
        /// <param name="outputFormatRef"><dd> <p> Output format.</p> </dd></param>	
        /// <param name="requestedInputFormatRef"><dd> <p> Input format to check for being supported.</p> </dd></param>	
        /// <param name="supportedInputFormatOut"><dd> <p> If not <c>null</c>, and the input format is not supported for the given output format, <em>ppSupportedInputFormat</em> returns a reference to the closest input format that is supported. Use <strong>XAPOFree</strong> to free the returned structure. </p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if the format pair is supported. Returns XAPO_E_FORMAT_UNSUPPORTED if the format pair is not supported.</p></returns>	
        /// <remarks>	
        /// <p>The <strong><see cref="SharpDX.XAPO.AudioProcessor.IsOutputFormatSupported"/></strong> and <strong>IsInputFormatSupported</strong> methods allow an XAPO to indicate which audio formats it is capable of processing. If a requested format is not supported, the XAPO should return the closest format that it does support. The closest format should be determined based on frame rate, bit depth, and channel count, in that order of importance. The behavior of <strong>IsInputFormatSupported</strong> is allowed to change, based on the internal state of the XAPO, but its behavior should remain constant between calls to the <strong><see cref="SharpDX.XAPO.AudioProcessor.LockForProcess"/></strong> and <strong><see cref="SharpDX.XAPO.AudioProcessor.UnlockForProcess"/></strong> methods. </p>	
        /// </remarks>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IXAPO::IsInputFormatSupported']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.ixapo.ixapo.isinputformatsupported</msdn-id>	
        /// <unmanaged>HRESULT IXAPO::IsInputFormatSupported([In] const WAVEFORMATEX* pOutputFormat,[In] const WAVEFORMATEX* pRequestedInputFormat,[Out, Optional] WAVEFORMATEX** ppSupportedInputFormat)</unmanaged>	
        /// <unmanaged-short>IXAPO::IsInputFormatSupported</unmanaged-short>	
        internal SharpDX.Result IsInputFormatSupported_(ref SharpDX.Multimedia.WaveFormat outputFormatRef, ref SharpDX.Multimedia.WaveFormat requestedInputFormatRef, out SharpDX.Multimedia.WaveFormat supportedInputFormatOut) {
            unsafe {
                var outputFormatRef_ = new SharpDX.Multimedia.WaveFormat.__Native();
                outputFormatRef.__MarshalTo(ref outputFormatRef_);
                var requestedInputFormatRef_ = new SharpDX.Multimedia.WaveFormat.__Native();
                requestedInputFormatRef.__MarshalTo(ref requestedInputFormatRef_);
                var supportedInputFormatOut_ = new SharpDX.Multimedia.WaveFormat.__Native();
                SharpDX.Result __result__;
                __result__= 
				SharpDX.XAudio2.LocalInterop.Calliint(_nativePointer, &outputFormatRef_, &requestedInputFormatRef_, &supportedInputFormatOut_,((void**)(*(void**)_nativePointer))[4]);		
                outputFormatRef.__MarshalFree(ref outputFormatRef_);
                requestedInputFormatRef.__MarshalFree(ref requestedInputFormatRef_);
                supportedInputFormatOut = new SharpDX.Multimedia.WaveFormat();
                supportedInputFormatOut.__MarshalFrom(ref supportedInputFormatOut_);
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Queries if a specific output format is supported for a given input format.</p>	
        /// </summary>	
        /// <param name="inputFormatRef"><dd> <p>Input format. </p> </dd></param>	
        /// <param name="requestedOutputFormatRef"><dd> <p>Output format to check for being supported.</p> </dd></param>	
        /// <param name="supportedOutputFormatOut"><dd> <p>If not <c>null</c> and the output format is not supported for the given input format, <em>ppSupportedOutputFormat</em> returns a reference to the closest output format that is supported. Use <strong>XAPOFree</strong> to free the returned structure. </p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if the format pair is supported. Returns XAPO_E_FORMAT_UNSUPPORTED if the format pair is not supported.</p></returns>	
        /// <remarks>	
        /// <p>The <strong><see cref="SharpDX.XAPO.AudioProcessor.IsInputFormatSupported"/></strong> and <strong>IsOutputFormatSupported</strong> methods allow an XAPO to indicate which audio formats it is capable of processing. If a requested format is not supported, the XAPO should return the closest format that it does support. The closest format should be determined based on frame rate, bit depth, and channel count, in that order of importance. The behavior of <strong>IsOutputFormatSupported</strong> is allowed to change, based on the internal state of the XAPO, but its behavior should remain constant between calls to the <strong><see cref="SharpDX.XAPO.AudioProcessor.LockForProcess"/></strong> and <strong><see cref="SharpDX.XAPO.AudioProcessor.UnlockForProcess"/></strong> methods.</p>	
        /// </remarks>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IXAPO::IsOutputFormatSupported']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.ixapo.ixapo.isoutputformatsupported</msdn-id>	
        /// <unmanaged>HRESULT IXAPO::IsOutputFormatSupported([In] const WAVEFORMATEX* pInputFormat,[In] const WAVEFORMATEX* pRequestedOutputFormat,[Out, Optional] WAVEFORMATEX** ppSupportedOutputFormat)</unmanaged>	
        /// <unmanaged-short>IXAPO::IsOutputFormatSupported</unmanaged-short>	
        internal SharpDX.Result IsOutputFormatSupported_(ref SharpDX.Multimedia.WaveFormat inputFormatRef, ref SharpDX.Multimedia.WaveFormat requestedOutputFormatRef, out SharpDX.Multimedia.WaveFormat supportedOutputFormatOut) {
            unsafe {
                var inputFormatRef_ = new SharpDX.Multimedia.WaveFormat.__Native();
                inputFormatRef.__MarshalTo(ref inputFormatRef_);
                var requestedOutputFormatRef_ = new SharpDX.Multimedia.WaveFormat.__Native();
                requestedOutputFormatRef.__MarshalTo(ref requestedOutputFormatRef_);
                var supportedOutputFormatOut_ = new SharpDX.Multimedia.WaveFormat.__Native();
                SharpDX.Result __result__;
                __result__= 
				SharpDX.XAudio2.LocalInterop.Calliint(_nativePointer, &inputFormatRef_, &requestedOutputFormatRef_, &supportedOutputFormatOut_,((void**)(*(void**)_nativePointer))[5]);		
                inputFormatRef.__MarshalFree(ref inputFormatRef_);
                requestedOutputFormatRef.__MarshalFree(ref requestedOutputFormatRef_);
                supportedOutputFormatOut = new SharpDX.Multimedia.WaveFormat();
                supportedOutputFormatOut.__MarshalFrom(ref supportedOutputFormatOut_);
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Performs any effect-specific initialization.</p>	
        /// </summary>	
        /// <param name="dataRef"><dd> <p> Effect-specific initialization parameters, may be <c>null</c> if <em>DataByteSize</em> is 0.</p> </dd></param>	
        /// <param name="dataByteSize"><dd> <p> Size of <em>pData</em> in bytes, may be 0 if <em>pData</em> is <c>null</c>.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful, an error code otherwise.</p></returns>	
        /// <remarks>	
        /// <p>The contents of <em>pData</em> are defined by a given XAPO. Immutable parameters (constant for the lifetime of the XAPO) should be set in this method. Once initialized, an XAPO cannot be initialized again. An XAPO should be initialized before passing it to XAudio2 as part of an effect chain. </p><p><strong>Note</strong>??XAudio2 does not call this method, it should be called by the client before passing the XAPO to XAudio2.</p>	
        /// </remarks>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IXAPO::Initialize']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.ixapo.ixapo.initialize</msdn-id>	
        /// <unmanaged>HRESULT IXAPO::Initialize([In, Buffer, Optional] const void* pData,[In] unsigned int DataByteSize)</unmanaged>	
        /// <unmanaged-short>IXAPO::Initialize</unmanaged-short>	
        internal void Initialize_(System.IntPtr dataRef, int dataByteSize) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.XAudio2.LocalInterop.Calliint(_nativePointer, (void*)dataRef, dataByteSize,((void**)(*(void**)_nativePointer))[6]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Resets variables dependent on frame history.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>Constant and locked parameters such as the input and output formats remain unchanged. Variables set by <strong><see cref="SharpDX.XAPO.ParameterProvider.SetParameters"/></strong> remain unchanged. </p><p>For example, an effect with delay should zero out its delay line during this method, but should not reallocate anything as the XAPO remains locked with a constant input and output configuration. </p><p>XAudio2 only calls this method if the XAPO is locked. </p><p>This method is called from the realtime thread and should not block.	
        /// </p>	
        /// </remarks>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IXAPO::Reset']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.ixapo.ixapo.reset</msdn-id>	
        /// <unmanaged>void IXAPO::Reset()</unmanaged>	
        /// <unmanaged-short>IXAPO::Reset</unmanaged-short>	
        internal void Reset_() {
            unsafe {
                SharpDX.XAudio2.LocalInterop.Callivoid(_nativePointer,((void**)(*(void**)_nativePointer))[7]);		
            }
        }
        
        /// <summary>	
        /// <p>Called by XAudio2 to lock the input and output configurations of an XAPO allowing it to do any final initialization before <strong>Process</strong> is called on the realtime thread.</p>	
        /// </summary>	
        /// <param name="inputLockedParameterCount">No documentation.</param>	
        /// <param name="inputLockedParametersRef">No documentation.</param>	
        /// <param name="outputLockedParameterCount">No documentation.</param>	
        /// <param name="outputLockedParametersRef">No documentation.</param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful, an error code otherwise.</p></returns>	
        /// <remarks>	
        /// <p>Once locked, the input and output configuration and any other locked parameters remain constant until <strong>UnLockForProcess</strong> is called. After an XAPO is locked, further calls to <strong>LockForProcess</strong> have no effect until the <strong>UnLockForProcess</strong> function is called. </p><p>An XAPO indicates what specific formats it supports through its implementation of the <strong>IsInputFormatSupported</strong> and <strong>IsOutputFormatSupported</strong> methods. An XAPO should assert the input and output configurations are supported and that any required effect-specific initialization is complete. The <strong>IsInputFormatSupported</strong>, <strong>IsOutputFormatSupported</strong>, and <strong>Initialize</strong> methods should be used as necessary before calling this method. </p><p>Because <strong>Process</strong> is a nonblocking method, all internal memory buffers required for <strong>Process</strong> should be allocated in <strong>LockForProcess</strong>. </p><p> <strong>Process</strong> is never called before <strong>LockForProcess</strong> returns successfully. </p><p><strong>LockForProcess</strong> is called directly by XAudio2 and should not be called by the client code. </p>	
        /// </remarks>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IXAPO::LockForProcess']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.ixapo.ixapo.lockforprocess</msdn-id>	
        /// <unmanaged>HRESULT IXAPO::LockForProcess([In] unsigned int InputLockedParameterCount,[In, Buffer] const XAPO_LOCKFORPROCESS_BUFFER_PARAMETERS* pInputLockedParameters,[In] unsigned int OutputLockedParameterCount,[In, Buffer] const XAPO_LOCKFORPROCESS_BUFFER_PARAMETERS* pOutputLockedParameters)</unmanaged>	
        /// <unmanaged-short>IXAPO::LockForProcess</unmanaged-short>	
        internal void LockForProcess_(int inputLockedParameterCount, SharpDX.XAPO.LockParameters[] inputLockedParametersRef, int outputLockedParameterCount, SharpDX.XAPO.LockParameters[] outputLockedParametersRef) {
            unsafe {
                SharpDX.XAPO.LockParameters.__Native[] inputLockedParametersRef__ = new SharpDX.XAPO.LockParameters.__Native[inputLockedParametersRef.Length];
                for (int i = 0; i < inputLockedParametersRef.Length; i++)
                    inputLockedParametersRef[i].__MarshalTo(ref inputLockedParametersRef__[i]);				
                SharpDX.XAPO.LockParameters.__Native[] outputLockedParametersRef__ = new SharpDX.XAPO.LockParameters.__Native[outputLockedParametersRef.Length];
                for (int i = 0; i < outputLockedParametersRef.Length; i++)
                    outputLockedParametersRef[i].__MarshalTo(ref outputLockedParametersRef__[i]);				
                SharpDX.Result __result__;
                fixed (void* inputLockedParametersRef_ = inputLockedParametersRef__)
                    fixed (void* outputLockedParametersRef_ = outputLockedParametersRef__)
                        __result__= 
        				SharpDX.XAudio2.LocalInterop.Calliint(_nativePointer, inputLockedParameterCount, inputLockedParametersRef_, outputLockedParameterCount, outputLockedParametersRef_,((void**)(*(void**)_nativePointer))[8]);		
                for (int i = 0; i < inputLockedParametersRef.Length; i++)
                    inputLockedParametersRef[i].__MarshalFree(ref inputLockedParametersRef__[i]);
                for (int i = 0; i < outputLockedParametersRef.Length; i++)
                    outputLockedParametersRef[i].__MarshalFree(ref outputLockedParametersRef__[i]);
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Deallocates variables that were allocated with the <strong>LockForProcess</strong> method.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>Unlocking an XAPO instance allows it to be reused with different input and output formats.</p>	
        /// </remarks>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IXAPO::UnlockForProcess']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.ixapo.ixapo.unlockforprocess</msdn-id>	
        /// <unmanaged>void IXAPO::UnlockForProcess()</unmanaged>	
        /// <unmanaged-short>IXAPO::UnlockForProcess</unmanaged-short>	
        internal void UnlockForProcess_() {
            unsafe {
                SharpDX.XAudio2.LocalInterop.Callivoid(_nativePointer,((void**)(*(void**)_nativePointer))[9]);		
            }
        }
        
        /// <summary>	
        /// <p>Runs the XAPO's digital signal processing (DSP) code on the given input and output buffers.</p>	
        /// </summary>	
        /// <param name="inputProcessParameterCount"><dd> <p> Number of elements in pInputProcessParameters. </p> <p><strong>Note</strong>??XAudio2 currently supports only one input stream and one output stream.</p> </dd></param>	
        /// <param name="inputProcessParametersRef"><dd> <p> Input array of <strong><see cref="SharpDX.XAPO.BufferParameters"/></strong> structures. </p> </dd></param>	
        /// <param name="outputProcessParameterCount"><dd> <p>Number of elements in <em>pOutputProcessParameters</em>. </p> <p><strong>Note</strong>??XAudio2 currently supports only one input stream and one output stream.</p> </dd></param>	
        /// <param name="outputProcessParametersRef"><dd> <p>Output array of <strong><see cref="SharpDX.XAPO.BufferParameters"/></strong> structures. On input, the value of <strong><see cref="SharpDX.XAPO.BufferParameters"/></strong>. <strong>ValidFrameCount</strong> indicates the number of frames that the XAPO should write to the output buffer. On output, the value of <strong><see cref="SharpDX.XAPO.BufferParameters"/></strong>. <strong>ValidFrameCount</strong> indicates the actual number of frames written.</p> </dd></param>	
        /// <param name="isEnabled"><dd> <p> TRUE to process normally; <see cref="SharpDX.Result.False"/> to process thru. See Remarks for additional information.</p> </dd></param>	
        /// <remarks>	
        /// <p>Implementations of this function should not block, as the function is called from the realtime audio processing thread. </p><p>All code that could cause a delay, such as format validation and memory allocation, should be put in the <strong><see cref="SharpDX.XAPO.AudioProcessor.LockForProcess"/></strong> method, which is not called from the realtime audio processing thread.  </p><p>For in-place processing, the <em>pInputProcessParameters</em> parameter will not necessarily be the same as <em>pOutputProcessParameters</em>. Rather, their <em>pBuffer</em> members will point to the same memory.  </p><p>Multiple input and output buffers may be used with in-place XAPOs, though the input buffer count must equal the output buffer count. For in-place processing when multiple input and output buffers are used, the XAPO may assume the number of input buffers equals the number of output buffers.  </p><p>In addition to writing to the output buffer, as appropriate, an XAPO is responsible for setting the output stream's buffer flags and valid frame count.  </p><p>When <em>IsEnabled</em> is <see cref="SharpDX.Result.False"/>, the XAPO should not apply its normal processing to the given input/output buffers during. It should instead pass data from input to output with as little modification possible. Effects that perform format conversion should continue to do so. Effects must ensure transitions between normal and thru processing do not introduce discontinuities into the signal.  </p><p>When writing a <strong>Process</strong> method, it is important to note XAudio2 audio data is interleaved, which means data from each channel is adjacent for a particular sample number. For example, if there was a 4-channel wave playing into an XAudio2 source voice, the audio data would be a sample of channel 0, a sample of channel 1, a sample of channel 2, a sample of channel 3, and then the next sample of channels 0, 1, 2, 3, and so on.	
        /// </p>	
        /// </remarks>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IXAPO::Process']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.ixapo.ixapo.process</msdn-id>	
        /// <unmanaged>void IXAPO::Process([In] unsigned int InputProcessParameterCount,[In, Buffer, Optional] const XAPO_PROCESS_BUFFER_PARAMETERS* pInputProcessParameters,[In] unsigned int OutputProcessParameterCount,[In, Buffer] XAPO_PROCESS_BUFFER_PARAMETERS* pOutputProcessParameters,[In] BOOL IsEnabled)</unmanaged>	
        /// <unmanaged-short>IXAPO::Process</unmanaged-short>	
        internal void Process_(int inputProcessParameterCount, SharpDX.XAPO.BufferParameters[] inputProcessParametersRef, int outputProcessParameterCount, SharpDX.XAPO.BufferParameters[] outputProcessParametersRef, SharpDX.Mathematics.Interop.RawBool isEnabled) {
            unsafe {
                SharpDX.XAPO.BufferParameters[] inputProcessParametersRef__ = inputProcessParametersRef;
                fixed (void* inputProcessParametersRef_ = inputProcessParametersRef__)
                    fixed (void* outputProcessParametersRef_ = outputProcessParametersRef)
                        SharpDX.XAudio2.LocalInterop.Callivoid25(_nativePointer, inputProcessParameterCount, inputProcessParametersRef_, outputProcessParameterCount, outputProcessParametersRef_, isEnabled,((void**)(*(void**)_nativePointer))[10]);		
            }
        }
        
        /// <summary>	
        /// <p>Returns the number of input frames required to generate the given number of output frames.</p>	
        /// </summary>	
        /// <param name="outputFrameCount"><dd> <p> The number of output frames desired.</p> </dd></param>	
        /// <returns><p>Returns the number of input frames required.</p></returns>	
        /// <remarks>	
        /// <p>XAudio2 calls this method to determine what size input buffer an XAPO requires to generate the given number of output frames. This method only needs to be called once while an XAPO is locked. <strong>CalcInputFrames</strong> is only called by XAudio2 if the XAPO is locked. </p><p>This function should not block, because it may be called from the realtime audio processing thread. </p>	
        /// </remarks>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IXAPO::CalcInputFrames']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.ixapo.ixapo.calcinputframes</msdn-id>	
        /// <unmanaged>unsigned int IXAPO::CalcInputFrames([In] unsigned int OutputFrameCount)</unmanaged>	
        /// <unmanaged-short>IXAPO::CalcInputFrames</unmanaged-short>	
        internal int CalcInputFrames_(int outputFrameCount) {
            unsafe {
                int __result__;
                __result__= 
				SharpDX.XAudio2.LocalInterop.Calliint(_nativePointer, outputFrameCount,((void**)(*(void**)_nativePointer))[11]);		
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Returns the number of output frames that will be generated from a given number of input frames.</p>	
        /// </summary>	
        /// <param name="inputFrameCount"><dd> <p> The number of input frames.</p> </dd></param>	
        /// <returns><p>Returns the number of output frames that will be produced. </p></returns>	
        /// <remarks>	
        /// <p>XAudio2 calls this method to determine how large of an output buffer an XAPO will require for a certain number of input frames. <strong>CalcOutputFrames</strong> is only called by XAudio2 if the XAPO is locked. </p><p>This function should not block, because it may be called from the realtime audio processing thread. </p>	
        /// </remarks>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IXAPO::CalcOutputFrames']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.ixapo.ixapo.calcoutputframes</msdn-id>	
        /// <unmanaged>unsigned int IXAPO::CalcOutputFrames([In] unsigned int InputFrameCount)</unmanaged>	
        /// <unmanaged-short>IXAPO::CalcOutputFrames</unmanaged-short>	
        internal int CalcOutputFrames_(int inputFrameCount) {
            unsafe {
                int __result__;
                __result__= 
				SharpDX.XAudio2.LocalInterop.Calliint(_nativePointer, inputFrameCount,((void**)(*(void**)_nativePointer))[12]);		
                return __result__;
            }
        }
    }
    /// <summary>	
    /// <p>An optional interface that allows an XAPO to use effect-specific parameters.</p>	
    /// </summary>	
    /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IXAPOParameters']/*"/>	
    /// <msdn-id>microsoft.directx_sdk.ixapoparameters.ixapoparameters</msdn-id>	
    /// <unmanaged>IXAPOParameters</unmanaged>	
    /// <unmanaged-short>IXAPOParameters</unmanaged-short>	
    [Guid("26D95C66-80F2-499A-AD54-5AE7F01C6D98")]
    internal partial interface ParameterProvider : SharpDX.ICallbackable {
        
        
        /// <summary>	
        /// <p>Sets effect-specific parameters.</p>	
        /// </summary>	
        /// <param name="parametersRef"><dd> <p> Effect-specific parameter block.</p> </dd></param>	
        /// <param name="parameterByteSize"><dd> <p> Size of pParameters, in bytes.</p> </dd></param>	
        /// <remarks>	
        /// <p>The data in <em>pParameters</em> is completely effect-specific and determined by the implementation of the <strong><see cref="SharpDX.XAPO.ParameterProvider.SetParameters"/></strong> function. The data passed to <strong>SetParameters</strong> can be used to set the state of the XAPO and control the behavior of the <strong><see cref="SharpDX.XAPO.AudioProcessor.Process"/></strong> function. </p><p><strong>SetParameters</strong> can only be called on the real-time audio processing thread; no synchronization between <strong>SetParameters</strong> and the <strong><see cref="SharpDX.XAPO.AudioProcessor.Process"/></strong> method is necessary. However, the <strong><see cref="SharpDX.XAudio2.Voice.SetEffectParameters"/></strong> method may be called from any thread as it adds in the required synchronization to deliver a copy (asynchronously) of the parameters to <strong>SetParameters</strong> on the real-time thread; no synchronization between <strong><see cref="SharpDX.XAudio2.Voice.SetEffectParameters"/></strong> and the <strong><see cref="SharpDX.XAPO.AudioProcessor.Process"/></strong> method is necessary. </p>	
        /// </remarks>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IXAPOParameters::SetParameters']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.ixapoparameters.ixapoparameters.setparameters</msdn-id>	
        /// <unmanaged>void IXAPOParameters::SetParameters([In, Buffer] const void* pParameters,[In] unsigned int ParameterByteSize)</unmanaged>	
        /// <unmanaged-short>IXAPOParameters::SetParameters</unmanaged-short>	
        /* public void SetParameters(System.IntPtr parametersRef, int parameterByteSize) */
        
        /// <summary>	
        /// <p>Gets the current values for any effect-specific parameters.</p>	
        /// </summary>	
        /// <param name="parametersRef"><dd> <p>Receives an effect-specific parameter block.</p> </dd></param>	
        /// <param name="parameterByteSize"><dd> <p> Size of pParameters, in bytes.</p> </dd></param>	
        /// <remarks>	
        /// <p>The data in <em>pParameters</em> is completely effect-specific and determined by the implementation of the <strong><see cref="SharpDX.XAPO.ParameterProvider.GetParameters"/></strong> function. The data returned in <em>pParameters</em> can be used to provide information about the current state of the XAPO. </p><p>Unlike SetParameters, XAudio2 does not call this method on the realtime audio processing thread. Thus, the XAPO must protect variables shared with <strong><see cref="SharpDX.XAPO.ParameterProvider.SetParameters"/></strong> or <strong><see cref="SharpDX.XAPO.AudioProcessor.Process"/></strong> using appropriate synchronization. The <strong>CXAPOParametersBase</strong> class is an implementation of <strong><see cref="SharpDX.XAPO.ParameterProvider"/></strong> and its implementation of <strong>GetParameters</strong> efficiently handles this synchronization for the user. </p><p>XAudio2 calls this method from the <strong><see cref="SharpDX.XAudio2.Voice.GetEffectParameters"/></strong> method. </p><p>This method may block and should never be called from the realtime audio processing thread instead get the current parameters from <strong>CXAPOParametersBase::BeginProcess</strong>.</p>	
        /// </remarks>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IXAPOParameters::GetParameters']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.ixapoparameters.ixapoparameters.getparameters</msdn-id>	
        /// <unmanaged>void IXAPOParameters::GetParameters([Out, Buffer] void* pParameters,[In] unsigned int ParameterByteSize)</unmanaged>	
        /// <unmanaged-short>IXAPOParameters::GetParameters</unmanaged-short>	
        /* public void GetParameters(System.IntPtr parametersRef, int parameterByteSize) */
    }
    /// <summary>	
    /// <p>An optional interface that allows an XAPO to use effect-specific parameters.</p>	
    /// </summary>	
    /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IXAPOParameters']/*"/>	
    /// <msdn-id>microsoft.directx_sdk.ixapoparameters.ixapoparameters</msdn-id>	
    /// <unmanaged>IXAPOParameters</unmanaged>	
    /// <unmanaged-short>IXAPOParameters</unmanaged-short>	
    [Guid("26D95C66-80F2-499A-AD54-5AE7F01C6D98")]
    internal partial class ParameterProviderNative : SharpDX.ComObjectCallback, SharpDX.XAPO.ParameterProvider {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.XAPO.ParameterProviderNative"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ParameterProviderNative(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.XAPO.ParameterProviderNative"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.XAPO.ParameterProviderNative(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.XAPO.ParameterProviderNative(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Sets effect-specific parameters.</p>	
        /// </summary>	
        /// <param name="parametersRef"><dd> <p> Effect-specific parameter block.</p> </dd></param>	
        /// <param name="parameterByteSize"><dd> <p> Size of pParameters, in bytes.</p> </dd></param>	
        /// <remarks>	
        /// <p>The data in <em>pParameters</em> is completely effect-specific and determined by the implementation of the <strong><see cref="SharpDX.XAPO.ParameterProvider.SetParameters"/></strong> function. The data passed to <strong>SetParameters</strong> can be used to set the state of the XAPO and control the behavior of the <strong><see cref="SharpDX.XAPO.AudioProcessor.Process"/></strong> function. </p><p><strong>SetParameters</strong> can only be called on the real-time audio processing thread; no synchronization between <strong>SetParameters</strong> and the <strong><see cref="SharpDX.XAPO.AudioProcessor.Process"/></strong> method is necessary. However, the <strong><see cref="SharpDX.XAudio2.Voice.SetEffectParameters"/></strong> method may be called from any thread as it adds in the required synchronization to deliver a copy (asynchronously) of the parameters to <strong>SetParameters</strong> on the real-time thread; no synchronization between <strong><see cref="SharpDX.XAudio2.Voice.SetEffectParameters"/></strong> and the <strong><see cref="SharpDX.XAPO.AudioProcessor.Process"/></strong> method is necessary. </p>	
        /// </remarks>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IXAPOParameters::SetParameters']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.ixapoparameters.ixapoparameters.setparameters</msdn-id>	
        /// <unmanaged>void IXAPOParameters::SetParameters([In, Buffer] const void* pParameters,[In] unsigned int ParameterByteSize)</unmanaged>	
        /// <unmanaged-short>IXAPOParameters::SetParameters</unmanaged-short>	
        internal void SetParameters_(System.IntPtr parametersRef, int parameterByteSize) {
            unsafe {
                SharpDX.XAudio2.LocalInterop.Callivoid(_nativePointer, (void*)parametersRef, parameterByteSize,((void**)(*(void**)_nativePointer))[3]);		
            }
        }
        
        /// <summary>	
        /// <p>Gets the current values for any effect-specific parameters.</p>	
        /// </summary>	
        /// <param name="parametersRef"><dd> <p>Receives an effect-specific parameter block.</p> </dd></param>	
        /// <param name="parameterByteSize"><dd> <p> Size of pParameters, in bytes.</p> </dd></param>	
        /// <remarks>	
        /// <p>The data in <em>pParameters</em> is completely effect-specific and determined by the implementation of the <strong><see cref="SharpDX.XAPO.ParameterProvider.GetParameters"/></strong> function. The data returned in <em>pParameters</em> can be used to provide information about the current state of the XAPO. </p><p>Unlike SetParameters, XAudio2 does not call this method on the realtime audio processing thread. Thus, the XAPO must protect variables shared with <strong><see cref="SharpDX.XAPO.ParameterProvider.SetParameters"/></strong> or <strong><see cref="SharpDX.XAPO.AudioProcessor.Process"/></strong> using appropriate synchronization. The <strong>CXAPOParametersBase</strong> class is an implementation of <strong><see cref="SharpDX.XAPO.ParameterProvider"/></strong> and its implementation of <strong>GetParameters</strong> efficiently handles this synchronization for the user. </p><p>XAudio2 calls this method from the <strong><see cref="SharpDX.XAudio2.Voice.GetEffectParameters"/></strong> method. </p><p>This method may block and should never be called from the realtime audio processing thread instead get the current parameters from <strong>CXAPOParametersBase::BeginProcess</strong>.</p>	
        /// </remarks>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IXAPOParameters::GetParameters']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.ixapoparameters.ixapoparameters.getparameters</msdn-id>	
        /// <unmanaged>void IXAPOParameters::GetParameters([Out, Buffer] void* pParameters,[In] unsigned int ParameterByteSize)</unmanaged>	
        /// <unmanaged-short>IXAPOParameters::GetParameters</unmanaged-short>	
        internal void GetParameters_(System.IntPtr parametersRef, int parameterByteSize) {
            unsafe {
                SharpDX.XAudio2.LocalInterop.Callivoid(_nativePointer, (void*)parametersRef, parameterByteSize,((void**)(*(void**)_nativePointer))[4]);		
            }
        }
    }
}
