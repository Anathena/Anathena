// Copyright (c) 2010-2014 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Types declaration for SharpDX.XAudio2 namespace.
//     This code was generated by a tool.
//     Date : 6/25/2016 10:38:08 PM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
namespace SharpDX.XAudio2 {

#pragma warning disable 282
#pragma warning disable 649
#pragma warning disable 419
#pragma warning disable 1587
#pragma warning disable 1574
    
    /// <summary>	
    /// <p>Represents an audio data buffer, used with <strong><see cref="SharpDX.XAudio2.SourceVoice.SubmitSourceBuffer"/></strong>.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>XAudio2 audio data is interleaved, data from each channel is adjacent for a particular sample number. For example if there was a 4 channel wave playing into an XAudio2 source voice, the audio data would be a sample of channel 0, a sample of channel 1, a sample of channel 2, a sample of channel 3, and then the next sample of channels 0, 1, 2, 3, etc. </p><p>The <strong>AudioBytes</strong> and <strong>pAudioData</strong> members of <strong><see cref="SharpDX.XAudio2.AudioBuffer"/></strong> correspond to the size in bytes and contents of the 'data' RIFF chunk of the file being played. The contents of the chunk may need to be byte swapped when loading the file on Xbox 360. </p><p>Memory allocated to hold a <strong><see cref="SharpDX.XAudio2.AudioBuffer"/></strong> or <strong><see cref="SharpDX.XAudio2.BufferWma"/></strong> structure can be freed as soon as the <strong><see cref="SharpDX.XAudio2.SourceVoice.SubmitSourceBuffer"/></strong> call it is passed to returns. The data the structure points to (<strong>pAudioData</strong> and <strong>pDecodedPacketCumulativeBytes</strong>, respectively) can't be freed until the buffer completes (as signaled by the <strong><see cref="SharpDX.XAudio2.VoiceCallback.OnBufferEnd"/></strong> callback) or the voice is stopped or destroyed. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_BUFFER']/*"/>	
    /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_buffer</msdn-id>	
    /// <unmanaged>XAUDIO2_BUFFER</unmanaged>	
    /// <unmanaged-short>XAUDIO2_BUFFER</unmanaged-short>	
    public  partial class AudioBuffer {	
        
        /// <summary>Constant LoopInfinite.</summary>
        /// <unmanaged>XAUDIO2_LOOP_INFINITE</unmanaged>
        public const int LoopInfinite = 255;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_BUFFER::Flags']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_buffer</msdn-id>	
        /// <unmanaged>XAUDIO2_BUFFER_FLAGS Flags</unmanaged>	
        /// <unmanaged-short>XAUDIO2_BUFFER_FLAGS Flags</unmanaged-short>	
        public SharpDX.XAudio2.BufferFlags Flags;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_BUFFER::AudioBytes']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_buffer</msdn-id>	
        /// <unmanaged>unsigned int AudioBytes</unmanaged>	
        /// <unmanaged-short>unsigned int AudioBytes</unmanaged-short>	
        public int AudioBytes;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_BUFFER::pAudioData']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_buffer</msdn-id>	
        /// <unmanaged>const unsigned char* pAudioData</unmanaged>	
        /// <unmanaged-short>unsigned char pAudioData</unmanaged-short>	
        public System.IntPtr AudioDataPointer;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_BUFFER::PlayBegin']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_buffer</msdn-id>	
        /// <unmanaged>unsigned int PlayBegin</unmanaged>	
        /// <unmanaged-short>unsigned int PlayBegin</unmanaged-short>	
        public int PlayBegin;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_BUFFER::PlayLength']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_buffer</msdn-id>	
        /// <unmanaged>unsigned int PlayLength</unmanaged>	
        /// <unmanaged-short>unsigned int PlayLength</unmanaged-short>	
        public int PlayLength;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_BUFFER::LoopBegin']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_buffer</msdn-id>	
        /// <unmanaged>unsigned int LoopBegin</unmanaged>	
        /// <unmanaged-short>unsigned int LoopBegin</unmanaged-short>	
        public int LoopBegin;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_BUFFER::LoopLength']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_buffer</msdn-id>	
        /// <unmanaged>unsigned int LoopLength</unmanaged>	
        /// <unmanaged-short>unsigned int LoopLength</unmanaged-short>	
        public int LoopLength;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_BUFFER::LoopCount']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_buffer</msdn-id>	
        /// <unmanaged>unsigned int LoopCount</unmanaged>	
        /// <unmanaged-short>unsigned int LoopCount</unmanaged-short>	
        public int LoopCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_BUFFER::pContext']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_buffer</msdn-id>	
        /// <unmanaged>void* pContext</unmanaged>	
        /// <unmanaged-short>void pContext</unmanaged-short>	
        public System.IntPtr Context;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential, Pack = 4)]
        internal partial struct __Native {	
            public SharpDX.XAudio2.BufferFlags Flags;
            public int AudioBytes;
            public System.IntPtr AudioDataPointer;
            public int PlayBegin;
            public int PlayLength;
            public int LoopBegin;
            public int LoopLength;
            public int LoopCount;
            public System.IntPtr Context;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Flags = @ref.Flags;
            this.AudioBytes = @ref.AudioBytes;
            this.AudioDataPointer = @ref.AudioDataPointer;
            this.PlayBegin = @ref.PlayBegin;
            this.PlayLength = @ref.PlayLength;
            this.LoopBegin = @ref.LoopBegin;
            this.LoopLength = @ref.LoopLength;
            this.LoopCount = @ref.LoopCount;
            this.Context = @ref.Context;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Flags = this.Flags;
            @ref.AudioBytes = this.AudioBytes;
            @ref.AudioDataPointer = this.AudioDataPointer;
            @ref.PlayBegin = this.PlayBegin;
            @ref.PlayLength = this.PlayLength;
            @ref.LoopBegin = this.LoopBegin;
            @ref.LoopLength = this.LoopLength;
            @ref.LoopCount = this.LoopCount;
            @ref.Context = this.Context;
		
		}
    }
    
    /// <summary>	
    /// <p>Used with <strong><see cref="SharpDX.XAudio2.SourceVoice.SubmitSourceBuffer"/></strong> when submitting xWMA data.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>When streaming an xWMA file a few packets at a time, <see cref="SharpDX.XAudio2.BufferFlags.EndOfStream"/> should be specified on the last packet. Alternatively, the application may call <strong><see cref="SharpDX.XAudio2.SourceVoice.Discontinuity"/></strong> after submitting the last packet. </p><p>In addition, when streaming an xWMA file a few packets at a time, the application should subtract <strong>pDecodedPacketCumulativeBytes</strong>[<strong>PacketCount</strong>-1] of the previous packet from all the entries of the currently submitted packet. </p><p>The members of <strong><see cref="SharpDX.XAudio2.BufferWma"/></strong> correspond to values contained in the 'dpds' RIFF chunk of the xWMA file being played. <strong>PacketCount</strong> will correspond to the size in UINT32s of the chunk. <strong>pDecodedPacketCumulativeBytes</strong> will correspond to a UINT32 buffer containing the contents of the chunk. The contents of the buffer will need to be byte swapped when loading the buffer on Xbox 360. </p><p>Memory allocated to hold a <strong><see cref="SharpDX.XAudio2.AudioBuffer"/></strong> or <strong><see cref="SharpDX.XAudio2.BufferWma"/></strong> structure can be freed as soon as the <strong><see cref="SharpDX.XAudio2.SourceVoice.SubmitSourceBuffer"/></strong> call it is passed to returns. The data the structure points to (<strong>pAudioData</strong> and <strong>pDecodedPacketCumulativeBytes</strong>, respectively) can't be freed until the buffer completes (as signaled by the <strong><see cref="SharpDX.XAudio2.VoiceCallback.OnBufferEnd"/></strong> callback) or the voice is stopped and destroyed. </p><p>XAUDIO 2.8 in Windows 8 does not support xWMA decoding. Use Windows Media Foundation APIs to perform the decoding from WMA to PCM instead. This functionality is available in the DirectX SDK versions of XAUDIO.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_BUFFER_WMA']/*"/>	
    /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_buffer_wma</msdn-id>	
    /// <unmanaged>XAUDIO2_BUFFER_WMA</unmanaged>	
    /// <unmanaged-short>XAUDIO2_BUFFER_WMA</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential, Pack = 4)]
    internal  partial struct BufferWma {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_BUFFER_WMA::pDecodedPacketCumulativeBytes']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_buffer_wma</msdn-id>	
        /// <unmanaged>const unsigned int* pDecodedPacketCumulativeBytes</unmanaged>	
        /// <unmanaged-short>unsigned int pDecodedPacketCumulativeBytes</unmanaged-short>	
        public System.IntPtr DecodedPacketCumulativeBytesPointer;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_BUFFER_WMA::PacketCount']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_buffer_wma</msdn-id>	
        /// <unmanaged>unsigned int PacketCount</unmanaged>	
        /// <unmanaged-short>unsigned int PacketCount</unmanaged-short>	
        public int PacketCount;
    }
    
    /// <summary>	
    /// <p>Contains the new global debug configuration for XAudio2. Used with the <strong>SetDebugConfiguration</strong> function.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Debugging messages can be completely turned off by initializing <strong><see cref="SharpDX.XAudio2.DebugConfiguration"/></strong> to all zeroes.</p><p><strong>Note</strong>??For this version of XAudio2, only the <strong><see cref="SharpDX.XAudio2.LogType.Errors"/></strong> value is supported on <strong>TraceMask</strong> or <strong>BreakMask</strong>. All other members and values are ignored.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_DEBUG_CONFIGURATION']/*"/>	
    /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_debug_configuration</msdn-id>	
    /// <unmanaged>XAUDIO2_DEBUG_CONFIGURATION</unmanaged>	
    /// <unmanaged-short>XAUDIO2_DEBUG_CONFIGURATION</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential, Pack = 4)]
    public  partial struct DebugConfiguration {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_DEBUG_CONFIGURATION::TraceMask']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_debug_configuration</msdn-id>	
        /// <unmanaged>unsigned int TraceMask</unmanaged>	
        /// <unmanaged-short>unsigned int TraceMask</unmanaged-short>	
        public int TraceMask;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_DEBUG_CONFIGURATION::BreakMask']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_debug_configuration</msdn-id>	
        /// <unmanaged>unsigned int BreakMask</unmanaged>	
        /// <unmanaged-short>unsigned int BreakMask</unmanaged-short>	
        public int BreakMask;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_DEBUG_CONFIGURATION::LogThreadID']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_debug_configuration</msdn-id>	
        /// <unmanaged>BOOL LogThreadID</unmanaged>	
        /// <unmanaged-short>BOOL LogThreadID</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool LogThreadID;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_DEBUG_CONFIGURATION::LogFileline']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_debug_configuration</msdn-id>	
        /// <unmanaged>BOOL LogFileline</unmanaged>	
        /// <unmanaged-short>BOOL LogFileline</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool LogFileline;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_DEBUG_CONFIGURATION::LogFunctionName']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_debug_configuration</msdn-id>	
        /// <unmanaged>BOOL LogFunctionName</unmanaged>	
        /// <unmanaged-short>BOOL LogFunctionName</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool LogFunctionName;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_DEBUG_CONFIGURATION::LogTiming']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_debug_configuration</msdn-id>	
        /// <unmanaged>BOOL LogTiming</unmanaged>	
        /// <unmanaged-short>BOOL LogTiming</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool LogTiming;
    }
    
    /// <summary>	
    /// <p>Defines an effect chain.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_EFFECT_CHAIN']/*"/>	
    /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_effect_chain</msdn-id>	
    /// <unmanaged>XAUDIO2_EFFECT_CHAIN</unmanaged>	
    /// <unmanaged-short>XAUDIO2_EFFECT_CHAIN</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential, Pack = 4)]
    internal  partial struct EffectChain {	
        
        /// <summary>	
        /// <dd> <p>Number of effects in the effect chain for the voice.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_EFFECT_CHAIN::EffectCount']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_effect_chain</msdn-id>	
        /// <unmanaged>unsigned int EffectCount</unmanaged>	
        /// <unmanaged-short>unsigned int EffectCount</unmanaged-short>	
        public int EffectCount;
        
        /// <summary>	
        /// <dd> <p>Array of <strong><see cref="SharpDX.XAudio2.EffectDescriptor"/></strong> structures containing references to XAPO instances.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_EFFECT_CHAIN::pEffectDescriptors']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_effect_chain</msdn-id>	
        /// <unmanaged>XAUDIO2_EFFECT_DESCRIPTOR* pEffectDescriptors</unmanaged>	
        /// <unmanaged-short>XAUDIO2_EFFECT_DESCRIPTOR pEffectDescriptors</unmanaged-short>	
        internal System.IntPtr EffectDescriptorPointer;
    }
    
    /// <summary>	
    /// <p>Contains information about an XAPO for use in an effect chain.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>XAPO instances are passed to XAudio2 as <strong><see cref="SharpDX.ComObject"/></strong> interfaces and XAudio2 uses <strong>IXAPO::QueryInterface</strong> to acquire an <strong><see cref="SharpDX.XAPO.AudioProcessor"/></strong> interface and to detect whether the XAPO implements the <strong><see cref="SharpDX.XAPO.ParameterProvider"/></strong> interface. </p><p>For additional information on using XAPOs with XAudio2 see How to: Create an Effect Chain and How to: Use an XAPO in XAudio2.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_EFFECT_DESCRIPTOR']/*"/>	
    /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_effect_descriptor</msdn-id>	
    /// <unmanaged>XAUDIO2_EFFECT_DESCRIPTOR</unmanaged>	
    /// <unmanaged-short>XAUDIO2_EFFECT_DESCRIPTOR</unmanaged-short>	
    public  partial class EffectDescriptor {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_EFFECT_DESCRIPTOR::pEffect']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_effect_descriptor</msdn-id>	
        /// <unmanaged>IUnknown* pEffect</unmanaged>	
        /// <unmanaged-short>IUnknown pEffect</unmanaged-short>	
        internal System.IntPtr EffectPointer;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_EFFECT_DESCRIPTOR::InitialState']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_effect_descriptor</msdn-id>	
        /// <unmanaged>BOOL InitialState</unmanaged>	
        /// <unmanaged-short>BOOL InitialState</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool InitialState;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_EFFECT_DESCRIPTOR::OutputChannels']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_effect_descriptor</msdn-id>	
        /// <unmanaged>unsigned int OutputChannels</unmanaged>	
        /// <unmanaged-short>unsigned int OutputChannels</unmanaged-short>	
        public int OutputChannelCount;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential, Pack = 4)]
        internal partial struct __Native {	
            public System.IntPtr EffectPointer;
            public SharpDX.Mathematics.Interop.RawBool InitialState;
            public int OutputChannelCount;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.EffectPointer = @ref.EffectPointer;
            this.InitialState = @ref.InitialState;
            this.OutputChannelCount = @ref.OutputChannelCount;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.EffectPointer = this.EffectPointer;
            @ref.InitialState = this.InitialState;
            @ref.OutputChannelCount = this.OutputChannelCount;
		
		}
    }
    
    /// <summary>	
    /// <p>Defines filter parameters for a source voice.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Setting <see cref="SharpDX.XAudio2.FilterParameters"/> with the following values is acoustically equivalent to the filter being fully bypassed.</p><pre><see cref="SharpDX.XAudio2.FilterParameters"/> FilterParams;	
    /// FilterParams.Frequency = 1.0f;    	
    /// FilterParams.OneOverQ = 1.0f;	
    /// FilterParams.Type = LowPassFilter;	
    /// </pre><p>The following formulas show the relationship between the members of <see cref="SharpDX.XAudio2.FilterParameters"/> and the per-voice filter.</p><pre>Yl( n ) = F1 yb( n ) + yl( n - 1 )	
    /// Yb( n ) = F1 yh( n ) + yb( n - 1 )	
    /// Yh( n ) = x( n ) - yl( n ) - OneOverQ(yb( n - 1 )	
    /// Yn( n ) = Yl(n) + Yh(n) </pre><p>Where:</p><pre>Yl = lowpass output	
    /// Yb = bandpass output	
    /// Yh = highpass output	
    /// Yn = notch output	
    /// F1 = <see cref="SharpDX.XAudio2.FilterParameters"/>.Frequency	
    /// OneOverQ = <see cref="SharpDX.XAudio2.FilterParameters"/>.OneOverQ</pre>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_FILTER_PARAMETERS']/*"/>	
    /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_filter_parameters</msdn-id>	
    /// <unmanaged>XAUDIO2_FILTER_PARAMETERS</unmanaged>	
    /// <unmanaged-short>XAUDIO2_FILTER_PARAMETERS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential, Pack = 4)]
    public  partial struct FilterParameters {	
        
        /// <summary>	
        /// <dd> <p>The <strong><see cref="SharpDX.XAudio2.FilterType"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_FILTER_PARAMETERS::Type']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_filter_parameters</msdn-id>	
        /// <unmanaged>XAUDIO2_FILTER_TYPE Type</unmanaged>	
        /// <unmanaged-short>XAUDIO2_FILTER_TYPE Type</unmanaged-short>	
        public SharpDX.XAudio2.FilterType Type;
        
        /// <summary>	
        /// <dd> <p>Filter radian frequency calculated as (2 * sin(pi * (desired filter cutoff frequency) / sampleRate)). The frequency must be greater than or equal to 0 and less than or equal to <see cref="SharpDX.XAudio2.XAudio2.MaximumFilterFrequency"/>. The maximum frequency allowable is equal to the source sound's sample rate divided by six which corresponds to the maximum filter radian frequency of 1. For example, if a sound's sample rate is 48000 and the desired cutoff frequency is the maximum allowable value for that sample rate, 8000, the value for <strong>Frequency</strong> will be 1. 	
        /// If XAUDIO2_HELPER_FUNCTIONS is defined, XAudio2.h will include the <strong>XAudio2RadiansToCutoffFrequency</strong> and <strong>XAudio2CutoffFrequencyToRadians</strong> helper functions for converting between hertz and radian frequencies. Defining XAUDIO2_HELPER_FUNCTIONS will also include <strong>XAudio2CutoffFrequencyToOnePoleCoefficient</strong> for converting between hertz and a one-pole coefficient suitable for use with the LowPassOnePoleFilter and HighPassOnePoleFilter. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_FILTER_PARAMETERS::Frequency']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_filter_parameters</msdn-id>	
        /// <unmanaged>float Frequency</unmanaged>	
        /// <unmanaged-short>float Frequency</unmanaged-short>	
        public float Frequency;
        
        /// <summary>	
        /// <dd> <p>Reciprocal of Q factor. Controls how quickly frequencies beyond Frequency are dampened. Larger values result in quicker dampening while smaller values cause dampening to occur more gradually. Must be greater than 0 and less than or equal to <see cref="SharpDX.XAudio2.XAudio2.MaximumFilterOneOverQ"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_FILTER_PARAMETERS::OneOverQ']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_filter_parameters</msdn-id>	
        /// <unmanaged>float OneOverQ</unmanaged>	
        /// <unmanaged-short>float OneOverQ</unmanaged-short>	
        public float OneOverQ;
    }
    
    /// <summary>	
    /// <p>Contains performance information.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>CPU cycles are recorded using . Use to convert these values.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_PERFORMANCE_DATA']/*"/>	
    /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_performance_data</msdn-id>	
    /// <unmanaged>XAUDIO2_PERFORMANCE_DATA</unmanaged>	
    /// <unmanaged-short>XAUDIO2_PERFORMANCE_DATA</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential, Pack = 4)]
    public  partial struct PerformanceData {	
        
        /// <summary>	
        /// <dd> <p>CPU cycles spent on audio processing since the last call to the <strong><see cref="SharpDX.XAudio2.XAudio2.StartEngine"/></strong> or <strong><see cref="SharpDX.XAudio2.XAudio2.GetPerformanceData"/></strong> function.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_PERFORMANCE_DATA::AudioCyclesSinceLastQuery']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_performance_data</msdn-id>	
        /// <unmanaged>unsigned longlong AudioCyclesSinceLastQuery</unmanaged>	
        /// <unmanaged-short>unsigned longlong AudioCyclesSinceLastQuery</unmanaged-short>	
        public long AudioCyclesSinceLastQuery;
        
        /// <summary>	
        /// <dd> <p>Total CPU cycles elapsed since the last call. </p> <p><strong>Note</strong>??This only counts cycles on the CPU on which XAudio2 is running.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_PERFORMANCE_DATA::TotalCyclesSinceLastQuery']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_performance_data</msdn-id>	
        /// <unmanaged>unsigned longlong TotalCyclesSinceLastQuery</unmanaged>	
        /// <unmanaged-short>unsigned longlong TotalCyclesSinceLastQuery</unmanaged-short>	
        public long TotalCyclesSinceLastQuery;
        
        /// <summary>	
        /// <dd> <p>Fewest CPU cycles spent on processing any single audio quantum since the last call.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_PERFORMANCE_DATA::MinimumCyclesPerQuantum']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_performance_data</msdn-id>	
        /// <unmanaged>unsigned int MinimumCyclesPerQuantum</unmanaged>	
        /// <unmanaged-short>unsigned int MinimumCyclesPerQuantum</unmanaged-short>	
        public int MinimumCyclesPerQuantum;
        
        /// <summary>	
        /// <dd> <p>Most CPU cycles spent on processing any single audio quantum since the last call.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_PERFORMANCE_DATA::MaximumCyclesPerQuantum']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_performance_data</msdn-id>	
        /// <unmanaged>unsigned int MaximumCyclesPerQuantum</unmanaged>	
        /// <unmanaged-short>unsigned int MaximumCyclesPerQuantum</unmanaged-short>	
        public int MaximumCyclesPerQuantum;
        
        /// <summary>	
        /// <dd> <p>Total memory currently in use.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_PERFORMANCE_DATA::MemoryUsageInBytes']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_performance_data</msdn-id>	
        /// <unmanaged>unsigned int MemoryUsageInBytes</unmanaged>	
        /// <unmanaged-short>unsigned int MemoryUsageInBytes</unmanaged-short>	
        public int MemoryUsageInBytes;
        
        /// <summary>	
        /// <dd> <p>Minimum delay that occurs between the time a sample is read from a source buffer and the time it reaches the speakers. </p> <table> <tr><th>Windows</th></tr> <tr><td>The delay reported is a variable value equal to the rough distance between the last sample submitted to the driver by XAudio2 and the sample currently playing. The following factors can affect the delay: playing multichannel audio on a hardware-accelerated device; the type of audio device (WavePci, WaveCyclic, or WaveRT); and, to a lesser extent, audio hardware implementation.	
        /// </td></tr> </table> <p>?</p> <table> <tr><th>Xbox 360</th></tr> <tr><td>The delay reported is a fixed value, which is normally 1,024 samples (21.333 ms at 48 kHz). If <strong>XOverrideSpeakerConfig</strong> has been called using the <strong>XAUDIOSPEAKERCONFIG_LOW_LATENCY</strong> flag, the delay reported is 512 samples (10.667 ms at 48 kHz).	
        /// </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_PERFORMANCE_DATA::CurrentLatencyInSamples']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_performance_data</msdn-id>	
        /// <unmanaged>unsigned int CurrentLatencyInSamples</unmanaged>	
        /// <unmanaged-short>unsigned int CurrentLatencyInSamples</unmanaged-short>	
        public int CurrentLatencyInSamples;
        
        /// <summary>	
        /// <dd> <p>Total audio dropouts since the engine started.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_PERFORMANCE_DATA::GlitchesSinceEngineStarted']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_performance_data</msdn-id>	
        /// <unmanaged>unsigned int GlitchesSinceEngineStarted</unmanaged>	
        /// <unmanaged-short>unsigned int GlitchesSinceEngineStarted</unmanaged-short>	
        public int GlitchesSinceEngineStarted;
        
        /// <summary>	
        /// <dd> <p>Number of source voices currently playing. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_PERFORMANCE_DATA::ActiveSourceVoiceCount']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_performance_data</msdn-id>	
        /// <unmanaged>unsigned int ActiveSourceVoiceCount</unmanaged>	
        /// <unmanaged-short>unsigned int ActiveSourceVoiceCount</unmanaged-short>	
        public int ActiveSourceVoiceCount;
        
        /// <summary>	
        /// <dd> <p>Total number of source voices currently in existence. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_PERFORMANCE_DATA::TotalSourceVoiceCount']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_performance_data</msdn-id>	
        /// <unmanaged>unsigned int TotalSourceVoiceCount</unmanaged>	
        /// <unmanaged-short>unsigned int TotalSourceVoiceCount</unmanaged-short>	
        public int TotalSourceVoiceCount;
        
        /// <summary>	
        /// <dd> <p>Number of submix voices currently playing.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_PERFORMANCE_DATA::ActiveSubmixVoiceCount']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_performance_data</msdn-id>	
        /// <unmanaged>unsigned int ActiveSubmixVoiceCount</unmanaged>	
        /// <unmanaged-short>unsigned int ActiveSubmixVoiceCount</unmanaged-short>	
        public int ActiveSubmixVoiceCount;
        
        /// <summary>	
        /// <dd> <p>Number of resampler xAPOs currently active.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_PERFORMANCE_DATA::ActiveResamplerCount']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_performance_data</msdn-id>	
        /// <unmanaged>unsigned int ActiveResamplerCount</unmanaged>	
        /// <unmanaged-short>unsigned int ActiveResamplerCount</unmanaged-short>	
        public int ActiveResamplerCount;
        
        /// <summary>	
        /// <dd> <p>Number of matrix mix xAPOs currently active.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_PERFORMANCE_DATA::ActiveMatrixMixCount']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_performance_data</msdn-id>	
        /// <unmanaged>unsigned int ActiveMatrixMixCount</unmanaged>	
        /// <unmanaged-short>unsigned int ActiveMatrixMixCount</unmanaged-short>	
        public int ActiveMatrixMixCount;
        
        /// <summary>	
        /// <dd> <table> <tr><th>Windows</th></tr> <tr><td>Unsupported.</td></tr> </table> <p>?</p> <table> <tr><th>Xbox 360</th></tr> <tr><td>Number of source voices decoding XMA data.</td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_PERFORMANCE_DATA::ActiveXmaSourceVoices']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_performance_data</msdn-id>	
        /// <unmanaged>unsigned int ActiveXmaSourceVoices</unmanaged>	
        /// <unmanaged-short>unsigned int ActiveXmaSourceVoices</unmanaged-short>	
        public int ActiveXmaSourceVoices;
        
        /// <summary>	
        /// <dd> <table> <tr><th>Windows</th></tr> <tr><td>Unsupported.</td></tr> </table> <p>?</p> <table> <tr><th>Xbox 360</th></tr> <tr><td>A voice can use more than one XMA stream.</td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_PERFORMANCE_DATA::ActiveXmaStreams']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_performance_data</msdn-id>	
        /// <unmanaged>unsigned int ActiveXmaStreams</unmanaged>	
        /// <unmanaged-short>unsigned int ActiveXmaStreams</unmanaged-short>	
        public int ActiveXmaStreams;
    }
    
    /// <summary>	
    /// <p>Contains information about the creation flags, input channels, and sample rate of a voice.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Note the DirectX SDK versions of XAUDIO2 do not support the <strong>ActiveFlags</strong> member.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_VOICE_DETAILS']/*"/>	
    /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_voice_details</msdn-id>	
    /// <unmanaged>XAUDIO2_VOICE_DETAILS</unmanaged>	
    /// <unmanaged-short>XAUDIO2_VOICE_DETAILS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential, Pack = 4)]
    public  partial struct VoiceDetails {	
        
        /// <summary>	
        /// <dd> <p>Flags used to create the voice; see the individual voice interfaces for more information.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_VOICE_DETAILS::CreationFlags']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_voice_details</msdn-id>	
        /// <unmanaged>XAUDIO2_VOICE_FLAGS CreationFlags</unmanaged>	
        /// <unmanaged-short>XAUDIO2_VOICE_FLAGS CreationFlags</unmanaged-short>	
        public SharpDX.XAudio2.VoiceFlags CreationFlags;
        
        /// <summary>	
        /// <dd> <p>Flags that are currently set on the voice.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_VOICE_DETAILS::ActiveFlags']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_voice_details</msdn-id>	
        /// <unmanaged>unsigned int ActiveFlags</unmanaged>	
        /// <unmanaged-short>unsigned int ActiveFlags</unmanaged-short>	
        public int ActiveFlags;
        
        /// <summary>	
        /// <dd> <p>The number of input channels the voice expects.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_VOICE_DETAILS::InputChannels']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_voice_details</msdn-id>	
        /// <unmanaged>unsigned int InputChannels</unmanaged>	
        /// <unmanaged-short>unsigned int InputChannels</unmanaged-short>	
        public int InputChannelCount;
        
        /// <summary>	
        /// <dd> <p>The input sample rate the voice expects.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_VOICE_DETAILS::InputSampleRate']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_voice_details</msdn-id>	
        /// <unmanaged>unsigned int InputSampleRate</unmanaged>	
        /// <unmanaged-short>unsigned int InputSampleRate</unmanaged-short>	
        public int InputSampleRate;
    }
    
    /// <summary>	
    /// <p>Defines a destination voice that is the target of a send from another voice and specifies whether a filter should be used.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_SEND_DESCRIPTOR']/*"/>	
    /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_send_descriptor</msdn-id>	
    /// <unmanaged>XAUDIO2_SEND_DESCRIPTOR</unmanaged>	
    /// <unmanaged-short>XAUDIO2_SEND_DESCRIPTOR</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential, Pack = 4)]
    public  partial struct VoiceSendDescriptor {	
        
        /// <summary>	
        /// <dd> <p>Indicates whether a filter should be used on data sent to the voice pointed to by <strong>pOutputVoice</strong>. Flags can be 0 or <see cref="SharpDX.XAudio2.VoiceSendFlags.UseFilter"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_SEND_DESCRIPTOR::Flags']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_send_descriptor</msdn-id>	
        /// <unmanaged>XAUDIO2_VOICE_SEND_FLAGS Flags</unmanaged>	
        /// <unmanaged-short>XAUDIO2_VOICE_SEND_FLAGS Flags</unmanaged-short>	
        public SharpDX.XAudio2.VoiceSendFlags Flags;
        
        /// <summary>	
        /// <dd> <p>A reference to an <strong><see cref="SharpDX.XAudio2.Voice"/></strong> that will be the target of the send. The <strong>pOutputVoice</strong> member cannot be <c>null</c>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_SEND_DESCRIPTOR::pOutputVoice']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_send_descriptor</msdn-id>	
        /// <unmanaged>IXAudio2Voice* pOutputVoice</unmanaged>	
        /// <unmanaged-short>IXAudio2Voice pOutputVoice</unmanaged-short>	
        internal System.IntPtr OutputVoicePointer;
    }
    
    /// <summary>	
    /// <p>Defines a set of voices to receive data from a single output voice.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>If <strong>pSends</strong> is not <c>null</c> all of its elements must be non-<c>null</c>. To send output to the default mastering voice call <strong><see cref="SharpDX.XAudio2.Voice.SetOutputVoices"/></strong> with the pSendList argument set to <c>null</c>. </p><p>Setting <strong>SendCount</strong> to 0 is useful for certain effects such as volume meters or file writers that don't generate any audio output to pass on to another voice. </p><p>If needed, a voice will perform a single sample rate conversion, from the voice's input sample rate to the input sample rate of the voice's output voices. Because only one sample rate conversion will be performed, all the voice's output voices must have the same input sample rate. If the input sample rates of the voice and its output voices are the same, no sample rate conversion is performed.	
    /// </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_VOICE_SENDS']/*"/>	
    /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_voice_sends</msdn-id>	
    /// <unmanaged>XAUDIO2_VOICE_SENDS</unmanaged>	
    /// <unmanaged-short>XAUDIO2_VOICE_SENDS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential, Pack = 4)]
    internal  partial struct VoiceSendDescriptors {	
        
        /// <summary>	
        /// <dd> <p>Number of voices to receive the output of the voice. An <strong>OutputCount</strong> value of 0 indicates the voice should not send output to any voices.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_VOICE_SENDS::SendCount']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_voice_sends</msdn-id>	
        /// <unmanaged>unsigned int SendCount</unmanaged>	
        /// <unmanaged-short>unsigned int SendCount</unmanaged-short>	
        public int SendCount;
        
        /// <summary>	
        /// <dd> <p>Array of <strong><see cref="SharpDX.XAudio2.VoiceSendDescriptor"/></strong> structures describing destination voices and the filters that should be used when sending to the voices. This array should contain <strong>SendCount</strong> elements. If <strong>SendCount</strong> is 0 <strong>pSends</strong> should be <c>null</c>. Note that <strong>pSends</strong> cannot contain the same voice more than once.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_VOICE_SENDS::pSends']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_voice_sends</msdn-id>	
        /// <unmanaged>XAUDIO2_SEND_DESCRIPTOR* pSends</unmanaged>	
        /// <unmanaged-short>XAUDIO2_SEND_DESCRIPTOR pSends</unmanaged-short>	
        internal System.IntPtr SendPointer;
    }
    
    /// <summary>	
    /// <p>Returns the voice's current state and cursor position data.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>For all encoded formats, including constant bit rate (CBR) formats such as adaptive differential pulse code modulation (ADPCM), <strong>SamplesPlayed</strong> is expressed in terms of decoded samples. For pulse code modulation (PCM) formats, <strong>SamplesPlayed</strong> is expressed in terms of either input or output samples. There is a one-to-one mapping from input to output for PCM formats. </p><p>If a client needs to get the correlated positions of several voices?that is, to know exactly which sample of a particular voice is playing when a specified sample of another voice is playing?it must make the <strong><see cref="SharpDX.XAudio2.SourceVoice.GetState"/></strong> calls in an XAudio2 engine callback. Doing this ensures that none of the voices advance while the calls are made.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_VOICE_STATE']/*"/>	
    /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_voice_state</msdn-id>	
    /// <unmanaged>XAUDIO2_VOICE_STATE</unmanaged>	
    /// <unmanaged-short>XAUDIO2_VOICE_STATE</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential, Pack = 4)]
    public  partial struct VoiceState {	
        
        /// <summary>	
        /// <dd> <p>Pointer to a buffer context provided in the <strong><see cref="SharpDX.XAudio2.AudioBuffer"/></strong> that is processed currently, or, if the voice is stopped currently, to the next buffer due to be processed. <strong>pCurrentBufferContext</strong> is <c>null</c> if there are no buffers in the queue.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_VOICE_STATE::pCurrentBufferContext']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_voice_state</msdn-id>	
        /// <unmanaged>void* pCurrentBufferContext</unmanaged>	
        /// <unmanaged-short>void pCurrentBufferContext</unmanaged-short>	
        public System.IntPtr Context;
        
        /// <summary>	
        /// <dd> <p>Number of audio buffers currently queued on the voice, including the one that is processed currently.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_VOICE_STATE::BuffersQueued']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_voice_state</msdn-id>	
        /// <unmanaged>unsigned int BuffersQueued</unmanaged>	
        /// <unmanaged-short>unsigned int BuffersQueued</unmanaged-short>	
        public int BuffersQueued;
        
        /// <summary>	
        /// <dd> <p>Total number of samples processed by this voice since it last started, or since the last audio stream ended (as marked with the <see cref="SharpDX.XAudio2.BufferFlags.EndOfStream"/> flag). This total includes samples played multiple times due to looping. Theoretically, if all audio emitted by the voice up to this time is captured, this parameter would be the length of the audio stream in samples. If you specify <strong><see cref="SharpDX.XAudio2.VoiceFlags.Nosamplesplayed"/></strong> when you call <strong><see cref="SharpDX.XAudio2.SourceVoice.GetState"/></strong>, this member won't be calculated, and its value is unspecified on return from <strong><see cref="SharpDX.XAudio2.SourceVoice.GetState"/></strong>. <strong><see cref="SharpDX.XAudio2.SourceVoice.GetState"/></strong> takes about one-third as much time to complete when you specify <strong><see cref="SharpDX.XAudio2.VoiceFlags.Nosamplesplayed"/></strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_VOICE_STATE::SamplesPlayed']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_voice_state</msdn-id>	
        /// <unmanaged>unsigned longlong SamplesPlayed</unmanaged>	
        /// <unmanaged-short>unsigned longlong SamplesPlayed</unmanaged-short>	
        public long SamplesPlayed;
    }
}
