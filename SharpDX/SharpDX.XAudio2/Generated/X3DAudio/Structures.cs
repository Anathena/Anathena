// Copyright (c) 2010-2014 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Types declaration for SharpDX.X3DAudio namespace.
//     This code was generated by a tool.
//     Date : 6/25/2016 10:38:08 PM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
namespace SharpDX.X3DAudio {

#pragma warning disable 282
#pragma warning disable 649
#pragma warning disable 419
#pragma warning disable 1587
#pragma warning disable 1574
    
    /// <summary>	
    /// <p>Specifies directionality for a single-channel non-LFE emitter by scaling DSP behavior with respect to the emitter's orientation.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>For a detailed explanation of sound cones see Sound Cones.</p>	
    /// </remarks>	
    /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_CONE']/*"/>	
    /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_cone</msdn-id>	
    /// <unmanaged>X3DAUDIO_CONE</unmanaged>	
    /// <unmanaged-short>X3DAUDIO_CONE</unmanaged-short>	
    public  partial class Cone {	
        
        /// <summary>	
        /// <dd> <p>Inner cone angle in radians. This value must be within 0.0f to X3DAUDIO_2PI.</p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_CONE::InnerAngle']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_cone</msdn-id>	
        /// <unmanaged>float InnerAngle</unmanaged>	
        /// <unmanaged-short>float InnerAngle</unmanaged-short>	
        public float InnerAngle;
        
        /// <summary>	
        /// <dd> <p>Outer cone angle in radians. This value must be within <em>InnerAngle</em> to X3DAUDIO_2PI.</p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_CONE::OuterAngle']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_cone</msdn-id>	
        /// <unmanaged>float OuterAngle</unmanaged>	
        /// <unmanaged-short>float OuterAngle</unmanaged-short>	
        public float OuterAngle;
        
        /// <summary>	
        /// <dd> <p>Volume scaler on/within inner cone. This value must be within 0.0f to 2.0f. </p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_CONE::InnerVolume']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_cone</msdn-id>	
        /// <unmanaged>float InnerVolume</unmanaged>	
        /// <unmanaged-short>float InnerVolume</unmanaged-short>	
        public float InnerVolume;
        
        /// <summary>	
        /// <dd> <p>Volume scaler on/beyond outer cone. This value must be within 0.0f to 2.0f. </p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_CONE::OuterVolume']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_cone</msdn-id>	
        /// <unmanaged>float OuterVolume</unmanaged>	
        /// <unmanaged-short>float OuterVolume</unmanaged-short>	
        public float OuterVolume;
        
        /// <summary>	
        /// <dd> <p>LPF direct-path or reverb-path coefficient scaler on/within inner cone. This value is only used for LPF calculations and must be within 0.0f to 1.0f. </p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_CONE::InnerLPF']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_cone</msdn-id>	
        /// <unmanaged>float InnerLPF</unmanaged>	
        /// <unmanaged-short>float InnerLPF</unmanaged-short>	
        public float InnerLpf;
        
        /// <summary>	
        /// <dd> <p>LPF direct-path or reverb-path coefficient scaler on or beyond outer cone. This value is only used for LPF calculations and must be within 0.0f to 1.0f. </p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_CONE::OuterLPF']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_cone</msdn-id>	
        /// <unmanaged>float OuterLPF</unmanaged>	
        /// <unmanaged-short>float OuterLPF</unmanaged-short>	
        public float OuterLpf;
        
        /// <summary>	
        /// <dd> <p>Reverb send level scaler on or within inner cone. This must be within 0.0f to 2.0f. </p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_CONE::InnerReverb']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_cone</msdn-id>	
        /// <unmanaged>float InnerReverb</unmanaged>	
        /// <unmanaged-short>float InnerReverb</unmanaged-short>	
        public float InnerReverb;
        
        /// <summary>	
        /// <dd> <p>Reverb send level scaler on/beyond outer cone. This must be within 0.0f to 2.0f. 	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_CONE::OuterReverb']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_cone</msdn-id>	
        /// <unmanaged>float OuterReverb</unmanaged>	
        /// <unmanaged-short>float OuterReverb</unmanaged-short>	
        public float OuterReverb;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public float InnerAngle;
            public float OuterAngle;
            public float InnerVolume;
            public float OuterVolume;
            public float InnerLpf;
            public float OuterLpf;
            public float InnerReverb;
            public float OuterReverb;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.InnerAngle = @ref.InnerAngle;
            this.OuterAngle = @ref.OuterAngle;
            this.InnerVolume = @ref.InnerVolume;
            this.OuterVolume = @ref.OuterVolume;
            this.InnerLpf = @ref.InnerLpf;
            this.OuterLpf = @ref.OuterLpf;
            this.InnerReverb = @ref.InnerReverb;
            this.OuterReverb = @ref.OuterReverb;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.InnerAngle = this.InnerAngle;
            @ref.OuterAngle = this.OuterAngle;
            @ref.InnerVolume = this.InnerVolume;
            @ref.OuterVolume = this.OuterVolume;
            @ref.InnerLpf = this.InnerLpf;
            @ref.OuterLpf = this.OuterLpf;
            @ref.InnerReverb = this.InnerReverb;
            @ref.OuterReverb = this.OuterReverb;
		
		}
    }
    
    /// <summary>	
    /// <p>Defines a DSP setting at a given normalized distance.</p>	
    /// </summary>	
    /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_DISTANCE_CURVE_POINT']/*"/>	
    /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_distance_curve_point</msdn-id>	
    /// <unmanaged>X3DAUDIO_DISTANCE_CURVE_POINT</unmanaged>	
    /// <unmanaged-short>X3DAUDIO_DISTANCE_CURVE_POINT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct CurvePoint {	
        
        /// <summary>	
        /// <dd> <p>Normalized distance. This must be within 0.0f to 1.0f.</p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_DISTANCE_CURVE_POINT::Distance']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_distance_curve_point</msdn-id>	
        /// <unmanaged>float Distance</unmanaged>	
        /// <unmanaged-short>float Distance</unmanaged-short>	
        public float Distance;
        
        /// <summary>	
        /// <dd> <p>DSP control setting.</p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_DISTANCE_CURVE_POINT::DSPSetting']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_distance_curve_point</msdn-id>	
        /// <unmanaged>float DSPSetting</unmanaged>	
        /// <unmanaged-short>float DSPSetting</unmanaged-short>	
        public float DspSetting;
    }
    
    /// <summary>	
    /// <p>Defines an explicit piecewise curve made up of linear segments, directly defining DSP behavior with respect to normalized distance.</p>	
    /// </summary>	
    /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_DISTANCE_CURVE']/*"/>	
    /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_distance_curve</msdn-id>	
    /// <unmanaged>X3DAUDIO_DISTANCE_CURVE</unmanaged>	
    /// <unmanaged-short>X3DAUDIO_DISTANCE_CURVE</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    internal  partial struct DistanceCurve {	
        
        /// <summary>	
        /// <dd> <p> <strong><see cref="SharpDX.X3DAudio.CurvePoint"/></strong> array. The array must have no duplicates and be sorted in ascending order with respect to distance.</p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_DISTANCE_CURVE::pPoints']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_distance_curve</msdn-id>	
        /// <unmanaged>X3DAUDIO_DISTANCE_CURVE_POINT* pPoints</unmanaged>	
        /// <unmanaged-short>X3DAUDIO_DISTANCE_CURVE_POINT pPoints</unmanaged-short>	
        internal System.IntPtr PointsPointer;
        
        /// <summary>	
        /// <dd> <p>Number of distance curve points. There must be two or more points since all curves must have at least two endpoints defining values at 0.0f and 1.0f normalized distance, respectively.</p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_DISTANCE_CURVE::PointCount']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_distance_curve</msdn-id>	
        /// <unmanaged>unsigned int PointCount</unmanaged>	
        /// <unmanaged-short>unsigned int PointCount</unmanaged-short>	
        public int PointCount;
    }
    
    /// <summary>	
    /// <p>Receives the results from a call to <strong>X3DAudioCalculate</strong>.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The following members must be initialized before passing this structure to the <strong>X3DAudioCalculate</strong> function: </p><ul> <li><strong>pMatrixCoefficients </strong></li> <li><strong>pDelayTimes</strong></li> <li><strong>SrcChannelCount </strong></li> <li><strong>DstChannelCount</strong></li> </ul><p>The following members are returned by passing this structure to the <strong>X3DAudioCalculate</strong> function:</p><ul> <li><strong>pMatrixCoefficients </strong></li> <li><strong>pDelayTimes </strong></li> <li><strong>LPFDirectCoefficient </strong></li> <li><strong>LPFReverbCoefficient</strong></li> <li><strong>ReverbLevel </strong></li> <li><strong>DopplerFactor </strong></li> <li><strong>EmitterToListenerAngle</strong></li> <li><strong>EmitterToListenerDistance </strong></li> <li><strong>EmitterVelocityComponent </strong></li> <li><strong>ListenerVelocityComponent</strong></li> </ul><p><strong>Note</strong>??For <strong>pMatrixCoefficients</strong> and <strong>pDelayTimes</strong>, <strong>X3DAudioCalculate</strong> does not allocate additional memory. <strong>X3DAudioCalculate</strong> merely modifies the values at the memory locations allocated for these references.</p>	
    /// </remarks>	
    /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_DSP_SETTINGS']/*"/>	
    /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_dsp_settings</msdn-id>	
    /// <unmanaged>X3DAUDIO_DSP_SETTINGS</unmanaged>	
    /// <unmanaged-short>X3DAUDIO_DSP_SETTINGS</unmanaged-short>	
    public  partial class DspSettings {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_DSP_SETTINGS::pMatrixCoefficients']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_dsp_settings</msdn-id>	
        /// <unmanaged>float* pMatrixCoefficients</unmanaged>	
        /// <unmanaged-short>float pMatrixCoefficients</unmanaged-short>	
        internal System.IntPtr MatrixCoefficientsPointer;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_DSP_SETTINGS::pDelayTimes']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_dsp_settings</msdn-id>	
        /// <unmanaged>float* pDelayTimes</unmanaged>	
        /// <unmanaged-short>float pDelayTimes</unmanaged-short>	
        internal System.IntPtr DelayTimesPointer;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_DSP_SETTINGS::SrcChannelCount']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_dsp_settings</msdn-id>	
        /// <unmanaged>unsigned int SrcChannelCount</unmanaged>	
        /// <unmanaged-short>unsigned int SrcChannelCount</unmanaged-short>	
        public readonly int SourceChannelCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_DSP_SETTINGS::DstChannelCount']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_dsp_settings</msdn-id>	
        /// <unmanaged>unsigned int DstChannelCount</unmanaged>	
        /// <unmanaged-short>unsigned int DstChannelCount</unmanaged-short>	
        public readonly int DestinationChannelCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_DSP_SETTINGS::LPFDirectCoefficient']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_dsp_settings</msdn-id>	
        /// <unmanaged>float LPFDirectCoefficient</unmanaged>	
        /// <unmanaged-short>float LPFDirectCoefficient</unmanaged-short>	
        public float LpfDirectCoefficient;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_DSP_SETTINGS::LPFReverbCoefficient']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_dsp_settings</msdn-id>	
        /// <unmanaged>float LPFReverbCoefficient</unmanaged>	
        /// <unmanaged-short>float LPFReverbCoefficient</unmanaged-short>	
        public float LpfReverbCoefficient;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_DSP_SETTINGS::ReverbLevel']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_dsp_settings</msdn-id>	
        /// <unmanaged>float ReverbLevel</unmanaged>	
        /// <unmanaged-short>float ReverbLevel</unmanaged-short>	
        public float ReverbLevel;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_DSP_SETTINGS::DopplerFactor']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_dsp_settings</msdn-id>	
        /// <unmanaged>float DopplerFactor</unmanaged>	
        /// <unmanaged-short>float DopplerFactor</unmanaged-short>	
        public float DopplerFactor;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_DSP_SETTINGS::EmitterToListenerAngle']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_dsp_settings</msdn-id>	
        /// <unmanaged>float EmitterToListenerAngle</unmanaged>	
        /// <unmanaged-short>float EmitterToListenerAngle</unmanaged-short>	
        public float EmitterToListenerAngle;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_DSP_SETTINGS::EmitterToListenerDistance']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_dsp_settings</msdn-id>	
        /// <unmanaged>float EmitterToListenerDistance</unmanaged>	
        /// <unmanaged-short>float EmitterToListenerDistance</unmanaged-short>	
        public float EmitterToListenerDistance;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_DSP_SETTINGS::EmitterVelocityComponent']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_dsp_settings</msdn-id>	
        /// <unmanaged>float EmitterVelocityComponent</unmanaged>	
        /// <unmanaged-short>float EmitterVelocityComponent</unmanaged-short>	
        public float EmitterVelocityComponent;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_DSP_SETTINGS::ListenerVelocityComponent']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_dsp_settings</msdn-id>	
        /// <unmanaged>float ListenerVelocityComponent</unmanaged>	
        /// <unmanaged-short>float ListenerVelocityComponent</unmanaged-short>	
        public float ListenerVelocityComponent;
    }
    
    /// <summary>	
    /// <p>Defines a single-point or multiple-point 3D audio source that is used with an arbitrary number of sound channels.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p><strong><see cref="SharpDX.X3DAudio.Emitter"/></strong> only supports a cone in a single-point emitter. Multi-point emitters are a convenient and efficient way to manage a related group of sound sources. Many properties are shared among all channel points, such as Doppler?the same Doppler shift is applied to all channels in the emitter. Thus, the Doppler value need only be calculated once, not per-point as would be needed with multiple separate single-point emitters. Because <strong><see cref="SharpDX.X3DAudio.Emitter"/></strong> only has one orientation vector, a multi-point emitter cone would be of limited usefulness, forcing all channels to behave as if they were facing the same direction. If multiple independent cones are needed, multiple single-point emitters should be used, each with its own orientation. </p><p>The parameter type <see cref="SharpDX.Mathematics.Interop.RawVector3"/> is typed to DirectX::XMFLOAT3, to provide x , y , and z floating-point values. </p><p>X3DAudio uses a left-handed Cartesian coordinate system, with values on the x-axis increasing from left to right, on the y-axis from bottom to top, and on the z-axis from near to far. Azimuths are measured clockwise from a given reference direction. </p><p>For user-defined distance curves, the distance field of the first point must be 0.0f and the distance field of the last point must be 1.0f. </p><p>If an emitter moves beyond a distance of (<strong>CurveDistanceScaler</strong> ? 1.0f), the last point on the curve is used to compute the volume output level. The last point is determined by the following:	
    /// </p><pre><see cref="SharpDX.X3DAudio.DistanceCurve"/>.pPoints[PointCount-1].DSPSetting)</pre>	
    /// </remarks>	
    /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_EMITTER']/*"/>	
    /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_emitter</msdn-id>	
    /// <unmanaged>X3DAUDIO_EMITTER</unmanaged>	
    /// <unmanaged-short>X3DAUDIO_EMITTER</unmanaged-short>	
    public  partial class Emitter {	
        
        /// <summary>	
        /// <dd> <p>Pointer to a sound cone. Used only with single-channel emitters for matrix, LPF (both direct and reverb paths), and reverb calculations. <c>null</c> specifies the emitter is omnidirectional.</p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_EMITTER::pCone']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_emitter</msdn-id>	
        /// <unmanaged>X3DAUDIO_CONE* pCone</unmanaged>	
        /// <unmanaged-short>X3DAUDIO_CONE pCone</unmanaged-short>	
        internal System.IntPtr ConePointer;
        
        /// <summary>	
        /// <dd> <p>Orientation of the front direction. This value must be orthonormal with <strong>OrientTop</strong>. <strong>OrientFront</strong> must be normalized when used. For single-channel emitters without cones <strong>OrientFront</strong> is only used for emitter angle calculations. For multi channel emitters or single-channel with cones <strong>OrientFront</strong> is used for matrix, LPF (both direct and reverb paths), and reverb calculations.</p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_EMITTER::OrientFront']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_emitter</msdn-id>	
        /// <unmanaged>X3DAUDIO_VECTOR OrientFront</unmanaged>	
        /// <unmanaged-short>X3DAUDIO_VECTOR OrientFront</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector3 OrientFront;
        
        /// <summary>	
        /// <dd> <p>Orientation of the top direction. This value must be orthonormal with <strong>OrientFront</strong>. <strong>OrientTop</strong> is only used with multi-channel emitters for matrix calculations.</p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_EMITTER::OrientTop']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_emitter</msdn-id>	
        /// <unmanaged>X3DAUDIO_VECTOR OrientTop</unmanaged>	
        /// <unmanaged-short>X3DAUDIO_VECTOR OrientTop</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector3 OrientTop;
        
        /// <summary>	
        /// <dd> <p>Position in user-defined world units. This value does not affect <strong>Velocity</strong>.</p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_EMITTER::Position']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_emitter</msdn-id>	
        /// <unmanaged>X3DAUDIO_VECTOR Position</unmanaged>	
        /// <unmanaged-short>X3DAUDIO_VECTOR Position</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector3 Position;
        
        /// <summary>	
        /// <dd> <p>Velocity vector in user-defined world units/second. This value is used only for doppler calculations. It does not affect <strong>Position</strong>. 	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_EMITTER::Velocity']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_emitter</msdn-id>	
        /// <unmanaged>X3DAUDIO_VECTOR Velocity</unmanaged>	
        /// <unmanaged-short>X3DAUDIO_VECTOR Velocity</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector3 Velocity;
        
        /// <summary>	
        /// <dd> <p>Value to be used for the inner radius calculations. If <strong>InnerRadius</strong> is 0, then no inner radius is used, but <strong>InnerRadiusAngle</strong> may still be used. This value must be between 0.0f and MAX_FLT. 	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_EMITTER::InnerRadius']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_emitter</msdn-id>	
        /// <unmanaged>float InnerRadius</unmanaged>	
        /// <unmanaged-short>float InnerRadius</unmanaged-short>	
        public float InnerRadius;
        
        /// <summary>	
        /// <dd> <p>Value to be used for the inner radius angle calculations. This value must be between 0.0f and X3DAUDIO_PI/4.0. </p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_EMITTER::InnerRadiusAngle']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_emitter</msdn-id>	
        /// <unmanaged>float InnerRadiusAngle</unmanaged>	
        /// <unmanaged-short>float InnerRadiusAngle</unmanaged-short>	
        public float InnerRadiusAngle;
        
        /// <summary>	
        /// <dd> <p>Number of emitters defined by the <strong><see cref="SharpDX.X3DAudio.Emitter"/></strong> structure. Must be greater than 0. </p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_EMITTER::ChannelCount']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_emitter</msdn-id>	
        /// <unmanaged>unsigned int ChannelCount</unmanaged>	
        /// <unmanaged-short>unsigned int ChannelCount</unmanaged-short>	
        public int ChannelCount;
        
        /// <summary>	
        /// <dd> <p>Distance from <strong>Position</strong> that channels will be placed if <strong>ChannelCount</strong> is greater than 1. <strong>ChannelRadius</strong> is only used with multi-channel emitters for matrix calculations. Must be greater than or equal to 0.0f.</p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_EMITTER::ChannelRadius']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_emitter</msdn-id>	
        /// <unmanaged>float ChannelRadius</unmanaged>	
        /// <unmanaged-short>float ChannelRadius</unmanaged-short>	
        public float ChannelRadius;
        
        /// <summary>	
        /// <dd> <p>Table of channel positions, expressed as an azimuth in radians along the channel radius with respect to the front orientation vector in the plane orthogonal to the top orientation vector. An azimuth of X3DAUDIO_2PI specifies a channel is a low-frequency effects (LFE) channel. LFE channels are positioned at the emitter base and are calculated with respect to <strong>pLFECurve</strong> only, never <strong>pVolumeCurve</strong>. <strong>pChannelAzimuths</strong> must have at least <strong>ChannelCount</strong> elements, but can be <strong><c>null</c></strong> if <strong>ChannelCount</strong> = 1. The table values must be within 0.0f to X3DAUDIO_2PI. <strong>pChannelAzimuths</strong> is used with multi-channel emitters for matrix calculations. </p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_EMITTER::pChannelAzimuths']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_emitter</msdn-id>	
        /// <unmanaged>float* pChannelAzimuths</unmanaged>	
        /// <unmanaged-short>float pChannelAzimuths</unmanaged-short>	
        internal System.IntPtr ChannelAzimuthsPointer;
        
        /// <summary>	
        /// <dd> <p>Volume-level distance curve, which is used only for matrix calculations. <c>null</c> specifies a specialized default curve that conforms to the inverse square law, such that when distance is between 0.0f and <strong>CurveDistanceScaler</strong> ? 1.0f, no attenuation is applied. 	
        /// When distance is greater than <strong>CurveDistanceScaler</strong> ? 1.0f, the amplification factor is (<strong>CurveDistanceScaler</strong> ? 1.0f)/distance. At a distance of <strong>CurveDistanceScaler</strong> ? 2.0f, the sound will be at half volume or -6 dB, at a distance of <strong>CurveDistanceScaler</strong> ? 4.0f, the sound will be at one quarter volume or -12 dB, and so on. <strong>pVolumeCurve</strong> and pLFECurve are independent of each other. <strong>pVolumeCurve</strong> does not affect <strong>LFE channel</strong> volume. </p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_EMITTER::pVolumeCurve']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_emitter</msdn-id>	
        /// <unmanaged>X3DAUDIO_DISTANCE_CURVE* pVolumeCurve</unmanaged>	
        /// <unmanaged-short>X3DAUDIO_DISTANCE_CURVE pVolumeCurve</unmanaged-short>	
        internal System.IntPtr VolumeCurvePointer;
        
        /// <summary>	
        /// <dd> <p>LFE roll-off distance curve, or <c>null</c> to use default curve: [0.0f, <strong>CurveDistanceScaler</strong> ?1.0f], [<strong>CurveDistanceScaler</strong> ?1.0f, 0.0f]. A <c>null</c> value for <strong>pLFECurve</strong> specifies a default curve that conforms to the inverse square law with distances &lt;= <strong>CurveDistanceScaler</strong> clamped to no attenuation. 	
        /// <strong>pVolumeCurve</strong> and <strong>pLFECurve</strong> are independent of each other. <strong>pLFECurve</strong> does not affect non LFE channel volume. </p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_EMITTER::pLFECurve']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_emitter</msdn-id>	
        /// <unmanaged>X3DAUDIO_DISTANCE_CURVE* pLFECurve</unmanaged>	
        /// <unmanaged-short>X3DAUDIO_DISTANCE_CURVE pLFECurve</unmanaged-short>	
        internal System.IntPtr LFECurvePointer;
        
        /// <summary>	
        /// <dd> <p>Low-pass filter (LPF) direct-path coefficient distance curve, or <c>null</c> to use the default curve: [0.0f, 1.0f], [1.0f, 0.75f]. <strong>pLPFDirectCurve</strong> is only used for LPF direct-path calculations. 	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_EMITTER::pLPFDirectCurve']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_emitter</msdn-id>	
        /// <unmanaged>X3DAUDIO_DISTANCE_CURVE* pLPFDirectCurve</unmanaged>	
        /// <unmanaged-short>X3DAUDIO_DISTANCE_CURVE pLPFDirectCurve</unmanaged-short>	
        internal System.IntPtr LPFDirectCurvePointer;
        
        /// <summary>	
        /// <dd> <p>LPF reverb-path coefficient distance curve, or <c>null</c> to use default curve: [0.0f, 0.75f], [1.0f, 0.75f]. <strong>pLPFReverbCurve</strong> is only used for LPF reverb path calculations.</p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_EMITTER::pLPFReverbCurve']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_emitter</msdn-id>	
        /// <unmanaged>X3DAUDIO_DISTANCE_CURVE* pLPFReverbCurve</unmanaged>	
        /// <unmanaged-short>X3DAUDIO_DISTANCE_CURVE pLPFReverbCurve</unmanaged-short>	
        internal System.IntPtr LPFReverbCurvePointer;
        
        /// <summary>	
        /// <dd> <p>Reverb send level distance curve, or <c>null</c> to use default curve: [0.0f, 1.0f], [1.0f, 0.0f]. </p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_EMITTER::pReverbCurve']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_emitter</msdn-id>	
        /// <unmanaged>X3DAUDIO_DISTANCE_CURVE* pReverbCurve</unmanaged>	
        /// <unmanaged-short>X3DAUDIO_DISTANCE_CURVE pReverbCurve</unmanaged-short>	
        internal System.IntPtr ReverbCurvePointer;
        
        /// <summary>	
        /// <dd> <p>Curve distance scaler that is used to scale normalized distance curves to user-defined world units, and/or to exaggerate their effect. This does not affect any other calculations. The value must be within the range FLT_MIN to FLT_MAX. <strong>CurveDistanceScaler</strong> is only used for matrix, LPF (both direct and reverb paths), and reverb calculations.</p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_EMITTER::CurveDistanceScaler']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_emitter</msdn-id>	
        /// <unmanaged>float CurveDistanceScaler</unmanaged>	
        /// <unmanaged-short>float CurveDistanceScaler</unmanaged-short>	
        public float CurveDistanceScaler;
        
        /// <summary>	
        /// <dd> <p>Doppler shift scaler that is used to exaggerate Doppler shift effect. <strong>DopplerScaler</strong> is only used for Doppler calculations and does not affect any other calculations. The value must be within the range 0.0f to FLT_MAX.</p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_EMITTER::DopplerScaler']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_emitter</msdn-id>	
        /// <unmanaged>float DopplerScaler</unmanaged>	
        /// <unmanaged-short>float DopplerScaler</unmanaged-short>	
        public float DopplerScaler;
    }
    
    /// <summary>	
    /// <p>Defines a point of 3D audio reception.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The parameter type <strong><see cref="SharpDX.Mathematics.Interop.RawVector3"/></strong> is typed to DirectX::XMFLOAT3, to provide x, y and z floating-point values. </p><p>A listener's front and top vectors must be orthonormal. To be considered orthonormal, a pair of vectors must have a magnitude of 1 +- 1x10-5 and a dot product of 0 +- 1x10-5. </p>	
    /// </remarks>	
    /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_LISTENER']/*"/>	
    /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_listener</msdn-id>	
    /// <unmanaged>X3DAUDIO_LISTENER</unmanaged>	
    /// <unmanaged-short>X3DAUDIO_LISTENER</unmanaged-short>	
    public  partial class Listener {	
        
        /// <summary>	
        /// <dd> <p>Orientation of front direction. When <strong>pCone</strong> is <c>null</c> <strong>OrientFront</strong> is used only for matrix and delay calculations. When <strong>pCone</strong> is not <c>null</c> <strong>OrientFront</strong> is used for matrix, LPF (both direct and reverb paths), and reverb calculations. This value must be orthonormal with <strong>OrientTop</strong> when used.</p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_LISTENER::OrientFront']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_listener</msdn-id>	
        /// <unmanaged>X3DAUDIO_VECTOR OrientFront</unmanaged>	
        /// <unmanaged-short>X3DAUDIO_VECTOR OrientFront</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector3 OrientFront;
        
        /// <summary>	
        /// <dd> <p>Orientation of top direction, used only for matrix and delay calculations. This value must be orthonormal with <strong>OrientFront</strong> when used.</p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_LISTENER::OrientTop']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_listener</msdn-id>	
        /// <unmanaged>X3DAUDIO_VECTOR OrientTop</unmanaged>	
        /// <unmanaged-short>X3DAUDIO_VECTOR OrientTop</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector3 OrientTop;
        
        /// <summary>	
        /// <dd> <p>Position in user-defined world units. This value does not affect <strong>Velocity</strong>.</p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_LISTENER::Position']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_listener</msdn-id>	
        /// <unmanaged>X3DAUDIO_VECTOR Position</unmanaged>	
        /// <unmanaged-short>X3DAUDIO_VECTOR Position</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector3 Position;
        
        /// <summary>	
        /// <dd> <p>Velocity vector in user-defined world units per second, used only for doppler calculations. This value does not affect <strong>Position</strong>.</p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_LISTENER::Velocity']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_listener</msdn-id>	
        /// <unmanaged>X3DAUDIO_VECTOR Velocity</unmanaged>	
        /// <unmanaged-short>X3DAUDIO_VECTOR Velocity</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector3 Velocity;
        
        /// <summary>	
        /// <dd> <p>Pointer to an <strong><see cref="SharpDX.X3DAudio.Cone"/></strong> structure for this listener. Providing a listener cone will specify that additional calculations are performed when determining the volume and filter DSP parameters for individual sound sources. A <c>null</c> <strong>pCone</strong> value specifies an omnidirectional sound and no cone processing is applied. <strong>pCone</strong> is only used for matrix, LPF (both direct and reverb paths), and reverb calculations.</p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='X3DAUDIO_LISTENER::pCone']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.x3daudio.x3daudio_listener</msdn-id>	
        /// <unmanaged>X3DAUDIO_CONE* pCone</unmanaged>	
        /// <unmanaged-short>X3DAUDIO_CONE pCone</unmanaged-short>	
        internal System.IntPtr ConePointer;
    }
}
