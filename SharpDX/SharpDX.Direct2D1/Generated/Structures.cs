// Copyright (c) 2010-2014 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Types declaration for SharpDX.Direct2D1 namespace.
//     This code was generated by a tool.
//     Date : 6/25/2016 10:38:09 PM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
namespace SharpDX.Direct2D1 {

#pragma warning disable 282
#pragma warning disable 649
#pragma warning disable 419
#pragma warning disable 1587
#pragma warning disable 1574
    
    /// <summary>	
    /// <p>Describes an elliptical arc between two points.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ARC_SEGMENT']/*"/>	
    /// <msdn-id>dd368065</msdn-id>	
    /// <unmanaged>D2D1_ARC_SEGMENT</unmanaged>	
    /// <unmanaged-short>D2D1_ARC_SEGMENT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct ArcSegment {	
        
        /// <summary>	
        /// <dd> <p>The end point of the arc.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ARC_SEGMENT::point']/*"/>	
        /// <msdn-id>dd368065</msdn-id>	
        /// <unmanaged>D2D_POINT_2F point</unmanaged>	
        /// <unmanaged-short>D2D_POINT_2F point</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector2 Point;
        
        /// <summary>	
        /// <dd> <p>The x-radius and y-radius of the arc.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ARC_SEGMENT::size']/*"/>	
        /// <msdn-id>dd368065</msdn-id>	
        /// <unmanaged>D2D_SIZE_F size</unmanaged>	
        /// <unmanaged-short>D2D_SIZE_F size</unmanaged-short>	
        public SharpDX.Size2F Size;
        
        /// <summary>	
        /// <dd> <p>A value that specifies how many degrees in the clockwise direction the ellipse is rotated relative to the current coordinate system.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ARC_SEGMENT::rotationAngle']/*"/>	
        /// <msdn-id>dd368065</msdn-id>	
        /// <unmanaged>float rotationAngle</unmanaged>	
        /// <unmanaged-short>float rotationAngle</unmanaged-short>	
        public float RotationAngle;
        
        /// <summary>	
        /// <dd> <p>A value that specifies whether the arc sweep is clockwise or counterclockwise.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ARC_SEGMENT::sweepDirection']/*"/>	
        /// <msdn-id>dd368065</msdn-id>	
        /// <unmanaged>D2D1_SWEEP_DIRECTION sweepDirection</unmanaged>	
        /// <unmanaged-short>D2D1_SWEEP_DIRECTION sweepDirection</unmanaged-short>	
        public SharpDX.Direct2D1.SweepDirection SweepDirection;
        
        /// <summary>	
        /// <dd> <p>A value that specifies whether the given arc is larger than 180 degrees.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ARC_SEGMENT::arcSize']/*"/>	
        /// <msdn-id>dd368065</msdn-id>	
        /// <unmanaged>D2D1_ARC_SIZE arcSize</unmanaged>	
        /// <unmanaged-short>D2D1_ARC_SIZE arcSize</unmanaged-short>	
        public SharpDX.Direct2D1.ArcSize ArcSize;
    }
    
    /// <summary>	
    /// <p>Represents a cubic bezier segment drawn  between two points.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> A cubic Bezier curve is defined by four points: a start point, an end point (<em>point3</em>), and two control points (<em>point1</em> and <em>point2</em>). A Bezier segment does not contain a property for the starting point of the curve; it defines only the end point. The beginning point of the curve is the current point of the path to which the Bezier curve is added.</p><p> The two control points of a cubic Bezier curve behave like magnets, attracting portions of what would otherwise be a straight line toward themselves and producing a curve. The first control point, <em>point1</em>, affects the beginning portion of the curve; the second control point, <em>point2</em>, affects the ending portion of the curve. </p><p><strong>Note</strong>??The curve doesn't necessarily pass through either of the control points; each control point moves its portion of the line toward itself, but not through itself.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BEZIER_SEGMENT']/*"/>	
    /// <msdn-id>dd368070</msdn-id>	
    /// <unmanaged>D2D1_BEZIER_SEGMENT</unmanaged>	
    /// <unmanaged-short>D2D1_BEZIER_SEGMENT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct BezierSegment {	
        
        /// <summary>	
        /// <dd> <p>The first control point for the Bezier segment.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BEZIER_SEGMENT::point1']/*"/>	
        /// <msdn-id>dd368070</msdn-id>	
        /// <unmanaged>D2D_POINT_2F point1</unmanaged>	
        /// <unmanaged-short>D2D_POINT_2F point1</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector2 Point1;
        
        /// <summary>	
        /// <dd> <p>The second control point for the Bezier segment.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BEZIER_SEGMENT::point2']/*"/>	
        /// <msdn-id>dd368070</msdn-id>	
        /// <unmanaged>D2D_POINT_2F point2</unmanaged>	
        /// <unmanaged-short>D2D_POINT_2F point2</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector2 Point2;
        
        /// <summary>	
        /// <dd> <p>The end point for the Bezier segment.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BEZIER_SEGMENT::point3']/*"/>	
        /// <msdn-id>dd368070</msdn-id>	
        /// <unmanaged>D2D_POINT_2F point3</unmanaged>	
        /// <unmanaged-short>D2D_POINT_2F point3</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector2 Point3;
    }
    
    /// <summary>	
    /// <p> Describes the extend modes and the interpolation mode of an <strong><see cref="SharpDX.Direct2D1.BitmapBrush"/></strong>.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAP_BRUSH_PROPERTIES']/*"/>	
    /// <msdn-id>dd368071</msdn-id>	
    /// <unmanaged>D2D1_BITMAP_BRUSH_PROPERTIES</unmanaged>	
    /// <unmanaged-short>D2D1_BITMAP_BRUSH_PROPERTIES</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct BitmapBrushProperties {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAP_BRUSH_PROPERTIES::extendModeX']/*"/>	
        /// <msdn-id>dd368071</msdn-id>	
        /// <unmanaged>D2D1_EXTEND_MODE extendModeX</unmanaged>	
        /// <unmanaged-short>D2D1_EXTEND_MODE extendModeX</unmanaged-short>	
        public SharpDX.Direct2D1.ExtendMode ExtendModeX;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAP_BRUSH_PROPERTIES::extendModeY']/*"/>	
        /// <msdn-id>dd368071</msdn-id>	
        /// <unmanaged>D2D1_EXTEND_MODE extendModeY</unmanaged>	
        /// <unmanaged-short>D2D1_EXTEND_MODE extendModeY</unmanaged-short>	
        public SharpDX.Direct2D1.ExtendMode ExtendModeY;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAP_BRUSH_PROPERTIES::interpolationMode']/*"/>	
        /// <msdn-id>dd368071</msdn-id>	
        /// <unmanaged>D2D1_BITMAP_INTERPOLATION_MODE interpolationMode</unmanaged>	
        /// <unmanaged-short>D2D1_BITMAP_INTERPOLATION_MODE interpolationMode</unmanaged-short>	
        public SharpDX.Direct2D1.BitmapInterpolationMode InterpolationMode;
    }
    
    /// <summary>	
    /// <p> Describes the extend modes and the interpolation mode of an <strong><see cref="SharpDX.Direct2D1.BitmapBrush"/></strong>.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAP_BRUSH_PROPERTIES1']/*"/>	
    /// <msdn-id>hh847943</msdn-id>	
    /// <unmanaged>D2D1_BITMAP_BRUSH_PROPERTIES1</unmanaged>	
    /// <unmanaged-short>D2D1_BITMAP_BRUSH_PROPERTIES1</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct BitmapBrushProperties1 {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAP_BRUSH_PROPERTIES1::extendModeX']/*"/>	
        /// <msdn-id>hh847943</msdn-id>	
        /// <unmanaged>D2D1_EXTEND_MODE extendModeX</unmanaged>	
        /// <unmanaged-short>D2D1_EXTEND_MODE extendModeX</unmanaged-short>	
        public SharpDX.Direct2D1.ExtendMode ExtendModeX;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAP_BRUSH_PROPERTIES1::extendModeY']/*"/>	
        /// <msdn-id>hh847943</msdn-id>	
        /// <unmanaged>D2D1_EXTEND_MODE extendModeY</unmanaged>	
        /// <unmanaged-short>D2D1_EXTEND_MODE extendModeY</unmanaged-short>	
        public SharpDX.Direct2D1.ExtendMode ExtendModeY;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAP_BRUSH_PROPERTIES1::interpolationMode']/*"/>	
        /// <msdn-id>hh847943</msdn-id>	
        /// <unmanaged>D2D1_INTERPOLATION_MODE interpolationMode</unmanaged>	
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE interpolationMode</unmanaged-short>	
        public SharpDX.Direct2D1.InterpolationMode InterpolationMode;
    }
    
    /// <summary>	
    /// <p>Describes the pixel format and dpi  of a bitmap.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAP_PROPERTIES']/*"/>	
    /// <msdn-id>dd368075</msdn-id>	
    /// <unmanaged>D2D1_BITMAP_PROPERTIES</unmanaged>	
    /// <unmanaged-short>D2D1_BITMAP_PROPERTIES</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct BitmapProperties {	
        
        /// <summary>	
        /// <dd> <p>The bitmap's pixel format and alpha mode.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAP_PROPERTIES::pixelFormat']/*"/>	
        /// <msdn-id>dd368075</msdn-id>	
        /// <unmanaged>D2D1_PIXEL_FORMAT pixelFormat</unmanaged>	
        /// <unmanaged-short>D2D1_PIXEL_FORMAT pixelFormat</unmanaged-short>	
        public SharpDX.Direct2D1.PixelFormat PixelFormat;
        
        /// <summary>	
        /// <dd> <p>The horizontal dpi of the bitmap.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAP_PROPERTIES::dpiX']/*"/>	
        /// <msdn-id>dd368075</msdn-id>	
        /// <unmanaged>float dpiX</unmanaged>	
        /// <unmanaged-short>float dpiX</unmanaged-short>	
        public float DpiX;
        
        /// <summary>	
        /// <dd> <p>The vertical dpi of the bitmap.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAP_PROPERTIES::dpiY']/*"/>	
        /// <msdn-id>dd368075</msdn-id>	
        /// <unmanaged>float dpiY</unmanaged>	
        /// <unmanaged-short>float dpiY</unmanaged-short>	
        public float DpiY;
    }
    
    /// <summary>	
    /// <p>This structure allows a <strong><see cref="SharpDX.Direct2D1.Bitmap1"/></strong> to be created with bitmap options and color context information available.	
    /// </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>If both <strong>dpiX</strong> and <strong>dpiY</strong> are 0, the dpi of the bitmap will be set to the desktop dpi if the device context is a windowed context, or 96 dpi for any other device context.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAP_PROPERTIES1']/*"/>	
    /// <msdn-id>hh404275</msdn-id>	
    /// <unmanaged>D2D1_BITMAP_PROPERTIES1</unmanaged>	
    /// <unmanaged-short>D2D1_BITMAP_PROPERTIES1</unmanaged-short>	
    public  partial class BitmapProperties1 {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAP_PROPERTIES1::pixelFormat']/*"/>	
        /// <msdn-id>hh404275</msdn-id>	
        /// <unmanaged>D2D1_PIXEL_FORMAT pixelFormat</unmanaged>	
        /// <unmanaged-short>D2D1_PIXEL_FORMAT pixelFormat</unmanaged-short>	
        public SharpDX.Direct2D1.PixelFormat PixelFormat;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAP_PROPERTIES1::dpiX']/*"/>	
        /// <msdn-id>hh404275</msdn-id>	
        /// <unmanaged>float dpiX</unmanaged>	
        /// <unmanaged-short>float dpiX</unmanaged-short>	
        public float DpiX;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAP_PROPERTIES1::dpiY']/*"/>	
        /// <msdn-id>hh404275</msdn-id>	
        /// <unmanaged>float dpiY</unmanaged>	
        /// <unmanaged-short>float dpiY</unmanaged-short>	
        public float DpiY;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAP_PROPERTIES1::bitmapOptions']/*"/>	
        /// <msdn-id>hh404275</msdn-id>	
        /// <unmanaged>D2D1_BITMAP_OPTIONS bitmapOptions</unmanaged>	
        /// <unmanaged-short>D2D1_BITMAP_OPTIONS bitmapOptions</unmanaged-short>	
        public SharpDX.Direct2D1.BitmapOptions BitmapOptions;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAP_PROPERTIES1::colorContext']/*"/>	
        /// <msdn-id>hh404275</msdn-id>	
        /// <unmanaged>ID2D1ColorContext* colorContext</unmanaged>	
        /// <unmanaged-short>ID2D1ColorContext colorContext</unmanaged-short>	
        internal System.IntPtr ColorContextPointer;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public SharpDX.Direct2D1.PixelFormat PixelFormat;
            public float DpiX;
            public float DpiY;
            public SharpDX.Direct2D1.BitmapOptions BitmapOptions;
            public System.IntPtr ColorContextPointer;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.PixelFormat = @ref.PixelFormat;
            this.DpiX = @ref.DpiX;
            this.DpiY = @ref.DpiY;
            this.BitmapOptions = @ref.BitmapOptions;
            this.ColorContextPointer = @ref.ColorContextPointer;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.PixelFormat = this.PixelFormat;
            @ref.DpiX = this.DpiX;
            @ref.DpiY = this.DpiY;
            @ref.BitmapOptions = this.BitmapOptions;
            @ref.ColorContextPointer = this.ColorContextPointer;
		
		}
    }
    
    /// <summary>	
    /// <p>Defines a blend description to be used in a particular blend transform.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This description closely matches the <strong><see cref="SharpDX.Direct3D11.BlendStateDescription"/></strong> struct with some omissions and the addition of the blend factor in the description.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_DESCRIPTION']/*"/>	
    /// <msdn-id>hh404277</msdn-id>	
    /// <unmanaged>D2D1_BLEND_DESCRIPTION</unmanaged>	
    /// <unmanaged-short>D2D1_BLEND_DESCRIPTION</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct BlendDescription {	
        
        /// <summary>	
        /// <dd> <p>Specifies the first RGB data source and includes an optional preblend operation.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_DESCRIPTION::sourceBlend']/*"/>	
        /// <msdn-id>hh404277</msdn-id>	
        /// <unmanaged>D2D1_BLEND sourceBlend</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND sourceBlend</unmanaged-short>	
        public SharpDX.Direct2D1.Blend SourceBlend;
        
        /// <summary>	
        /// <dd> <p>Specifies the second RGB data source and includes an optional preblend operation.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_DESCRIPTION::destinationBlend']/*"/>	
        /// <msdn-id>hh404277</msdn-id>	
        /// <unmanaged>D2D1_BLEND destinationBlend</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND destinationBlend</unmanaged-short>	
        public SharpDX.Direct2D1.Blend DestinationBlend;
        
        /// <summary>	
        /// <dd> <p>Specifies how to combine the RGB data sources.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_DESCRIPTION::blendOperation']/*"/>	
        /// <msdn-id>hh404277</msdn-id>	
        /// <unmanaged>D2D1_BLEND_OPERATION blendOperation</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_OPERATION blendOperation</unmanaged-short>	
        public SharpDX.Direct2D1.BlendOperation BlendOperation;
        
        /// <summary>	
        /// <dd> <p>Specifies the first alpha data source and includes an optional preblend operation. Blend options that end in _COLOR are not allowed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_DESCRIPTION::sourceBlendAlpha']/*"/>	
        /// <msdn-id>hh404277</msdn-id>	
        /// <unmanaged>D2D1_BLEND sourceBlendAlpha</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND sourceBlendAlpha</unmanaged-short>	
        public SharpDX.Direct2D1.Blend SourceBlendAlpha;
        
        /// <summary>	
        /// <dd> <p>Specifies the second alpha data source and includes an optional preblend operation. Blend options that end in _COLOR are not allowed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_DESCRIPTION::destinationBlendAlpha']/*"/>	
        /// <msdn-id>hh404277</msdn-id>	
        /// <unmanaged>D2D1_BLEND destinationBlendAlpha</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND destinationBlendAlpha</unmanaged-short>	
        public SharpDX.Direct2D1.Blend DestinationBlendAlpha;
        
        /// <summary>	
        /// <dd> <p>Specifies how to combine the alpha data sources.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_DESCRIPTION::blendOperationAlpha']/*"/>	
        /// <msdn-id>hh404277</msdn-id>	
        /// <unmanaged>D2D1_BLEND_OPERATION blendOperationAlpha</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_OPERATION blendOperationAlpha</unmanaged-short>	
        public SharpDX.Direct2D1.BlendOperation BlendOperationAlpha;
        
        /// <summary>	
        /// <dd> <p>Parameters to the blend operations. The blend must use <strong><see cref="SharpDX.Direct2D1.Blend.BlendFactor"/></strong> for this to be used.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_DESCRIPTION::blendFactor']/*"/>	
        /// <msdn-id>hh404277</msdn-id>	
        /// <unmanaged>SHARPDX_COLOR4 blendFactor</unmanaged>	
        /// <unmanaged-short>SHARPDX_COLOR4 blendFactor</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawColor4 BlendFactor;
    }
    
    /// <summary>	
    /// <p> Describes the opacity and transformation of a brush.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This structure is used when creating a brush. For convenience, Direct2D provides the <strong>D2D1::BrushProperties</strong> function for creating <strong><see cref="SharpDX.Direct2D1.BrushProperties"/></strong> structures.</p><p>After creating a brush, you can change its opacity or transform by calling the <strong>SetOpacity</strong> or <strong>SetTransform</strong> methods.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BRUSH_PROPERTIES']/*"/>	
    /// <msdn-id>dd368077</msdn-id>	
    /// <unmanaged>D2D1_BRUSH_PROPERTIES</unmanaged>	
    /// <unmanaged-short>D2D1_BRUSH_PROPERTIES</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct BrushProperties {	
        
        /// <summary>	
        /// <dd> <p>A value between 0.0f and 1.0f, inclusive, that specifies the degree of opacity of the brush.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BRUSH_PROPERTIES::opacity']/*"/>	
        /// <msdn-id>dd368077</msdn-id>	
        /// <unmanaged>float opacity</unmanaged>	
        /// <unmanaged-short>float opacity</unmanaged-short>	
        public float Opacity;
        
        /// <summary>	
        /// <dd> <p>The transformation that is applied to the brush.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BRUSH_PROPERTIES::transform']/*"/>	
        /// <msdn-id>dd368077</msdn-id>	
        /// <unmanaged>D2D_MATRIX_3X2_F transform</unmanaged>	
        /// <unmanaged-short>D2D_MATRIX_3X2_F transform</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawMatrix3x2 Transform;
    }
    
    /// <summary>	
    /// <p>Specifies the options with which the Direct2D device, factory, and device context are created.	
    /// </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The root objects referred to here are the Direct2D device, Direct2D factory and the Direct2D device context.	
    /// </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CREATION_PROPERTIES']/*"/>	
    /// <msdn-id>hh404298</msdn-id>	
    /// <unmanaged>D2D1_CREATION_PROPERTIES</unmanaged>	
    /// <unmanaged-short>D2D1_CREATION_PROPERTIES</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct CreationProperties {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CREATION_PROPERTIES::threadingMode']/*"/>	
        /// <msdn-id>hh404298</msdn-id>	
        /// <unmanaged>D2D1_THREADING_MODE threadingMode</unmanaged>	
        /// <unmanaged-short>D2D1_THREADING_MODE threadingMode</unmanaged-short>	
        public SharpDX.Direct2D1.ThreadingMode ThreadingMode;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CREATION_PROPERTIES::debugLevel']/*"/>	
        /// <msdn-id>hh404298</msdn-id>	
        /// <unmanaged>D2D1_DEBUG_LEVEL debugLevel</unmanaged>	
        /// <unmanaged-short>D2D1_DEBUG_LEVEL debugLevel</unmanaged-short>	
        public SharpDX.Direct2D1.DebugLevel DebugLevel;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CREATION_PROPERTIES::options']/*"/>	
        /// <msdn-id>hh404298</msdn-id>	
        /// <unmanaged>D2D1_DEVICE_CONTEXT_OPTIONS options</unmanaged>	
        /// <unmanaged-short>D2D1_DEVICE_CONTEXT_OPTIONS options</unmanaged-short>	
        public SharpDX.Direct2D1.DeviceContextOptions Options;
    }
    
    /// <summary>	
    /// <p>Defines a vertex shader and the input element description to define the input layout. The combination is used to allow a custom vertex effect to create a custom vertex shader and pass it a custom layout.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The vertex shader will be loaded by the <strong>CreateVertexBuffer</strong> call that accepts the vertex buffer properties.</p><p>This structure does not need to be specified if one of the standard vertex shaders is used.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES']/*"/>	
    /// <msdn-id>hh404301</msdn-id>	
    /// <unmanaged>D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES</unmanaged>	
    /// <unmanaged-short>D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES</unmanaged-short>	
    public  partial class CustomVertexBufferProperties {	
        
        /// <summary>	
        /// <dd> <p>The unique ID of the vertex shader.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES::shaderBufferWithInputSignature']/*"/>	
        /// <msdn-id>hh404301</msdn-id>	
        /// <unmanaged>const unsigned char* shaderBufferWithInputSignature</unmanaged>	
        /// <unmanaged-short>unsigned char shaderBufferWithInputSignature</unmanaged-short>	
        internal System.IntPtr ShaderBufferWithInputSignature;
        
        /// <summary>	
        /// <dd> <p>An array of input assembler stage data types.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES::shaderBufferSize']/*"/>	
        /// <msdn-id>hh404301</msdn-id>	
        /// <unmanaged>unsigned int shaderBufferSize</unmanaged>	
        /// <unmanaged-short>unsigned int shaderBufferSize</unmanaged-short>	
        internal int ShaderBufferSize;
        
        /// <summary>	
        /// <dd> <p>An array of input assembler stage data types.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES::inputElements']/*"/>	
        /// <msdn-id>hh404301</msdn-id>	
        /// <unmanaged>const D2D1_INPUT_ELEMENT_DESC* inputElements</unmanaged>	
        /// <unmanaged-short>D2D1_INPUT_ELEMENT_DESC inputElements</unmanaged-short>	
        internal System.IntPtr InputElementsPointer;
        
        /// <summary>	
        /// <dd> <p>The number of input elements in the vertex shader.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES::elementCount']/*"/>	
        /// <msdn-id>hh404301</msdn-id>	
        /// <unmanaged>unsigned int elementCount</unmanaged>	
        /// <unmanaged-short>unsigned int elementCount</unmanaged-short>	
        internal int ElementCount;
        
        /// <summary>	
        /// <dd> <p>The vertex stride.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES::stride']/*"/>	
        /// <msdn-id>hh404301</msdn-id>	
        /// <unmanaged>unsigned int stride</unmanaged>	
        /// <unmanaged-short>unsigned int stride</unmanaged-short>	
        public int Stride;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public System.IntPtr ShaderBufferWithInputSignature;
            public int ShaderBufferSize;
            public System.IntPtr InputElementsPointer;
            public int ElementCount;
            public int Stride;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.ShaderBufferWithInputSignature = @ref.ShaderBufferWithInputSignature;
            this.ShaderBufferSize = @ref.ShaderBufferSize;
            this.InputElementsPointer = @ref.InputElementsPointer;
            this.ElementCount = @ref.ElementCount;
            this.Stride = @ref.Stride;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.ShaderBufferWithInputSignature = this.ShaderBufferWithInputSignature;
            @ref.ShaderBufferSize = this.ShaderBufferSize;
            @ref.InputElementsPointer = this.InputElementsPointer;
            @ref.ElementCount = this.ElementCount;
            @ref.Stride = this.Stride;
		
		}
    }
    
    /// <summary>	
    /// <p>Describes the drawing state of a render target.  </p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DRAWING_STATE_DESCRIPTION']/*"/>	
    /// <msdn-id>dd368093</msdn-id>	
    /// <unmanaged>D2D1_DRAWING_STATE_DESCRIPTION</unmanaged>	
    /// <unmanaged-short>D2D1_DRAWING_STATE_DESCRIPTION</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct DrawingStateDescription {	
        
        /// <summary>	
        /// <dd> <p>The antialiasing mode for subsequent nontext drawing operations. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DRAWING_STATE_DESCRIPTION::antialiasMode']/*"/>	
        /// <msdn-id>dd368093</msdn-id>	
        /// <unmanaged>D2D1_ANTIALIAS_MODE antialiasMode</unmanaged>	
        /// <unmanaged-short>D2D1_ANTIALIAS_MODE antialiasMode</unmanaged-short>	
        public SharpDX.Direct2D1.AntialiasMode AntialiasMode;
        
        /// <summary>	
        /// <dd> <p>The antialiasing mode for subsequent text and glyph drawing operations.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DRAWING_STATE_DESCRIPTION::textAntialiasMode']/*"/>	
        /// <msdn-id>dd368093</msdn-id>	
        /// <unmanaged>D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode</unmanaged>	
        /// <unmanaged-short>D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode</unmanaged-short>	
        public SharpDX.Direct2D1.TextAntialiasMode TextAntialiasMode;
        
        /// <summary>	
        /// <dd> <p>A label for subsequent drawing operations.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DRAWING_STATE_DESCRIPTION::tag1']/*"/>	
        /// <msdn-id>dd368093</msdn-id>	
        /// <unmanaged>unsigned longlong tag1</unmanaged>	
        /// <unmanaged-short>unsigned longlong tag1</unmanaged-short>	
        public long Tag1;
        
        /// <summary>	
        /// <dd> <p>A label for subsequent drawing operations.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DRAWING_STATE_DESCRIPTION::tag2']/*"/>	
        /// <msdn-id>dd368093</msdn-id>	
        /// <unmanaged>unsigned longlong tag2</unmanaged>	
        /// <unmanaged-short>unsigned longlong tag2</unmanaged-short>	
        public long Tag2;
        
        /// <summary>	
        /// <dd> <p>The transformation to apply to subsequent drawing operations.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DRAWING_STATE_DESCRIPTION::transform']/*"/>	
        /// <msdn-id>dd368093</msdn-id>	
        /// <unmanaged>D2D_MATRIX_3X2_F transform</unmanaged>	
        /// <unmanaged-short>D2D_MATRIX_3X2_F transform</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawMatrix3x2 Transform;
    }
    
    /// <summary>	
    /// <p>Describes the drawing state of a device context.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DRAWING_STATE_DESCRIPTION1']/*"/>	
    /// <msdn-id>hh847946</msdn-id>	
    /// <unmanaged>D2D1_DRAWING_STATE_DESCRIPTION1</unmanaged>	
    /// <unmanaged-short>D2D1_DRAWING_STATE_DESCRIPTION1</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct DrawingStateDescription1 {	
        
        /// <summary>	
        /// <dd> <p>The antialiasing mode for subsequent nontext drawing operations. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DRAWING_STATE_DESCRIPTION1::antialiasMode']/*"/>	
        /// <msdn-id>hh847946</msdn-id>	
        /// <unmanaged>D2D1_ANTIALIAS_MODE antialiasMode</unmanaged>	
        /// <unmanaged-short>D2D1_ANTIALIAS_MODE antialiasMode</unmanaged-short>	
        public SharpDX.Direct2D1.AntialiasMode AntialiasMode;
        
        /// <summary>	
        /// <dd> <p>The antialiasing mode for subsequent text and glyph drawing operations.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DRAWING_STATE_DESCRIPTION1::textAntialiasMode']/*"/>	
        /// <msdn-id>hh847946</msdn-id>	
        /// <unmanaged>D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode</unmanaged>	
        /// <unmanaged-short>D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode</unmanaged-short>	
        public SharpDX.Direct2D1.TextAntialiasMode TextAntialiasMode;
        
        /// <summary>	
        /// <dd> <p>A label for subsequent drawing operations.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DRAWING_STATE_DESCRIPTION1::tag1']/*"/>	
        /// <msdn-id>hh847946</msdn-id>	
        /// <unmanaged>unsigned longlong tag1</unmanaged>	
        /// <unmanaged-short>unsigned longlong tag1</unmanaged-short>	
        public long Tag1;
        
        /// <summary>	
        /// <dd> <p>A label for subsequent drawing operations.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DRAWING_STATE_DESCRIPTION1::tag2']/*"/>	
        /// <msdn-id>hh847946</msdn-id>	
        /// <unmanaged>unsigned longlong tag2</unmanaged>	
        /// <unmanaged-short>unsigned longlong tag2</unmanaged-short>	
        public long Tag2;
        
        /// <summary>	
        /// <dd> <p>The transformation to apply to subsequent drawing operations.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DRAWING_STATE_DESCRIPTION1::transform']/*"/>	
        /// <msdn-id>hh847946</msdn-id>	
        /// <unmanaged>D2D_MATRIX_3X2_F transform</unmanaged>	
        /// <unmanaged-short>D2D_MATRIX_3X2_F transform</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawMatrix3x2 Transform;
        
        /// <summary>	
        /// <dd> <p>The blend mode for the device context to apply to subsequent drawing operations.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DRAWING_STATE_DESCRIPTION1::primitiveBlend']/*"/>	
        /// <msdn-id>hh847946</msdn-id>	
        /// <unmanaged>D2D1_PRIMITIVE_BLEND primitiveBlend</unmanaged>	
        /// <unmanaged-short>D2D1_PRIMITIVE_BLEND primitiveBlend</unmanaged-short>	
        public SharpDX.Direct2D1.PrimitiveBlend PrimitiveBlend;
        
        /// <summary>	
        /// <dd> <p><see cref="SharpDX.Direct2D1.UnitMode"/></p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DRAWING_STATE_DESCRIPTION1::unitMode']/*"/>	
        /// <msdn-id>hh847946</msdn-id>	
        /// <unmanaged>D2D1_UNIT_MODE unitMode</unmanaged>	
        /// <unmanaged-short>D2D1_UNIT_MODE unitMode</unmanaged-short>	
        public SharpDX.Direct2D1.UnitMode UnitMode;
    }
    
    /// <summary>	
    /// <p>Describes features of an effect.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p><strong>Note</strong>??The caller should not rely heavily on the input rectangles returned by this structure. They can change due to subtle changes in effect implementations and due to optimization changes in the effect rendering system. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_EFFECT_INPUT_DESCRIPTION']/*"/>	
    /// <msdn-id>hh404305</msdn-id>	
    /// <unmanaged>D2D1_EFFECT_INPUT_DESCRIPTION</unmanaged>	
    /// <unmanaged-short>D2D1_EFFECT_INPUT_DESCRIPTION</unmanaged-short>	
    public  partial class EffectInputDescription {	
        
        /// <summary>	
        /// <dd> <p>The effect whose input connection is being specified.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_EFFECT_INPUT_DESCRIPTION::effect']/*"/>	
        /// <msdn-id>hh404305</msdn-id>	
        /// <unmanaged>ID2D1Effect* effect</unmanaged>	
        /// <unmanaged-short>ID2D1Effect effect</unmanaged-short>	
        internal System.IntPtr EffectPointer;
        
        /// <summary>	
        /// <dd> <p>The input index of the effect that is being considered.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_EFFECT_INPUT_DESCRIPTION::inputIndex']/*"/>	
        /// <msdn-id>hh404305</msdn-id>	
        /// <unmanaged>unsigned int inputIndex</unmanaged>	
        /// <unmanaged-short>unsigned int inputIndex</unmanaged-short>	
        public int InputIndex;
        
        /// <summary>	
        /// <dd> <p>The amount of data that would be available on the input. This can be used to query this information when the data is not yet available. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_EFFECT_INPUT_DESCRIPTION::inputRectangle']/*"/>	
        /// <msdn-id>hh404305</msdn-id>	
        /// <unmanaged>D2D_RECT_F inputRectangle</unmanaged>	
        /// <unmanaged-short>D2D_RECT_F inputRectangle</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawRectangleF InputRectangle;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public System.IntPtr EffectPointer;
            public int InputIndex;
            public SharpDX.Mathematics.Interop.RawRectangleF InputRectangle;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.EffectPointer = @ref.EffectPointer;
            this.InputIndex = @ref.InputIndex;
            this.InputRectangle = @ref.InputRectangle;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.EffectPointer = this.EffectPointer;
            @ref.InputIndex = this.InputIndex;
            @ref.InputRectangle = this.InputRectangle;
		
		}
    }
    
    /// <summary>	
    /// <p> Contains the center point, x-radius, and y-radius of an ellipse.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ELLIPSE']/*"/>	
    /// <msdn-id>dd368097</msdn-id>	
    /// <unmanaged>D2D1_ELLIPSE</unmanaged>	
    /// <unmanaged-short>D2D1_ELLIPSE</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct Ellipse {	
        
        /// <summary>	
        /// <dd> <p>The center point of the ellipse.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ELLIPSE::point']/*"/>	
        /// <msdn-id>dd368097</msdn-id>	
        /// <unmanaged>D2D_POINT_2F point</unmanaged>	
        /// <unmanaged-short>D2D_POINT_2F point</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector2 Point;
        
        /// <summary>	
        /// <dd> <p>The X-radius of the ellipse.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ELLIPSE::radiusX']/*"/>	
        /// <msdn-id>dd368097</msdn-id>	
        /// <unmanaged>float radiusX</unmanaged>	
        /// <unmanaged-short>float radiusX</unmanaged-short>	
        public float RadiusX;
        
        /// <summary>	
        /// <dd> <p>The Y-radius of the ellipse.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ELLIPSE::radiusY']/*"/>	
        /// <msdn-id>dd368097</msdn-id>	
        /// <unmanaged>float radiusY</unmanaged>	
        /// <unmanaged-short>float radiusY</unmanaged-short>	
        public float RadiusY;
    }
    
    /// <summary>	
    /// <p>Contains the debugging level of an <strong><see cref="SharpDX.Direct2D1.Factory"/></strong> object. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To enable debugging, you must install the Direct2D Debug Layer.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FACTORY_OPTIONS']/*"/>	
    /// <msdn-id>dd368102</msdn-id>	
    /// <unmanaged>D2D1_FACTORY_OPTIONS</unmanaged>	
    /// <unmanaged-short>D2D1_FACTORY_OPTIONS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct FactoryOptions {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FACTORY_OPTIONS::debugLevel']/*"/>	
        /// <msdn-id>dd368102</msdn-id>	
        /// <unmanaged>D2D1_DEBUG_LEVEL debugLevel</unmanaged>	
        /// <unmanaged-short>D2D1_DEBUG_LEVEL debugLevel</unmanaged-short>	
        public SharpDX.Direct2D1.DebugLevel DebugLevel;
    }
    
    /// <summary>	
    /// <p>Describes compute shader support, which is an option on D3D10 feature level.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>You can fill this structure by passing a D2D1_ FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS structure to <strong><see cref="SharpDX.Direct2D1.EffectContext.CheckFeatureSupport"/></strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS']/*"/>	
    /// <msdn-id>hh871446</msdn-id>	
    /// <unmanaged>D2D1_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS</unmanaged>	
    /// <unmanaged-short>D2D1_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    internal  partial struct FeatureDataD3D10XHardwareOptions {	
        
        /// <summary>	
        /// <dd> <p>Shader model 4 compute shaders are supported.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS::computeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x']/*"/>	
        /// <msdn-id>hh871446</msdn-id>	
        /// <unmanaged>BOOL computeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x</unmanaged>	
        /// <unmanaged-short>BOOL computeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool ComputeShadersPlusRawAndStructuredBuffersViaShader4X;
    }
    
    /// <summary>	
    /// <p>Describes the support for doubles in shaders.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Fill this structure by passing a <see cref="SharpDX.Direct2D1.Feature.Doubles"/> structure to <strong><see cref="SharpDX.Direct2D1.EffectContext.CheckFeatureSupport"/></strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FEATURE_DATA_DOUBLES']/*"/>	
    /// <msdn-id>hh871445</msdn-id>	
    /// <unmanaged>D2D1_FEATURE_DATA_DOUBLES</unmanaged>	
    /// <unmanaged-short>D2D1_FEATURE_DATA_DOUBLES</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    internal  partial struct FeatureDataDoubles {	
        
        /// <summary>	
        /// <dd> <p>TRUE is doubles are supported within the shaders.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FEATURE_DATA_DOUBLES::doublePrecisionFloatShaderOps']/*"/>	
        /// <msdn-id>hh871445</msdn-id>	
        /// <unmanaged>BOOL doublePrecisionFloatShaderOps</unmanaged>	
        /// <unmanaged-short>BOOL doublePrecisionFloatShaderOps</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool DoublePrecisionFloatShaderOps;
    }
    
    /// <summary>	
    /// <p> Represents a tensor patch with 16 control points, 4 corner colors, and boundary flags. An <see cref="SharpDX.Direct2D1.GradientMesh"/> is made up of 1 or more gradient mesh patches. Use the <strong>GradientMeshPatch function</strong> or the <strong>GradientMeshPatchFromCoonsPatch function</strong> to create one. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The following image shows the numbering of control points on a tensor grid.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GRADIENT_MESH_PATCH']/*"/>	
    /// <msdn-id>dn890726</msdn-id>	
    /// <unmanaged>D2D1_GRADIENT_MESH_PATCH</unmanaged>	
    /// <unmanaged-short>D2D1_GRADIENT_MESH_PATCH</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct GradientMeshPatch {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GRADIENT_MESH_PATCH::point00']/*"/>	
        /// <msdn-id>dn890726</msdn-id>	
        /// <unmanaged>D2D_POINT_2F point00</unmanaged>	
        /// <unmanaged-short>D2D_POINT_2F point00</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector2 Point00;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GRADIENT_MESH_PATCH::point01']/*"/>	
        /// <msdn-id>dn890726</msdn-id>	
        /// <unmanaged>D2D_POINT_2F point01</unmanaged>	
        /// <unmanaged-short>D2D_POINT_2F point01</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector2 Point01;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GRADIENT_MESH_PATCH::point02']/*"/>	
        /// <msdn-id>dn890726</msdn-id>	
        /// <unmanaged>D2D_POINT_2F point02</unmanaged>	
        /// <unmanaged-short>D2D_POINT_2F point02</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector2 Point02;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GRADIENT_MESH_PATCH::point03']/*"/>	
        /// <msdn-id>dn890726</msdn-id>	
        /// <unmanaged>D2D_POINT_2F point03</unmanaged>	
        /// <unmanaged-short>D2D_POINT_2F point03</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector2 Point03;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GRADIENT_MESH_PATCH::point10']/*"/>	
        /// <msdn-id>dn890726</msdn-id>	
        /// <unmanaged>D2D_POINT_2F point10</unmanaged>	
        /// <unmanaged-short>D2D_POINT_2F point10</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector2 Point10;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GRADIENT_MESH_PATCH::point11']/*"/>	
        /// <msdn-id>dn890726</msdn-id>	
        /// <unmanaged>D2D_POINT_2F point11</unmanaged>	
        /// <unmanaged-short>D2D_POINT_2F point11</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector2 Point11;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GRADIENT_MESH_PATCH::point12']/*"/>	
        /// <msdn-id>dn890726</msdn-id>	
        /// <unmanaged>D2D_POINT_2F point12</unmanaged>	
        /// <unmanaged-short>D2D_POINT_2F point12</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector2 Point12;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GRADIENT_MESH_PATCH::point13']/*"/>	
        /// <msdn-id>dn890726</msdn-id>	
        /// <unmanaged>D2D_POINT_2F point13</unmanaged>	
        /// <unmanaged-short>D2D_POINT_2F point13</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector2 Point13;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GRADIENT_MESH_PATCH::point20']/*"/>	
        /// <msdn-id>dn890726</msdn-id>	
        /// <unmanaged>D2D_POINT_2F point20</unmanaged>	
        /// <unmanaged-short>D2D_POINT_2F point20</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector2 Point20;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GRADIENT_MESH_PATCH::point21']/*"/>	
        /// <msdn-id>dn890726</msdn-id>	
        /// <unmanaged>D2D_POINT_2F point21</unmanaged>	
        /// <unmanaged-short>D2D_POINT_2F point21</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector2 Point21;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GRADIENT_MESH_PATCH::point22']/*"/>	
        /// <msdn-id>dn890726</msdn-id>	
        /// <unmanaged>D2D_POINT_2F point22</unmanaged>	
        /// <unmanaged-short>D2D_POINT_2F point22</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector2 Point22;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GRADIENT_MESH_PATCH::point23']/*"/>	
        /// <msdn-id>dn890726</msdn-id>	
        /// <unmanaged>D2D_POINT_2F point23</unmanaged>	
        /// <unmanaged-short>D2D_POINT_2F point23</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector2 Point23;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GRADIENT_MESH_PATCH::point30']/*"/>	
        /// <msdn-id>dn890726</msdn-id>	
        /// <unmanaged>D2D_POINT_2F point30</unmanaged>	
        /// <unmanaged-short>D2D_POINT_2F point30</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector2 Point30;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GRADIENT_MESH_PATCH::point31']/*"/>	
        /// <msdn-id>dn890726</msdn-id>	
        /// <unmanaged>D2D_POINT_2F point31</unmanaged>	
        /// <unmanaged-short>D2D_POINT_2F point31</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector2 Point31;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GRADIENT_MESH_PATCH::point32']/*"/>	
        /// <msdn-id>dn890726</msdn-id>	
        /// <unmanaged>D2D_POINT_2F point32</unmanaged>	
        /// <unmanaged-short>D2D_POINT_2F point32</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector2 Point32;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GRADIENT_MESH_PATCH::point33']/*"/>	
        /// <msdn-id>dn890726</msdn-id>	
        /// <unmanaged>D2D_POINT_2F point33</unmanaged>	
        /// <unmanaged-short>D2D_POINT_2F point33</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector2 Point33;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GRADIENT_MESH_PATCH::color00']/*"/>	
        /// <msdn-id>dn890726</msdn-id>	
        /// <unmanaged>D2D_COLOR_F color00</unmanaged>	
        /// <unmanaged-short>D2D_COLOR_F color00</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawColor4 Color00;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GRADIENT_MESH_PATCH::color03']/*"/>	
        /// <msdn-id>dn890726</msdn-id>	
        /// <unmanaged>D2D_COLOR_F color03</unmanaged>	
        /// <unmanaged-short>D2D_COLOR_F color03</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawColor4 Color03;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GRADIENT_MESH_PATCH::color30']/*"/>	
        /// <msdn-id>dn890726</msdn-id>	
        /// <unmanaged>D2D_COLOR_F color30</unmanaged>	
        /// <unmanaged-short>D2D_COLOR_F color30</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawColor4 Color30;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GRADIENT_MESH_PATCH::color33']/*"/>	
        /// <msdn-id>dn890726</msdn-id>	
        /// <unmanaged>D2D_COLOR_F color33</unmanaged>	
        /// <unmanaged-short>D2D_COLOR_F color33</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawColor4 Color33;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GRADIENT_MESH_PATCH::topEdgeMode']/*"/>	
        /// <msdn-id>dn890726</msdn-id>	
        /// <unmanaged>D2D1_PATCH_EDGE_MODE topEdgeMode</unmanaged>	
        /// <unmanaged-short>D2D1_PATCH_EDGE_MODE topEdgeMode</unmanaged-short>	
        public SharpDX.Direct2D1.PatchEdgeMode TopEdgeMode;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GRADIENT_MESH_PATCH::leftEdgeMode']/*"/>	
        /// <msdn-id>dn890726</msdn-id>	
        /// <unmanaged>D2D1_PATCH_EDGE_MODE leftEdgeMode</unmanaged>	
        /// <unmanaged-short>D2D1_PATCH_EDGE_MODE leftEdgeMode</unmanaged-short>	
        public SharpDX.Direct2D1.PatchEdgeMode LeftEdgeMode;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GRADIENT_MESH_PATCH::bottomEdgeMode']/*"/>	
        /// <msdn-id>dn890726</msdn-id>	
        /// <unmanaged>D2D1_PATCH_EDGE_MODE bottomEdgeMode</unmanaged>	
        /// <unmanaged-short>D2D1_PATCH_EDGE_MODE bottomEdgeMode</unmanaged-short>	
        public SharpDX.Direct2D1.PatchEdgeMode BottomEdgeMode;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GRADIENT_MESH_PATCH::rightEdgeMode']/*"/>	
        /// <msdn-id>dn890726</msdn-id>	
        /// <unmanaged>D2D1_PATCH_EDGE_MODE rightEdgeMode</unmanaged>	
        /// <unmanaged-short>D2D1_PATCH_EDGE_MODE rightEdgeMode</unmanaged-short>	
        public SharpDX.Direct2D1.PatchEdgeMode RightEdgeMode;
    }
    
    /// <summary>	
    /// <p> Contains the position and color of a gradient stop. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Gradient stops can be specified in any order if they are at different positions. Two stops may share a position. In this case, the first stop specified is treated as the "low" stop (nearer 0.0f) and subsequent stops are treated as "higher" (nearer 1.0f). This behavior is useful if a caller wants an instant transition in the middle of a stop.</p><p>Typically, there are at least two points in a collection, although creation with only one stop is permitted. For example, one point is at position 0.0f, another point is at position 1.0f, and additional points are distributed in the [0, 1] range. Where the gradient progression is beyond the range of [0, 1], the stops are stored, but may affect the gradient. </p><p>When drawn, the [0, 1] range of positions is mapped to the brush, in a brush-dependent way. For details, see <strong><see cref="SharpDX.Direct2D1.LinearGradientBrush"/></strong> and <strong><see cref="SharpDX.Direct2D1.RadialGradientBrush"/></strong>. </p><p>Gradient stops with a position outside the [0, 1] range cannot be seen explicitly, but they can still affect the colors produced in the [0, 1] range. For example, a two-stop gradient 0.0f, Black}, {2.0f, White is indistinguishable visually from 0.0f, Black}, {1.0f, Mid-level gray. Also, the colors are clamped before interpolation.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GRADIENT_STOP']/*"/>	
    /// <msdn-id>dd368119</msdn-id>	
    /// <unmanaged>D2D1_GRADIENT_STOP</unmanaged>	
    /// <unmanaged-short>D2D1_GRADIENT_STOP</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct GradientStop {	
        
        /// <summary>	
        /// <dd> <p>A value that indicates the relative position of the gradient stop in the brush. This value must be in the [0.0f, 1.0f] range if the gradient stop is to be seen explicitly. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GRADIENT_STOP::position']/*"/>	
        /// <msdn-id>dd368119</msdn-id>	
        /// <unmanaged>float position</unmanaged>	
        /// <unmanaged-short>float position</unmanaged-short>	
        public float Position;
        
        /// <summary>	
        /// <dd> <p>The color of the gradient stop.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GRADIENT_STOP::color']/*"/>	
        /// <msdn-id>dd368119</msdn-id>	
        /// <unmanaged>D2D_COLOR_F color</unmanaged>	
        /// <unmanaged-short>D2D_COLOR_F color</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawColor4 Color;
    }
    
    /// <summary>	
    /// <p> Contains the <see cref="System.IntPtr"/>, pixel size, and presentation options for an <strong><see cref="SharpDX.Direct2D1.WindowRenderTarget"/></strong>.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Use this structure when you call the <strong>CreateHwndRenderTarget</strong> method to create a new <strong><see cref="SharpDX.Direct2D1.WindowRenderTarget"/></strong>.</p><p>For convenience, Direct2D provides the <strong>D2D1::HwndRenderTargetProperties</strong> function for creating new <strong><see cref="SharpDX.Direct2D1.HwndRenderTargetProperties"/></strong> structures.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_HWND_RENDER_TARGET_PROPERTIES']/*"/>	
    /// <msdn-id>dd368122</msdn-id>	
    /// <unmanaged>D2D1_HWND_RENDER_TARGET_PROPERTIES</unmanaged>	
    /// <unmanaged-short>D2D1_HWND_RENDER_TARGET_PROPERTIES</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct HwndRenderTargetProperties {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_HWND_RENDER_TARGET_PROPERTIES::hwnd']/*"/>	
        /// <msdn-id>dd368122</msdn-id>	
        /// <unmanaged>HWND hwnd</unmanaged>	
        /// <unmanaged-short>HWND hwnd</unmanaged-short>	
        public System.IntPtr Hwnd;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_HWND_RENDER_TARGET_PROPERTIES::pixelSize']/*"/>	
        /// <msdn-id>dd368122</msdn-id>	
        /// <unmanaged>D2D_SIZE_U pixelSize</unmanaged>	
        /// <unmanaged-short>D2D_SIZE_U pixelSize</unmanaged-short>	
        public SharpDX.Size2 PixelSize;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_HWND_RENDER_TARGET_PROPERTIES::presentOptions']/*"/>	
        /// <msdn-id>dd368122</msdn-id>	
        /// <unmanaged>D2D1_PRESENT_OPTIONS presentOptions</unmanaged>	
        /// <unmanaged-short>D2D1_PRESENT_OPTIONS presentOptions</unmanaged-short>	
        public SharpDX.Direct2D1.PresentOptions PresentOptions;
    }
    
    /// <summary>	
    /// <p>Describes image brush features.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_IMAGE_BRUSH_PROPERTIES']/*"/>	
    /// <msdn-id>hh404308</msdn-id>	
    /// <unmanaged>D2D1_IMAGE_BRUSH_PROPERTIES</unmanaged>	
    /// <unmanaged-short>D2D1_IMAGE_BRUSH_PROPERTIES</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct ImageBrushProperties {	
        
        /// <summary>	
        /// <dd> <p>The source rectangle in the image space from which the image will be tiled or interpolated.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_IMAGE_BRUSH_PROPERTIES::sourceRectangle']/*"/>	
        /// <msdn-id>hh404308</msdn-id>	
        /// <unmanaged>D2D_RECT_F sourceRectangle</unmanaged>	
        /// <unmanaged-short>D2D_RECT_F sourceRectangle</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawRectangleF SourceRectangle;
        
        /// <summary>	
        /// <dd> <p>The extend mode in the image x-axis.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_IMAGE_BRUSH_PROPERTIES::extendModeX']/*"/>	
        /// <msdn-id>hh404308</msdn-id>	
        /// <unmanaged>D2D1_EXTEND_MODE extendModeX</unmanaged>	
        /// <unmanaged-short>D2D1_EXTEND_MODE extendModeX</unmanaged-short>	
        public SharpDX.Direct2D1.ExtendMode ExtendModeX;
        
        /// <summary>	
        /// <dd> <p>The extend mode in the image y-axis.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_IMAGE_BRUSH_PROPERTIES::extendModeY']/*"/>	
        /// <msdn-id>hh404308</msdn-id>	
        /// <unmanaged>D2D1_EXTEND_MODE extendModeY</unmanaged>	
        /// <unmanaged-short>D2D1_EXTEND_MODE extendModeY</unmanaged-short>	
        public SharpDX.Direct2D1.ExtendMode ExtendModeY;
        
        /// <summary>	
        /// <dd> <p>The interpolation mode to use when scaling the image brush.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_IMAGE_BRUSH_PROPERTIES::interpolationMode']/*"/>	
        /// <msdn-id>hh404308</msdn-id>	
        /// <unmanaged>D2D1_INTERPOLATION_MODE interpolationMode</unmanaged>	
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE interpolationMode</unmanaged-short>	
        public SharpDX.Direct2D1.InterpolationMode InterpolationMode;
    }
    
    /// <summary>	
    /// <p>Represents a Bezier segment to be used in the creation of an <strong><see cref="SharpDX.Direct2D1.Ink"/></strong> object.  This structure differs from <strong><see cref="SharpDX.Direct2D1.BezierSegment"/></strong> in that it is composed  of <strong><see cref="SharpDX.Direct2D1.InkPoint"/></strong>s, which contain a radius in addition to x- and y-coordinates. </p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INK_BEZIER_SEGMENT']/*"/>	
    /// <msdn-id>dn890751</msdn-id>	
    /// <unmanaged>D2D1_INK_BEZIER_SEGMENT</unmanaged>	
    /// <unmanaged-short>D2D1_INK_BEZIER_SEGMENT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct InkBezierSegment {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INK_BEZIER_SEGMENT::point1']/*"/>	
        /// <msdn-id>dn890751</msdn-id>	
        /// <unmanaged>D2D1_INK_POINT point1</unmanaged>	
        /// <unmanaged-short>D2D1_INK_POINT point1</unmanaged-short>	
        public SharpDX.Direct2D1.InkPoint Point1;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INK_BEZIER_SEGMENT::point2']/*"/>	
        /// <msdn-id>dn890751</msdn-id>	
        /// <unmanaged>D2D1_INK_POINT point2</unmanaged>	
        /// <unmanaged-short>D2D1_INK_POINT point2</unmanaged-short>	
        public SharpDX.Direct2D1.InkPoint Point2;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INK_BEZIER_SEGMENT::point3']/*"/>	
        /// <msdn-id>dn890751</msdn-id>	
        /// <unmanaged>D2D1_INK_POINT point3</unmanaged>	
        /// <unmanaged-short>D2D1_INK_POINT point3</unmanaged-short>	
        public SharpDX.Direct2D1.InkPoint Point3;
    }
    
    /// <summary>	
    /// <p>Represents a point, radius pair that makes up part of a <strong><see cref="SharpDX.Direct2D1.InkBezierSegment"/></strong>.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INK_POINT']/*"/>	
    /// <msdn-id>dn890752</msdn-id>	
    /// <unmanaged>D2D1_INK_POINT</unmanaged>	
    /// <unmanaged-short>D2D1_INK_POINT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct InkPoint {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INK_POINT::x']/*"/>	
        /// <msdn-id>dn890752</msdn-id>	
        /// <unmanaged>float x</unmanaged>	
        /// <unmanaged-short>float x</unmanaged-short>	
        public float X;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INK_POINT::y']/*"/>	
        /// <msdn-id>dn890752</msdn-id>	
        /// <unmanaged>float y</unmanaged>	
        /// <unmanaged-short>float y</unmanaged-short>	
        public float Y;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INK_POINT::radius']/*"/>	
        /// <msdn-id>dn890752</msdn-id>	
        /// <unmanaged>float radius</unmanaged>	
        /// <unmanaged-short>float radius</unmanaged-short>	
        public float Radius;
    }
    
    /// <summary>	
    /// <p> Defines the general pen tip shape and the transform used in an <strong><see cref="SharpDX.Direct2D1.InkStyle"/></strong> object. </p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INK_STYLE_PROPERTIES']/*"/>	
    /// <msdn-id>dn890737</msdn-id>	
    /// <unmanaged>D2D1_INK_STYLE_PROPERTIES</unmanaged>	
    /// <unmanaged-short>D2D1_INK_STYLE_PROPERTIES</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct InkStyleProperties {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INK_STYLE_PROPERTIES::nibShape']/*"/>	
        /// <msdn-id>dn890737</msdn-id>	
        /// <unmanaged>D2D1_INK_NIB_SHAPE nibShape</unmanaged>	
        /// <unmanaged-short>D2D1_INK_NIB_SHAPE nibShape</unmanaged-short>	
        public SharpDX.Direct2D1.InkNibShape NibShape;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INK_STYLE_PROPERTIES::nibTransform']/*"/>	
        /// <msdn-id>dn890737</msdn-id>	
        /// <unmanaged>D2D_MATRIX_3X2_F nibTransform</unmanaged>	
        /// <unmanaged-short>D2D_MATRIX_3X2_F nibTransform</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawMatrix3x2 NibTransform;
    }
    
    /// <summary>	
    /// <p>Describes the options that transforms may set on input textures.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INPUT_DESCRIPTION']/*"/>	
    /// <msdn-id>hh404310</msdn-id>	
    /// <unmanaged>D2D1_INPUT_DESCRIPTION</unmanaged>	
    /// <unmanaged-short>D2D1_INPUT_DESCRIPTION</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct InputDescription {	
        
        /// <summary>	
        /// <dd> <p>The type of filter to apply to the input texture.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INPUT_DESCRIPTION::filter']/*"/>	
        /// <msdn-id>hh404310</msdn-id>	
        /// <unmanaged>D2D1_FILTER filter</unmanaged>	
        /// <unmanaged-short>D2D1_FILTER filter</unmanaged-short>	
        public SharpDX.Direct2D1.Filter Filter;
        
        /// <summary>	
        /// <dd> <p>The mip level to retrieve from the upstream transform, if specified.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INPUT_DESCRIPTION::levelOfDetailCount']/*"/>	
        /// <msdn-id>hh404310</msdn-id>	
        /// <unmanaged>unsigned int levelOfDetailCount</unmanaged>	
        /// <unmanaged-short>unsigned int levelOfDetailCount</unmanaged-short>	
        public int LevelOfDetailCount;
    }
    
    /// <summary>	
    /// <p>A description of a single element to the vertex layout.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This structure is a subset of <strong><see cref="SharpDX.Direct3D11.InputElement"/></strong> that omits fields required to define a vertex layout.</p><p>If the <strong>D2D1_APPEND_ALIGNED_ELEMENT</strong> constant is used for  <strong>alignedByteOffset</strong>, the elements will be packed contiguously for convenience.	
    /// </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INPUT_ELEMENT_DESC']/*"/>	
    /// <msdn-id>hh404312</msdn-id>	
    /// <unmanaged>D2D1_INPUT_ELEMENT_DESC</unmanaged>	
    /// <unmanaged-short>D2D1_INPUT_ELEMENT_DESC</unmanaged-short>	
    public  partial struct InputElement {	
        
        /// <summary>	
        /// <dd> <p>The HLSL semantic associated with this element in a shader input-signature.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INPUT_ELEMENT_DESC::semanticName']/*"/>	
        /// <msdn-id>hh404312</msdn-id>	
        /// <unmanaged>const char* semanticName</unmanaged>	
        /// <unmanaged-short>char semanticName</unmanaged-short>	
        public string SemanticName;
        
        /// <summary>	
        /// <dd> <p>The semantic index for the element. A semantic index modifies a semantic, with an integer index number. A semantic index is only needed in a case where there is more than one element with the same semantic. For example, a 4x4 matrix would have four components each with the semantic name matrix; however, each of the four components would have different semantic indices (0, 1, 2, and 3).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INPUT_ELEMENT_DESC::semanticIndex']/*"/>	
        /// <msdn-id>hh404312</msdn-id>	
        /// <unmanaged>unsigned int semanticIndex</unmanaged>	
        /// <unmanaged-short>unsigned int semanticIndex</unmanaged-short>	
        public int SemanticIndex;
        
        /// <summary>	
        /// <dd> <p>The data type of the element data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INPUT_ELEMENT_DESC::format']/*"/>	
        /// <msdn-id>hh404312</msdn-id>	
        /// <unmanaged>DXGI_FORMAT format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT format</unmanaged-short>	
        public SharpDX.DXGI.Format Format;
        
        /// <summary>	
        /// <dd> <p>An integer value that identifies the input-assembler. Valid values are between 0 and 15.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INPUT_ELEMENT_DESC::inputSlot']/*"/>	
        /// <msdn-id>hh404312</msdn-id>	
        /// <unmanaged>unsigned int inputSlot</unmanaged>	
        /// <unmanaged-short>unsigned int inputSlot</unmanaged-short>	
        public int Slot;
        
        /// <summary>	
        /// <dd> <p>The offset in bytes between each element.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INPUT_ELEMENT_DESC::alignedByteOffset']/*"/>	
        /// <msdn-id>hh404312</msdn-id>	
        /// <unmanaged>unsigned int alignedByteOffset</unmanaged>	
        /// <unmanaged-short>unsigned int alignedByteOffset</unmanaged-short>	
        public int AlignedByteOffset;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public System.IntPtr SemanticName;
            public int SemanticIndex;
            public SharpDX.DXGI.Format Format;
            public int Slot;
            public int AlignedByteOffset;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                if (this.SemanticName != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.SemanticName);		
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.SemanticName = ( @ref.SemanticName == IntPtr.Zero )?null:Marshal.PtrToStringAnsi(@ref.SemanticName);
            this.SemanticIndex = @ref.SemanticIndex;
            this.Format = @ref.Format;
            this.Slot = @ref.Slot;
            this.AlignedByteOffset = @ref.AlignedByteOffset;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.SemanticName = ( this.SemanticName == null )?IntPtr.Zero : Utilities.StringToHGlobalAnsi(this.SemanticName);
            @ref.SemanticIndex = this.SemanticIndex;
            @ref.Format = this.Format;
            @ref.Slot = this.Slot;
            @ref.AlignedByteOffset = this.AlignedByteOffset;
		
		}
    }
    
    /// <summary>	
    /// <p> Contains the content bounds, mask information, opacity settings, and other options for a layer resource. </p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LAYER_PARAMETERS']/*"/>	
    /// <msdn-id>dd368127</msdn-id>	
    /// <unmanaged>D2D1_LAYER_PARAMETERS</unmanaged>	
    /// <unmanaged-short>D2D1_LAYER_PARAMETERS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct LayerParameters {	
        
        /// <summary>	
        /// <dd> <p>The content bounds of the layer. Content outside these bounds is not guaranteed to render.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LAYER_PARAMETERS::contentBounds']/*"/>	
        /// <msdn-id>dd368127</msdn-id>	
        /// <unmanaged>D2D_RECT_F contentBounds</unmanaged>	
        /// <unmanaged-short>D2D_RECT_F contentBounds</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawRectangleF ContentBounds;
        
        /// <summary>	
        /// <dd> <p>The geometric mask specifies the area of the layer that is composited into the render target. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LAYER_PARAMETERS::geometricMask']/*"/>	
        /// <msdn-id>dd368127</msdn-id>	
        /// <unmanaged>ID2D1Geometry* geometricMask</unmanaged>	
        /// <unmanaged-short>ID2D1Geometry geometricMask</unmanaged-short>	
        internal System.IntPtr GeometricMaskPointer;
        
        /// <summary>	
        /// <dd> <p>A value that specifies the antialiasing mode for the geometricMask.  </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LAYER_PARAMETERS::maskAntialiasMode']/*"/>	
        /// <msdn-id>dd368127</msdn-id>	
        /// <unmanaged>D2D1_ANTIALIAS_MODE maskAntialiasMode</unmanaged>	
        /// <unmanaged-short>D2D1_ANTIALIAS_MODE maskAntialiasMode</unmanaged-short>	
        public SharpDX.Direct2D1.AntialiasMode MaskAntialiasMode;
        
        /// <summary>	
        /// <dd> <p> A value that specifies the transform that is applied to the geometric mask when composing the layer.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LAYER_PARAMETERS::maskTransform']/*"/>	
        /// <msdn-id>dd368127</msdn-id>	
        /// <unmanaged>D2D_MATRIX_3X2_F maskTransform</unmanaged>	
        /// <unmanaged-short>D2D_MATRIX_3X2_F maskTransform</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawMatrix3x2 MaskTransform;
        
        /// <summary>	
        /// <dd> <p>An opacity value that is applied uniformly to all resources in the layer when compositing to the target.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LAYER_PARAMETERS::opacity']/*"/>	
        /// <msdn-id>dd368127</msdn-id>	
        /// <unmanaged>float opacity</unmanaged>	
        /// <unmanaged-short>float opacity</unmanaged-short>	
        public float Opacity;
        
        /// <summary>	
        /// <dd> <p>A brush that is used to modify the opacity of the layer. The brush 	
        /// is mapped to the layer, and the alpha channel of each mapped brush pixel is multiplied against the corresponding layer pixel. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LAYER_PARAMETERS::opacityBrush']/*"/>	
        /// <msdn-id>dd368127</msdn-id>	
        /// <unmanaged>ID2D1Brush* opacityBrush</unmanaged>	
        /// <unmanaged-short>ID2D1Brush opacityBrush</unmanaged-short>	
        internal System.IntPtr OpacityBrushPointer;
        
        /// <summary>	
        /// <dd> <p> A value that specifies whether the layer intends to render text with ClearType antialiasing.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LAYER_PARAMETERS::layerOptions']/*"/>	
        /// <msdn-id>dd368127</msdn-id>	
        /// <unmanaged>D2D1_LAYER_OPTIONS layerOptions</unmanaged>	
        /// <unmanaged-short>D2D1_LAYER_OPTIONS layerOptions</unmanaged-short>	
        public SharpDX.Direct2D1.LayerOptions LayerOptions;
    }
    
    /// <summary>	
    /// <p>Contains the content bounds, mask information, opacity settings, and other options for a layer resource.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LAYER_PARAMETERS1']/*"/>	
    /// <msdn-id>hh847947</msdn-id>	
    /// <unmanaged>D2D1_LAYER_PARAMETERS1</unmanaged>	
    /// <unmanaged-short>D2D1_LAYER_PARAMETERS1</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct LayerParameters1 {	
        
        /// <summary>	
        /// <dd> <p>The content bounds of the layer. Content outside these bounds is not guaranteed to render.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LAYER_PARAMETERS1::contentBounds']/*"/>	
        /// <msdn-id>hh847947</msdn-id>	
        /// <unmanaged>D2D_RECT_F contentBounds</unmanaged>	
        /// <unmanaged-short>D2D_RECT_F contentBounds</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawRectangleF ContentBounds;
        
        /// <summary>	
        /// <dd> <p>The geometric mask specifies the area of the layer that is composited into the render target. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LAYER_PARAMETERS1::geometricMask']/*"/>	
        /// <msdn-id>hh847947</msdn-id>	
        /// <unmanaged>ID2D1Geometry* geometricMask</unmanaged>	
        /// <unmanaged-short>ID2D1Geometry geometricMask</unmanaged-short>	
        internal System.IntPtr GeometricMaskPointer;
        
        /// <summary>	
        /// <dd> <p>A value that specifies the antialiasing mode for the geometricMask.  </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LAYER_PARAMETERS1::maskAntialiasMode']/*"/>	
        /// <msdn-id>hh847947</msdn-id>	
        /// <unmanaged>D2D1_ANTIALIAS_MODE maskAntialiasMode</unmanaged>	
        /// <unmanaged-short>D2D1_ANTIALIAS_MODE maskAntialiasMode</unmanaged-short>	
        public SharpDX.Direct2D1.AntialiasMode MaskAntialiasMode;
        
        /// <summary>	
        /// <dd> <p> A value that specifies the transform that is applied to the geometric mask when composing the layer.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LAYER_PARAMETERS1::maskTransform']/*"/>	
        /// <msdn-id>hh847947</msdn-id>	
        /// <unmanaged>D2D_MATRIX_3X2_F maskTransform</unmanaged>	
        /// <unmanaged-short>D2D_MATRIX_3X2_F maskTransform</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawMatrix3x2 MaskTransform;
        
        /// <summary>	
        /// <dd> <p>An opacity value that is applied uniformly to all resources in the layer when compositing to the target.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LAYER_PARAMETERS1::opacity']/*"/>	
        /// <msdn-id>hh847947</msdn-id>	
        /// <unmanaged>float opacity</unmanaged>	
        /// <unmanaged-short>float opacity</unmanaged-short>	
        public float Opacity;
        
        /// <summary>	
        /// <dd> <p>A brush that is used to modify the opacity of the layer. The brush 	
        /// is mapped to the layer, and the alpha channel of each mapped brush pixel is multiplied against the corresponding layer pixel. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LAYER_PARAMETERS1::opacityBrush']/*"/>	
        /// <msdn-id>hh847947</msdn-id>	
        /// <unmanaged>ID2D1Brush* opacityBrush</unmanaged>	
        /// <unmanaged-short>ID2D1Brush opacityBrush</unmanaged-short>	
        internal System.IntPtr OpacityBrushPointer;
        
        /// <summary>	
        /// <dd> <p>Additional options for the layer creation.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LAYER_PARAMETERS1::layerOptions']/*"/>	
        /// <msdn-id>hh847947</msdn-id>	
        /// <unmanaged>D2D1_LAYER_OPTIONS1 layerOptions</unmanaged>	
        /// <unmanaged-short>D2D1_LAYER_OPTIONS1 layerOptions</unmanaged-short>	
        public SharpDX.Direct2D1.LayerOptions1 LayerOptions;
    }
    
    /// <summary>	
    /// <p> Contains the starting point and endpoint of the gradient axis for an <strong><see cref="SharpDX.Direct2D1.LinearGradientBrush"/></strong>. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Use this method when creating new <strong><see cref="SharpDX.Direct2D1.LinearGradientBrush"/></strong> objects with the <strong>CreateLinearGradientBrush</strong> method. For convenience, Direct2D provides the <strong>D2D1::LinearGradientBrushProperties</strong> helper function for creating new <strong><see cref="SharpDX.Direct2D1.LinearGradientBrushProperties"/></strong> structures.</p><p>The following illustration shows how a linear gradient changes as you change its start and end points.  For the first gradient, the start point is set to (0,0) and the end point to (150, 50); this creates a diagonal gradient that starts at the upper-left corner and extends to the lower-right corner of the area being painted. When you set the start point to (0, 25) and the end point to (150, 25), a horizontal gradient is created. Similarly, setting the start point  to (75, 0) and the end point to (75, 50) creates a vertical gradient. Setting the start point to  (0, 50) and the end point to (150, 0)  creates a diagonal gradient that starts at the lower-left corner and extends to the upper-right corner of the area being painted.</p><p></p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES']/*"/>	
    /// <msdn-id>dd368128</msdn-id>	
    /// <unmanaged>D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES</unmanaged>	
    /// <unmanaged-short>D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct LinearGradientBrushProperties {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES::startPoint']/*"/>	
        /// <msdn-id>dd368128</msdn-id>	
        /// <unmanaged>D2D_POINT_2F startPoint</unmanaged>	
        /// <unmanaged-short>D2D_POINT_2F startPoint</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector2 StartPoint;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES::endPoint']/*"/>	
        /// <msdn-id>dd368128</msdn-id>	
        /// <unmanaged>D2D_POINT_2F endPoint</unmanaged>	
        /// <unmanaged-short>D2D_POINT_2F endPoint</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector2 EndPoint;
    }
    
    /// <summary>	
    /// <p> Describes mapped memory from the <strong><see cref="SharpDX.Direct2D1.Bitmap1.Map"/></strong> API.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The mapped rectangle is used to map a rectangle into the caller's address space.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_MAPPED_RECT']/*"/>	
    /// <msdn-id>hh404314</msdn-id>	
    /// <unmanaged>D2D1_MAPPED_RECT</unmanaged>	
    /// <unmanaged-short>D2D1_MAPPED_RECT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    internal  partial struct MappedRectangle {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_MAPPED_RECT::pitch']/*"/>	
        /// <msdn-id>hh404314</msdn-id>	
        /// <unmanaged>unsigned int pitch</unmanaged>	
        /// <unmanaged-short>unsigned int pitch</unmanaged-short>	
        public int Pitch;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_MAPPED_RECT::bits']/*"/>	
        /// <msdn-id>hh404314</msdn-id>	
        /// <unmanaged>unsigned char* bits</unmanaged>	
        /// <unmanaged-short>unsigned char bits</unmanaged-short>	
        public System.IntPtr Bits;
    }
    
    /// <summary>	
    /// <p> Contains the data format and alpha mode for a bitmap or render target. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>For more information about the pixel formats and alpha modes supported by each render target, see Supported Pixel Formats and Alpha Modes.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PIXEL_FORMAT']/*"/>	
    /// <msdn-id>dd368138</msdn-id>	
    /// <unmanaged>D2D1_PIXEL_FORMAT</unmanaged>	
    /// <unmanaged-short>D2D1_PIXEL_FORMAT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct PixelFormat {	
        
        /// <summary>	
        /// <dd> <p>A value that specifies the size and arrangement of channels in each pixel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PIXEL_FORMAT::format']/*"/>	
        /// <msdn-id>dd368138</msdn-id>	
        /// <unmanaged>DXGI_FORMAT format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT format</unmanaged-short>	
        public SharpDX.DXGI.Format Format;
        
        /// <summary>	
        /// <dd> <p>A value that specifies whether the alpha channel is using pre-multiplied alpha, straight alpha, whether it should be ignored and considered opaque, or whether it is unkown.  </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PIXEL_FORMAT::alphaMode']/*"/>	
        /// <msdn-id>dd368138</msdn-id>	
        /// <unmanaged>D2D1_ALPHA_MODE alphaMode</unmanaged>	
        /// <unmanaged-short>D2D1_ALPHA_MODE alphaMode</unmanaged-short>	
        public SharpDX.Direct2D1.AlphaMode AlphaMode;
    }
    
    /// <summary>	
    /// <p>Describes a point on a path geometry.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINT_DESCRIPTION']/*"/>	
    /// <msdn-id>hh404318</msdn-id>	
    /// <unmanaged>D2D1_POINT_DESCRIPTION</unmanaged>	
    /// <unmanaged-short>D2D1_POINT_DESCRIPTION</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct PointDescription {	
        
        /// <summary>	
        /// <dd> <p>The end point after walking the path.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINT_DESCRIPTION::point']/*"/>	
        /// <msdn-id>hh404318</msdn-id>	
        /// <unmanaged>D2D_POINT_2F point</unmanaged>	
        /// <unmanaged-short>D2D_POINT_2F point</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector2 Point;
        
        /// <summary>	
        /// <dd> <p>A unit vector indicating the tangent point.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINT_DESCRIPTION::unitTangentVector']/*"/>	
        /// <msdn-id>hh404318</msdn-id>	
        /// <unmanaged>D2D_POINT_2F unitTangentVector</unmanaged>	
        /// <unmanaged-short>D2D_POINT_2F unitTangentVector</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector2 UnitTangentVector;
        
        /// <summary>	
        /// <dd> <p>The index of the segment on which point resides. This index is global to the entire path, not just to a particular figure.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINT_DESCRIPTION::endSegment']/*"/>	
        /// <msdn-id>hh404318</msdn-id>	
        /// <unmanaged>unsigned int endSegment</unmanaged>	
        /// <unmanaged-short>unsigned int endSegment</unmanaged-short>	
        public int EndSegment;
        
        /// <summary>	
        /// <dd> <p>The index of the figure on which point resides.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINT_DESCRIPTION::endFigure']/*"/>	
        /// <msdn-id>hh404318</msdn-id>	
        /// <unmanaged>unsigned int endFigure</unmanaged>	
        /// <unmanaged-short>unsigned int endFigure</unmanaged-short>	
        public int EndFigure;
        
        /// <summary>	
        /// <dd> <p>The length of the section of the path stretching from the start of the path  to the start of <strong>endSegment</strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINT_DESCRIPTION::lengthToEndSegment']/*"/>	
        /// <msdn-id>hh404318</msdn-id>	
        /// <unmanaged>float lengthToEndSegment</unmanaged>	
        /// <unmanaged-short>float lengthToEndSegment</unmanaged-short>	
        public float LengthToEndSegment;
    }
    
    /// <summary>	
    /// <p>The creation properties for a <strong><see cref="SharpDX.Direct2D1.PrintControl"/></strong> object.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PRINT_CONTROL_PROPERTIES']/*"/>	
    /// <msdn-id>hh847949</msdn-id>	
    /// <unmanaged>D2D1_PRINT_CONTROL_PROPERTIES</unmanaged>	
    /// <unmanaged-short>D2D1_PRINT_CONTROL_PROPERTIES</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct PrintControlProperties {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PRINT_CONTROL_PROPERTIES::fontSubset']/*"/>	
        /// <msdn-id>hh847949</msdn-id>	
        /// <unmanaged>D2D1_PRINT_FONT_SUBSET_MODE fontSubset</unmanaged>	
        /// <unmanaged-short>D2D1_PRINT_FONT_SUBSET_MODE fontSubset</unmanaged-short>	
        public SharpDX.Direct2D1.PrintFontSubsetMode FontSubset;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PRINT_CONTROL_PROPERTIES::rasterDPI']/*"/>	
        /// <msdn-id>hh847949</msdn-id>	
        /// <unmanaged>float rasterDPI</unmanaged>	
        /// <unmanaged-short>float rasterDPI</unmanaged-short>	
        public float RasterDPI;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PRINT_CONTROL_PROPERTIES::colorSpace']/*"/>	
        /// <msdn-id>hh847949</msdn-id>	
        /// <unmanaged>D2D1_COLOR_SPACE colorSpace</unmanaged>	
        /// <unmanaged-short>D2D1_COLOR_SPACE colorSpace</unmanaged-short>	
        public SharpDX.Direct2D1.ColorSpace ColorSpace;
    }
    
    /// <summary>	
    /// <p>Defines a property binding to a pair of functions which get and set the corresponding property. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <strong>propertyName</strong> is used to cross-correlate the property binding with the registration XML. The <strong>propertyName</strong> must be present in the XML call or the registration will fail. All properties must be bound.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_BINDING']/*"/>	
    /// <msdn-id>hh404320</msdn-id>	
    /// <unmanaged>D2D1_PROPERTY_BINDING</unmanaged>	
    /// <unmanaged-short>D2D1_PROPERTY_BINDING</unmanaged-short>	
    internal  partial class PropertyBinding {	
        
        /// <summary>	
        /// <dd> <p> The name of the property.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_BINDING::propertyName']/*"/>	
        /// <msdn-id>hh404320</msdn-id>	
        /// <unmanaged>const wchar_t* propertyName</unmanaged>	
        /// <unmanaged-short>wchar_t propertyName</unmanaged-short>	
        public string PropertyName;
        
        /// <summary>	
        /// <dd> <p> The function that will receive the data to set.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_BINDING::setFunction']/*"/>	
        /// <msdn-id>hh404320</msdn-id>	
        /// <unmanaged>__function__stdcall* setFunction</unmanaged>	
        /// <unmanaged-short>__function__stdcall setFunction</unmanaged-short>	
        internal System.IntPtr SetFunction;
        
        /// <summary>	
        /// <dd> <p>The function that will be asked to write the output data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_BINDING::getFunction']/*"/>	
        /// <msdn-id>hh404320</msdn-id>	
        /// <unmanaged>__function__stdcall* getFunction</unmanaged>	
        /// <unmanaged-short>__function__stdcall getFunction</unmanaged-short>	
        internal System.IntPtr GetFunction;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public System.IntPtr PropertyName;
            public System.IntPtr SetFunction;
            public System.IntPtr GetFunction;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                if (this.PropertyName != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.PropertyName);		
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.PropertyName = ( @ref.PropertyName == IntPtr.Zero )?null:Marshal.PtrToStringUni(@ref.PropertyName);
            this.SetFunction = @ref.SetFunction;
            this.GetFunction = @ref.GetFunction;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.PropertyName = ( this.PropertyName == null )?IntPtr.Zero : Utilities.StringToHGlobalUni(this.PropertyName);
            @ref.SetFunction = this.SetFunction;
            @ref.GetFunction = this.GetFunction;
		
		}
    }
    
    /// <summary>	
    /// <p> Contains the control point and end point for a quadratic Bezier segment.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_QUADRATIC_BEZIER_SEGMENT']/*"/>	
    /// <msdn-id>dd368147</msdn-id>	
    /// <unmanaged>D2D1_QUADRATIC_BEZIER_SEGMENT</unmanaged>	
    /// <unmanaged-short>D2D1_QUADRATIC_BEZIER_SEGMENT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct QuadraticBezierSegment {	
        
        /// <summary>	
        /// <dd> <p>The control point of the quadratic Bezier segment.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_QUADRATIC_BEZIER_SEGMENT::point1']/*"/>	
        /// <msdn-id>dd368147</msdn-id>	
        /// <unmanaged>D2D_POINT_2F point1</unmanaged>	
        /// <unmanaged-short>D2D_POINT_2F point1</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector2 Point1;
        
        /// <summary>	
        /// <dd> <p>The end point of the quadratic Bezier segment.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_QUADRATIC_BEZIER_SEGMENT::point2']/*"/>	
        /// <msdn-id>dd368147</msdn-id>	
        /// <unmanaged>D2D_POINT_2F point2</unmanaged>	
        /// <unmanaged-short>D2D_POINT_2F point2</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector2 Point2;
    }
    
    /// <summary>	
    /// <p> Contains the gradient origin offset and the size and position of the gradient ellipse for an <strong><see cref="SharpDX.Direct2D1.RadialGradientBrush"/></strong>. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Different values for <em>center</em>,  <em>gradientOriginOffset</em>,  <em>radiusX</em> and/or <em>radiusY</em> produce different gradients.   The following illustration shows several radial gradients that have different gradient origin offsets, creating the appearance of the light illuminating the circles from different angles.</p><p></p><p>For convenience, Direct2D provides the <strong>D2D1::RadialGradientBrushProperties</strong> function for creating new <strong>D2D1_RADIAL_GRADIENT_BRUSH</strong> structures.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES']/*"/>	
    /// <msdn-id>dd368149</msdn-id>	
    /// <unmanaged>D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES</unmanaged>	
    /// <unmanaged-short>D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct RadialGradientBrushProperties {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES::center']/*"/>	
        /// <msdn-id>dd368149</msdn-id>	
        /// <unmanaged>D2D_POINT_2F center</unmanaged>	
        /// <unmanaged-short>D2D_POINT_2F center</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector2 Center;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES::gradientOriginOffset']/*"/>	
        /// <msdn-id>dd368149</msdn-id>	
        /// <unmanaged>D2D_POINT_2F gradientOriginOffset</unmanaged>	
        /// <unmanaged-short>D2D_POINT_2F gradientOriginOffset</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector2 GradientOriginOffset;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES::radiusX']/*"/>	
        /// <msdn-id>dd368149</msdn-id>	
        /// <unmanaged>float radiusX</unmanaged>	
        /// <unmanaged-short>float radiusX</unmanaged-short>	
        public float RadiusX;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES::radiusY']/*"/>	
        /// <msdn-id>dd368149</msdn-id>	
        /// <unmanaged>float radiusY</unmanaged>	
        /// <unmanaged-short>float radiusY</unmanaged-short>	
        public float RadiusY;
    }
    
    /// <summary>	
    /// <p>Describes limitations to be applied to an imaging effect renderer.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The renderer can allocate tiles larger than the minimum tile allocation. The allocated tiles will be powers of two of the minimum size on each axis, except that the size on each axis will not exceed the guaranteed maximum texture size for the device feature level. </p><p>The <strong>minimumPixelRenderExtent</strong> is the size of the square tile below which the renderer will expand the tile allocation rather than attempting to subdivide the rendering tile any further. When this threshold is reached, the allocation tile size is expanded. This might occur repeatedly until rendering can either proceed or it is determined that the graph cannot be rendered.</p><p>The buffer precision is used for intermediate buffers if it is otherwise unspecified by the effects or the internal effect topology. The application can also use the <strong>Output.BufferPrecision</strong> method to specify the output precision for a particular effect. This takes precedence over the context precision. In addition, the effect might set a different precision internally if required. If the buffer type on the context is <strong><see cref="SharpDX.Direct2D1.BufferPrecision.Unknown"/></strong> and otherwise not specified by the effect or transform, the precision of the output will be the maximum precision of the inputs to the transform. The buffer precision does not affect the number of channels used. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RENDERING_CONTROLS']/*"/>	
    /// <msdn-id>hh404322</msdn-id>	
    /// <unmanaged>D2D1_RENDERING_CONTROLS</unmanaged>	
    /// <unmanaged-short>D2D1_RENDERING_CONTROLS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct RenderingControls {	
        
        /// <summary>	
        /// <dd> <p>The buffer precision used by default if the buffer precision is not otherwise specified by the effect or the transform.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RENDERING_CONTROLS::bufferPrecision']/*"/>	
        /// <msdn-id>hh404322</msdn-id>	
        /// <unmanaged>D2D1_BUFFER_PRECISION bufferPrecision</unmanaged>	
        /// <unmanaged-short>D2D1_BUFFER_PRECISION bufferPrecision</unmanaged-short>	
        public SharpDX.Direct2D1.BufferPrecision BufferPrecision;
        
        /// <summary>	
        /// <dd> <p>The tile allocation size to be used by the imaging effect renderer.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RENDERING_CONTROLS::tileSize']/*"/>	
        /// <msdn-id>hh404322</msdn-id>	
        /// <unmanaged>D2D_SIZE_U tileSize</unmanaged>	
        /// <unmanaged-short>D2D_SIZE_U tileSize</unmanaged-short>	
        public SharpDX.Size2 TileSize;
    }
    
    /// <summary>	
    /// <p> Contains rendering options (hardware or software), pixel format, DPI information, remoting options, and Direct3D support requirements for a render target. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Use this structure when creating a render target, or use it with the <strong><see cref="SharpDX.Direct2D1.RenderTarget.IsSupported"/></strong> method to check the properties supported by an existing render target.</p><p>As a convenience, Direct2D provides the <strong>D2D1::RenderTargetProperties</strong> helper function for creating <strong><see cref="SharpDX.Direct2D1.RenderTargetProperties"/></strong> structures. An easy way to create a <strong><see cref="SharpDX.Direct2D1.RenderTargetProperties"/></strong> structure that works for most render targets is to call the function without specifying any parameters. Doing so creates a <strong><see cref="SharpDX.Direct2D1.RenderTargetProperties"/></strong> structure that has its fields set to default values. For more information, see   <strong>D2D1::RenderTargetProperties</strong>.</p><p>Not all render targets support hardware rendering. For a list, see the Render Targets Overview.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RENDER_TARGET_PROPERTIES']/*"/>	
    /// <msdn-id>dd368155</msdn-id>	
    /// <unmanaged>D2D1_RENDER_TARGET_PROPERTIES</unmanaged>	
    /// <unmanaged-short>D2D1_RENDER_TARGET_PROPERTIES</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct RenderTargetProperties {	
        
        /// <summary>	
        /// <dd> <p>A value that specifies whether the render target should force hardware or software rendering. A value of <strong><see cref="SharpDX.Direct2D1.RenderTargetType.Default"/></strong> specifies that the render target should use hardware rendering if it is available; otherwise, it uses software rendering. Note that WIC bitmap render targets do not support hardware rendering.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RENDER_TARGET_PROPERTIES::type']/*"/>	
        /// <msdn-id>dd368155</msdn-id>	
        /// <unmanaged>D2D1_RENDER_TARGET_TYPE type</unmanaged>	
        /// <unmanaged-short>D2D1_RENDER_TARGET_TYPE type</unmanaged-short>	
        public SharpDX.Direct2D1.RenderTargetType Type;
        
        /// <summary>	
        /// <dd> <p>The pixel format and alpha mode of the render target. You can use the <strong>D2D1::PixelFormat</strong> function to create a pixel format that specifies that Direct2D should select the pixel format and alpha mode for you. For a list of pixel formats and alpha modes supported by each render target, see Supported Pixel Formats and Alpha Modes.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RENDER_TARGET_PROPERTIES::pixelFormat']/*"/>	
        /// <msdn-id>dd368155</msdn-id>	
        /// <unmanaged>D2D1_PIXEL_FORMAT pixelFormat</unmanaged>	
        /// <unmanaged-short>D2D1_PIXEL_FORMAT pixelFormat</unmanaged-short>	
        public SharpDX.Direct2D1.PixelFormat PixelFormat;
        
        /// <summary>	
        /// <dd> <p>The horizontal DPI of the render target.  To use the default DPI, set <em>dpiX</em> and <em>dpiY</em> to 0. For more information, see the Remarks section. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RENDER_TARGET_PROPERTIES::dpiX']/*"/>	
        /// <msdn-id>dd368155</msdn-id>	
        /// <unmanaged>float dpiX</unmanaged>	
        /// <unmanaged-short>float dpiX</unmanaged-short>	
        public float DpiX;
        
        /// <summary>	
        /// <dd> <p>The vertical DPI of the render target. To use the default DPI, set <em>dpiX</em> and <em>dpiY</em> to 0.  For more information, see the Remarks section. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RENDER_TARGET_PROPERTIES::dpiY']/*"/>	
        /// <msdn-id>dd368155</msdn-id>	
        /// <unmanaged>float dpiY</unmanaged>	
        /// <unmanaged-short>float dpiY</unmanaged-short>	
        public float DpiY;
        
        /// <summary>	
        /// <dd> <p>A value that specifies how the render target is remoted and whether it should be GDI-compatible.  Set to <strong><see cref="SharpDX.Direct2D1.RenderTargetUsage.None"/></strong> to create a render target that is not compatible with GDI and uses Direct3D command-stream remoting if it  is available. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RENDER_TARGET_PROPERTIES::usage']/*"/>	
        /// <msdn-id>dd368155</msdn-id>	
        /// <unmanaged>D2D1_RENDER_TARGET_USAGE usage</unmanaged>	
        /// <unmanaged-short>D2D1_RENDER_TARGET_USAGE usage</unmanaged-short>	
        public SharpDX.Direct2D1.RenderTargetUsage Usage;
        
        /// <summary>	
        /// <dd> <p>A value that specifies the minimum Direct3D feature level required for hardware rendering. If the specified minimum level is not available, the render target uses software rendering if the <strong>type </strong> member is set to <strong><see cref="SharpDX.Direct2D1.RenderTargetType.Default"/></strong>; if  <strong>type </strong> is set to to <strong><see cref="SharpDX.Direct2D1.RenderTargetType.Hardware"/></strong>, render target creation fails. A value of <strong><see cref="SharpDX.Direct2D1.FeatureLevel.Level_DEFAULT"/></strong> indicates that Direct2D should determine whether the Direct3D feature level of the device is adequate. This field is used only when creating <strong><see cref="SharpDX.Direct2D1.WindowRenderTarget"/></strong> and <strong><see cref="SharpDX.Direct2D1.DeviceContextRenderTarget"/></strong> objects.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RENDER_TARGET_PROPERTIES::minLevel']/*"/>	
        /// <msdn-id>dd368155</msdn-id>	
        /// <unmanaged>D2D1_FEATURE_LEVEL minLevel</unmanaged>	
        /// <unmanaged-short>D2D1_FEATURE_LEVEL minLevel</unmanaged-short>	
        public SharpDX.Direct2D1.FeatureLevel MinLevel;
    }
    
    /// <summary>	
    /// <p>Defines a resource texture when the original resource texture is created.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RESOURCE_TEXTURE_PROPERTIES']/*"/>	
    /// <msdn-id>hh404324</msdn-id>	
    /// <unmanaged>D2D1_RESOURCE_TEXTURE_PROPERTIES</unmanaged>	
    /// <unmanaged-short>D2D1_RESOURCE_TEXTURE_PROPERTIES</unmanaged-short>	
    public  partial class ResourceTextureProperties {	
        
        /// <summary>	
        /// <dd> <p>The extents of the resource table in each dimension.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RESOURCE_TEXTURE_PROPERTIES::extents']/*"/>	
        /// <msdn-id>hh404324</msdn-id>	
        /// <unmanaged>const unsigned int* extents</unmanaged>	
        /// <unmanaged-short>unsigned int extents</unmanaged-short>	
        internal System.IntPtr ExtentsPointer;
        
        /// <summary>	
        /// <dd> <p>The number of dimensions in the resource texture. This must be a number from 1 to 3.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RESOURCE_TEXTURE_PROPERTIES::dimensions']/*"/>	
        /// <msdn-id>hh404324</msdn-id>	
        /// <unmanaged>unsigned int dimensions</unmanaged>	
        /// <unmanaged-short>unsigned int dimensions</unmanaged-short>	
        public int Dimensions;
        
        /// <summary>	
        /// <dd> <p>The precision of the resource texture to create. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RESOURCE_TEXTURE_PROPERTIES::bufferPrecision']/*"/>	
        /// <msdn-id>hh404324</msdn-id>	
        /// <unmanaged>D2D1_BUFFER_PRECISION bufferPrecision</unmanaged>	
        /// <unmanaged-short>D2D1_BUFFER_PRECISION bufferPrecision</unmanaged-short>	
        public SharpDX.Direct2D1.BufferPrecision BufferPrecision;
        
        /// <summary>	
        /// <dd> <p>The number of channels in the resource texture.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RESOURCE_TEXTURE_PROPERTIES::channelDepth']/*"/>	
        /// <msdn-id>hh404324</msdn-id>	
        /// <unmanaged>D2D1_CHANNEL_DEPTH channelDepth</unmanaged>	
        /// <unmanaged-short>D2D1_CHANNEL_DEPTH channelDepth</unmanaged-short>	
        public SharpDX.Direct2D1.ChannelDepth ChannelDepth;
        
        /// <summary>	
        /// <dd> <p>The filtering mode to use on the texture.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RESOURCE_TEXTURE_PROPERTIES::filter']/*"/>	
        /// <msdn-id>hh404324</msdn-id>	
        /// <unmanaged>D2D1_FILTER filter</unmanaged>	
        /// <unmanaged-short>D2D1_FILTER filter</unmanaged-short>	
        public SharpDX.Direct2D1.Filter Filter;
        
        /// <summary>	
        /// <dd> <p>Specifies how pixel values beyond the extent of the texture will be sampled, in every dimension.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RESOURCE_TEXTURE_PROPERTIES::extendModes']/*"/>	
        /// <msdn-id>hh404324</msdn-id>	
        /// <unmanaged>const D2D1_EXTEND_MODE* extendModes</unmanaged>	
        /// <unmanaged-short>D2D1_EXTEND_MODE extendModes</unmanaged-short>	
        internal System.IntPtr ExtendModesPointer;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public System.IntPtr ExtentsPointer;
            public int Dimensions;
            public SharpDX.Direct2D1.BufferPrecision BufferPrecision;
            public SharpDX.Direct2D1.ChannelDepth ChannelDepth;
            public SharpDX.Direct2D1.Filter Filter;
            public System.IntPtr ExtendModesPointer;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.ExtentsPointer = @ref.ExtentsPointer;
            this.Dimensions = @ref.Dimensions;
            this.BufferPrecision = @ref.BufferPrecision;
            this.ChannelDepth = @ref.ChannelDepth;
            this.Filter = @ref.Filter;
            this.ExtendModesPointer = @ref.ExtendModesPointer;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.ExtentsPointer = this.ExtentsPointer;
            @ref.Dimensions = this.Dimensions;
            @ref.BufferPrecision = this.BufferPrecision;
            @ref.ChannelDepth = this.ChannelDepth;
            @ref.Filter = this.Filter;
            @ref.ExtendModesPointer = this.ExtendModesPointer;
		
		}
    }
    
    /// <summary>	
    /// <p> Contains the dimensions and corner radii of a rounded rectangle.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Each corner of the rectangle specified by the <em>rect</em> is replaced with a quarter ellipse, with a radius in each direction specified by <em>radiusX</em> and <em>radiusY</em>.</p><p> If the <em>radiusX</em> is greater than or equal to half the width of the rectangle, and the <em>radiusY</em> is greater than or equal to one-half the height, the rounded rectangle is an ellipse with the same width and height of the <em>rect</em>. </p><p>Even when both <em>radiuX</em> and <em>radiusY</em> are zero, the rounded rectangle is different from a rectangle., When stroked, the corners of the rounded rectangle are roundly joined, not mitered (square). </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ROUNDED_RECT']/*"/>	
    /// <msdn-id>dd368158</msdn-id>	
    /// <unmanaged>D2D1_ROUNDED_RECT</unmanaged>	
    /// <unmanaged-short>D2D1_ROUNDED_RECT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct RoundedRectangle {	
        
        /// <summary>	
        /// <dd> <p>The coordinates of the rectangle.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ROUNDED_RECT::rect']/*"/>	
        /// <msdn-id>dd368158</msdn-id>	
        /// <unmanaged>D2D_RECT_F rect</unmanaged>	
        /// <unmanaged-short>D2D_RECT_F rect</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawRectangleF Rect;
        
        /// <summary>	
        /// <dd> <p>The x-radius for the quarter ellipse that is drawn to replace every corner of the rectangle.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ROUNDED_RECT::radiusX']/*"/>	
        /// <msdn-id>dd368158</msdn-id>	
        /// <unmanaged>float radiusX</unmanaged>	
        /// <unmanaged-short>float radiusX</unmanaged-short>	
        public float RadiusX;
        
        /// <summary>	
        /// <dd> <p>The y-radius for the quarter ellipse that is drawn to replace every corner of the rectangle.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ROUNDED_RECT::radiusY']/*"/>	
        /// <msdn-id>dd368158</msdn-id>	
        /// <unmanaged>float radiusY</unmanaged>	
        /// <unmanaged-short>float radiusY</unmanaged-short>	
        public float RadiusY;
    }
    
    /// <summary>	
    /// <p> Describes the stroke that outlines a shape. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The following illustration shows different <em>dashOffset</em> values for the same custom dash style.</p><p></p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_STROKE_STYLE_PROPERTIES']/*"/>	
    /// <msdn-id>dd368164</msdn-id>	
    /// <unmanaged>D2D1_STROKE_STYLE_PROPERTIES</unmanaged>	
    /// <unmanaged-short>D2D1_STROKE_STYLE_PROPERTIES</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct StrokeStyleProperties {	
        
        /// <summary>	
        /// <dd> <p>The cap applied to the start of all the open figures in a stroked geometry.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_STROKE_STYLE_PROPERTIES::startCap']/*"/>	
        /// <msdn-id>dd368164</msdn-id>	
        /// <unmanaged>D2D1_CAP_STYLE startCap</unmanaged>	
        /// <unmanaged-short>D2D1_CAP_STYLE startCap</unmanaged-short>	
        public SharpDX.Direct2D1.CapStyle StartCap;
        
        /// <summary>	
        /// <dd> <p>The cap applied to the end of all the open figures in a stroked geometry.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_STROKE_STYLE_PROPERTIES::endCap']/*"/>	
        /// <msdn-id>dd368164</msdn-id>	
        /// <unmanaged>D2D1_CAP_STYLE endCap</unmanaged>	
        /// <unmanaged-short>D2D1_CAP_STYLE endCap</unmanaged-short>	
        public SharpDX.Direct2D1.CapStyle EndCap;
        
        /// <summary>	
        /// <dd> <p>The shape  at either end of each dash segment.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_STROKE_STYLE_PROPERTIES::dashCap']/*"/>	
        /// <msdn-id>dd368164</msdn-id>	
        /// <unmanaged>D2D1_CAP_STYLE dashCap</unmanaged>	
        /// <unmanaged-short>D2D1_CAP_STYLE dashCap</unmanaged-short>	
        public SharpDX.Direct2D1.CapStyle DashCap;
        
        /// <summary>	
        /// <dd> <p>A value that describes how segments are joined. This value is ignored for a vertex if the segment flags specify that the segment should have a smooth join. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_STROKE_STYLE_PROPERTIES::lineJoin']/*"/>	
        /// <msdn-id>dd368164</msdn-id>	
        /// <unmanaged>D2D1_LINE_JOIN lineJoin</unmanaged>	
        /// <unmanaged-short>D2D1_LINE_JOIN lineJoin</unmanaged-short>	
        public SharpDX.Direct2D1.LineJoin LineJoin;
        
        /// <summary>	
        /// <dd> <p>The limit of the thickness of the join on a mitered corner. This value is always treated as though it is greater than or equal to 1.0f. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_STROKE_STYLE_PROPERTIES::miterLimit']/*"/>	
        /// <msdn-id>dd368164</msdn-id>	
        /// <unmanaged>float miterLimit</unmanaged>	
        /// <unmanaged-short>float miterLimit</unmanaged-short>	
        public float MiterLimit;
        
        /// <summary>	
        /// <dd> <p>A value that specifies whether the stroke has a dash pattern and, if so, the dash style. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_STROKE_STYLE_PROPERTIES::dashStyle']/*"/>	
        /// <msdn-id>dd368164</msdn-id>	
        /// <unmanaged>D2D1_DASH_STYLE dashStyle</unmanaged>	
        /// <unmanaged-short>D2D1_DASH_STYLE dashStyle</unmanaged-short>	
        public SharpDX.Direct2D1.DashStyle DashStyle;
        
        /// <summary>	
        /// <dd> <p>A value that specifies an offset in the dash sequence.   A positive dash offset value  shifts the dash pattern, in units of  stroke width, toward the start of the stroked geometry.  A negative dash offset value  shifts the dash pattern, in units of  stroke width, toward the end of the stroked geometry.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_STROKE_STYLE_PROPERTIES::dashOffset']/*"/>	
        /// <msdn-id>dd368164</msdn-id>	
        /// <unmanaged>float dashOffset</unmanaged>	
        /// <unmanaged-short>float dashOffset</unmanaged-short>	
        public float DashOffset;
    }
    
    /// <summary>	
    /// <p>Describes the stroke that outlines a shape.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_STROKE_STYLE_PROPERTIES1']/*"/>	
    /// <msdn-id>hh404328</msdn-id>	
    /// <unmanaged>D2D1_STROKE_STYLE_PROPERTIES1</unmanaged>	
    /// <unmanaged-short>D2D1_STROKE_STYLE_PROPERTIES1</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct StrokeStyleProperties1 {	
        
        /// <summary>	
        /// <dd> <p>The cap to use at the start of each open figure.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_STROKE_STYLE_PROPERTIES1::startCap']/*"/>	
        /// <msdn-id>hh404328</msdn-id>	
        /// <unmanaged>D2D1_CAP_STYLE startCap</unmanaged>	
        /// <unmanaged-short>D2D1_CAP_STYLE startCap</unmanaged-short>	
        public SharpDX.Direct2D1.CapStyle StartCap;
        
        /// <summary>	
        /// <dd> <p>The cap to use at the end of each open figure.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_STROKE_STYLE_PROPERTIES1::endCap']/*"/>	
        /// <msdn-id>hh404328</msdn-id>	
        /// <unmanaged>D2D1_CAP_STYLE endCap</unmanaged>	
        /// <unmanaged-short>D2D1_CAP_STYLE endCap</unmanaged-short>	
        public SharpDX.Direct2D1.CapStyle EndCap;
        
        /// <summary>	
        /// <dd> <p>The cap to use at the start and end of each dash.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_STROKE_STYLE_PROPERTIES1::dashCap']/*"/>	
        /// <msdn-id>hh404328</msdn-id>	
        /// <unmanaged>D2D1_CAP_STYLE dashCap</unmanaged>	
        /// <unmanaged-short>D2D1_CAP_STYLE dashCap</unmanaged-short>	
        public SharpDX.Direct2D1.CapStyle DashCap;
        
        /// <summary>	
        /// <dd> <p>The line join to use.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_STROKE_STYLE_PROPERTIES1::lineJoin']/*"/>	
        /// <msdn-id>hh404328</msdn-id>	
        /// <unmanaged>D2D1_LINE_JOIN lineJoin</unmanaged>	
        /// <unmanaged-short>D2D1_LINE_JOIN lineJoin</unmanaged-short>	
        public SharpDX.Direct2D1.LineJoin LineJoin;
        
        /// <summary>	
        /// <dd> <p>The limit beyond which miters are either clamped or converted to bevels.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_STROKE_STYLE_PROPERTIES1::miterLimit']/*"/>	
        /// <msdn-id>hh404328</msdn-id>	
        /// <unmanaged>float miterLimit</unmanaged>	
        /// <unmanaged-short>float miterLimit</unmanaged-short>	
        public float MiterLimit;
        
        /// <summary>	
        /// <dd> <p>The type of dash to use.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_STROKE_STYLE_PROPERTIES1::dashStyle']/*"/>	
        /// <msdn-id>hh404328</msdn-id>	
        /// <unmanaged>D2D1_DASH_STYLE dashStyle</unmanaged>	
        /// <unmanaged-short>D2D1_DASH_STYLE dashStyle</unmanaged-short>	
        public SharpDX.Direct2D1.DashStyle DashStyle;
        
        /// <summary>	
        /// <dd> <p>The location of the first dash, relative to the start of the figure. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_STROKE_STYLE_PROPERTIES1::dashOffset']/*"/>	
        /// <msdn-id>hh404328</msdn-id>	
        /// <unmanaged>float dashOffset</unmanaged>	
        /// <unmanaged-short>float dashOffset</unmanaged-short>	
        public float DashOffset;
        
        /// <summary>	
        /// <dd> <p>The rule that determines what render target properties affect the nib of the stroke.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_STROKE_STYLE_PROPERTIES1::transformType']/*"/>	
        /// <msdn-id>hh404328</msdn-id>	
        /// <unmanaged>D2D1_STROKE_TRANSFORM_TYPE transformType</unmanaged>	
        /// <unmanaged-short>D2D1_STROKE_TRANSFORM_TYPE transformType</unmanaged-short>	
        public SharpDX.Direct2D1.StrokeTransformType TransformType;
    }
    
    /// <summary>	
    /// <p>Properties of a transformed image source.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES']/*"/>	
    /// <msdn-id>dn934350</msdn-id>	
    /// <unmanaged>D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES</unmanaged>	
    /// <unmanaged-short>D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct TransformedImageSourceProperties {	
        
        /// <summary>	
        /// <dd> <p>The orientation at which the image source is drawn.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES::orientation']/*"/>	
        /// <msdn-id>dn934350</msdn-id>	
        /// <unmanaged>D2D1_ORIENTATION orientation</unmanaged>	
        /// <unmanaged-short>D2D1_ORIENTATION orientation</unmanaged-short>	
        public SharpDX.Direct2D1.Orientation Orientation;
        
        /// <summary>	
        /// <dd> <p>The horizontal scale factor at which the image source is drawn.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES::scaleX']/*"/>	
        /// <msdn-id>dn934350</msdn-id>	
        /// <unmanaged>float scaleX</unmanaged>	
        /// <unmanaged-short>float scaleX</unmanaged-short>	
        public float ScaleX;
        
        /// <summary>	
        /// <dd> <p>The vertical scale factor at which the image source is drawn.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES::scaleY']/*"/>	
        /// <msdn-id>dn934350</msdn-id>	
        /// <unmanaged>float scaleY</unmanaged>	
        /// <unmanaged-short>float scaleY</unmanaged-short>	
        public float ScaleY;
        
        /// <summary>	
        /// <dd> <p>The interpolation mode used when the image source is drawn.  This is ignored if the image source is drawn using the DrawImage method, or using an image brush.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES::interpolationMode']/*"/>	
        /// <msdn-id>dn934350</msdn-id>	
        /// <unmanaged>D2D1_INTERPOLATION_MODE interpolationMode</unmanaged>	
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE interpolationMode</unmanaged-short>	
        public SharpDX.Direct2D1.InterpolationMode InterpolationMode;
        
        /// <summary>	
        /// <dd> <p>Image sourc option flags.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES::options']/*"/>	
        /// <msdn-id>dn934350</msdn-id>	
        /// <unmanaged>D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS options</unmanaged>	
        /// <unmanaged-short>D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS options</unmanaged-short>	
        public SharpDX.Direct2D1.TransformedImageSourceOptions Options;
    }
    
    /// <summary>	
    /// <p>Contains the three vertices that describe a triangle.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TRIANGLE']/*"/>	
    /// <msdn-id>dd368172</msdn-id>	
    /// <unmanaged>D2D1_TRIANGLE</unmanaged>	
    /// <unmanaged-short>D2D1_TRIANGLE</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct Triangle {	
        
        /// <summary>	
        /// <dd> <p>The first vertex of a triangle.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TRIANGLE::point1']/*"/>	
        /// <msdn-id>dd368172</msdn-id>	
        /// <unmanaged>D2D_POINT_2F point1</unmanaged>	
        /// <unmanaged-short>D2D_POINT_2F point1</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector2 Point1;
        
        /// <summary>	
        /// <dd> <p>The second vertex of a triangle.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TRIANGLE::point2']/*"/>	
        /// <msdn-id>dd368172</msdn-id>	
        /// <unmanaged>D2D_POINT_2F point2</unmanaged>	
        /// <unmanaged-short>D2D_POINT_2F point2</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector2 Point2;
        
        /// <summary>	
        /// <dd> <p>The third vertex of a triangle.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TRIANGLE::point3']/*"/>	
        /// <msdn-id>dd368172</msdn-id>	
        /// <unmanaged>D2D_POINT_2F point3</unmanaged>	
        /// <unmanaged-short>D2D_POINT_2F point3</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawVector2 Point3;
    }
    
    /// <summary>	
    /// <p>Defines the properties of a vertex buffer that are standard for all vertex shader definitions.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>If <strong>usage</strong> is dynamic, the system might return a system memory buffer and copy these vertices into the rendering vertex buffer for each element.</p><p>If the initialization data is not specified, the buffer will be uninitialized.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_VERTEX_BUFFER_PROPERTIES']/*"/>	
    /// <msdn-id>hh404330</msdn-id>	
    /// <unmanaged>D2D1_VERTEX_BUFFER_PROPERTIES</unmanaged>	
    /// <unmanaged-short>D2D1_VERTEX_BUFFER_PROPERTIES</unmanaged-short>	
    public  partial class VertexBufferProperties {	
        
        /// <summary>	
        /// <dd> <p>The number of inputs to the vertex shader.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_VERTEX_BUFFER_PROPERTIES::inputCount']/*"/>	
        /// <msdn-id>hh404330</msdn-id>	
        /// <unmanaged>unsigned int inputCount</unmanaged>	
        /// <unmanaged-short>unsigned int inputCount</unmanaged-short>	
        public int InputCount;
        
        /// <summary>	
        /// <dd> <p>Indicates how frequently the vertex buffer is likely to be updated.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_VERTEX_BUFFER_PROPERTIES::usage']/*"/>	
        /// <msdn-id>hh404330</msdn-id>	
        /// <unmanaged>D2D1_VERTEX_USAGE usage</unmanaged>	
        /// <unmanaged-short>D2D1_VERTEX_USAGE usage</unmanaged-short>	
        public SharpDX.Direct2D1.VertexUsage Usage;
        
        /// <summary>	
        /// <dd> <p>The initial contents of the vertex buffer.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_VERTEX_BUFFER_PROPERTIES::data']/*"/>	
        /// <msdn-id>hh404330</msdn-id>	
        /// <unmanaged>const unsigned char* data</unmanaged>	
        /// <unmanaged-short>unsigned char data</unmanaged-short>	
        internal System.IntPtr DataPointer;
        
        /// <summary>	
        /// <dd> <p>The size of the vertex buffer, in bytes.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_VERTEX_BUFFER_PROPERTIES::byteWidth']/*"/>	
        /// <msdn-id>hh404330</msdn-id>	
        /// <unmanaged>unsigned int byteWidth</unmanaged>	
        /// <unmanaged-short>unsigned int byteWidth</unmanaged-short>	
        internal int SizeInBytes;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public int InputCount;
            public SharpDX.Direct2D1.VertexUsage Usage;
            public System.IntPtr DataPointer;
            public int SizeInBytes;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.InputCount = @ref.InputCount;
            this.Usage = @ref.Usage;
            this.DataPointer = @ref.DataPointer;
            this.SizeInBytes = @ref.SizeInBytes;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.InputCount = this.InputCount;
            @ref.Usage = this.Usage;
            @ref.DataPointer = this.DataPointer;
            @ref.SizeInBytes = this.SizeInBytes;
		
		}
    }
    
    /// <summary>	
    /// <p>Defines a range of vertices that are used when rendering less than the full contents of a vertex buffer.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_VERTEX_RANGE']/*"/>	
    /// <msdn-id>hh404335</msdn-id>	
    /// <unmanaged>D2D1_VERTEX_RANGE</unmanaged>	
    /// <unmanaged-short>D2D1_VERTEX_RANGE</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct VertexRange {	
        
        /// <summary>	
        /// <dd> <p>The first vertex in the range to process.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_VERTEX_RANGE::startVertex']/*"/>	
        /// <msdn-id>hh404335</msdn-id>	
        /// <unmanaged>unsigned int startVertex</unmanaged>	
        /// <unmanaged-short>unsigned int startVertex</unmanaged-short>	
        public int StartVertex;
        
        /// <summary>	
        /// <dd> <p>The number of vertices to use.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_VERTEX_RANGE::vertexCount']/*"/>	
        /// <msdn-id>hh404335</msdn-id>	
        /// <unmanaged>unsigned int vertexCount</unmanaged>	
        /// <unmanaged-short>unsigned int vertexCount</unmanaged-short>	
        public int VertexCount;
    }
}
