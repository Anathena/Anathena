// Copyright (c) 2010-2014 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Types declaration for SharpDX.Direct2D1 namespace.
//     This code was generated by a tool.
//     Date : 6/25/2016 10:38:06 PM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
namespace SharpDX.Direct2D1 {

#pragma warning disable 419
#pragma warning disable 1587
#pragma warning disable 1574
    
    /// <summary>	
    /// <p>The 2D affine transform effect applies a spatial transform to a image based on a 3X2 matrix using the Direct2D matrix transform and any of six interpolation modes.  You can use this effect to rotate, scale, skew, or translate an image.  Or, you can combine these operations. Affine transfers preserve parallel lines and the ratio of distances between any three points in an image.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.AffineTransform2D"/>.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Border</li> <li>Interpolation</li> <li>Output</li> <li>Sample</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE']/*"/>	
    /// <msdn-id>hh706309</msdn-id>	
    /// <unmanaged>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE</unmanaged-short>	
    public enum AffineTransform2DInterpolationMode : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR']/*"/>	
        /// <msdn-id>hh706309</msdn-id>	
        /// <unmanaged>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>	
        /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged-short>	
        NearestNeighbor = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_LINEAR']/*"/>	
        /// <msdn-id>hh706309</msdn-id>	
        /// <unmanaged>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_LINEAR</unmanaged-short>	
        Linear = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_CUBIC']/*"/>	
        /// <msdn-id>hh706309</msdn-id>	
        /// <unmanaged>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_CUBIC</unmanaged>	
        /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_CUBIC</unmanaged-short>	
        Cubic = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR']/*"/>	
        /// <msdn-id>hh706309</msdn-id>	
        /// <unmanaged>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>	
        MultiSampleLinear = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_ANISOTROPIC']/*"/>	
        /// <msdn-id>hh706309</msdn-id>	
        /// <unmanaged>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_ANISOTROPIC</unmanaged>	
        /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_ANISOTROPIC</unmanaged-short>	
        Anisotropic = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC']/*"/>	
        /// <msdn-id>hh706309</msdn-id>	
        /// <unmanaged>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged>	
        /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>	
        HighQualityCubic = unchecked((int)5),			
    }
    
    /// <summary>	
    /// <p>The 2D affine transform effect applies a spatial transform to a image based on a 3X2 matrix using the Direct2D matrix transform and any of six interpolation modes.  You can use this effect to rotate, scale, skew, or translate an image.  Or, you can combine these operations. Affine transfers preserve parallel lines and the ratio of distances between any three points in an image.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.AffineTransform2D"/>.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Border</li> <li>Interpolation</li> <li>Output</li> <li>Sample</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_2DAFFINETRANSFORM_PROP']/*"/>	
    /// <msdn-id>hh706309</msdn-id>	
    /// <unmanaged>D2D1_2DAFFINETRANSFORM_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_PROP</unmanaged-short>	
    public enum AffineTransform2DProperties : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_2DAFFINETRANSFORM_PROP_INTERPOLATION_MODE']/*"/>	
        /// <msdn-id>hh706309</msdn-id>	
        /// <unmanaged>D2D1_2DAFFINETRANSFORM_PROP_INTERPOLATION_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_PROP_INTERPOLATION_MODE</unmanaged-short>	
        InterpolationMode = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_2DAFFINETRANSFORM_PROP_BORDER_MODE']/*"/>	
        /// <msdn-id>hh706309</msdn-id>	
        /// <unmanaged>D2D1_2DAFFINETRANSFORM_PROP_BORDER_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_PROP_BORDER_MODE</unmanaged-short>	
        BorderMode = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_2DAFFINETRANSFORM_PROP_TRANSFORM_MATRIX']/*"/>	
        /// <msdn-id>hh706309</msdn-id>	
        /// <unmanaged>D2D1_2DAFFINETRANSFORM_PROP_TRANSFORM_MATRIX</unmanaged>	
        /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_PROP_TRANSFORM_MATRIX</unmanaged-short>	
        TransformMatrix = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_2DAFFINETRANSFORM_PROP_SHARPNESS']/*"/>	
        /// <msdn-id>hh706309</msdn-id>	
        /// <unmanaged>D2D1_2DAFFINETRANSFORM_PROP_SHARPNESS</unmanaged>	
        /// <unmanaged-short>D2D1_2DAFFINETRANSFORM_PROP_SHARPNESS</unmanaged-short>	
        Sharpness = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>Specifies how the alpha value of a bitmap or render target should be treated.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <strong><see cref="SharpDX.Direct2D1.AlphaMode"/></strong> enumeration is used with the <strong><see cref="SharpDX.Direct2D1.PixelFormat"/></strong> enumeration to specify the alpha mode of a render target or bitmap. Different render targets and bitmaps support different alpha modes. For a list, see Supported Pixel Formats and Alpha Modes.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ALPHA_MODE']/*"/>	
    /// <msdn-id>dd368058</msdn-id>	
    /// <unmanaged>D2D1_ALPHA_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_ALPHA_MODE</unmanaged-short>	
    public enum AlphaMode : int {	
        
        /// <summary>	
        /// <dd> <p>The alpha value might not be meaningful.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ALPHA_MODE_UNKNOWN']/*"/>	
        /// <msdn-id>dd368058</msdn-id>	
        /// <unmanaged>D2D1_ALPHA_MODE_UNKNOWN</unmanaged>	
        /// <unmanaged-short>D2D1_ALPHA_MODE_UNKNOWN</unmanaged-short>	
        Unknown = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The alpha value has been premultiplied. Each color is first scaled by the alpha value. The alpha value itself is the same in both straight and premultiplied alpha. Typically, no color channel value is greater than the alpha channel value.  If a color channel value in a premultiplied format is greater than the alpha channel, the standard source-over blending math results in an additive blend.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ALPHA_MODE_PREMULTIPLIED']/*"/>	
        /// <msdn-id>dd368058</msdn-id>	
        /// <unmanaged>D2D1_ALPHA_MODE_PREMULTIPLIED</unmanaged>	
        /// <unmanaged-short>D2D1_ALPHA_MODE_PREMULTIPLIED</unmanaged-short>	
        Premultiplied = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The alpha value has not been premultiplied. The alpha channel indicates the transparency of the color. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ALPHA_MODE_STRAIGHT']/*"/>	
        /// <msdn-id>dd368058</msdn-id>	
        /// <unmanaged>D2D1_ALPHA_MODE_STRAIGHT</unmanaged>	
        /// <unmanaged-short>D2D1_ALPHA_MODE_STRAIGHT</unmanaged-short>	
        Straight = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>The alpha value is ignored.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ALPHA_MODE_IGNORE']/*"/>	
        /// <msdn-id>dd368058</msdn-id>	
        /// <unmanaged>D2D1_ALPHA_MODE_IGNORE</unmanaged>	
        /// <unmanaged-short>D2D1_ALPHA_MODE_IGNORE</unmanaged-short>	
        Ignore = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>Specifies how the edges of nontext primitives are rendered.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ANTIALIAS_MODE']/*"/>	
    /// <msdn-id>dd368061</msdn-id>	
    /// <unmanaged>D2D1_ANTIALIAS_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_ANTIALIAS_MODE</unmanaged-short>	
    public enum AntialiasMode : int {	
        
        /// <summary>	
        /// <dd> <p>Edges are antialiased using the Direct2D per-primitive method of high-quality antialiasing.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ANTIALIAS_MODE_PER_PRIMITIVE']/*"/>	
        /// <msdn-id>dd368061</msdn-id>	
        /// <unmanaged>D2D1_ANTIALIAS_MODE_PER_PRIMITIVE</unmanaged>	
        /// <unmanaged-short>D2D1_ANTIALIAS_MODE_PER_PRIMITIVE</unmanaged-short>	
        PerPrimitive = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Objects are aliased in most cases. Objects are antialiased only when they are drawn to a render target created by the <strong>CreateDxgiSurfaceRenderTarget</strong> method and  Direct3D multisampling has been enabled on the backing DirectX Graphics Infrastructure (DXGI) surface. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ANTIALIAS_MODE_ALIASED']/*"/>	
        /// <msdn-id>dd368061</msdn-id>	
        /// <unmanaged>D2D1_ANTIALIAS_MODE_ALIASED</unmanaged>	
        /// <unmanaged-short>D2D1_ANTIALIAS_MODE_ALIASED</unmanaged-short>	
        Aliased = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Specifies whether an arc should be greater than 180 degrees.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ARC_SIZE']/*"/>	
    /// <msdn-id>dd368068</msdn-id>	
    /// <unmanaged>D2D1_ARC_SIZE</unmanaged>	
    /// <unmanaged-short>D2D1_ARC_SIZE</unmanaged-short>	
    public enum ArcSize : int {	
        
        /// <summary>	
        /// <dd> <p> An arc's sweep should be 180 degrees or less.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ARC_SIZE_SMALL']/*"/>	
        /// <msdn-id>dd368068</msdn-id>	
        /// <unmanaged>D2D1_ARC_SIZE_SMALL</unmanaged>	
        /// <unmanaged-short>D2D1_ARC_SIZE_SMALL</unmanaged-short>	
        Small = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p> An arc's sweep should be 180 degrees or greater.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ARC_SIZE_LARGE']/*"/>	
        /// <msdn-id>dd368068</msdn-id>	
        /// <unmanaged>D2D1_ARC_SIZE_LARGE</unmanaged>	
        /// <unmanaged-short>D2D1_ARC_SIZE_LARGE</unmanaged-short>	
        Large = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Use the arithmetic composite effect to combine 2 images using a weighted sum of pixels from the input images. </p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.ArithmeticComposite"/>.</p><p> </p><ul> <li>Formula</li> <li>Example</li> <li>Effect</li> <li>Output</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ARITHMETICCOMPOSITE_PROP']/*"/>	
    /// <msdn-id>hh706311</msdn-id>	
    /// <unmanaged>D2D1_ARITHMETICCOMPOSITE_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_ARITHMETICCOMPOSITE_PROP</unmanaged-short>	
    public enum ArithmeticCompositeProperties : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ARITHMETICCOMPOSITE_PROP_COEFFICIENTS']/*"/>	
        /// <msdn-id>hh706311</msdn-id>	
        /// <unmanaged>D2D1_ARITHMETICCOMPOSITE_PROP_COEFFICIENTS</unmanaged>	
        /// <unmanaged-short>D2D1_ARITHMETICCOMPOSITE_PROP_COEFFICIENTS</unmanaged-short>	
        Coefficients = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ARITHMETICCOMPOSITE_PROP_CLAMP_OUTPUT']/*"/>	
        /// <msdn-id>hh706311</msdn-id>	
        /// <unmanaged>D2D1_ARITHMETICCOMPOSITE_PROP_CLAMP_OUTPUT</unmanaged>	
        /// <unmanaged-short>D2D1_ARITHMETICCOMPOSITE_PROP_CLAMP_OUTPUT</unmanaged-short>	
        ClampOutput = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>You can use this effect  to output a portion of an image but retain the region outside of the portion for use in subsequent operations. </p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.Atlas"/>.</p><p>The atlas effect is useful if you want to load a large image made up of many smaller images, such as various frames of a sprite.</p><p>To create the output the effect:</p><ol> <li>Crops the input to the given <em>InputRect</em> property.</li> <li>Translates the origin of the result to (0,0).</li> </ol><p><strong>Note</strong>??The <em>InputPaddingRect</em> property should only be larger if and only if the pixels between the two rectangles are transparent black on the input.  This may result in Direct2D executing the graph more optimally.</p><p>Here is an example of the effect.  This image is small and simple for illustration purposes.</p><p>The preceding image is the input to the effect.  The code here creates an atlas effect, sets the input, sets the input rectangle, and then draws the output.</p><pre> ComPtr&lt;<see cref="SharpDX.Direct2D1.Effect"/>&gt; atlasEffect; // Create the Atlas Effect.	
    /// DX::ThrowIfFailed(m_d2dContext-&gt;CreateEffect(<see cref="SharpDX.Direct2D1.Effect.Atlas"/>, &amp;atlasEffect)); // Set the input.	
    /// atlasEffect-&gt;SetInputEffect(0, inputImage.Get()); // The images here are 150 x 150 pixels.	
    /// float size = 150.0f; // Compensate for the padding between images.	
    /// float padding = 10.0f; // The input rectangle.  150 x 150 pixels with 10 pixel padding	
    /// D2D1_Vector_4F inputRect = D2D1::Vector4F(size + (padding * 2), padding, size, size); DX::ThrowIfFailed(atlasEffect-&gt;SetValue(<see cref="SharpDX.Direct2D1.AtlasProperties.InputRectangle"/>, inputRect)); // Draw the image	
    /// m_d2dContext-&gt;DrawImage(atlasEffect.Get());</pre><p>The preceding code selects a rectangle that is around the second triangle.  The padding around it is ignored.  Here is the resulting image.</p><p> </p><p><strong>Note</strong>??This is a situation where you may choose to specify a <em>InputPaddingRect</em> because the padding is transparent black.  The rectangle would be <code>D2D1::Vector4F(size + (padding * 2), 0, size + padding, size + padding);</code>.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ATLAS_PROP']/*"/>	
    /// <msdn-id>hh780337</msdn-id>	
    /// <unmanaged>D2D1_ATLAS_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_ATLAS_PROP</unmanaged-short>	
    public enum AtlasProperties : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ATLAS_PROP_INPUT_RECT']/*"/>	
        /// <msdn-id>hh780337</msdn-id>	
        /// <unmanaged>D2D1_ATLAS_PROP_INPUT_RECT</unmanaged>	
        /// <unmanaged-short>D2D1_ATLAS_PROP_INPUT_RECT</unmanaged-short>	
        InputRectangle = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ATLAS_PROP_INPUT_PADDING_RECT']/*"/>	
        /// <msdn-id>hh780337</msdn-id>	
        /// <unmanaged>D2D1_ATLAS_PROP_INPUT_PADDING_RECT</unmanaged>	
        /// <unmanaged-short>D2D1_ATLAS_PROP_INPUT_PADDING_RECT</unmanaged-short>	
        InputPaddingRectangle = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Specifies the algorithm that is used when images are scaled or rotated.</p><p><strong>Note</strong>??Starting in Windows?8, more interpolations modes are available.  See <strong><see cref="SharpDX.Direct2D1.InterpolationMode"/></strong> for more info.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> To stretch an image, each pixel in the original image must be mapped to a group of pixels in the larger image. To shrink an image, groups of pixels in the original image must be mapped to single pixels in the smaller image. The effectiveness of the algorithms that perform these mappings determines the quality of a scaled image. Algorithms that produce higher-quality scaled images tend to require more processing time. <strong><see cref="SharpDX.Direct2D1.BitmapInterpolationMode.NearestNeighbor"/> </strong>provides faster but lower-quality interpolation, while <strong><see cref="SharpDX.Direct2D1.BitmapInterpolationMode.Linear"/></strong> provides higher-quality interpolation. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAP_INTERPOLATION_MODE']/*"/>	
    /// <msdn-id>dd368073</msdn-id>	
    /// <unmanaged>D2D1_BITMAP_INTERPOLATION_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_BITMAP_INTERPOLATION_MODE</unmanaged-short>	
    public enum BitmapInterpolationMode : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR']/*"/>	
        /// <msdn-id>dd368073</msdn-id>	
        /// <unmanaged>D2D1_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>	
        /// <unmanaged-short>D2D1_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged-short>	
        NearestNeighbor = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAP_INTERPOLATION_MODE_LINEAR']/*"/>	
        /// <msdn-id>dd368073</msdn-id>	
        /// <unmanaged>D2D1_BITMAP_INTERPOLATION_MODE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_BITMAP_INTERPOLATION_MODE_LINEAR</unmanaged-short>	
        Linear = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Specifies how a bitmap can be used.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p><strong><see cref="SharpDX.Direct2D1.BitmapOptions.None"/></strong> implies that none of the flags are set. This means that the bitmap can be used for drawing from, cannot be set as a target and cannot be read from by the CPU.</p><p><strong><see cref="SharpDX.Direct2D1.BitmapOptions.Target"/></strong> means that the bitmap can be specified as a target in <strong>ID2D1DeviceContext::SetTargetBitmap</strong>. If   you also specify the  <strong><see cref="SharpDX.Direct2D1.BitmapOptions.CannotDraw"/></strong> flag the bitmap can be used a target but, it cannot be drawn from. Attempting to draw with a bitmap that has both flags set will result in the device context being put into an error state with <strong><see cref="SharpDX.Direct2D1.ResultCode.BitmapCannotDraw"/></strong>. </p><p><strong><see cref="SharpDX.Direct2D1.BitmapOptions.CpuRead"/></strong> means that the bitmap can be mapped by using <strong><see cref="SharpDX.Direct2D1.Bitmap1.Map"/></strong>. This flag requires <strong><see cref="SharpDX.Direct2D1.BitmapOptions.CannotDraw"/></strong> and cannot be combined with any other flags. The bitmap must be updated with the <strong>CopyFromBitmap</strong> or <strong>CopyFromRenderTarget</strong> methods. </p><p><strong>Note</strong>??You should only use <strong><see cref="SharpDX.Direct2D1.BitmapOptions.CannotDraw"/></strong> is when the purpose of the bitmap is to be a target only or when the bitmap will be mapped .</p><p><strong><see cref="SharpDX.Direct2D1.BitmapOptions.GdiCompatible"/></strong> means that it is possible to get a DC associated with this bitmap.  This must be used in conjunction with <strong><see cref="SharpDX.Direct2D1.BitmapOptions.Target"/></strong>. The <strong><see cref="SharpDX.DXGI.Format"/></strong> must be either <strong><see cref="SharpDX.DXGI.Format.B8G8R8A8_UNorm"/></strong> or <strong><see cref="SharpDX.DXGI.Format.B8G8R8A8_UNorm_SRgb"/></strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAP_OPTIONS']/*"/>	
    /// <msdn-id>hh446984</msdn-id>	
    /// <unmanaged>D2D1_BITMAP_OPTIONS</unmanaged>	
    /// <unmanaged-short>D2D1_BITMAP_OPTIONS</unmanaged-short>	
    [Flags]
    public enum BitmapOptions : int {	
        
        /// <summary>	
        /// <dd> <p>The bitmap is created with default properties.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAP_OPTIONS_NONE']/*"/>	
        /// <msdn-id>hh446984</msdn-id>	
        /// <unmanaged>D2D1_BITMAP_OPTIONS_NONE</unmanaged>	
        /// <unmanaged-short>D2D1_BITMAP_OPTIONS_NONE</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The bitmap can be used as a device context target.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAP_OPTIONS_TARGET']/*"/>	
        /// <msdn-id>hh446984</msdn-id>	
        /// <unmanaged>D2D1_BITMAP_OPTIONS_TARGET</unmanaged>	
        /// <unmanaged-short>D2D1_BITMAP_OPTIONS_TARGET</unmanaged-short>	
        Target = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The bitmap cannot be used as an input. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAP_OPTIONS_CANNOT_DRAW']/*"/>	
        /// <msdn-id>hh446984</msdn-id>	
        /// <unmanaged>D2D1_BITMAP_OPTIONS_CANNOT_DRAW</unmanaged>	
        /// <unmanaged-short>D2D1_BITMAP_OPTIONS_CANNOT_DRAW</unmanaged-short>	
        CannotDraw = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>The bitmap can be read from the CPU.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAP_OPTIONS_CPU_READ']/*"/>	
        /// <msdn-id>hh446984</msdn-id>	
        /// <unmanaged>D2D1_BITMAP_OPTIONS_CPU_READ</unmanaged>	
        /// <unmanaged-short>D2D1_BITMAP_OPTIONS_CPU_READ</unmanaged-short>	
        CpuRead = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>The bitmap works with <strong><see cref="SharpDX.Direct2D1.GdiInteropRenderTarget.GetDC"/></strong>.</p> <p><strong>Note</strong>??This flag is not available in Windows Store apps.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAP_OPTIONS_GDI_COMPATIBLE']/*"/>	
        /// <msdn-id>hh446984</msdn-id>	
        /// <unmanaged>D2D1_BITMAP_OPTIONS_GDI_COMPATIBLE</unmanaged>	
        /// <unmanaged-short>D2D1_BITMAP_OPTIONS_GDI_COMPATIBLE</unmanaged-short>	
        GdiCompatible = unchecked((int)8),			
    }
    
    /// <summary>	
    /// <p>Use the bitmap source effect to generate an <strong><see cref="SharpDX.Direct2D1.Image"/></strong> from a <strong><see cref="SharpDX.WIC.BitmapSource"/></strong> for use as an input in an effect graph. This effect performs scaling and rotation on the CPU. It can also optionally generate a system memory mipmap, which can be a performance optimization for actively scaling very large images at  various reduced resolutions. </p><p><strong>Note</strong>??The bitmap source effect takes its input as a property, not as an image input. You must use the <strong>SetValue</strong> method, not the <strong>SetInput</strong> method. The <em>WicBitmapSource</em> property is where you specify the image input data.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.BitmapSource"/>.</p><p> </p><ul> <li>Effect</li> <li>Interpolation</li> <li>Orientation</li> <li>Alpha</li> <li>Remarks</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <remarks>	
    /// <p>To optimize performance when using WIC and Direct2D together, you should use <strong><see cref="SharpDX.WIC.FormatConverter"/></strong> to convert to an appropriate pixel format based your app?s scenario and the image?s native precision.</p><p>In most cases, either your app?s Direct2D pipeline only requires 8 bits per channel (bpc) of precision, or the image only provides 8 bpc precision, and therefore you should convert to <see cref="SharpDX.WIC.PixelFormat.Format32bppPBGRA"/>. However, if you want to take advantage of extra precision provided by an image (for example, a JPEG-XR or TIFF stored with greater than 8 bpc precision), you should use an RGBA-based pixel format. The below table provides more details. </p><table> <tr><th>Desired precision</th><th>Native precision of the image</th><th>Recommended pixel format</th></tr> <tr><td>8 bits per channel</td><td>&lt;= 8 bits per channel</td><td><see cref="SharpDX.WIC.PixelFormat.Format32bppPBGRA"/>	
    /// </td></tr> <tr><td>As high as possible</td><td>&lt;= 8 bits per channel</td><td><see cref="SharpDX.WIC.PixelFormat.Format32bppPBGRA"/>	
    /// </td></tr> <tr><td>As high as possible</td><td>&gt; 8 bits per channel</td><td>RGBA channel order, premultiplied alpha</td></tr> </table><p>?</p><p>Because many image formats support multiple levels of precision, you should use <strong><see cref="SharpDX.WIC.BitmapSource.GetPixelFormat"/></strong> to obtain the image?s native pixel format, and then use <strong><see cref="SharpDX.WIC.PixelFormatInfo"/></strong> to determine how many bits per channel of precision are available for that format. Also, note that not all hardware supports high precision pixel formats. In those cases your app may need to fall back to the WARP device to support high precision.	
    /// </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAPSOURCE_ALPHA_MODE']/*"/>	
    /// <msdn-id>hh706312</msdn-id>	
    /// <unmanaged>D2D1_BITMAPSOURCE_ALPHA_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_BITMAPSOURCE_ALPHA_MODE</unmanaged-short>	
    public enum BitmapSourceAlphaMode : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAPSOURCE_ALPHA_MODE_PREMULTIPLIED']/*"/>	
        /// <msdn-id>hh706312</msdn-id>	
        /// <unmanaged>D2D1_BITMAPSOURCE_ALPHA_MODE_PREMULTIPLIED</unmanaged>	
        /// <unmanaged-short>D2D1_BITMAPSOURCE_ALPHA_MODE_PREMULTIPLIED</unmanaged-short>	
        Premultiplied = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAPSOURCE_ALPHA_MODE_STRAIGHT']/*"/>	
        /// <msdn-id>hh706312</msdn-id>	
        /// <unmanaged>D2D1_BITMAPSOURCE_ALPHA_MODE_STRAIGHT</unmanaged>	
        /// <unmanaged-short>D2D1_BITMAPSOURCE_ALPHA_MODE_STRAIGHT</unmanaged-short>	
        Straight = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Use the bitmap source effect to generate an <strong><see cref="SharpDX.Direct2D1.Image"/></strong> from a <strong><see cref="SharpDX.WIC.BitmapSource"/></strong> for use as an input in an effect graph. This effect performs scaling and rotation on the CPU. It can also optionally generate a system memory mipmap, which can be a performance optimization for actively scaling very large images at  various reduced resolutions. </p><p><strong>Note</strong>??The bitmap source effect takes its input as a property, not as an image input. You must use the <strong>SetValue</strong> method, not the <strong>SetInput</strong> method. The <em>WicBitmapSource</em> property is where you specify the image input data.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.BitmapSource"/>.</p><p> </p><ul> <li>Effect</li> <li>Interpolation</li> <li>Orientation</li> <li>Alpha</li> <li>Remarks</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <remarks>	
    /// <p>To optimize performance when using WIC and Direct2D together, you should use <strong><see cref="SharpDX.WIC.FormatConverter"/></strong> to convert to an appropriate pixel format based your app?s scenario and the image?s native precision.</p><p>In most cases, either your app?s Direct2D pipeline only requires 8 bits per channel (bpc) of precision, or the image only provides 8 bpc precision, and therefore you should convert to <see cref="SharpDX.WIC.PixelFormat.Format32bppPBGRA"/>. However, if you want to take advantage of extra precision provided by an image (for example, a JPEG-XR or TIFF stored with greater than 8 bpc precision), you should use an RGBA-based pixel format. The below table provides more details. </p><table> <tr><th>Desired precision</th><th>Native precision of the image</th><th>Recommended pixel format</th></tr> <tr><td>8 bits per channel</td><td>&lt;= 8 bits per channel</td><td><see cref="SharpDX.WIC.PixelFormat.Format32bppPBGRA"/>	
    /// </td></tr> <tr><td>As high as possible</td><td>&lt;= 8 bits per channel</td><td><see cref="SharpDX.WIC.PixelFormat.Format32bppPBGRA"/>	
    /// </td></tr> <tr><td>As high as possible</td><td>&gt; 8 bits per channel</td><td>RGBA channel order, premultiplied alpha</td></tr> </table><p>?</p><p>Because many image formats support multiple levels of precision, you should use <strong><see cref="SharpDX.WIC.BitmapSource.GetPixelFormat"/></strong> to obtain the image?s native pixel format, and then use <strong><see cref="SharpDX.WIC.PixelFormatInfo"/></strong> to determine how many bits per channel of precision are available for that format. Also, note that not all hardware supports high precision pixel formats. In those cases your app may need to fall back to the WARP device to support high precision.	
    /// </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAPSOURCE_INTERPOLATION_MODE']/*"/>	
    /// <msdn-id>hh706312</msdn-id>	
    /// <unmanaged>D2D1_BITMAPSOURCE_INTERPOLATION_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_BITMAPSOURCE_INTERPOLATION_MODE</unmanaged-short>	
    public enum BitmapSourceInterpolationMode : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAPSOURCE_INTERPOLATION_MODE_NEAREST_NEIGHBOR']/*"/>	
        /// <msdn-id>hh706312</msdn-id>	
        /// <unmanaged>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>	
        /// <unmanaged-short>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged-short>	
        NearestNeighbor = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAPSOURCE_INTERPOLATION_MODE_LINEAR']/*"/>	
        /// <msdn-id>hh706312</msdn-id>	
        /// <unmanaged>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_LINEAR</unmanaged-short>	
        Linear = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAPSOURCE_INTERPOLATION_MODE_CUBIC']/*"/>	
        /// <msdn-id>hh706312</msdn-id>	
        /// <unmanaged>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_CUBIC</unmanaged>	
        /// <unmanaged-short>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_CUBIC</unmanaged-short>	
        Cubic = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAPSOURCE_INTERPOLATION_MODE_FANT']/*"/>	
        /// <msdn-id>hh706312</msdn-id>	
        /// <unmanaged>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_FANT</unmanaged>	
        /// <unmanaged-short>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_FANT</unmanaged-short>	
        Fant = unchecked((int)6),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAPSOURCE_INTERPOLATION_MODE_MIPMAP_LINEAR']/*"/>	
        /// <msdn-id>hh706312</msdn-id>	
        /// <unmanaged>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_MIPMAP_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_BITMAPSOURCE_INTERPOLATION_MODE_MIPMAP_LINEAR</unmanaged-short>	
        MipmapLinear = unchecked((int)7),			
    }
    
    /// <summary>	
    /// <p>Use the bitmap source effect to generate an <strong><see cref="SharpDX.Direct2D1.Image"/></strong> from a <strong><see cref="SharpDX.WIC.BitmapSource"/></strong> for use as an input in an effect graph. This effect performs scaling and rotation on the CPU. It can also optionally generate a system memory mipmap, which can be a performance optimization for actively scaling very large images at  various reduced resolutions. </p><p><strong>Note</strong>??The bitmap source effect takes its input as a property, not as an image input. You must use the <strong>SetValue</strong> method, not the <strong>SetInput</strong> method. The <em>WicBitmapSource</em> property is where you specify the image input data.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.BitmapSource"/>.</p><p> </p><ul> <li>Effect</li> <li>Interpolation</li> <li>Orientation</li> <li>Alpha</li> <li>Remarks</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <remarks>	
    /// <p>To optimize performance when using WIC and Direct2D together, you should use <strong><see cref="SharpDX.WIC.FormatConverter"/></strong> to convert to an appropriate pixel format based your app?s scenario and the image?s native precision.</p><p>In most cases, either your app?s Direct2D pipeline only requires 8 bits per channel (bpc) of precision, or the image only provides 8 bpc precision, and therefore you should convert to <see cref="SharpDX.WIC.PixelFormat.Format32bppPBGRA"/>. However, if you want to take advantage of extra precision provided by an image (for example, a JPEG-XR or TIFF stored with greater than 8 bpc precision), you should use an RGBA-based pixel format. The below table provides more details. </p><table> <tr><th>Desired precision</th><th>Native precision of the image</th><th>Recommended pixel format</th></tr> <tr><td>8 bits per channel</td><td>&lt;= 8 bits per channel</td><td><see cref="SharpDX.WIC.PixelFormat.Format32bppPBGRA"/>	
    /// </td></tr> <tr><td>As high as possible</td><td>&lt;= 8 bits per channel</td><td><see cref="SharpDX.WIC.PixelFormat.Format32bppPBGRA"/>	
    /// </td></tr> <tr><td>As high as possible</td><td>&gt; 8 bits per channel</td><td>RGBA channel order, premultiplied alpha</td></tr> </table><p>?</p><p>Because many image formats support multiple levels of precision, you should use <strong><see cref="SharpDX.WIC.BitmapSource.GetPixelFormat"/></strong> to obtain the image?s native pixel format, and then use <strong><see cref="SharpDX.WIC.PixelFormatInfo"/></strong> to determine how many bits per channel of precision are available for that format. Also, note that not all hardware supports high precision pixel formats. In those cases your app may need to fall back to the WARP device to support high precision.	
    /// </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAPSOURCE_ORIENTATION']/*"/>	
    /// <msdn-id>hh706312</msdn-id>	
    /// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION</unmanaged>	
    /// <unmanaged-short>D2D1_BITMAPSOURCE_ORIENTATION</unmanaged-short>	
    public enum BitmapSourceOrientation : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAPSOURCE_ORIENTATION_DEFAULT']/*"/>	
        /// <msdn-id>hh706312</msdn-id>	
        /// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION_DEFAULT</unmanaged>	
        /// <unmanaged-short>D2D1_BITMAPSOURCE_ORIENTATION_DEFAULT</unmanaged-short>	
        Default = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAPSOURCE_ORIENTATION_FLIP_HORIZONTAL']/*"/>	
        /// <msdn-id>hh706312</msdn-id>	
        /// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION_FLIP_HORIZONTAL</unmanaged>	
        /// <unmanaged-short>D2D1_BITMAPSOURCE_ORIENTATION_FLIP_HORIZONTAL</unmanaged-short>	
        FlipHorizontal = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180']/*"/>	
        /// <msdn-id>hh706312</msdn-id>	
        /// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180</unmanaged>	
        /// <unmanaged-short>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180</unmanaged-short>	
        RotateClockwise180 = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL']/*"/>	
        /// <msdn-id>hh706312</msdn-id>	
        /// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL</unmanaged>	
        /// <unmanaged-short>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL</unmanaged-short>	
        RotateClockwise180FlipHorizontal = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL']/*"/>	
        /// <msdn-id>hh706312</msdn-id>	
        /// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL</unmanaged>	
        /// <unmanaged-short>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL</unmanaged-short>	
        RotateClockwise270FlipHorizontal = unchecked((int)5),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90']/*"/>	
        /// <msdn-id>hh706312</msdn-id>	
        /// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90</unmanaged>	
        /// <unmanaged-short>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90</unmanaged-short>	
        RotateClockwise90 = unchecked((int)6),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL']/*"/>	
        /// <msdn-id>hh706312</msdn-id>	
        /// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL</unmanaged>	
        /// <unmanaged-short>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL</unmanaged-short>	
        RotateClockwise90FlipHorizontal = unchecked((int)7),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270']/*"/>	
        /// <msdn-id>hh706312</msdn-id>	
        /// <unmanaged>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270</unmanaged>	
        /// <unmanaged-short>D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270</unmanaged-short>	
        RotateClockwise270 = unchecked((int)8),			
    }
    
    /// <summary>	
    /// <p>Use the bitmap source effect to generate an <strong><see cref="SharpDX.Direct2D1.Image"/></strong> from a <strong><see cref="SharpDX.WIC.BitmapSource"/></strong> for use as an input in an effect graph. This effect performs scaling and rotation on the CPU. It can also optionally generate a system memory mipmap, which can be a performance optimization for actively scaling very large images at  various reduced resolutions. </p><p><strong>Note</strong>??The bitmap source effect takes its input as a property, not as an image input. You must use the <strong>SetValue</strong> method, not the <strong>SetInput</strong> method. The <em>WicBitmapSource</em> property is where you specify the image input data.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.BitmapSource"/>.</p><p> </p><ul> <li>Effect</li> <li>Interpolation</li> <li>Orientation</li> <li>Alpha</li> <li>Remarks</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <remarks>	
    /// <p>To optimize performance when using WIC and Direct2D together, you should use <strong><see cref="SharpDX.WIC.FormatConverter"/></strong> to convert to an appropriate pixel format based your app?s scenario and the image?s native precision.</p><p>In most cases, either your app?s Direct2D pipeline only requires 8 bits per channel (bpc) of precision, or the image only provides 8 bpc precision, and therefore you should convert to <see cref="SharpDX.WIC.PixelFormat.Format32bppPBGRA"/>. However, if you want to take advantage of extra precision provided by an image (for example, a JPEG-XR or TIFF stored with greater than 8 bpc precision), you should use an RGBA-based pixel format. The below table provides more details. </p><table> <tr><th>Desired precision</th><th>Native precision of the image</th><th>Recommended pixel format</th></tr> <tr><td>8 bits per channel</td><td>&lt;= 8 bits per channel</td><td><see cref="SharpDX.WIC.PixelFormat.Format32bppPBGRA"/>	
    /// </td></tr> <tr><td>As high as possible</td><td>&lt;= 8 bits per channel</td><td><see cref="SharpDX.WIC.PixelFormat.Format32bppPBGRA"/>	
    /// </td></tr> <tr><td>As high as possible</td><td>&gt; 8 bits per channel</td><td>RGBA channel order, premultiplied alpha</td></tr> </table><p>?</p><p>Because many image formats support multiple levels of precision, you should use <strong><see cref="SharpDX.WIC.BitmapSource.GetPixelFormat"/></strong> to obtain the image?s native pixel format, and then use <strong><see cref="SharpDX.WIC.PixelFormatInfo"/></strong> to determine how many bits per channel of precision are available for that format. Also, note that not all hardware supports high precision pixel formats. In those cases your app may need to fall back to the WARP device to support high precision.	
    /// </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAPSOURCE_PROP']/*"/>	
    /// <msdn-id>hh706312</msdn-id>	
    /// <unmanaged>D2D1_BITMAPSOURCE_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_BITMAPSOURCE_PROP</unmanaged-short>	
    public enum BitmapSourceProperties : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAPSOURCE_PROP_WIC_BITMAP_SOURCE']/*"/>	
        /// <msdn-id>hh706312</msdn-id>	
        /// <unmanaged>D2D1_BITMAPSOURCE_PROP_WIC_BITMAP_SOURCE</unmanaged>	
        /// <unmanaged-short>D2D1_BITMAPSOURCE_PROP_WIC_BITMAP_SOURCE</unmanaged-short>	
        WicBitmapSource = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAPSOURCE_PROP_SCALE']/*"/>	
        /// <msdn-id>hh706312</msdn-id>	
        /// <unmanaged>D2D1_BITMAPSOURCE_PROP_SCALE</unmanaged>	
        /// <unmanaged-short>D2D1_BITMAPSOURCE_PROP_SCALE</unmanaged-short>	
        Scale = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAPSOURCE_PROP_INTERPOLATION_MODE']/*"/>	
        /// <msdn-id>hh706312</msdn-id>	
        /// <unmanaged>D2D1_BITMAPSOURCE_PROP_INTERPOLATION_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_BITMAPSOURCE_PROP_INTERPOLATION_MODE</unmanaged-short>	
        InterpolationMode = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAPSOURCE_PROP_ENABLE_DPI_CORRECTION']/*"/>	
        /// <msdn-id>hh706312</msdn-id>	
        /// <unmanaged>D2D1_BITMAPSOURCE_PROP_ENABLE_DPI_CORRECTION</unmanaged>	
        /// <unmanaged-short>D2D1_BITMAPSOURCE_PROP_ENABLE_DPI_CORRECTION</unmanaged-short>	
        EnableDpiCorrection = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAPSOURCE_PROP_ALPHA_MODE']/*"/>	
        /// <msdn-id>hh706312</msdn-id>	
        /// <unmanaged>D2D1_BITMAPSOURCE_PROP_ALPHA_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_BITMAPSOURCE_PROP_ALPHA_MODE</unmanaged-short>	
        AlphaMode = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BITMAPSOURCE_PROP_ORIENTATION']/*"/>	
        /// <msdn-id>hh706312</msdn-id>	
        /// <unmanaged>D2D1_BITMAPSOURCE_PROP_ORIENTATION</unmanaged>	
        /// <unmanaged-short>D2D1_BITMAPSOURCE_PROP_ORIENTATION</unmanaged-short>	
        Orientation = unchecked((int)5),			
    }
    
    /// <summary>	
    /// <p>Specifies how one of the color sources is to be derived and optionally specifies a preblend operation on the color source.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This enumeration has the same numeric values as <strong>D3D10_BLEND</strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND']/*"/>	
    /// <msdn-id>hh404276</msdn-id>	
    /// <unmanaged>D2D1_BLEND</unmanaged>	
    /// <unmanaged-short>D2D1_BLEND</unmanaged-short>	
    public enum Blend : int {	
        
        /// <summary>	
        /// <dd> <p>The data source is black (0, 0, 0, 0). There is no preblend operation.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_ZERO']/*"/>	
        /// <msdn-id>hh404276</msdn-id>	
        /// <unmanaged>D2D1_BLEND_ZERO</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_ZERO</unmanaged-short>	
        Zero = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The data source is white (1, 1, 1, 1). There is no preblend operation.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_ONE']/*"/>	
        /// <msdn-id>hh404276</msdn-id>	
        /// <unmanaged>D2D1_BLEND_ONE</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_ONE</unmanaged-short>	
        One = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>The data source is color data (RGB) from the second input of the blend transform. There is not a preblend operation.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_SRC_COLOR']/*"/>	
        /// <msdn-id>hh404276</msdn-id>	
        /// <unmanaged>D2D1_BLEND_SRC_COLOR</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_SRC_COLOR</unmanaged-short>	
        SourceColor = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>The data source is color data (RGB) from second input of the blend transform. The preblend operation inverts the data, generating 1 - RGB.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_INV_SRC_COLOR']/*"/>	
        /// <msdn-id>hh404276</msdn-id>	
        /// <unmanaged>D2D1_BLEND_INV_SRC_COLOR</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_INV_SRC_COLOR</unmanaged-short>	
        InverseSourceColor = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>The data source is alpha data (A) from second input of the blend transform. There is no preblend operation.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_SRC_ALPHA']/*"/>	
        /// <msdn-id>hh404276</msdn-id>	
        /// <unmanaged>D2D1_BLEND_SRC_ALPHA</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_SRC_ALPHA</unmanaged-short>	
        SourceAlpha = unchecked((int)5),			
        
        /// <summary>	
        /// <dd> <p>The data source is alpha data (A) from the second input of the blend transform. The preblend operation inverts the data, generating 1 - A.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_INV_SRC_ALPHA']/*"/>	
        /// <msdn-id>hh404276</msdn-id>	
        /// <unmanaged>D2D1_BLEND_INV_SRC_ALPHA</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_INV_SRC_ALPHA</unmanaged-short>	
        InverseSourceAlpha = unchecked((int)6),			
        
        /// <summary>	
        /// <dd> <p>The data source is alpha data (A) from the first input of the blend transform. There is no preblend operation.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_DEST_ALPHA']/*"/>	
        /// <msdn-id>hh404276</msdn-id>	
        /// <unmanaged>D2D1_BLEND_DEST_ALPHA</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_DEST_ALPHA</unmanaged-short>	
        DestinationAlpha = unchecked((int)7),			
        
        /// <summary>	
        /// <dd> <p>The data source is alpha data (A) from the first input of the blend transform. The preblend operation inverts the data, generating 1 - A.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_INV_DEST_ALPHA']/*"/>	
        /// <msdn-id>hh404276</msdn-id>	
        /// <unmanaged>D2D1_BLEND_INV_DEST_ALPHA</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_INV_DEST_ALPHA</unmanaged-short>	
        InverseDestinationAlpha = unchecked((int)8),			
        
        /// <summary>	
        /// <dd> <p>The data source is color data from the first input of the blend transform. There is no preblend operation.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_DEST_COLOR']/*"/>	
        /// <msdn-id>hh404276</msdn-id>	
        /// <unmanaged>D2D1_BLEND_DEST_COLOR</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_DEST_COLOR</unmanaged-short>	
        DestinationColor = unchecked((int)9),			
        
        /// <summary>	
        /// <dd> <p>The data source is color data from the first input of the blend transform. The preblend operation inverts the data, generating 1 - RGB.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_INV_DEST_COLOR']/*"/>	
        /// <msdn-id>hh404276</msdn-id>	
        /// <unmanaged>D2D1_BLEND_INV_DEST_COLOR</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_INV_DEST_COLOR</unmanaged-short>	
        InverseDestinationColor = unchecked((int)10),			
        
        /// <summary>	
        /// <dd> <p>The data source is alpha data from the second input of the blend transform. The preblend operation clamps the data to 1 or less.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_SRC_ALPHA_SAT']/*"/>	
        /// <msdn-id>hh404276</msdn-id>	
        /// <unmanaged>D2D1_BLEND_SRC_ALPHA_SAT</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_SRC_ALPHA_SAT</unmanaged-short>	
        SourceAlphaSaturate = unchecked((int)11),			
        
        /// <summary>	
        /// <dd> <p>The data source is the blend factor. There is no preblend operation.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_BLEND_FACTOR']/*"/>	
        /// <msdn-id>hh404276</msdn-id>	
        /// <unmanaged>D2D1_BLEND_BLEND_FACTOR</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_BLEND_FACTOR</unmanaged-short>	
        BlendFactor = unchecked((int)14),			
        
        /// <summary>	
        /// <dd> <p>The data source is the blend factor. The preblend operation inverts the blend factor, generating 1 - blend_factor.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_INV_BLEND_FACTOR']/*"/>	
        /// <msdn-id>hh404276</msdn-id>	
        /// <unmanaged>D2D1_BLEND_INV_BLEND_FACTOR</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_INV_BLEND_FACTOR</unmanaged-short>	
        InverseBlendFactor = unchecked((int)15),			
    }
    
    /// <summary>	
    /// <p>Use the blend effect to combine 2 images.    This effect has 26 blend modes.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.Blend"/>.</p><p> </p><ul> <li>Blending</li> <li>Effect</li> <li>Blend</li> <li>HSL<ul> <li>Converting</li> <li>Converting</li> </ul> </li> <li>Output</li> <li>Sample</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_MODE']/*"/>	
    /// <msdn-id>hh706313</msdn-id>	
    /// <unmanaged>D2D1_BLEND_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_BLEND_MODE</unmanaged-short>	
    public enum BlendMode : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_MODE_MULTIPLY']/*"/>	
        /// <msdn-id>hh706313</msdn-id>	
        /// <unmanaged>D2D1_BLEND_MODE_MULTIPLY</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_MODE_MULTIPLY</unmanaged-short>	
        Multiply = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_MODE_SCREEN']/*"/>	
        /// <msdn-id>hh706313</msdn-id>	
        /// <unmanaged>D2D1_BLEND_MODE_SCREEN</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_MODE_SCREEN</unmanaged-short>	
        Screen = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_MODE_DARKEN']/*"/>	
        /// <msdn-id>hh706313</msdn-id>	
        /// <unmanaged>D2D1_BLEND_MODE_DARKEN</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_MODE_DARKEN</unmanaged-short>	
        Darken = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_MODE_LIGHTEN']/*"/>	
        /// <msdn-id>hh706313</msdn-id>	
        /// <unmanaged>D2D1_BLEND_MODE_LIGHTEN</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_MODE_LIGHTEN</unmanaged-short>	
        Lighten = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_MODE_DISSOLVE']/*"/>	
        /// <msdn-id>hh706313</msdn-id>	
        /// <unmanaged>D2D1_BLEND_MODE_DISSOLVE</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_MODE_DISSOLVE</unmanaged-short>	
        Dissolve = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_MODE_COLOR_BURN']/*"/>	
        /// <msdn-id>hh706313</msdn-id>	
        /// <unmanaged>D2D1_BLEND_MODE_COLOR_BURN</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_MODE_COLOR_BURN</unmanaged-short>	
        ColorBurn = unchecked((int)5),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_MODE_LINEAR_BURN']/*"/>	
        /// <msdn-id>hh706313</msdn-id>	
        /// <unmanaged>D2D1_BLEND_MODE_LINEAR_BURN</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_MODE_LINEAR_BURN</unmanaged-short>	
        LinearBurn = unchecked((int)6),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_MODE_DARKER_COLOR']/*"/>	
        /// <msdn-id>hh706313</msdn-id>	
        /// <unmanaged>D2D1_BLEND_MODE_DARKER_COLOR</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_MODE_DARKER_COLOR</unmanaged-short>	
        DarkerColor = unchecked((int)7),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_MODE_LIGHTER_COLOR']/*"/>	
        /// <msdn-id>hh706313</msdn-id>	
        /// <unmanaged>D2D1_BLEND_MODE_LIGHTER_COLOR</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_MODE_LIGHTER_COLOR</unmanaged-short>	
        LighterColor = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_MODE_COLOR_DODGE']/*"/>	
        /// <msdn-id>hh706313</msdn-id>	
        /// <unmanaged>D2D1_BLEND_MODE_COLOR_DODGE</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_MODE_COLOR_DODGE</unmanaged-short>	
        ColorDodge = unchecked((int)9),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_MODE_LINEAR_DODGE']/*"/>	
        /// <msdn-id>hh706313</msdn-id>	
        /// <unmanaged>D2D1_BLEND_MODE_LINEAR_DODGE</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_MODE_LINEAR_DODGE</unmanaged-short>	
        LinearDodge = unchecked((int)10),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_MODE_OVERLAY']/*"/>	
        /// <msdn-id>hh706313</msdn-id>	
        /// <unmanaged>D2D1_BLEND_MODE_OVERLAY</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_MODE_OVERLAY</unmanaged-short>	
        Overlay = unchecked((int)11),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_MODE_SOFT_LIGHT']/*"/>	
        /// <msdn-id>hh706313</msdn-id>	
        /// <unmanaged>D2D1_BLEND_MODE_SOFT_LIGHT</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_MODE_SOFT_LIGHT</unmanaged-short>	
        SoftLight = unchecked((int)12),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_MODE_HARD_LIGHT']/*"/>	
        /// <msdn-id>hh706313</msdn-id>	
        /// <unmanaged>D2D1_BLEND_MODE_HARD_LIGHT</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_MODE_HARD_LIGHT</unmanaged-short>	
        HardLight = unchecked((int)13),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_MODE_VIVID_LIGHT']/*"/>	
        /// <msdn-id>hh706313</msdn-id>	
        /// <unmanaged>D2D1_BLEND_MODE_VIVID_LIGHT</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_MODE_VIVID_LIGHT</unmanaged-short>	
        VividLight = unchecked((int)14),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_MODE_LINEAR_LIGHT']/*"/>	
        /// <msdn-id>hh706313</msdn-id>	
        /// <unmanaged>D2D1_BLEND_MODE_LINEAR_LIGHT</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_MODE_LINEAR_LIGHT</unmanaged-short>	
        LinearLight = unchecked((int)15),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_MODE_PIN_LIGHT']/*"/>	
        /// <msdn-id>hh706313</msdn-id>	
        /// <unmanaged>D2D1_BLEND_MODE_PIN_LIGHT</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_MODE_PIN_LIGHT</unmanaged-short>	
        PinLight = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_MODE_HARD_MIX']/*"/>	
        /// <msdn-id>hh706313</msdn-id>	
        /// <unmanaged>D2D1_BLEND_MODE_HARD_MIX</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_MODE_HARD_MIX</unmanaged-short>	
        HardMix = unchecked((int)17),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_MODE_DIFFERENCE']/*"/>	
        /// <msdn-id>hh706313</msdn-id>	
        /// <unmanaged>D2D1_BLEND_MODE_DIFFERENCE</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_MODE_DIFFERENCE</unmanaged-short>	
        Difference = unchecked((int)18),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_MODE_EXCLUSION']/*"/>	
        /// <msdn-id>hh706313</msdn-id>	
        /// <unmanaged>D2D1_BLEND_MODE_EXCLUSION</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_MODE_EXCLUSION</unmanaged-short>	
        Exclusion = unchecked((int)19),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_MODE_HUE']/*"/>	
        /// <msdn-id>hh706313</msdn-id>	
        /// <unmanaged>D2D1_BLEND_MODE_HUE</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_MODE_HUE</unmanaged-short>	
        Hue = unchecked((int)20),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_MODE_SATURATION']/*"/>	
        /// <msdn-id>hh706313</msdn-id>	
        /// <unmanaged>D2D1_BLEND_MODE_SATURATION</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_MODE_SATURATION</unmanaged-short>	
        Saturation = unchecked((int)21),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_MODE_COLOR']/*"/>	
        /// <msdn-id>hh706313</msdn-id>	
        /// <unmanaged>D2D1_BLEND_MODE_COLOR</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_MODE_COLOR</unmanaged-short>	
        Color = unchecked((int)22),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_MODE_LUMINOSITY']/*"/>	
        /// <msdn-id>hh706313</msdn-id>	
        /// <unmanaged>D2D1_BLEND_MODE_LUMINOSITY</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_MODE_LUMINOSITY</unmanaged-short>	
        Luminosity = unchecked((int)23),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_MODE_SUBTRACT']/*"/>	
        /// <msdn-id>hh706313</msdn-id>	
        /// <unmanaged>D2D1_BLEND_MODE_SUBTRACT</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_MODE_SUBTRACT</unmanaged-short>	
        Subtract = unchecked((int)24),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_MODE_DIVISION']/*"/>	
        /// <msdn-id>hh706313</msdn-id>	
        /// <unmanaged>D2D1_BLEND_MODE_DIVISION</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_MODE_DIVISION</unmanaged-short>	
        Division = unchecked((int)25),			
    }
    
    /// <summary>	
    /// <p>Specifies the blend operation on two color sources.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This enumeration has the same numeric values as <strong>D3D10_BLEND_OP</strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_OPERATION']/*"/>	
    /// <msdn-id>hh404278</msdn-id>	
    /// <unmanaged>D2D1_BLEND_OPERATION</unmanaged>	
    /// <unmanaged-short>D2D1_BLEND_OPERATION</unmanaged-short>	
    public enum BlendOperation : int {	
        
        /// <summary>	
        /// <dd> <p>Add source 1 and source 2.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_OPERATION_ADD']/*"/>	
        /// <msdn-id>hh404278</msdn-id>	
        /// <unmanaged>D2D1_BLEND_OPERATION_ADD</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_OPERATION_ADD</unmanaged-short>	
        Add = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Subtract source 1 from source 2.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_OPERATION_SUBTRACT']/*"/>	
        /// <msdn-id>hh404278</msdn-id>	
        /// <unmanaged>D2D1_BLEND_OPERATION_SUBTRACT</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_OPERATION_SUBTRACT</unmanaged-short>	
        Subtract = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Subtract source 2 from source 1.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_OPERATION_REV_SUBTRACT']/*"/>	
        /// <msdn-id>hh404278</msdn-id>	
        /// <unmanaged>D2D1_BLEND_OPERATION_REV_SUBTRACT</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_OPERATION_REV_SUBTRACT</unmanaged-short>	
        ReverseSubtract = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Find the minimum of source 1 and source 2.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_OPERATION_MIN']/*"/>	
        /// <msdn-id>hh404278</msdn-id>	
        /// <unmanaged>D2D1_BLEND_OPERATION_MIN</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_OPERATION_MIN</unmanaged-short>	
        Minimum = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Find the maximum of source 1 and source 2.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_OPERATION_MAX']/*"/>	
        /// <msdn-id>hh404278</msdn-id>	
        /// <unmanaged>D2D1_BLEND_OPERATION_MAX</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_OPERATION_MAX</unmanaged-short>	
        Maximum = unchecked((int)5),			
    }
    
    /// <summary>	
    /// <p>Use the blend effect to combine 2 images.    This effect has 26 blend modes.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.Blend"/>.</p><p> </p><ul> <li>Blending</li> <li>Effect</li> <li>Blend</li> <li>HSL<ul> <li>Converting</li> <li>Converting</li> </ul> </li> <li>Output</li> <li>Sample</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_PROP']/*"/>	
    /// <msdn-id>hh706313</msdn-id>	
    /// <unmanaged>D2D1_BLEND_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_BLEND_PROP</unmanaged-short>	
    public enum BlendProperties : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BLEND_PROP_MODE']/*"/>	
        /// <msdn-id>hh706313</msdn-id>	
        /// <unmanaged>D2D1_BLEND_PROP_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_BLEND_PROP_MODE</unmanaged-short>	
        Mode = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Use the border effect to extend an image from the edges. You can use this effect to repeat the pixels from the edges of the image, wrap the pixels from the opposite end of the image, or mirror the pixels across the bitmap border to extend the bitmap region.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.Border"/>.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BORDER_EDGE_MODE']/*"/>	
    /// <msdn-id>hh706314</msdn-id>	
    /// <unmanaged>D2D1_BORDER_EDGE_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_BORDER_EDGE_MODE</unmanaged-short>	
    public enum BorderEdgeMode : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BORDER_EDGE_MODE_CLAMP']/*"/>	
        /// <msdn-id>hh706314</msdn-id>	
        /// <unmanaged>D2D1_BORDER_EDGE_MODE_CLAMP</unmanaged>	
        /// <unmanaged-short>D2D1_BORDER_EDGE_MODE_CLAMP</unmanaged-short>	
        Clamp = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BORDER_EDGE_MODE_WRAP']/*"/>	
        /// <msdn-id>hh706314</msdn-id>	
        /// <unmanaged>D2D1_BORDER_EDGE_MODE_WRAP</unmanaged>	
        /// <unmanaged-short>D2D1_BORDER_EDGE_MODE_WRAP</unmanaged-short>	
        Wrap = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BORDER_EDGE_MODE_MIRROR']/*"/>	
        /// <msdn-id>hh706314</msdn-id>	
        /// <unmanaged>D2D1_BORDER_EDGE_MODE_MIRROR</unmanaged>	
        /// <unmanaged-short>D2D1_BORDER_EDGE_MODE_MIRROR</unmanaged-short>	
        Mirror = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Use the 3D perspective transform effect to rotate the image in 3 dimensions as if viewed from a distance.</p><p>The 3D perspective transform is more convenient than the 3D transform effect, but only exposes a subset of the functionality. You can compute a full 3D transformation matrix and apply  a more arbitrary transform matrix to an image using the 3D transform effect.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.PerspectiveTransform3D"/>.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Interpolation</li> <li>Border</li> <li>Output</li> <li>Sample</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BORDER_MODE']/*"/>	
    /// <msdn-id>Hh706310</msdn-id>	
    /// <unmanaged>D2D1_BORDER_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_BORDER_MODE</unmanaged-short>	
    public enum BorderMode : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BORDER_MODE_SOFT']/*"/>	
        /// <msdn-id>Hh706310</msdn-id>	
        /// <unmanaged>D2D1_BORDER_MODE_SOFT</unmanaged>	
        /// <unmanaged-short>D2D1_BORDER_MODE_SOFT</unmanaged-short>	
        Soft = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BORDER_MODE_HARD']/*"/>	
        /// <msdn-id>Hh706310</msdn-id>	
        /// <unmanaged>D2D1_BORDER_MODE_HARD</unmanaged>	
        /// <unmanaged-short>D2D1_BORDER_MODE_HARD</unmanaged-short>	
        Hard = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Use the border effect to extend an image from the edges. You can use this effect to repeat the pixels from the edges of the image, wrap the pixels from the opposite end of the image, or mirror the pixels across the bitmap border to extend the bitmap region.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.Border"/>.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BORDER_PROP']/*"/>	
    /// <msdn-id>hh706314</msdn-id>	
    /// <unmanaged>D2D1_BORDER_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_BORDER_PROP</unmanaged-short>	
    public enum BorderProperties : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BORDER_PROP_EDGE_MODE_X']/*"/>	
        /// <msdn-id>hh706314</msdn-id>	
        /// <unmanaged>D2D1_BORDER_PROP_EDGE_MODE_X</unmanaged>	
        /// <unmanaged-short>D2D1_BORDER_PROP_EDGE_MODE_X</unmanaged-short>	
        EdgeModeX = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BORDER_PROP_EDGE_MODE_Y']/*"/>	
        /// <msdn-id>hh706314</msdn-id>	
        /// <unmanaged>D2D1_BORDER_PROP_EDGE_MODE_Y</unmanaged>	
        /// <unmanaged-short>D2D1_BORDER_PROP_EDGE_MODE_Y</unmanaged-short>	
        EdgeModeY = unchecked((int)1),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BRIGHTNESS_PROP']/*"/>	
    /// <unmanaged>D2D1_BRIGHTNESS_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_BRIGHTNESS_PROP</unmanaged-short>	
    public enum BrightnessProperties : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BRIGHTNESS_PROP_WHITE_POINT']/*"/>	
        /// <unmanaged>D2D1_BRIGHTNESS_PROP_WHITE_POINT</unmanaged>	
        /// <unmanaged-short>D2D1_BRIGHTNESS_PROP_WHITE_POINT</unmanaged-short>	
        WhitePoint = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BRIGHTNESS_PROP_BLACK_POINT']/*"/>	
        /// <unmanaged>D2D1_BRIGHTNESS_PROP_BLACK_POINT</unmanaged>	
        /// <unmanaged-short>D2D1_BRIGHTNESS_PROP_BLACK_POINT</unmanaged-short>	
        BlackPoint = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Represents the bit depth of the imaging pipeline in Direct2D.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p><strong>Note</strong>?? Feature level 9 may or may not support precision types other than 8BPC.	
    /// </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BUFFER_PRECISION']/*"/>	
    /// <msdn-id>hh446986</msdn-id>	
    /// <unmanaged>D2D1_BUFFER_PRECISION</unmanaged>	
    /// <unmanaged-short>D2D1_BUFFER_PRECISION</unmanaged-short>	
    public enum BufferPrecision : int {	
        
        /// <summary>	
        /// <dd> <p>The buffer precision is not specified.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BUFFER_PRECISION_UNKNOWN']/*"/>	
        /// <msdn-id>hh446986</msdn-id>	
        /// <unmanaged>D2D1_BUFFER_PRECISION_UNKNOWN</unmanaged>	
        /// <unmanaged-short>D2D1_BUFFER_PRECISION_UNKNOWN</unmanaged-short>	
        Unknown = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Use 8-bit normalized integer per channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BUFFER_PRECISION_8BPC_UNORM']/*"/>	
        /// <msdn-id>hh446986</msdn-id>	
        /// <unmanaged>D2D1_BUFFER_PRECISION_8BPC_UNORM</unmanaged>	
        /// <unmanaged-short>D2D1_BUFFER_PRECISION_8BPC_UNORM</unmanaged-short>	
        PerChannel8UNorm = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Use 8-bit normalized integer standard RGB data per channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BUFFER_PRECISION_8BPC_UNORM_SRGB']/*"/>	
        /// <msdn-id>hh446986</msdn-id>	
        /// <unmanaged>D2D1_BUFFER_PRECISION_8BPC_UNORM_SRGB</unmanaged>	
        /// <unmanaged-short>D2D1_BUFFER_PRECISION_8BPC_UNORM_SRGB</unmanaged-short>	
        PerChannel8UNormSRgb = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Use 16-bit normalized integer per channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BUFFER_PRECISION_16BPC_UNORM']/*"/>	
        /// <msdn-id>hh446986</msdn-id>	
        /// <unmanaged>D2D1_BUFFER_PRECISION_16BPC_UNORM</unmanaged>	
        /// <unmanaged-short>D2D1_BUFFER_PRECISION_16BPC_UNORM</unmanaged-short>	
        PerChannel16UNorm = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Use 16-bit floats per channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BUFFER_PRECISION_16BPC_FLOAT']/*"/>	
        /// <msdn-id>hh446986</msdn-id>	
        /// <unmanaged>D2D1_BUFFER_PRECISION_16BPC_FLOAT</unmanaged>	
        /// <unmanaged-short>D2D1_BUFFER_PRECISION_16BPC_FLOAT</unmanaged-short>	
        PerChannel16Float = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Use 32-bit floats per channel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_BUFFER_PRECISION_32BPC_FLOAT']/*"/>	
        /// <msdn-id>hh446986</msdn-id>	
        /// <unmanaged>D2D1_BUFFER_PRECISION_32BPC_FLOAT</unmanaged>	
        /// <unmanaged-short>D2D1_BUFFER_PRECISION_32BPC_FLOAT</unmanaged-short>	
        PerChannel32Float = unchecked((int)5),			
    }
    
    /// <summary>	
    /// <p>Describes the shape at the end of a line or segment.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> The following illustration shows the available cap styles for lines or segments. The red portion of the line shows the extra area added by the line cap setting. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CAP_STYLE']/*"/>	
    /// <msdn-id>dd368079</msdn-id>	
    /// <unmanaged>D2D1_CAP_STYLE</unmanaged>	
    /// <unmanaged-short>D2D1_CAP_STYLE</unmanaged-short>	
    public enum CapStyle : int {	
        
        /// <summary>	
        /// <dd> <p>A cap that does not extend past the last point of the line. Comparable to cap used for objects other than lines. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CAP_STYLE_FLAT']/*"/>	
        /// <msdn-id>dd368079</msdn-id>	
        /// <unmanaged>D2D1_CAP_STYLE_FLAT</unmanaged>	
        /// <unmanaged-short>D2D1_CAP_STYLE_FLAT</unmanaged-short>	
        Flat = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Half of a square that has a length equal to the line thickness.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CAP_STYLE_SQUARE']/*"/>	
        /// <msdn-id>dd368079</msdn-id>	
        /// <unmanaged>D2D1_CAP_STYLE_SQUARE</unmanaged>	
        /// <unmanaged-short>D2D1_CAP_STYLE_SQUARE</unmanaged-short>	
        Square = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>A semicircle that has a diameter equal to the line thickness.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CAP_STYLE_ROUND']/*"/>	
        /// <msdn-id>dd368079</msdn-id>	
        /// <unmanaged>D2D1_CAP_STYLE_ROUND</unmanaged>	
        /// <unmanaged-short>D2D1_CAP_STYLE_ROUND</unmanaged-short>	
        Round = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>An isosceles right triangle whose hypotenuse is equal in length to the thickness of the line.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CAP_STYLE_TRIANGLE']/*"/>	
        /// <msdn-id>dd368079</msdn-id>	
        /// <unmanaged>D2D1_CAP_STYLE_TRIANGLE</unmanaged>	
        /// <unmanaged-short>D2D1_CAP_STYLE_TRIANGLE</unmanaged-short>	
        Triangle = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>Describes flags that influence how the renderer interacts with a custom vertex shader.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CHANGE_TYPE']/*"/>	
    /// <msdn-id>hh404280</msdn-id>	
    /// <unmanaged>D2D1_CHANGE_TYPE</unmanaged>	
    /// <unmanaged-short>D2D1_CHANGE_TYPE</unmanaged-short>	
    public enum ChangeType : int {	
        
        /// <summary>	
        /// <dd> <p>There were no changes.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CHANGE_TYPE_NONE']/*"/>	
        /// <msdn-id>hh404280</msdn-id>	
        /// <unmanaged>D2D1_CHANGE_TYPE_NONE</unmanaged>	
        /// <unmanaged-short>D2D1_CHANGE_TYPE_NONE</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The properties of the effect changed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CHANGE_TYPE_PROPERTIES']/*"/>	
        /// <msdn-id>hh404280</msdn-id>	
        /// <unmanaged>D2D1_CHANGE_TYPE_PROPERTIES</unmanaged>	
        /// <unmanaged-short>D2D1_CHANGE_TYPE_PROPERTIES</unmanaged-short>	
        Properties = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The context state changed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CHANGE_TYPE_CONTEXT']/*"/>	
        /// <msdn-id>hh404280</msdn-id>	
        /// <unmanaged>D2D1_CHANGE_TYPE_CONTEXT</unmanaged>	
        /// <unmanaged-short>D2D1_CHANGE_TYPE_CONTEXT</unmanaged-short>	
        Context = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>The effect?s transform graph has changed.  This happens only when an effect supports a variable input count.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CHANGE_TYPE_GRAPH']/*"/>	
        /// <msdn-id>hh404280</msdn-id>	
        /// <unmanaged>D2D1_CHANGE_TYPE_GRAPH</unmanaged>	
        /// <unmanaged-short>D2D1_CHANGE_TYPE_GRAPH</unmanaged-short>	
        Graph = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>Allows a caller to control the channel depth of a stage in the rendering pipeline.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CHANNEL_DEPTH']/*"/>	
    /// <msdn-id>hh404281</msdn-id>	
    /// <unmanaged>D2D1_CHANNEL_DEPTH</unmanaged>	
    /// <unmanaged-short>D2D1_CHANNEL_DEPTH</unmanaged-short>	
    public enum ChannelDepth : int {	
        
        /// <summary>	
        /// <dd> <p>The channel depth is the default. It is inherited from the inputs.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CHANNEL_DEPTH_DEFAULT']/*"/>	
        /// <msdn-id>hh404281</msdn-id>	
        /// <unmanaged>D2D1_CHANNEL_DEPTH_DEFAULT</unmanaged>	
        /// <unmanaged-short>D2D1_CHANNEL_DEPTH_DEFAULT</unmanaged-short>	
        Default = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The channel depth is 1.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CHANNEL_DEPTH_1']/*"/>	
        /// <msdn-id>hh404281</msdn-id>	
        /// <unmanaged>D2D1_CHANNEL_DEPTH_1</unmanaged>	
        /// <unmanaged-short>D2D1_CHANNEL_DEPTH_1</unmanaged-short>	
        One = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The channel depth is 4.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CHANNEL_DEPTH_4']/*"/>	
        /// <msdn-id>hh404281</msdn-id>	
        /// <unmanaged>D2D1_CHANNEL_DEPTH_4</unmanaged>	
        /// <unmanaged-short>D2D1_CHANNEL_DEPTH_4</unmanaged-short>	
        Four = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p>Use the displacement map effect to displace the pixels of the input image by the intensity values of a second input image.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.DisplacementMap"/>.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Color</li> <li>Output</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CHANNEL_SELECTOR']/*"/>	
    /// <msdn-id>hh706330</msdn-id>	
    /// <unmanaged>D2D1_CHANNEL_SELECTOR</unmanaged>	
    /// <unmanaged-short>D2D1_CHANNEL_SELECTOR</unmanaged-short>	
    public enum ChannelSelector : int {	
        
        /// <summary>	
        /// <dd><em>YChannelSelector</em> the intensity of the selected RGBA channel from the displacement bitmap that displaces the input image in the Y direction.</dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CHANNEL_SELECTOR_R']/*"/>	
        /// <msdn-id>hh706330</msdn-id>	
        /// <unmanaged>D2D1_CHANNEL_SELECTOR_R</unmanaged>	
        /// <unmanaged-short>D2D1_CHANNEL_SELECTOR_R</unmanaged-short>	
        R = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CHANNEL_SELECTOR_G']/*"/>	
        /// <msdn-id>hh706330</msdn-id>	
        /// <unmanaged>D2D1_CHANNEL_SELECTOR_G</unmanaged>	
        /// <unmanaged-short>D2D1_CHANNEL_SELECTOR_G</unmanaged-short>	
        G = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CHANNEL_SELECTOR_B']/*"/>	
        /// <msdn-id>hh706330</msdn-id>	
        /// <unmanaged>D2D1_CHANNEL_SELECTOR_B</unmanaged>	
        /// <unmanaged-short>D2D1_CHANNEL_SELECTOR_B</unmanaged-short>	
        B = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CHANNEL_SELECTOR_A']/*"/>	
        /// <msdn-id>hh706330</msdn-id>	
        /// <unmanaged>D2D1_CHANNEL_SELECTOR_A</unmanaged>	
        /// <unmanaged-short>D2D1_CHANNEL_SELECTOR_A</unmanaged-short>	
        A = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>Identifiers for properties of the Chroma-key effect.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CHROMAKEY_PROP']/*"/>	
    /// <msdn-id>dn890719</msdn-id>	
    /// <unmanaged>D2D1_CHROMAKEY_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_CHROMAKEY_PROP</unmanaged-short>	
    public enum ChromakeyProperty : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CHROMAKEY_PROP_COLOR']/*"/>	
        /// <msdn-id>dn890719</msdn-id>	
        /// <unmanaged>D2D1_CHROMAKEY_PROP_COLOR</unmanaged>	
        /// <unmanaged-short>D2D1_CHROMAKEY_PROP_COLOR</unmanaged-short>	
        Color = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CHROMAKEY_PROP_TOLERANCE']/*"/>	
        /// <msdn-id>dn890719</msdn-id>	
        /// <unmanaged>D2D1_CHROMAKEY_PROP_TOLERANCE</unmanaged>	
        /// <unmanaged-short>D2D1_CHROMAKEY_PROP_TOLERANCE</unmanaged-short>	
        Tolerance = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CHROMAKEY_PROP_INVERT_ALPHA']/*"/>	
        /// <msdn-id>dn890719</msdn-id>	
        /// <unmanaged>D2D1_CHROMAKEY_PROP_INVERT_ALPHA</unmanaged>	
        /// <unmanaged-short>D2D1_CHROMAKEY_PROP_INVERT_ALPHA</unmanaged-short>	
        InvertAlpha = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CHROMAKEY_PROP_FEATHER']/*"/>	
        /// <msdn-id>dn890719</msdn-id>	
        /// <unmanaged>D2D1_CHROMAKEY_PROP_FEATHER</unmanaged>	
        /// <unmanaged-short>D2D1_CHROMAKEY_PROP_FEATHER</unmanaged-short>	
        Feather = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>Defines how to interpolate between colors.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLOR_INTERPOLATION_MODE']/*"/>	
    /// <msdn-id>hh871441</msdn-id>	
    /// <unmanaged>D2D1_COLOR_INTERPOLATION_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_COLOR_INTERPOLATION_MODE</unmanaged-short>	
    public enum ColorInterpolationMode : int {	
        
        /// <summary>	
        /// <dd> <p>Colors are interpolated with straight alpha.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLOR_INTERPOLATION_MODE_STRAIGHT']/*"/>	
        /// <msdn-id>hh871441</msdn-id>	
        /// <unmanaged>D2D1_COLOR_INTERPOLATION_MODE_STRAIGHT</unmanaged>	
        /// <unmanaged-short>D2D1_COLOR_INTERPOLATION_MODE_STRAIGHT</unmanaged-short>	
        Straight = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Colors are interpolated with premultiplied alpha.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLOR_INTERPOLATION_MODE_PREMULTIPLIED']/*"/>	
        /// <msdn-id>hh871441</msdn-id>	
        /// <unmanaged>D2D1_COLOR_INTERPOLATION_MODE_PREMULTIPLIED</unmanaged>	
        /// <unmanaged-short>D2D1_COLOR_INTERPOLATION_MODE_PREMULTIPLIED</unmanaged-short>	
        Premultiplied = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Use the color management effect to transform an image from one ICC (International Color Consortium) color profile to another.  The effect transforms the image according to the ICC specification.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.ColorManagement"/>.</p><p> </p><ul> <li>Effect</li> <li>Rendering</li> <li>Input</li> <li>Compliance</li> <li>Alpha</li> <li>Quality</li> <li>Sample</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLORMANAGEMENT_ALPHA_MODE']/*"/>	
    /// <msdn-id>hh706318</msdn-id>	
    /// <unmanaged>D2D1_COLORMANAGEMENT_ALPHA_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_COLORMANAGEMENT_ALPHA_MODE</unmanaged-short>	
    public enum ColorManagementAlphaMode : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLORMANAGEMENT_ALPHA_MODE_PREMULTIPLIED']/*"/>	
        /// <msdn-id>hh706318</msdn-id>	
        /// <unmanaged>D2D1_COLORMANAGEMENT_ALPHA_MODE_PREMULTIPLIED</unmanaged>	
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_ALPHA_MODE_PREMULTIPLIED</unmanaged-short>	
        Premultiplied = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLORMANAGEMENT_ALPHA_MODE_STRAIGHT']/*"/>	
        /// <msdn-id>hh706318</msdn-id>	
        /// <unmanaged>D2D1_COLORMANAGEMENT_ALPHA_MODE_STRAIGHT</unmanaged>	
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_ALPHA_MODE_STRAIGHT</unmanaged-short>	
        Straight = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Use the color management effect to transform an image from one ICC (International Color Consortium) color profile to another.  The effect transforms the image according to the ICC specification.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.ColorManagement"/>.</p><p> </p><ul> <li>Effect</li> <li>Rendering</li> <li>Input</li> <li>Compliance</li> <li>Alpha</li> <li>Quality</li> <li>Sample</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLORMANAGEMENT_PROP']/*"/>	
    /// <msdn-id>hh706318</msdn-id>	
    /// <unmanaged>D2D1_COLORMANAGEMENT_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_COLORMANAGEMENT_PROP</unmanaged-short>	
    public enum ColorManagementProperties : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLORMANAGEMENT_PROP_SOURCE_COLOR_CONTEXT']/*"/>	
        /// <msdn-id>hh706318</msdn-id>	
        /// <unmanaged>D2D1_COLORMANAGEMENT_PROP_SOURCE_COLOR_CONTEXT</unmanaged>	
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_PROP_SOURCE_COLOR_CONTEXT</unmanaged-short>	
        SourceColorContext = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLORMANAGEMENT_PROP_SOURCE_RENDERING_INTENT']/*"/>	
        /// <msdn-id>hh706318</msdn-id>	
        /// <unmanaged>D2D1_COLORMANAGEMENT_PROP_SOURCE_RENDERING_INTENT</unmanaged>	
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_PROP_SOURCE_RENDERING_INTENT</unmanaged-short>	
        SourceRenderingIntent = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLORMANAGEMENT_PROP_DESTINATION_COLOR_CONTEXT']/*"/>	
        /// <msdn-id>hh706318</msdn-id>	
        /// <unmanaged>D2D1_COLORMANAGEMENT_PROP_DESTINATION_COLOR_CONTEXT</unmanaged>	
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_PROP_DESTINATION_COLOR_CONTEXT</unmanaged-short>	
        DestinationColorContext = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLORMANAGEMENT_PROP_DESTINATION_RENDERING_INTENT']/*"/>	
        /// <msdn-id>hh706318</msdn-id>	
        /// <unmanaged>D2D1_COLORMANAGEMENT_PROP_DESTINATION_RENDERING_INTENT</unmanaged>	
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_PROP_DESTINATION_RENDERING_INTENT</unmanaged-short>	
        DestinationRenderingIntent = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLORMANAGEMENT_PROP_ALPHA_MODE']/*"/>	
        /// <msdn-id>hh706318</msdn-id>	
        /// <unmanaged>D2D1_COLORMANAGEMENT_PROP_ALPHA_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_PROP_ALPHA_MODE</unmanaged-short>	
        AlphaMode = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLORMANAGEMENT_PROP_QUALITY']/*"/>	
        /// <msdn-id>hh706318</msdn-id>	
        /// <unmanaged>D2D1_COLORMANAGEMENT_PROP_QUALITY</unmanaged>	
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_PROP_QUALITY</unmanaged-short>	
        Quality = unchecked((int)5),			
    }
    
    /// <summary>	
    /// <p>Use the color management effect to transform an image from one ICC (International Color Consortium) color profile to another.  The effect transforms the image according to the ICC specification.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.ColorManagement"/>.</p><p> </p><ul> <li>Effect</li> <li>Rendering</li> <li>Input</li> <li>Compliance</li> <li>Alpha</li> <li>Quality</li> <li>Sample</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLORMANAGEMENT_QUALITY']/*"/>	
    /// <msdn-id>hh706318</msdn-id>	
    /// <unmanaged>D2D1_COLORMANAGEMENT_QUALITY</unmanaged>	
    /// <unmanaged-short>D2D1_COLORMANAGEMENT_QUALITY</unmanaged-short>	
    public enum ColorManagementQuality : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLORMANAGEMENT_QUALITY_PROOF']/*"/>	
        /// <msdn-id>hh706318</msdn-id>	
        /// <unmanaged>D2D1_COLORMANAGEMENT_QUALITY_PROOF</unmanaged>	
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_QUALITY_PROOF</unmanaged-short>	
        Proof = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLORMANAGEMENT_QUALITY_NORMAL']/*"/>	
        /// <msdn-id>hh706318</msdn-id>	
        /// <unmanaged>D2D1_COLORMANAGEMENT_QUALITY_NORMAL</unmanaged>	
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_QUALITY_NORMAL</unmanaged-short>	
        Normal = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLORMANAGEMENT_QUALITY_BEST']/*"/>	
        /// <msdn-id>hh706318</msdn-id>	
        /// <unmanaged>D2D1_COLORMANAGEMENT_QUALITY_BEST</unmanaged>	
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_QUALITY_BEST</unmanaged-short>	
        Best = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Use the color management effect to transform an image from one ICC (International Color Consortium) color profile to another.  The effect transforms the image according to the ICC specification.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.ColorManagement"/>.</p><p> </p><ul> <li>Effect</li> <li>Rendering</li> <li>Input</li> <li>Compliance</li> <li>Alpha</li> <li>Quality</li> <li>Sample</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLORMANAGEMENT_RENDERING_INTENT']/*"/>	
    /// <msdn-id>hh706318</msdn-id>	
    /// <unmanaged>D2D1_COLORMANAGEMENT_RENDERING_INTENT</unmanaged>	
    /// <unmanaged-short>D2D1_COLORMANAGEMENT_RENDERING_INTENT</unmanaged-short>	
    public enum ColorManagementRenderingIntent : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLORMANAGEMENT_RENDERING_INTENT_PERCEPTUAL']/*"/>	
        /// <msdn-id>hh706318</msdn-id>	
        /// <unmanaged>D2D1_COLORMANAGEMENT_RENDERING_INTENT_PERCEPTUAL</unmanaged>	
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_RENDERING_INTENT_PERCEPTUAL</unmanaged-short>	
        Perceptual = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLORMANAGEMENT_RENDERING_INTENT_RELATIVE_COLORIMETRIC']/*"/>	
        /// <msdn-id>hh706318</msdn-id>	
        /// <unmanaged>D2D1_COLORMANAGEMENT_RENDERING_INTENT_RELATIVE_COLORIMETRIC</unmanaged>	
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_RENDERING_INTENT_RELATIVE_COLORIMETRIC</unmanaged-short>	
        RelativeColorimetric = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLORMANAGEMENT_RENDERING_INTENT_SATURATION']/*"/>	
        /// <msdn-id>hh706318</msdn-id>	
        /// <unmanaged>D2D1_COLORMANAGEMENT_RENDERING_INTENT_SATURATION</unmanaged>	
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_RENDERING_INTENT_SATURATION</unmanaged-short>	
        Saturation = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLORMANAGEMENT_RENDERING_INTENT_ABSOLUTE_COLORIMETRIC']/*"/>	
        /// <msdn-id>hh706318</msdn-id>	
        /// <unmanaged>D2D1_COLORMANAGEMENT_RENDERING_INTENT_ABSOLUTE_COLORIMETRIC</unmanaged>	
        /// <unmanaged-short>D2D1_COLORMANAGEMENT_RENDERING_INTENT_ABSOLUTE_COLORIMETRIC</unmanaged-short>	
        AbsoluteColorimetric = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>Use the  color matrix effect to alter  the RGBA values of a bitmap.</p><p>You can use this effect to:</p><ul> <li>Remove a color channel from an image.</li> <li>Reduce the color in an image.</li> <li>Swap color channels.</li> <li>Combine color channels.</li> </ul><p>The saturation and hue rotate effects are specialized versions of the color matrix filter that are optimized for the intended use of the effects.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.ColorMatrix"/>.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Alpha</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLORMATRIX_ALPHA_MODE']/*"/>	
    /// <msdn-id>hh706319</msdn-id>	
    /// <unmanaged>D2D1_COLORMATRIX_ALPHA_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_COLORMATRIX_ALPHA_MODE</unmanaged-short>	
    public enum ColorMatrixAlphaMode : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLORMATRIX_ALPHA_MODE_PREMULTIPLIED']/*"/>	
        /// <msdn-id>hh706319</msdn-id>	
        /// <unmanaged>D2D1_COLORMATRIX_ALPHA_MODE_PREMULTIPLIED</unmanaged>	
        /// <unmanaged-short>D2D1_COLORMATRIX_ALPHA_MODE_PREMULTIPLIED</unmanaged-short>	
        Premultiplied = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLORMATRIX_ALPHA_MODE_STRAIGHT']/*"/>	
        /// <msdn-id>hh706319</msdn-id>	
        /// <unmanaged>D2D1_COLORMATRIX_ALPHA_MODE_STRAIGHT</unmanaged>	
        /// <unmanaged-short>D2D1_COLORMATRIX_ALPHA_MODE_STRAIGHT</unmanaged-short>	
        Straight = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Use the  color matrix effect to alter  the RGBA values of a bitmap.</p><p>You can use this effect to:</p><ul> <li>Remove a color channel from an image.</li> <li>Reduce the color in an image.</li> <li>Swap color channels.</li> <li>Combine color channels.</li> </ul><p>The saturation and hue rotate effects are specialized versions of the color matrix filter that are optimized for the intended use of the effects.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.ColorMatrix"/>.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Alpha</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLORMATRIX_PROP']/*"/>	
    /// <msdn-id>hh706319</msdn-id>	
    /// <unmanaged>D2D1_COLORMATRIX_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_COLORMATRIX_PROP</unmanaged-short>	
    public enum ColorMatrixProperties : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLORMATRIX_PROP_COLOR_MATRIX']/*"/>	
        /// <msdn-id>hh706319</msdn-id>	
        /// <unmanaged>D2D1_COLORMATRIX_PROP_COLOR_MATRIX</unmanaged>	
        /// <unmanaged-short>D2D1_COLORMATRIX_PROP_COLOR_MATRIX</unmanaged-short>	
        ColorMatrix = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLORMATRIX_PROP_ALPHA_MODE']/*"/>	
        /// <msdn-id>hh706319</msdn-id>	
        /// <unmanaged>D2D1_COLORMATRIX_PROP_ALPHA_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_COLORMATRIX_PROP_ALPHA_MODE</unmanaged-short>	
        AlphaMode = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLORMATRIX_PROP_CLAMP_OUTPUT']/*"/>	
        /// <msdn-id>hh706319</msdn-id>	
        /// <unmanaged>D2D1_COLORMATRIX_PROP_CLAMP_OUTPUT</unmanaged>	
        /// <unmanaged-short>D2D1_COLORMATRIX_PROP_CLAMP_OUTPUT</unmanaged-short>	
        ClampOutput = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Defines a color space.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLOR_SPACE']/*"/>	
    /// <msdn-id>hh847945</msdn-id>	
    /// <unmanaged>D2D1_COLOR_SPACE</unmanaged>	
    /// <unmanaged-short>D2D1_COLOR_SPACE</unmanaged-short>	
    public enum ColorSpace : int {	
        
        /// <summary>	
        /// <dd> <p>The color space is described by accompanying data, such as a color profile.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLOR_SPACE_CUSTOM']/*"/>	
        /// <msdn-id>hh847945</msdn-id>	
        /// <unmanaged>D2D1_COLOR_SPACE_CUSTOM</unmanaged>	
        /// <unmanaged-short>D2D1_COLOR_SPACE_CUSTOM</unmanaged-short>	
        Custom = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The sRGB color space.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLOR_SPACE_SRGB']/*"/>	
        /// <msdn-id>hh847945</msdn-id>	
        /// <unmanaged>D2D1_COLOR_SPACE_SRGB</unmanaged>	
        /// <unmanaged-short>D2D1_COLOR_SPACE_SRGB</unmanaged-short>	
        SRgb = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The scRGB color space.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COLOR_SPACE_SCRGB']/*"/>	
        /// <msdn-id>hh847945</msdn-id>	
        /// <unmanaged>D2D1_COLOR_SPACE_SCRGB</unmanaged>	
        /// <unmanaged-short>D2D1_COLOR_SPACE_SCRGB</unmanaged-short>	
        ScRgb = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Specifies the different methods by which two geometries can be combined.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The following illustration shows the different geometry combine modes.	
    /// </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COMBINE_MODE']/*"/>	
    /// <msdn-id>dd368083</msdn-id>	
    /// <unmanaged>D2D1_COMBINE_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_COMBINE_MODE</unmanaged-short>	
    public enum CombineMode : int {	
        
        /// <summary>	
        /// <dd> <p>The two regions are combined by taking the union of both. Given two geometries, <em>A</em> and <em>B</em>, the resulting geometry is geometry <em>A</em> + geometry <em>B</em>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COMBINE_MODE_UNION']/*"/>	
        /// <msdn-id>dd368083</msdn-id>	
        /// <unmanaged>D2D1_COMBINE_MODE_UNION</unmanaged>	
        /// <unmanaged-short>D2D1_COMBINE_MODE_UNION</unmanaged-short>	
        Union = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The two regions are combined by taking their intersection. The new area consists of the overlapping region between the two geometries. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COMBINE_MODE_INTERSECT']/*"/>	
        /// <msdn-id>dd368083</msdn-id>	
        /// <unmanaged>D2D1_COMBINE_MODE_INTERSECT</unmanaged>	
        /// <unmanaged-short>D2D1_COMBINE_MODE_INTERSECT</unmanaged-short>	
        Intersect = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The two regions are combined by taking the area that exists in the first region but not the second and the area that exists in the second region but not the first. Given two geometries, <em>A</em> and <em>B</em>, the new region consists of (<em>A</em>-<em>B</em>) + (<em>B</em>-<em>A</em>). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COMBINE_MODE_XOR']/*"/>	
        /// <msdn-id>dd368083</msdn-id>	
        /// <unmanaged>D2D1_COMBINE_MODE_XOR</unmanaged>	
        /// <unmanaged-short>D2D1_COMBINE_MODE_XOR</unmanaged-short>	
        Xor = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>The second region is excluded from the first. Given two geometries, <em>A</em> and <em>B</em>, the area of geometry <em>B</em> is removed from the area of geometry <em>A</em>, producing a region that is <em>A</em>-<em>B</em>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COMBINE_MODE_EXCLUDE']/*"/>	
        /// <msdn-id>dd368083</msdn-id>	
        /// <unmanaged>D2D1_COMBINE_MODE_EXCLUDE</unmanaged>	
        /// <unmanaged-short>D2D1_COMBINE_MODE_EXCLUDE</unmanaged-short>	
        Exclude = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>Specifies additional features supportable by a compatible render target when it is created.  This enumeration allows a bitwise combination of its member values.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Use this enumeration when creating a compatible render target with the <strong>CreateCompatibleRenderTarget</strong> method. For more information about compatible render targets, see the Render Targets Overview. </p><p>The <strong><see cref="SharpDX.Direct2D1.CompatibleRenderTargetOptions.GdiCompatible"/></strong> option may only be requested if the parent render target was created with <strong><see cref="SharpDX.Direct2D1.RenderTargetUsage.GdiCompatible"/></strong> (for most render targets) or <strong><see cref="SharpDX.Direct2D1.CompatibleRenderTargetOptions.GdiCompatible"/></strong> (for render targets created by the <strong>CreateCompatibleRenderTarget</strong> method).</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS']/*"/>	
    /// <msdn-id>dd368085</msdn-id>	
    /// <unmanaged>D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS</unmanaged>	
    /// <unmanaged-short>D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS</unmanaged-short>	
    [Flags]
    public enum CompatibleRenderTargetOptions : int {	
        
        /// <summary>	
        /// <dd> <p>The render target supports no additional features.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_NONE']/*"/>	
        /// <msdn-id>dd368085</msdn-id>	
        /// <unmanaged>D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_NONE</unmanaged>	
        /// <unmanaged-short>D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_NONE</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The render target supports interoperability with the Windows Graphics Device Interface  (GDI). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_GDI_COMPATIBLE']/*"/>	
        /// <msdn-id>dd368085</msdn-id>	
        /// <unmanaged>D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_GDI_COMPATIBLE</unmanaged>	
        /// <unmanaged-short>D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_GDI_COMPATIBLE</unmanaged-short>	
        GdiCompatible = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Used to specify the blend mode for all of the Direct2D blending operations.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The figure here shows an example of each of the modes with images that have an opacity of 1.0 or 0.5. </p><p></p><p>There can be slightly different interpretations of these enumeration values depending on where the value is used.</p><ul> <li> <p>With a composite effect:	
    /// </p><strong>D2D1_COMPOSITE_MODE_DESTINATION_COPY</strong> is equivalent to <strong><see cref="SharpDX.Direct2D1.CompositeMode.SourceCopy"/></strong> with the inputs inverted.</li> <li> <p> As a parameter to <strong><see cref="SharpDX.Direct2D1.DeviceContext.DrawImage"/></strong>: </p><strong>D2D1_COMPOSITE_MODE_DESTINATION_COPY</strong> is a no-op since the destination is already in the selected target.</li> </ul>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COMPOSITE_MODE']/*"/>	
    /// <msdn-id>hh446995</msdn-id>	
    /// <unmanaged>D2D1_COMPOSITE_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_COMPOSITE_MODE</unmanaged-short>	
    public enum CompositeMode : int {	
        
        /// <summary>	
        /// <dd> <p>The standard source-over-destination blend mode.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COMPOSITE_MODE_SOURCE_OVER']/*"/>	
        /// <msdn-id>hh446995</msdn-id>	
        /// <unmanaged>D2D1_COMPOSITE_MODE_SOURCE_OVER</unmanaged>	
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_SOURCE_OVER</unmanaged-short>	
        SourceOver = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The destination is rendered over the source.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COMPOSITE_MODE_DESTINATION_OVER']/*"/>	
        /// <msdn-id>hh446995</msdn-id>	
        /// <unmanaged>D2D1_COMPOSITE_MODE_DESTINATION_OVER</unmanaged>	
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_DESTINATION_OVER</unmanaged-short>	
        DestinationOver = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Performs a logical clip of the source pixels against the destination pixels.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COMPOSITE_MODE_SOURCE_IN']/*"/>	
        /// <msdn-id>hh446995</msdn-id>	
        /// <unmanaged>D2D1_COMPOSITE_MODE_SOURCE_IN</unmanaged>	
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_SOURCE_IN</unmanaged-short>	
        SourceIn = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>The inverse of the <strong><see cref="SharpDX.Direct2D1.CompositeMode.SourceIn"/></strong> operation.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COMPOSITE_MODE_DESTINATION_IN']/*"/>	
        /// <msdn-id>hh446995</msdn-id>	
        /// <unmanaged>D2D1_COMPOSITE_MODE_DESTINATION_IN</unmanaged>	
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_DESTINATION_IN</unmanaged-short>	
        DestinationIn = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>This is the logical inverse to <strong><see cref="SharpDX.Direct2D1.CompositeMode.SourceIn"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COMPOSITE_MODE_SOURCE_OUT']/*"/>	
        /// <msdn-id>hh446995</msdn-id>	
        /// <unmanaged>D2D1_COMPOSITE_MODE_SOURCE_OUT</unmanaged>	
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_SOURCE_OUT</unmanaged-short>	
        SourceOut = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>The is the logical inverse to <strong><see cref="SharpDX.Direct2D1.CompositeMode.DestinationIn"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COMPOSITE_MODE_DESTINATION_OUT']/*"/>	
        /// <msdn-id>hh446995</msdn-id>	
        /// <unmanaged>D2D1_COMPOSITE_MODE_DESTINATION_OUT</unmanaged>	
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_DESTINATION_OUT</unmanaged-short>	
        DestinationOut = unchecked((int)5),			
        
        /// <summary>	
        /// <dd> <p>Writes the source pixels over the destination where there are destination pixels.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COMPOSITE_MODE_SOURCE_ATOP']/*"/>	
        /// <msdn-id>hh446995</msdn-id>	
        /// <unmanaged>D2D1_COMPOSITE_MODE_SOURCE_ATOP</unmanaged>	
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_SOURCE_ATOP</unmanaged-short>	
        SourceAtop = unchecked((int)6),			
        
        /// <summary>	
        /// <dd> <p>The logical inverse of <strong><see cref="SharpDX.Direct2D1.CompositeMode.SourceAtop"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COMPOSITE_MODE_DESTINATION_ATOP']/*"/>	
        /// <msdn-id>hh446995</msdn-id>	
        /// <unmanaged>D2D1_COMPOSITE_MODE_DESTINATION_ATOP</unmanaged>	
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_DESTINATION_ATOP</unmanaged-short>	
        DestinationAtop = unchecked((int)7),			
        
        /// <summary>	
        /// <dd> <p>The source is inverted with the destination.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COMPOSITE_MODE_XOR']/*"/>	
        /// <msdn-id>hh446995</msdn-id>	
        /// <unmanaged>D2D1_COMPOSITE_MODE_XOR</unmanaged>	
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_XOR</unmanaged-short>	
        Xor = unchecked((int)8),			
        
        /// <summary>	
        /// <dd> <p>The channel components are summed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COMPOSITE_MODE_PLUS']/*"/>	
        /// <msdn-id>hh446995</msdn-id>	
        /// <unmanaged>D2D1_COMPOSITE_MODE_PLUS</unmanaged>	
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_PLUS</unmanaged-short>	
        Plus = unchecked((int)9),			
        
        /// <summary>	
        /// <dd> <p>The source is copied to the destination; the destination pixels are ignored.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COMPOSITE_MODE_SOURCE_COPY']/*"/>	
        /// <msdn-id>hh446995</msdn-id>	
        /// <unmanaged>D2D1_COMPOSITE_MODE_SOURCE_COPY</unmanaged>	
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_SOURCE_COPY</unmanaged-short>	
        SourceCopy = unchecked((int)10),			
        
        /// <summary>	
        /// <dd> <p>Equivalent to <strong><see cref="SharpDX.Direct2D1.CompositeMode.SourceCopy"/></strong>, but pixels outside of the source bounds are unchanged.	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COMPOSITE_MODE_BOUNDED_SOURCE_COPY']/*"/>	
        /// <msdn-id>hh446995</msdn-id>	
        /// <unmanaged>D2D1_COMPOSITE_MODE_BOUNDED_SOURCE_COPY</unmanaged>	
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_BOUNDED_SOURCE_COPY</unmanaged-short>	
        BoundedSourceCopy = unchecked((int)11),			
        
        /// <summary>	
        /// <dd> <p>Destination colors are inverted according to a source mask.	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COMPOSITE_MODE_MASK_INVERT']/*"/>	
        /// <msdn-id>hh446995</msdn-id>	
        /// <unmanaged>D2D1_COMPOSITE_MODE_MASK_INVERT</unmanaged>	
        /// <unmanaged-short>D2D1_COMPOSITE_MODE_MASK_INVERT</unmanaged-short>	
        MaskInvert = unchecked((int)12),			
    }
    
    /// <summary>	
    /// <p>Use the composite effect to combine 2 or more  images. This effect has 13 different composite modes. T</p><p>The composite effect accepts 2 or more inputs.  When you specify 2 images, destination is the first input (index 0) and the source is the second input (index 1).  If you specify more than 2 inputs the images are composited starting with the first input and the second and so on.</p><p>This effect implements all of the modes using the blending unit of the graphics processing unit (GPU).</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.Composite"/>. </p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Mode</li> <li>Sample</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COMPOSITE_PROP']/*"/>	
    /// <msdn-id>hh706320</msdn-id>	
    /// <unmanaged>D2D1_COMPOSITE_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_COMPOSITE_PROP</unmanaged-short>	
    public enum CompositeProperties : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_COMPOSITE_PROP_MODE']/*"/>	
        /// <msdn-id>hh706320</msdn-id>	
        /// <unmanaged>D2D1_COMPOSITE_PROP_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_COMPOSITE_PROP_MODE</unmanaged-short>	
        Mode = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Identifiers for properties of the Contrast effect.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CONTRAST_PROP']/*"/>	
    /// <msdn-id>dn890720</msdn-id>	
    /// <unmanaged>D2D1_CONTRAST_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_CONTRAST_PROP</unmanaged-short>	
    public enum ContrastProperty : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CONTRAST_PROP_CONTRAST']/*"/>	
        /// <msdn-id>dn890720</msdn-id>	
        /// <unmanaged>D2D1_CONTRAST_PROP_CONTRAST</unmanaged>	
        /// <unmanaged-short>D2D1_CONTRAST_PROP_CONTRAST</unmanaged-short>	
        Contrast = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CONTRAST_PROP_CLAMP_INPUT']/*"/>	
        /// <msdn-id>dn890720</msdn-id>	
        /// <unmanaged>D2D1_CONTRAST_PROP_CLAMP_INPUT</unmanaged>	
        /// <unmanaged-short>D2D1_CONTRAST_PROP_CLAMP_INPUT</unmanaged-short>	
        ClampInput = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Use the  convolve matrix effect to apply an arbitrary 2D kernel to an image. You can use this effect   to  blur, detect edges, emboss, or sharpen an image.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.ConvolveMatrix"/>.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Scale</li> <li>Border</li> <li>Output</li> <li>Sample</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CONVOLVEMATRIX_PROP']/*"/>	
    /// <msdn-id>hh706323</msdn-id>	
    /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP</unmanaged-short>	
    public enum ConvoleMatrixProperties : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CONVOLVEMATRIX_PROP_KERNEL_UNIT_LENGTH']/*"/>	
        /// <msdn-id>hh706323</msdn-id>	
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_KERNEL_UNIT_LENGTH</unmanaged>	
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_KERNEL_UNIT_LENGTH</unmanaged-short>	
        KernelUnitLength = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CONVOLVEMATRIX_PROP_SCALE_MODE']/*"/>	
        /// <msdn-id>hh706323</msdn-id>	
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_SCALE_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_SCALE_MODE</unmanaged-short>	
        ScaleMode = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_X']/*"/>	
        /// <msdn-id>hh706323</msdn-id>	
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_X</unmanaged>	
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_X</unmanaged-short>	
        KernelSizeX = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_Y']/*"/>	
        /// <msdn-id>hh706323</msdn-id>	
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_Y</unmanaged>	
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_Y</unmanaged-short>	
        KernelSizeY = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CONVOLVEMATRIX_PROP_KERNEL_MATRIX']/*"/>	
        /// <msdn-id>hh706323</msdn-id>	
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_KERNEL_MATRIX</unmanaged>	
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_KERNEL_MATRIX</unmanaged-short>	
        KernelMatrix = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CONVOLVEMATRIX_PROP_DIVISOR']/*"/>	
        /// <msdn-id>hh706323</msdn-id>	
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_DIVISOR</unmanaged>	
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_DIVISOR</unmanaged-short>	
        Divisor = unchecked((int)5),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CONVOLVEMATRIX_PROP_BIAS']/*"/>	
        /// <msdn-id>hh706323</msdn-id>	
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_BIAS</unmanaged>	
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_BIAS</unmanaged-short>	
        Bias = unchecked((int)6),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CONVOLVEMATRIX_PROP_KERNEL_OFFSET']/*"/>	
        /// <msdn-id>hh706323</msdn-id>	
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_KERNEL_OFFSET</unmanaged>	
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_KERNEL_OFFSET</unmanaged-short>	
        KernelOffset = unchecked((int)7),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CONVOLVEMATRIX_PROP_PRESERVE_ALPHA']/*"/>	
        /// <msdn-id>hh706323</msdn-id>	
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_PRESERVE_ALPHA</unmanaged>	
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_PRESERVE_ALPHA</unmanaged-short>	
        PreserveAlpha = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CONVOLVEMATRIX_PROP_BORDER_MODE']/*"/>	
        /// <msdn-id>hh706323</msdn-id>	
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_BORDER_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_BORDER_MODE</unmanaged-short>	
        BorderMode = unchecked((int)9),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CONVOLVEMATRIX_PROP_CLAMP_OUTPUT']/*"/>	
        /// <msdn-id>hh706323</msdn-id>	
        /// <unmanaged>D2D1_CONVOLVEMATRIX_PROP_CLAMP_OUTPUT</unmanaged>	
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_PROP_CLAMP_OUTPUT</unmanaged-short>	
        ClampOutput = unchecked((int)10),			
    }
    
    /// <summary>	
    /// <p>Use the  convolve matrix effect to apply an arbitrary 2D kernel to an image. You can use this effect   to  blur, detect edges, emboss, or sharpen an image.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.ConvolveMatrix"/>.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Scale</li> <li>Border</li> <li>Output</li> <li>Sample</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CONVOLVEMATRIX_SCALE_MODE']/*"/>	
    /// <msdn-id>hh706323</msdn-id>	
    /// <unmanaged>D2D1_CONVOLVEMATRIX_SCALE_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_CONVOLVEMATRIX_SCALE_MODE</unmanaged-short>	
    public enum ConvoleMatrixScaleMode : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CONVOLVEMATRIX_SCALE_MODE_NEAREST_NEIGHBOR']/*"/>	
        /// <msdn-id>hh706323</msdn-id>	
        /// <unmanaged>D2D1_CONVOLVEMATRIX_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged>	
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged-short>	
        NearestNeighbor = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CONVOLVEMATRIX_SCALE_MODE_LINEAR']/*"/>	
        /// <msdn-id>hh706323</msdn-id>	
        /// <unmanaged>D2D1_CONVOLVEMATRIX_SCALE_MODE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_SCALE_MODE_LINEAR</unmanaged-short>	
        Linear = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CONVOLVEMATRIX_SCALE_MODE_CUBIC']/*"/>	
        /// <msdn-id>hh706323</msdn-id>	
        /// <unmanaged>D2D1_CONVOLVEMATRIX_SCALE_MODE_CUBIC</unmanaged>	
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_SCALE_MODE_CUBIC</unmanaged-short>	
        Cubic = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CONVOLVEMATRIX_SCALE_MODE_MULTI_SAMPLE_LINEAR']/*"/>	
        /// <msdn-id>hh706323</msdn-id>	
        /// <unmanaged>D2D1_CONVOLVEMATRIX_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>	
        MultiSampleLinear = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CONVOLVEMATRIX_SCALE_MODE_ANISOTROPIC']/*"/>	
        /// <msdn-id>hh706323</msdn-id>	
        /// <unmanaged>D2D1_CONVOLVEMATRIX_SCALE_MODE_ANISOTROPIC</unmanaged>	
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_SCALE_MODE_ANISOTROPIC</unmanaged-short>	
        Anisotropic = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CONVOLVEMATRIX_SCALE_MODE_HIGH_QUALITY_CUBIC']/*"/>	
        /// <msdn-id>hh706323</msdn-id>	
        /// <unmanaged>D2D1_CONVOLVEMATRIX_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged>	
        /// <unmanaged-short>D2D1_CONVOLVEMATRIX_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>	
        HighQualityCubic = unchecked((int)5),			
    }
    
    /// <summary>	
    /// <p>Use the crop effect to output a specified region of an image.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.Crop"/>.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Output</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CROP_PROP']/*"/>	
    /// <msdn-id>hh706324</msdn-id>	
    /// <unmanaged>D2D1_CROP_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_CROP_PROP</unmanaged-short>	
    public enum CropProperties : int {	
        
        /// <summary>	
        /// <dd>Output height in pixels=(Rect.Bottom-Rect.Top)*(User's DPI/96)</dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CROP_PROP_RECT']/*"/>	
        /// <msdn-id>hh706324</msdn-id>	
        /// <unmanaged>D2D1_CROP_PROP_RECT</unmanaged>	
        /// <unmanaged-short>D2D1_CROP_PROP_RECT</unmanaged-short>	
        Rectangle = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_CROP_PROP_BORDER_MODE']/*"/>	
        /// <msdn-id>hh706324</msdn-id>	
        /// <unmanaged>D2D1_CROP_PROP_BORDER_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_CROP_PROP_BORDER_MODE</unmanaged-short>	
        BorderMode = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Describes the sequence of dashes and gaps in a stroke. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The following illustration shows several available dash styles. For more information, see the Stroke Style Example.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DASH_STYLE']/*"/>	
    /// <msdn-id>dd368087</msdn-id>	
    /// <unmanaged>D2D1_DASH_STYLE</unmanaged>	
    /// <unmanaged-short>D2D1_DASH_STYLE</unmanaged-short>	
    public enum DashStyle : int {	
        
        /// <summary>	
        /// <dd> <p>A solid line with no breaks.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DASH_STYLE_SOLID']/*"/>	
        /// <msdn-id>dd368087</msdn-id>	
        /// <unmanaged>D2D1_DASH_STYLE_SOLID</unmanaged>	
        /// <unmanaged-short>D2D1_DASH_STYLE_SOLID</unmanaged-short>	
        Solid = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>A dash followed by a gap of equal length. The dash and the gap are each twice as long as the stroke thickness.</p> <p>The equivalent dash  array for  <strong><see cref="SharpDX.Direct2D1.DashStyle.Dash"/></strong> is {2, 2}.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DASH_STYLE_DASH']/*"/>	
        /// <msdn-id>dd368087</msdn-id>	
        /// <unmanaged>D2D1_DASH_STYLE_DASH</unmanaged>	
        /// <unmanaged-short>D2D1_DASH_STYLE_DASH</unmanaged-short>	
        Dash = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>A dot followed by a longer gap.</p> <p>The equivalent dash  array for  <strong><see cref="SharpDX.Direct2D1.DashStyle.Dot"/></strong> is {0, 2}.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DASH_STYLE_DOT']/*"/>	
        /// <msdn-id>dd368087</msdn-id>	
        /// <unmanaged>D2D1_DASH_STYLE_DOT</unmanaged>	
        /// <unmanaged-short>D2D1_DASH_STYLE_DOT</unmanaged-short>	
        Dot = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>A dash, followed by a gap, followed by a dot, followed by another gap.</p> <p>The equivalent dash array for  <strong><see cref="SharpDX.Direct2D1.DashStyle.DashDot"/></strong> is {2, 2, 0, 2}.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DASH_STYLE_DASH_DOT']/*"/>	
        /// <msdn-id>dd368087</msdn-id>	
        /// <unmanaged>D2D1_DASH_STYLE_DASH_DOT</unmanaged>	
        /// <unmanaged-short>D2D1_DASH_STYLE_DASH_DOT</unmanaged-short>	
        DashDot = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>A dash, followed by a gap, followed by a dot, followed by another gap, followed by another dot, followed by another gap.</p> <p>The equivalent dash array for  <strong><see cref="SharpDX.Direct2D1.DashStyle.DashDotDot"/></strong> is {2, 2, 0, 2, 0, 2}.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DASH_STYLE_DASH_DOT_DOT']/*"/>	
        /// <msdn-id>dd368087</msdn-id>	
        /// <unmanaged>D2D1_DASH_STYLE_DASH_DOT_DOT</unmanaged>	
        /// <unmanaged-short>D2D1_DASH_STYLE_DASH_DOT_DOT</unmanaged-short>	
        DashDotDot = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>The dash pattern is specified by an array of floating-point values.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DASH_STYLE_CUSTOM']/*"/>	
        /// <msdn-id>dd368087</msdn-id>	
        /// <unmanaged>D2D1_DASH_STYLE_CUSTOM</unmanaged>	
        /// <unmanaged-short>D2D1_DASH_STYLE_CUSTOM</unmanaged-short>	
        Custom = unchecked((int)5),			
    }
    
    /// <summary>	
    /// <p>Indicates the type of information provided by the Direct2D Debug Layer.  </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To receive debugging messages, you must install the Direct2D Debug Layer.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DEBUG_LEVEL']/*"/>	
    /// <msdn-id>dd368090</msdn-id>	
    /// <unmanaged>D2D1_DEBUG_LEVEL</unmanaged>	
    /// <unmanaged-short>D2D1_DEBUG_LEVEL</unmanaged-short>	
    public enum DebugLevel : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DEBUG_LEVEL_NONE']/*"/>	
        /// <msdn-id>dd368090</msdn-id>	
        /// <unmanaged>D2D1_DEBUG_LEVEL_NONE</unmanaged>	
        /// <unmanaged-short>D2D1_DEBUG_LEVEL_NONE</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DEBUG_LEVEL_ERROR']/*"/>	
        /// <msdn-id>dd368090</msdn-id>	
        /// <unmanaged>D2D1_DEBUG_LEVEL_ERROR</unmanaged>	
        /// <unmanaged-short>D2D1_DEBUG_LEVEL_ERROR</unmanaged-short>	
        Error = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DEBUG_LEVEL_WARNING']/*"/>	
        /// <msdn-id>dd368090</msdn-id>	
        /// <unmanaged>D2D1_DEBUG_LEVEL_WARNING</unmanaged>	
        /// <unmanaged-short>D2D1_DEBUG_LEVEL_WARNING</unmanaged-short>	
        Warning = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DEBUG_LEVEL_INFORMATION']/*"/>	
        /// <msdn-id>dd368090</msdn-id>	
        /// <unmanaged>D2D1_DEBUG_LEVEL_INFORMATION</unmanaged>	
        /// <unmanaged-short>D2D1_DEBUG_LEVEL_INFORMATION</unmanaged-short>	
        Information = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p> Specifies how a device context is initialized for GDI rendering when it is retrieved from the render target.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Use this enumeration with the <strong><see cref="SharpDX.Direct2D1.GdiInteropRenderTarget.GetDC"/></strong> method to specify how the device context is  initialized for GDI rendering.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DC_INITIALIZE_MODE']/*"/>	
    /// <msdn-id>dd368088</msdn-id>	
    /// <unmanaged>D2D1_DC_INITIALIZE_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_DC_INITIALIZE_MODE</unmanaged-short>	
    public enum DeviceContextInitializeMode : int {	
        
        /// <summary>	
        /// <dd> <p>The current contents of the render target are copied to the device context when it is initialized. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DC_INITIALIZE_MODE_COPY']/*"/>	
        /// <msdn-id>dd368088</msdn-id>	
        /// <unmanaged>D2D1_DC_INITIALIZE_MODE_COPY</unmanaged>	
        /// <unmanaged-short>D2D1_DC_INITIALIZE_MODE_COPY</unmanaged-short>	
        Copy = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The device context is cleared to transparent black when it is initialized.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DC_INITIALIZE_MODE_CLEAR']/*"/>	
        /// <msdn-id>dd368088</msdn-id>	
        /// <unmanaged>D2D1_DC_INITIALIZE_MODE_CLEAR</unmanaged>	
        /// <unmanaged-short>D2D1_DC_INITIALIZE_MODE_CLEAR</unmanaged-short>	
        Clear = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>This specifies options that apply to the device context for its lifetime.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DEVICE_CONTEXT_OPTIONS']/*"/>	
    /// <msdn-id>hh446998</msdn-id>	
    /// <unmanaged>D2D1_DEVICE_CONTEXT_OPTIONS</unmanaged>	
    /// <unmanaged-short>D2D1_DEVICE_CONTEXT_OPTIONS</unmanaged-short>	
    [Flags]
    public enum DeviceContextOptions : int {	
        
        /// <summary>	
        /// <dd> <p>The device context is created with default options.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DEVICE_CONTEXT_OPTIONS_NONE']/*"/>	
        /// <msdn-id>hh446998</msdn-id>	
        /// <unmanaged>D2D1_DEVICE_CONTEXT_OPTIONS_NONE</unmanaged>	
        /// <unmanaged-short>D2D1_DEVICE_CONTEXT_OPTIONS_NONE</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Distribute rendering work across multiple threads.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DEVICE_CONTEXT_OPTIONS_ENABLE_MULTITHREADED_OPTIMIZATIONS']/*"/>	
        /// <msdn-id>hh446998</msdn-id>	
        /// <unmanaged>D2D1_DEVICE_CONTEXT_OPTIONS_ENABLE_MULTITHREADED_OPTIMIZATIONS</unmanaged>	
        /// <unmanaged-short>D2D1_DEVICE_CONTEXT_OPTIONS_ENABLE_MULTITHREADED_OPTIMIZATIONS</unmanaged-short>	
        EnableMultithreadedOptimizations = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Use the Gaussian blur effect to create a blur based on the Gaussian function over the entire input image.</p><p>You can use this effect to create glows and drop shadows and use the composite effect to apply the result to the original image. It is useful in photo processing for filters like highlights and shadows. You can use the output of this effect for input into lighting effects, like the Specular Lighting or Diffuse Lighting effects, because the alpha channel is blurred, too and lighting effects use the alpha channel to determine surface geometry as a height map.</p><p>This effect is used by the built-in Shadow effect.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.GaussianBlur"/>.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Optimization</li> <li>Border</li> <li>Output</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DIRECTIONALBLUR_OPTIMIZATION']/*"/>	
    /// <msdn-id>hh706338</msdn-id>	
    /// <unmanaged>D2D1_DIRECTIONALBLUR_OPTIMIZATION</unmanaged>	
    /// <unmanaged-short>D2D1_DIRECTIONALBLUR_OPTIMIZATION</unmanaged-short>	
    public enum DirectionalBlurOptimization : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DIRECTIONALBLUR_OPTIMIZATION_SPEED']/*"/>	
        /// <msdn-id>hh706338</msdn-id>	
        /// <unmanaged>D2D1_DIRECTIONALBLUR_OPTIMIZATION_SPEED</unmanaged>	
        /// <unmanaged-short>D2D1_DIRECTIONALBLUR_OPTIMIZATION_SPEED</unmanaged-short>	
        Speed = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DIRECTIONALBLUR_OPTIMIZATION_BALANCED']/*"/>	
        /// <msdn-id>hh706338</msdn-id>	
        /// <unmanaged>D2D1_DIRECTIONALBLUR_OPTIMIZATION_BALANCED</unmanaged>	
        /// <unmanaged-short>D2D1_DIRECTIONALBLUR_OPTIMIZATION_BALANCED</unmanaged-short>	
        Balanced = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DIRECTIONALBLUR_OPTIMIZATION_QUALITY']/*"/>	
        /// <msdn-id>hh706338</msdn-id>	
        /// <unmanaged>D2D1_DIRECTIONALBLUR_OPTIMIZATION_QUALITY</unmanaged>	
        /// <unmanaged-short>D2D1_DIRECTIONALBLUR_OPTIMIZATION_QUALITY</unmanaged-short>	
        Quality = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>The directional blur effect is similar to Gaussian blur, except you can skew the blur in a particular direction. You can use this effect to make an image look as if it is in motion or to emphasize an animated image.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.DirectionalBlur"/>.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Optimization</li> <li>Border</li> <li>Output</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DIRECTIONALBLUR_PROP']/*"/>	
    /// <msdn-id>hh706328</msdn-id>	
    /// <unmanaged>D2D1_DIRECTIONALBLUR_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_DIRECTIONALBLUR_PROP</unmanaged-short>	
    public enum DirectionalBlurProperties : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DIRECTIONALBLUR_PROP_STANDARD_DEVIATION']/*"/>	
        /// <msdn-id>hh706328</msdn-id>	
        /// <unmanaged>D2D1_DIRECTIONALBLUR_PROP_STANDARD_DEVIATION</unmanaged>	
        /// <unmanaged-short>D2D1_DIRECTIONALBLUR_PROP_STANDARD_DEVIATION</unmanaged-short>	
        StandardDeviation = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DIRECTIONALBLUR_PROP_ANGLE']/*"/>	
        /// <msdn-id>hh706328</msdn-id>	
        /// <unmanaged>D2D1_DIRECTIONALBLUR_PROP_ANGLE</unmanaged>	
        /// <unmanaged-short>D2D1_DIRECTIONALBLUR_PROP_ANGLE</unmanaged-short>	
        Angle = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DIRECTIONALBLUR_PROP_OPTIMIZATION']/*"/>	
        /// <msdn-id>hh706328</msdn-id>	
        /// <unmanaged>D2D1_DIRECTIONALBLUR_PROP_OPTIMIZATION</unmanaged>	
        /// <unmanaged-short>D2D1_DIRECTIONALBLUR_PROP_OPTIMIZATION</unmanaged-short>	
        Optimization = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DIRECTIONALBLUR_PROP_BORDER_MODE']/*"/>	
        /// <msdn-id>hh706328</msdn-id>	
        /// <unmanaged>D2D1_DIRECTIONALBLUR_PROP_BORDER_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_DIRECTIONALBLUR_PROP_BORDER_MODE</unmanaged-short>	
        BorderMode = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>Use the discrete transfer effect to map the color intensities of an image using a step transfer function created from a list of values you provide.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.DiscreteTransfer"/>.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISCRETETRANSFER_PROP']/*"/>	
    /// <msdn-id>hh706329</msdn-id>	
    /// <unmanaged>D2D1_DISCRETETRANSFER_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_DISCRETETRANSFER_PROP</unmanaged-short>	
    public enum DiscreteTransferProperties : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISCRETETRANSFER_PROP_RED_TABLE']/*"/>	
        /// <msdn-id>hh706329</msdn-id>	
        /// <unmanaged>D2D1_DISCRETETRANSFER_PROP_RED_TABLE</unmanaged>	
        /// <unmanaged-short>D2D1_DISCRETETRANSFER_PROP_RED_TABLE</unmanaged-short>	
        RedTable = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISCRETETRANSFER_PROP_RED_DISABLE']/*"/>	
        /// <msdn-id>hh706329</msdn-id>	
        /// <unmanaged>D2D1_DISCRETETRANSFER_PROP_RED_DISABLE</unmanaged>	
        /// <unmanaged-short>D2D1_DISCRETETRANSFER_PROP_RED_DISABLE</unmanaged-short>	
        RedDisable = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISCRETETRANSFER_PROP_GREEN_TABLE']/*"/>	
        /// <msdn-id>hh706329</msdn-id>	
        /// <unmanaged>D2D1_DISCRETETRANSFER_PROP_GREEN_TABLE</unmanaged>	
        /// <unmanaged-short>D2D1_DISCRETETRANSFER_PROP_GREEN_TABLE</unmanaged-short>	
        GreenTable = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISCRETETRANSFER_PROP_GREEN_DISABLE']/*"/>	
        /// <msdn-id>hh706329</msdn-id>	
        /// <unmanaged>D2D1_DISCRETETRANSFER_PROP_GREEN_DISABLE</unmanaged>	
        /// <unmanaged-short>D2D1_DISCRETETRANSFER_PROP_GREEN_DISABLE</unmanaged-short>	
        GreenDisable = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISCRETETRANSFER_PROP_BLUE_TABLE']/*"/>	
        /// <msdn-id>hh706329</msdn-id>	
        /// <unmanaged>D2D1_DISCRETETRANSFER_PROP_BLUE_TABLE</unmanaged>	
        /// <unmanaged-short>D2D1_DISCRETETRANSFER_PROP_BLUE_TABLE</unmanaged-short>	
        BlueTable = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISCRETETRANSFER_PROP_BLUE_DISABLE']/*"/>	
        /// <msdn-id>hh706329</msdn-id>	
        /// <unmanaged>D2D1_DISCRETETRANSFER_PROP_BLUE_DISABLE</unmanaged>	
        /// <unmanaged-short>D2D1_DISCRETETRANSFER_PROP_BLUE_DISABLE</unmanaged-short>	
        BlueDisable = unchecked((int)5),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISCRETETRANSFER_PROP_ALPHA_TABLE']/*"/>	
        /// <msdn-id>hh706329</msdn-id>	
        /// <unmanaged>D2D1_DISCRETETRANSFER_PROP_ALPHA_TABLE</unmanaged>	
        /// <unmanaged-short>D2D1_DISCRETETRANSFER_PROP_ALPHA_TABLE</unmanaged-short>	
        AlphaTable = unchecked((int)6),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISCRETETRANSFER_PROP_ALPHA_DISABLE']/*"/>	
        /// <msdn-id>hh706329</msdn-id>	
        /// <unmanaged>D2D1_DISCRETETRANSFER_PROP_ALPHA_DISABLE</unmanaged>	
        /// <unmanaged-short>D2D1_DISCRETETRANSFER_PROP_ALPHA_DISABLE</unmanaged-short>	
        AlphaDisable = unchecked((int)7),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISCRETETRANSFER_PROP_CLAMP_OUTPUT']/*"/>	
        /// <msdn-id>hh706329</msdn-id>	
        /// <unmanaged>D2D1_DISCRETETRANSFER_PROP_CLAMP_OUTPUT</unmanaged>	
        /// <unmanaged-short>D2D1_DISCRETETRANSFER_PROP_CLAMP_OUTPUT</unmanaged-short>	
        ClampOutput = unchecked((int)8),			
    }
    
    /// <summary>	
    /// <p>Use the displacement map effect to displace the pixels of the input image by the intensity values of a second input image.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.DisplacementMap"/>.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Color</li> <li>Output</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISPLACEMENTMAP_PROP']/*"/>	
    /// <msdn-id>hh706330</msdn-id>	
    /// <unmanaged>D2D1_DISPLACEMENTMAP_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_DISPLACEMENTMAP_PROP</unmanaged-short>	
    public enum DisplacementMapProperties : int {	
        
        /// <summary>	
        /// <dd><em>YChannelSelector</em> the intensity of the selected RGBA channel from the displacement bitmap that displaces the input image in the Y direction.</dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISPLACEMENTMAP_PROP_SCALE']/*"/>	
        /// <msdn-id>hh706330</msdn-id>	
        /// <unmanaged>D2D1_DISPLACEMENTMAP_PROP_SCALE</unmanaged>	
        /// <unmanaged-short>D2D1_DISPLACEMENTMAP_PROP_SCALE</unmanaged-short>	
        Scale = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISPLACEMENTMAP_PROP_X_CHANNEL_SELECT']/*"/>	
        /// <msdn-id>hh706330</msdn-id>	
        /// <unmanaged>D2D1_DISPLACEMENTMAP_PROP_X_CHANNEL_SELECT</unmanaged>	
        /// <unmanaged-short>D2D1_DISPLACEMENTMAP_PROP_X_CHANNEL_SELECT</unmanaged-short>	
        XChannelSelect = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISPLACEMENTMAP_PROP_Y_CHANNEL_SELECT']/*"/>	
        /// <msdn-id>hh706330</msdn-id>	
        /// <unmanaged>D2D1_DISPLACEMENTMAP_PROP_Y_CHANNEL_SELECT</unmanaged>	
        /// <unmanaged-short>D2D1_DISPLACEMENTMAP_PROP_Y_CHANNEL_SELECT</unmanaged-short>	
        YChannelSelect = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Use the distant-diffuse lighting effect to create an image that appears to be a reflective surface with where the light source appears to be coming from a long distance (like the sun or overhead lights) and the light is reflecting in all directions. This effect uses the alpha channel as a height map and lights the image with a distant light source.</p><p>The color of the output bitmap is a result of light color, light position, and the surface geometry of the image. The alpha channel output for each pixel with diffuse lighting is always 1.0.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.DistantDiffuse"/>.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Scale</li> <li>Sample</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISTANTDIFFUSE_PROP']/*"/>	
    /// <msdn-id>hh706331</msdn-id>	
    /// <unmanaged>D2D1_DISTANTDIFFUSE_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_DISTANTDIFFUSE_PROP</unmanaged-short>	
    public enum DistantDiffuseProperties : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISTANTDIFFUSE_PROP_AZIMUTH']/*"/>	
        /// <msdn-id>hh706331</msdn-id>	
        /// <unmanaged>D2D1_DISTANTDIFFUSE_PROP_AZIMUTH</unmanaged>	
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_PROP_AZIMUTH</unmanaged-short>	
        Azimuth = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISTANTDIFFUSE_PROP_ELEVATION']/*"/>	
        /// <msdn-id>hh706331</msdn-id>	
        /// <unmanaged>D2D1_DISTANTDIFFUSE_PROP_ELEVATION</unmanaged>	
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_PROP_ELEVATION</unmanaged-short>	
        Elevation = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISTANTDIFFUSE_PROP_DIFFUSE_CONSTANT']/*"/>	
        /// <msdn-id>hh706331</msdn-id>	
        /// <unmanaged>D2D1_DISTANTDIFFUSE_PROP_DIFFUSE_CONSTANT</unmanaged>	
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_PROP_DIFFUSE_CONSTANT</unmanaged-short>	
        DiffuseConstant = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISTANTDIFFUSE_PROP_SURFACE_SCALE']/*"/>	
        /// <msdn-id>hh706331</msdn-id>	
        /// <unmanaged>D2D1_DISTANTDIFFUSE_PROP_SURFACE_SCALE</unmanaged>	
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_PROP_SURFACE_SCALE</unmanaged-short>	
        SurfaceScale = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISTANTDIFFUSE_PROP_COLOR']/*"/>	
        /// <msdn-id>hh706331</msdn-id>	
        /// <unmanaged>D2D1_DISTANTDIFFUSE_PROP_COLOR</unmanaged>	
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_PROP_COLOR</unmanaged-short>	
        Color = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISTANTDIFFUSE_PROP_KERNEL_UNIT_LENGTH']/*"/>	
        /// <msdn-id>hh706331</msdn-id>	
        /// <unmanaged>D2D1_DISTANTDIFFUSE_PROP_KERNEL_UNIT_LENGTH</unmanaged>	
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_PROP_KERNEL_UNIT_LENGTH</unmanaged-short>	
        KernelUnitLength = unchecked((int)5),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISTANTDIFFUSE_PROP_SCALE_MODE']/*"/>	
        /// <msdn-id>hh706331</msdn-id>	
        /// <unmanaged>D2D1_DISTANTDIFFUSE_PROP_SCALE_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_PROP_SCALE_MODE</unmanaged-short>	
        ScaleMode = unchecked((int)6),			
    }
    
    /// <summary>	
    /// <p>Use the distant-diffuse lighting effect to create an image that appears to be a reflective surface with where the light source appears to be coming from a long distance (like the sun or overhead lights) and the light is reflecting in all directions. This effect uses the alpha channel as a height map and lights the image with a distant light source.</p><p>The color of the output bitmap is a result of light color, light position, and the surface geometry of the image. The alpha channel output for each pixel with diffuse lighting is always 1.0.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.DistantDiffuse"/>.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Scale</li> <li>Sample</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISTANTDIFFUSE_SCALE_MODE']/*"/>	
    /// <msdn-id>hh706331</msdn-id>	
    /// <unmanaged>D2D1_DISTANTDIFFUSE_SCALE_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_DISTANTDIFFUSE_SCALE_MODE</unmanaged-short>	
    public enum DistantDiffuseScaleMode : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISTANTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR']/*"/>	
        /// <msdn-id>hh706331</msdn-id>	
        /// <unmanaged>D2D1_DISTANTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged>	
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged-short>	
        NearestNeighbor = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISTANTDIFFUSE_SCALE_MODE_LINEAR']/*"/>	
        /// <msdn-id>hh706331</msdn-id>	
        /// <unmanaged>D2D1_DISTANTDIFFUSE_SCALE_MODE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_SCALE_MODE_LINEAR</unmanaged-short>	
        Linear = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISTANTDIFFUSE_SCALE_MODE_CUBIC']/*"/>	
        /// <msdn-id>hh706331</msdn-id>	
        /// <unmanaged>D2D1_DISTANTDIFFUSE_SCALE_MODE_CUBIC</unmanaged>	
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_SCALE_MODE_CUBIC</unmanaged-short>	
        Cubic = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISTANTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR']/*"/>	
        /// <msdn-id>hh706331</msdn-id>	
        /// <unmanaged>D2D1_DISTANTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>	
        MultiSampleLinear = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISTANTDIFFUSE_SCALE_MODE_ANISOTROPIC']/*"/>	
        /// <msdn-id>hh706331</msdn-id>	
        /// <unmanaged>D2D1_DISTANTDIFFUSE_SCALE_MODE_ANISOTROPIC</unmanaged>	
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_SCALE_MODE_ANISOTROPIC</unmanaged-short>	
        Anisotropic = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISTANTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC']/*"/>	
        /// <msdn-id>hh706331</msdn-id>	
        /// <unmanaged>D2D1_DISTANTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged>	
        /// <unmanaged-short>D2D1_DISTANTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>	
        HighQualityCubic = unchecked((int)5),			
    }
    
    /// <summary>	
    /// <p>Use the distant-specular lighting effect to create an image that appears to be a reflective surface where the light source appears to be coming from a long distance (like the sun or overhead lights). This effect uses the alpha channel as a height map and lights the image with a distant light source.</p><p>The color of the output bitmap is a result of light color, light position,  and the surface geometry.  The alpha channel output for each pixel with specular lighting is the maximum of the red, green, and blue channel outputs for that pixel.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.DistantSpecular"/>.</p><p> </p><ul> <li>Example</li> <li>Distant</li> <li>Effect</li> <li>Scale</li> <li>Sample</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISTANTSPECULAR_PROP']/*"/>	
    /// <msdn-id>hh706332</msdn-id>	
    /// <unmanaged>D2D1_DISTANTSPECULAR_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_DISTANTSPECULAR_PROP</unmanaged-short>	
    public enum DistantSpecularProperties : int {	
        
        /// <summary>	
        /// <dd>Cr, Cg, Cb = the light color in RGB components.</dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISTANTSPECULAR_PROP_AZIMUTH']/*"/>	
        /// <msdn-id>hh706332</msdn-id>	
        /// <unmanaged>D2D1_DISTANTSPECULAR_PROP_AZIMUTH</unmanaged>	
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_PROP_AZIMUTH</unmanaged-short>	
        Azimuth = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISTANTSPECULAR_PROP_ELEVATION']/*"/>	
        /// <msdn-id>hh706332</msdn-id>	
        /// <unmanaged>D2D1_DISTANTSPECULAR_PROP_ELEVATION</unmanaged>	
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_PROP_ELEVATION</unmanaged-short>	
        Elevation = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISTANTSPECULAR_PROP_SPECULAR_EXPONENT']/*"/>	
        /// <msdn-id>hh706332</msdn-id>	
        /// <unmanaged>D2D1_DISTANTSPECULAR_PROP_SPECULAR_EXPONENT</unmanaged>	
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_PROP_SPECULAR_EXPONENT</unmanaged-short>	
        SpecularExponent = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISTANTSPECULAR_PROP_SPECULAR_CONSTANT']/*"/>	
        /// <msdn-id>hh706332</msdn-id>	
        /// <unmanaged>D2D1_DISTANTSPECULAR_PROP_SPECULAR_CONSTANT</unmanaged>	
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_PROP_SPECULAR_CONSTANT</unmanaged-short>	
        SpecularConstant = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISTANTSPECULAR_PROP_SURFACE_SCALE']/*"/>	
        /// <msdn-id>hh706332</msdn-id>	
        /// <unmanaged>D2D1_DISTANTSPECULAR_PROP_SURFACE_SCALE</unmanaged>	
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_PROP_SURFACE_SCALE</unmanaged-short>	
        SurfaceScale = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISTANTSPECULAR_PROP_COLOR']/*"/>	
        /// <msdn-id>hh706332</msdn-id>	
        /// <unmanaged>D2D1_DISTANTSPECULAR_PROP_COLOR</unmanaged>	
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_PROP_COLOR</unmanaged-short>	
        Color = unchecked((int)5),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISTANTSPECULAR_PROP_KERNEL_UNIT_LENGTH']/*"/>	
        /// <msdn-id>hh706332</msdn-id>	
        /// <unmanaged>D2D1_DISTANTSPECULAR_PROP_KERNEL_UNIT_LENGTH</unmanaged>	
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_PROP_KERNEL_UNIT_LENGTH</unmanaged-short>	
        KernelUnitLength = unchecked((int)6),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISTANTSPECULAR_PROP_SCALE_MODE']/*"/>	
        /// <msdn-id>hh706332</msdn-id>	
        /// <unmanaged>D2D1_DISTANTSPECULAR_PROP_SCALE_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_PROP_SCALE_MODE</unmanaged-short>	
        ScaleMode = unchecked((int)7),			
    }
    
    /// <summary>	
    /// <p>Use the distant-specular lighting effect to create an image that appears to be a reflective surface where the light source appears to be coming from a long distance (like the sun or overhead lights). This effect uses the alpha channel as a height map and lights the image with a distant light source.</p><p>The color of the output bitmap is a result of light color, light position,  and the surface geometry.  The alpha channel output for each pixel with specular lighting is the maximum of the red, green, and blue channel outputs for that pixel.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.DistantSpecular"/>.</p><p> </p><ul> <li>Example</li> <li>Distant</li> <li>Effect</li> <li>Scale</li> <li>Sample</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISTANTSPECULAR_SCALE_MODE']/*"/>	
    /// <msdn-id>hh706332</msdn-id>	
    /// <unmanaged>D2D1_DISTANTSPECULAR_SCALE_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_DISTANTSPECULAR_SCALE_MODE</unmanaged-short>	
    public enum DistantSpecularScaleMode : int {	
        
        /// <summary>	
        /// <dd>Cr, Cg, Cb = the light color in RGB components.</dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISTANTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR']/*"/>	
        /// <msdn-id>hh706332</msdn-id>	
        /// <unmanaged>D2D1_DISTANTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged>	
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged-short>	
        NearestNeighbor = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISTANTSPECULAR_SCALE_MODE_LINEAR']/*"/>	
        /// <msdn-id>hh706332</msdn-id>	
        /// <unmanaged>D2D1_DISTANTSPECULAR_SCALE_MODE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_SCALE_MODE_LINEAR</unmanaged-short>	
        Linear = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISTANTSPECULAR_SCALE_MODE_CUBIC']/*"/>	
        /// <msdn-id>hh706332</msdn-id>	
        /// <unmanaged>D2D1_DISTANTSPECULAR_SCALE_MODE_CUBIC</unmanaged>	
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_SCALE_MODE_CUBIC</unmanaged-short>	
        Cubic = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISTANTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR']/*"/>	
        /// <msdn-id>hh706332</msdn-id>	
        /// <unmanaged>D2D1_DISTANTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>	
        MultiSampleLinear = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISTANTSPECULAR_SCALE_MODE_ANISOTROPIC']/*"/>	
        /// <msdn-id>hh706332</msdn-id>	
        /// <unmanaged>D2D1_DISTANTSPECULAR_SCALE_MODE_ANISOTROPIC</unmanaged>	
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_SCALE_MODE_ANISOTROPIC</unmanaged-short>	
        Anisotropic = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DISTANTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC']/*"/>	
        /// <msdn-id>hh706332</msdn-id>	
        /// <unmanaged>D2D1_DISTANTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged>	
        /// <unmanaged-short>D2D1_DISTANTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>	
        HighQualityCubic = unchecked((int)5),			
    }
    
    /// <summary>	
    /// <p>Use the DPI compensation effect to automatically adjust an input bitmap to match the DPI of the context. This is useful for situations where a bitmap is created or loaded at a different DPI than the screen.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.DpiCompensation"/>.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DPICOMPENSATION_INTERPOLATION_MODE']/*"/>	
    /// <msdn-id>hh780341</msdn-id>	
    /// <unmanaged>D2D1_DPICOMPENSATION_INTERPOLATION_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_DPICOMPENSATION_INTERPOLATION_MODE</unmanaged-short>	
    public enum DpiCompensationInterpolationMode : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DPICOMPENSATION_INTERPOLATION_MODE_NEAREST_NEIGHBOR']/*"/>	
        /// <msdn-id>hh780341</msdn-id>	
        /// <unmanaged>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>	
        /// <unmanaged-short>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged-short>	
        NearestNeighbor = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DPICOMPENSATION_INTERPOLATION_MODE_LINEAR']/*"/>	
        /// <msdn-id>hh780341</msdn-id>	
        /// <unmanaged>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_LINEAR</unmanaged-short>	
        Linear = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DPICOMPENSATION_INTERPOLATION_MODE_CUBIC']/*"/>	
        /// <msdn-id>hh780341</msdn-id>	
        /// <unmanaged>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_CUBIC</unmanaged>	
        /// <unmanaged-short>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_CUBIC</unmanaged-short>	
        Cubic = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DPICOMPENSATION_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR']/*"/>	
        /// <msdn-id>hh780341</msdn-id>	
        /// <unmanaged>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>	
        MultiSampleLinear = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DPICOMPENSATION_INTERPOLATION_MODE_ANISOTROPIC']/*"/>	
        /// <msdn-id>hh780341</msdn-id>	
        /// <unmanaged>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_ANISOTROPIC</unmanaged>	
        /// <unmanaged-short>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_ANISOTROPIC</unmanaged-short>	
        Anisotropic = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DPICOMPENSATION_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC']/*"/>	
        /// <msdn-id>hh780341</msdn-id>	
        /// <unmanaged>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged>	
        /// <unmanaged-short>D2D1_DPICOMPENSATION_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>	
        HighQualityCubic = unchecked((int)5),			
    }
    
    /// <summary>	
    /// <p>Use the DPI compensation effect to automatically adjust an input bitmap to match the DPI of the context. This is useful for situations where a bitmap is created or loaded at a different DPI than the screen.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.DpiCompensation"/>.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DPICOMPENSATION_PROP']/*"/>	
    /// <msdn-id>hh780341</msdn-id>	
    /// <unmanaged>D2D1_DPICOMPENSATION_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_DPICOMPENSATION_PROP</unmanaged-short>	
    public enum DpiCompensationProperties : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DPICOMPENSATION_PROP_INTERPOLATION_MODE']/*"/>	
        /// <msdn-id>hh780341</msdn-id>	
        /// <unmanaged>D2D1_DPICOMPENSATION_PROP_INTERPOLATION_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_DPICOMPENSATION_PROP_INTERPOLATION_MODE</unmanaged-short>	
        InterpolationMode = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DPICOMPENSATION_PROP_BORDER_MODE']/*"/>	
        /// <msdn-id>hh780341</msdn-id>	
        /// <unmanaged>D2D1_DPICOMPENSATION_PROP_BORDER_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_DPICOMPENSATION_PROP_BORDER_MODE</unmanaged-short>	
        BorderMode = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DPICOMPENSATION_PROP_INPUT_DPI']/*"/>	
        /// <msdn-id>hh780341</msdn-id>	
        /// <unmanaged>D2D1_DPICOMPENSATION_PROP_INPUT_DPI</unmanaged>	
        /// <unmanaged-short>D2D1_DPICOMPENSATION_PROP_INPUT_DPI</unmanaged-short>	
        InputDpi = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Specifies whether text snapping is suppressed or clipping to the layout rectangle is enabled. This enumeration allows a bitwise combination of its member values.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DRAW_TEXT_OPTIONS']/*"/>	
    /// <msdn-id>dd368095</msdn-id>	
    /// <unmanaged>D2D1_DRAW_TEXT_OPTIONS</unmanaged>	
    /// <unmanaged-short>D2D1_DRAW_TEXT_OPTIONS</unmanaged-short>	
    [Flags]
    public enum DrawTextOptions : int {	
        
        /// <summary>	
        /// <dd> <p>Text is not vertically snapped to pixel boundaries. This setting is recommended for text that is being animated. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DRAW_TEXT_OPTIONS_NO_SNAP']/*"/>	
        /// <msdn-id>dd368095</msdn-id>	
        /// <unmanaged>D2D1_DRAW_TEXT_OPTIONS_NO_SNAP</unmanaged>	
        /// <unmanaged-short>D2D1_DRAW_TEXT_OPTIONS_NO_SNAP</unmanaged-short>	
        NoSnap = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Text is clipped to the layout rectangle.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DRAW_TEXT_OPTIONS_CLIP']/*"/>	
        /// <msdn-id>dd368095</msdn-id>	
        /// <unmanaged>D2D1_DRAW_TEXT_OPTIONS_CLIP</unmanaged>	
        /// <unmanaged-short>D2D1_DRAW_TEXT_OPTIONS_CLIP</unmanaged-short>	
        Clip = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>In Windows?8.1 and later, text is rendered using color versions of glyphs, if defined by the font.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DRAW_TEXT_OPTIONS_ENABLE_COLOR_FONT']/*"/>	
        /// <msdn-id>dd368095</msdn-id>	
        /// <unmanaged>D2D1_DRAW_TEXT_OPTIONS_ENABLE_COLOR_FONT</unmanaged>	
        /// <unmanaged-short>D2D1_DRAW_TEXT_OPTIONS_ENABLE_COLOR_FONT</unmanaged-short>	
        EnableColorFont = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Text is vertically snapped to pixel boundaries and is not clipped to the layout rectangle. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_DRAW_TEXT_OPTIONS_NONE']/*"/>	
        /// <msdn-id>dd368095</msdn-id>	
        /// <unmanaged>D2D1_DRAW_TEXT_OPTIONS_NONE</unmanaged>	
        /// <unmanaged-short>D2D1_DRAW_TEXT_OPTIONS_NONE</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Values for the <strong><see cref="SharpDX.Direct2D1.EdgeDetectionProperty.Mode"/></strong> property of the Edge Detection effect.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_EDGEDETECTION_MODE']/*"/>	
    /// <msdn-id>dn890722</msdn-id>	
    /// <unmanaged>D2D1_EDGEDETECTION_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_EDGEDETECTION_MODE</unmanaged-short>	
    public enum EdgeDetectionMode : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_EDGEDETECTION_MODE_SOBEL']/*"/>	
        /// <msdn-id>dn890722</msdn-id>	
        /// <unmanaged>D2D1_EDGEDETECTION_MODE_SOBEL</unmanaged>	
        /// <unmanaged-short>D2D1_EDGEDETECTION_MODE_SOBEL</unmanaged-short>	
        StreamOutputBel = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_EDGEDETECTION_MODE_PREWITT']/*"/>	
        /// <msdn-id>dn890722</msdn-id>	
        /// <unmanaged>D2D1_EDGEDETECTION_MODE_PREWITT</unmanaged>	
        /// <unmanaged-short>D2D1_EDGEDETECTION_MODE_PREWITT</unmanaged-short>	
        Prewitt = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Identifiers for properties of the Edge Detection effect.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_EDGEDETECTION_PROP']/*"/>	
    /// <msdn-id>dn890723</msdn-id>	
    /// <unmanaged>D2D1_EDGEDETECTION_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_EDGEDETECTION_PROP</unmanaged-short>	
    public enum EdgeDetectionProperty : int {	
        
        /// <summary>	
        /// <dd> <p>The <see cref="SharpDX.Direct2D1.EdgeDetectionProperty.Strength"/> property is a float value modulating the response of the edge detection filter. A low strength value means that weaker edges will get filtered out,  while a high value means stronger edges will get filtered out.  The allowed range is 0.0 to 1.0.  The default value is 0.5.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_EDGEDETECTION_PROP_STRENGTH']/*"/>	
        /// <msdn-id>dn890723</msdn-id>	
        /// <unmanaged>D2D1_EDGEDETECTION_PROP_STRENGTH</unmanaged>	
        /// <unmanaged-short>D2D1_EDGEDETECTION_PROP_STRENGTH</unmanaged-short>	
        Strength = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The <see cref="SharpDX.Direct2D1.EdgeDetectionProperty.BlurRadius"/> property is a float value specifying the amount of blur to apply.  Applying blur is used to remove high frequencies and reduce phantom edges.   The allowed range is 0.0 to 10.0. The default value is 0.0 (no blur applied).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_EDGEDETECTION_PROP_BLUR_RADIUS']/*"/>	
        /// <msdn-id>dn890723</msdn-id>	
        /// <unmanaged>D2D1_EDGEDETECTION_PROP_BLUR_RADIUS</unmanaged>	
        /// <unmanaged-short>D2D1_EDGEDETECTION_PROP_BLUR_RADIUS</unmanaged-short>	
        BlurRadius = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The <see cref="SharpDX.Direct2D1.EdgeDetectionProperty.Mode"/> property is a <strong><see cref="SharpDX.Direct2D1.EdgeDetectionMode"/></strong> enumeration value which mode to use for edge detection.   The default value is <see cref="SharpDX.Direct2D1.EdgeDetectionMode.StreamOutputBel"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_EDGEDETECTION_PROP_MODE']/*"/>	
        /// <msdn-id>dn890723</msdn-id>	
        /// <unmanaged>D2D1_EDGEDETECTION_PROP_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_EDGEDETECTION_PROP_MODE</unmanaged-short>	
        Mode = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>The <see cref="SharpDX.Direct2D1.EdgeDetectionProperty.OverlayEdges"/> property is a boolean value. Edge detection only applies to the RGB channels, the alpha channel is ignored for purposes of detecting edges. If <see cref="SharpDX.Direct2D1.EdgeDetectionProperty.OverlayEdges"/> is false, the output edges is fully opaque. If <see cref="SharpDX.Direct2D1.EdgeDetectionProperty.OverlayEdges"/> is true, the input opacity is preserved. The default value is false.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_EDGEDETECTION_PROP_OVERLAY_EDGES']/*"/>	
        /// <msdn-id>dn890723</msdn-id>	
        /// <unmanaged>D2D1_EDGEDETECTION_PROP_OVERLAY_EDGES</unmanaged>	
        /// <unmanaged-short>D2D1_EDGEDETECTION_PROP_OVERLAY_EDGES</unmanaged-short>	
        OverlayEdges = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>The <see cref="SharpDX.Direct2D1.EdgeDetectionProperty.AlphaMode"/> property is a <strong><see cref="SharpDX.Direct2D1.AlphaMode"/></strong> enumeration value indicating the alpha mode of the input file. If the input is not opaque, this value is used to determine whether to unpremultiply the inputs. See the About Alpha Modes section of the Supported Pixel Formats and Alpha Modes topic for additional information.    The default value is <see cref="SharpDX.Direct2D1.AlphaMode.Premultiplied"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_EDGEDETECTION_PROP_ALPHA_MODE']/*"/>	
        /// <msdn-id>dn890723</msdn-id>	
        /// <unmanaged>D2D1_EDGEDETECTION_PROP_ALPHA_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_EDGEDETECTION_PROP_ALPHA_MODE</unmanaged-short>	
        AlphaMode = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p>Identifiers for properties of the Emboss effect.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_EMBOSS_PROP']/*"/>	
    /// <msdn-id>dn890724</msdn-id>	
    /// <unmanaged>D2D1_EMBOSS_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_EMBOSS_PROP</unmanaged-short>	
    public enum EmbossProperty : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_EMBOSS_PROP_HEIGHT']/*"/>	
        /// <msdn-id>dn890724</msdn-id>	
        /// <unmanaged>D2D1_EMBOSS_PROP_HEIGHT</unmanaged>	
        /// <unmanaged-short>D2D1_EMBOSS_PROP_HEIGHT</unmanaged-short>	
        Height = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_EMBOSS_PROP_DIRECTION']/*"/>	
        /// <msdn-id>dn890724</msdn-id>	
        /// <unmanaged>D2D1_EMBOSS_PROP_DIRECTION</unmanaged>	
        /// <unmanaged-short>D2D1_EMBOSS_PROP_DIRECTION</unmanaged-short>	
        Direction = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Identifiers for properties of the Exposure effect.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_EXPOSURE_PROP']/*"/>	
    /// <msdn-id>dn890725</msdn-id>	
    /// <unmanaged>D2D1_EXPOSURE_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_EXPOSURE_PROP</unmanaged-short>	
    public enum ExposureProperty : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_EXPOSURE_PROP_EXPOSURE_VALUE']/*"/>	
        /// <msdn-id>dn890725</msdn-id>	
        /// <unmanaged>D2D1_EXPOSURE_PROP_EXPOSURE_VALUE</unmanaged>	
        /// <unmanaged-short>D2D1_EXPOSURE_PROP_EXPOSURE_VALUE</unmanaged-short>	
        ExposureValue = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Specifies how a brush paints areas outside of its normal content area.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>For an <strong><see cref="SharpDX.Direct2D1.BitmapBrush"/></strong>, the brush's content is the brush's bitmap. For an <strong><see cref="SharpDX.Direct2D1.LinearGradientBrush"/></strong>, the brush's content area is the gradient axis. For an <strong><see cref="SharpDX.Direct2D1.RadialGradientBrush"/></strong>, the brush's content is the area within the gradient ellipse.  </p><p>For an example, see the Draw Extend Mode Example.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_EXTEND_MODE']/*"/>	
    /// <msdn-id>dd368100</msdn-id>	
    /// <unmanaged>D2D1_EXTEND_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_EXTEND_MODE</unmanaged-short>	
    public enum ExtendMode : int {	
        
        /// <summary>	
        /// <dd> <p>Repeat the edge pixels of the brush's content for all regions outside the normal content area.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_EXTEND_MODE_CLAMP']/*"/>	
        /// <msdn-id>dd368100</msdn-id>	
        /// <unmanaged>D2D1_EXTEND_MODE_CLAMP</unmanaged>	
        /// <unmanaged-short>D2D1_EXTEND_MODE_CLAMP</unmanaged-short>	
        Clamp = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Repeat the brush's content.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_EXTEND_MODE_WRAP']/*"/>	
        /// <msdn-id>dd368100</msdn-id>	
        /// <unmanaged>D2D1_EXTEND_MODE_WRAP</unmanaged>	
        /// <unmanaged-short>D2D1_EXTEND_MODE_WRAP</unmanaged-short>	
        Wrap = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p> The same as <see cref="SharpDX.Direct2D1.ExtendMode.Wrap"/>, except that alternate tiles of the brush's content are flipped. (The brush's normal content is drawn untransformed.)</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_EXTEND_MODE_MIRROR']/*"/>	
        /// <msdn-id>dd368100</msdn-id>	
        /// <unmanaged>D2D1_EXTEND_MODE_MIRROR</unmanaged>	
        /// <unmanaged-short>D2D1_EXTEND_MODE_MIRROR</unmanaged-short>	
        Mirror = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Specifies whether Direct2D provides synchronization for an <strong><see cref="SharpDX.Direct2D1.Factory"/></strong> and the resources it creates, so that they may be safely accessed from multiple threads. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>When you create a factory, you can specify whether it is multithreaded or singlethreaded. A singlethreaded factory provides no serialization against any other single threaded instance within Direct2D, so this mechanism provides a very large degree of scaling on the CPU.</p><p>You can also create a multithreaded factory instance. In this case, the factory and all derived objects can be used from any thread, and each render target can be rendered to independently. Direct2D serializes calls to these objects, so a single multithreaded Direct2D instance won't scale as well on the CPU as many single threaded instances. However, the resources can be shared within the multithreaded instance.</p><p>Note the qualifier "On the CPU": GPUs generally take advantage of fine-grained parallelism more so than CPUs. For example, multithreaded calls from the CPU might still end up being serialized when being sent to the GPU; however, a whole bank of pixel and vertex shaders will run in parallel to perform the rendering.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FACTORY_TYPE']/*"/>	
    /// <msdn-id>dd368104</msdn-id>	
    /// <unmanaged>D2D1_FACTORY_TYPE</unmanaged>	
    /// <unmanaged-short>D2D1_FACTORY_TYPE</unmanaged-short>	
    public enum FactoryType : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FACTORY_TYPE_SINGLE_THREADED']/*"/>	
        /// <msdn-id>dd368104</msdn-id>	
        /// <unmanaged>D2D1_FACTORY_TYPE_SINGLE_THREADED</unmanaged>	
        /// <unmanaged-short>D2D1_FACTORY_TYPE_SINGLE_THREADED</unmanaged-short>	
        SingleThreaded = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FACTORY_TYPE_MULTI_THREADED']/*"/>	
        /// <msdn-id>dd368104</msdn-id>	
        /// <unmanaged>D2D1_FACTORY_TYPE_MULTI_THREADED</unmanaged>	
        /// <unmanaged-short>D2D1_FACTORY_TYPE_MULTI_THREADED</unmanaged-short>	
        MultiThreaded = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Defines capabilities of the underlying Direct3D device which may be queried using <strong><see cref="SharpDX.Direct2D1.EffectContext.CheckFeatureSupport"/></strong>.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FEATURE']/*"/>	
    /// <msdn-id>hh871443</msdn-id>	
    /// <unmanaged>D2D1_FEATURE</unmanaged>	
    /// <unmanaged-short>D2D1_FEATURE</unmanaged-short>	
    public enum Feature : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FEATURE_DOUBLES']/*"/>	
        /// <msdn-id>hh871443</msdn-id>	
        /// <unmanaged>D2D1_FEATURE_DOUBLES</unmanaged>	
        /// <unmanaged-short>D2D1_FEATURE_DOUBLES</unmanaged-short>	
        Doubles = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FEATURE_D3D10_X_HARDWARE_OPTIONS']/*"/>	
        /// <msdn-id>hh871443</msdn-id>	
        /// <unmanaged>D2D1_FEATURE_D3D10_X_HARDWARE_OPTIONS</unmanaged>	
        /// <unmanaged-short>D2D1_FEATURE_D3D10_X_HARDWARE_OPTIONS</unmanaged-short>	
        D3D10XHardwareOptions = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Describes the minimum DirectX support required for hardware rendering by a render target.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FEATURE_LEVEL']/*"/>	
    /// <msdn-id>dd756628</msdn-id>	
    /// <unmanaged>D2D1_FEATURE_LEVEL</unmanaged>	
    /// <unmanaged-short>D2D1_FEATURE_LEVEL</unmanaged-short>	
    public enum FeatureLevel : int {	
        
        /// <summary>	
        /// <dd> <p>Direct2D determines whether the video card provides adequate hardware rendering support.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FEATURE_LEVEL_DEFAULT']/*"/>	
        /// <msdn-id>dd756628</msdn-id>	
        /// <unmanaged>D2D1_FEATURE_LEVEL_DEFAULT</unmanaged>	
        /// <unmanaged-short>D2D1_FEATURE_LEVEL_DEFAULT</unmanaged-short>	
        Level_DEFAULT = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The video card must support DirectX 9.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FEATURE_LEVEL_9']/*"/>	
        /// <msdn-id>dd756628</msdn-id>	
        /// <unmanaged>D2D1_FEATURE_LEVEL_9</unmanaged>	
        /// <unmanaged-short>D2D1_FEATURE_LEVEL_9</unmanaged-short>	
        Level_9 = unchecked((int)37120),			
        
        /// <summary>	
        /// <dd> <p>The video card must support DirectX 10. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FEATURE_LEVEL_10']/*"/>	
        /// <msdn-id>dd756628</msdn-id>	
        /// <unmanaged>D2D1_FEATURE_LEVEL_10</unmanaged>	
        /// <unmanaged-short>D2D1_FEATURE_LEVEL_10</unmanaged-short>	
        Level_10 = unchecked((int)40960),			
    }
    
    /// <summary>	
    /// <p>Indicates whether a specific <strong><see cref="SharpDX.Direct2D1.SimplifiedGeometrySink"/></strong> figure is filled or hollow. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p><strong>Note</strong>??A hollow figure is not filled and consists only of an outline.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FIGURE_BEGIN']/*"/>	
    /// <msdn-id>dd368106</msdn-id>	
    /// <unmanaged>D2D1_FIGURE_BEGIN</unmanaged>	
    /// <unmanaged-short>D2D1_FIGURE_BEGIN</unmanaged-short>	
    public enum FigureBegin : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FIGURE_BEGIN_FILLED']/*"/>	
        /// <msdn-id>dd368106</msdn-id>	
        /// <unmanaged>D2D1_FIGURE_BEGIN_FILLED</unmanaged>	
        /// <unmanaged-short>D2D1_FIGURE_BEGIN_FILLED</unmanaged-short>	
        Filled = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FIGURE_BEGIN_HOLLOW']/*"/>	
        /// <msdn-id>dd368106</msdn-id>	
        /// <unmanaged>D2D1_FIGURE_BEGIN_HOLLOW</unmanaged>	
        /// <unmanaged-short>D2D1_FIGURE_BEGIN_HOLLOW</unmanaged-short>	
        Hollow = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Indicates whether a specific  <strong><see cref="SharpDX.Direct2D1.SimplifiedGeometrySink"/></strong> figure is open or closed. </p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FIGURE_END']/*"/>	
    /// <msdn-id>dd368108</msdn-id>	
    /// <unmanaged>D2D1_FIGURE_END</unmanaged>	
    /// <unmanaged-short>D2D1_FIGURE_END</unmanaged-short>	
    public enum FigureEnd : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FIGURE_END_OPEN']/*"/>	
        /// <msdn-id>dd368108</msdn-id>	
        /// <unmanaged>D2D1_FIGURE_END_OPEN</unmanaged>	
        /// <unmanaged-short>D2D1_FIGURE_END_OPEN</unmanaged-short>	
        Open = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FIGURE_END_CLOSED']/*"/>	
        /// <msdn-id>dd368108</msdn-id>	
        /// <unmanaged>D2D1_FIGURE_END_CLOSED</unmanaged>	
        /// <unmanaged-short>D2D1_FIGURE_END_CLOSED</unmanaged-short>	
        Closed = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Specifies how the intersecting areas of geometries or figures are combined to form the area of the composite geometry. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Use the <strong><see cref="SharpDX.Direct2D1.FillMode"/></strong> enumeration when creating an <strong><see cref="SharpDX.Direct2D1.GeometryGroup"/></strong> with the <strong>CreateGeometryGroup</strong> method, or when modifying the fill mode of an <strong><see cref="SharpDX.Direct2D1.SimplifiedGeometrySink"/></strong> with the <strong><see cref="SharpDX.Direct2D1.SimplifiedGeometrySink.SetFillMode"/></strong> method.</p><p>Direct2D fills the interior of a path by using one of the two fill modes specified by this enumeration: <strong><see cref="SharpDX.Direct2D1.FillMode.Alternate"/></strong> (alternate) or <strong><see cref="SharpDX.Direct2D1.FillMode.Winding"/></strong> (winding). Because the modes determine how to fill the interior of a closed shape, all shapes are treated as closed when they are filled.  If there is a gap in a segment in a shape, draw an imaginary line to close it. </p><p> To see the difference between the winding and alternate fill modes, assume that you have four circles with the same center and a different radius, as shown in the following illustration. The first one has the radius of 25, the second 50, the third 75, and the fourth 100.</p><p>The following  illustration shows the shape filled by using the alternate fill mode. Notice that the center and third ring are not filled. This is because a ray drawn from any point in either of those two rings passes through an even number of segments. </p><p>The following illustration explains this process. </p><p>The following illustration shows how the same shape is filled when the winding fill mode is specified. </p><p>Notice that all the rings are filled. This is because all the segments run in the same direction, so a ray drawn from any point will cross one or more segments, and the sum of the crossings will not equal zero. </p><p>The following illustration explains this process. The red arrows represent the direction in which the segments are drawn and the black arrow represents an arbitrary ray that runs from a point in the innermost ring. Starting with a value of zero, for each segment that the ray crosses, a value of one is added for every clockwise intersection. All points lie in the fill region in this illustration, because the count does not equal zero. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FILL_MODE']/*"/>	
    /// <msdn-id>dd368110</msdn-id>	
    /// <unmanaged>D2D1_FILL_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_FILL_MODE</unmanaged-short>	
    public enum FillMode : int {	
        
        /// <summary>	
        /// <dd> <p>Determines whether a point is in the fill region by drawing a ray from that point to infinity in any direction, and then counting the number of path segments within the given shape that the ray crosses. If this number is odd, the point is in the fill region; if even, the point is outside the fill region.  </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FILL_MODE_ALTERNATE']/*"/>	
        /// <msdn-id>dd368110</msdn-id>	
        /// <unmanaged>D2D1_FILL_MODE_ALTERNATE</unmanaged>	
        /// <unmanaged-short>D2D1_FILL_MODE_ALTERNATE</unmanaged-short>	
        Alternate = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Determines whether a point is in the fill region of the path by drawing a ray from that point to infinity in any direction, and then examining the places where a segment of the shape crosses the ray. Starting with a count of zero, add one each time a segment crosses the ray from left to right and subtract one each time a path segment crosses the ray from right to left,  as long as left and right are seen from the perspective of the ray. After counting the crossings, if the result is zero, then the point is outside the path. Otherwise, it is inside the path.  </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FILL_MODE_WINDING']/*"/>	
        /// <msdn-id>dd368110</msdn-id>	
        /// <unmanaged>D2D1_FILL_MODE_WINDING</unmanaged>	
        /// <unmanaged-short>D2D1_FILL_MODE_WINDING</unmanaged-short>	
        Winding = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Represents filtering modes that a transform may select to use on input textures.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This enumeration has the same numeric values as <strong><see cref="SharpDX.Direct3D11.Filter"/></strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FILTER']/*"/>	
    /// <msdn-id>hh404306</msdn-id>	
    /// <unmanaged>D2D1_FILTER</unmanaged>	
    /// <unmanaged-short>D2D1_FILTER</unmanaged-short>	
    public enum Filter : int {	
        
        /// <summary>	
        /// <dd> <p>Use point sampling for minification, magnification, and mip-level sampling.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FILTER_MIN_MAG_MIP_POINT']/*"/>	
        /// <msdn-id>hh404306</msdn-id>	
        /// <unmanaged>D2D1_FILTER_MIN_MAG_MIP_POINT</unmanaged>	
        /// <unmanaged-short>D2D1_FILTER_MIN_MAG_MIP_POINT</unmanaged-short>	
        MinimumMagMipPoint = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Use point sampling for minification and magnification; use linear interpolation for mip-level sampling.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FILTER_MIN_MAG_POINT_MIP_LINEAR']/*"/>	
        /// <msdn-id>hh404306</msdn-id>	
        /// <unmanaged>D2D1_FILTER_MIN_MAG_POINT_MIP_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_FILTER_MIN_MAG_POINT_MIP_LINEAR</unmanaged-short>	
        MinimumMagPointMipLinear = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Use point sampling for minification; use linear interpolation for magnification; use point sampling for mip-level sampling.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT']/*"/>	
        /// <msdn-id>hh404306</msdn-id>	
        /// <unmanaged>D2D1_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT</unmanaged>	
        /// <unmanaged-short>D2D1_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT</unmanaged-short>	
        MinimumPointMagLinearMipPoint = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Use point sampling for minification; use linear interpolation for magnification and mip-level sampling.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FILTER_MIN_POINT_MAG_MIP_LINEAR']/*"/>	
        /// <msdn-id>hh404306</msdn-id>	
        /// <unmanaged>D2D1_FILTER_MIN_POINT_MAG_MIP_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_FILTER_MIN_POINT_MAG_MIP_LINEAR</unmanaged-short>	
        MinimumPointMagMipLinear = unchecked((int)5),			
        
        /// <summary>	
        /// <dd> <p>Use linear interpolation for minification; use point sampling for magnification and mip-level sampling.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FILTER_MIN_LINEAR_MAG_MIP_POINT']/*"/>	
        /// <msdn-id>hh404306</msdn-id>	
        /// <unmanaged>D2D1_FILTER_MIN_LINEAR_MAG_MIP_POINT</unmanaged>	
        /// <unmanaged-short>D2D1_FILTER_MIN_LINEAR_MAG_MIP_POINT</unmanaged-short>	
        MinimumLinearMagMipPoint = unchecked((int)16),			
        
        /// <summary>	
        /// <dd> <p>Use linear interpolation for minification; use point sampling for magnification; use linear interpolation for mip-level sampling.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR']/*"/>	
        /// <msdn-id>hh404306</msdn-id>	
        /// <unmanaged>D2D1_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR</unmanaged-short>	
        MinimumLinearMagPointMipLinear = unchecked((int)17),			
        
        /// <summary>	
        /// <dd> <p>Use linear interpolation for minification and magnification; use point sampling for mip-level sampling.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FILTER_MIN_MAG_LINEAR_MIP_POINT']/*"/>	
        /// <msdn-id>hh404306</msdn-id>	
        /// <unmanaged>D2D1_FILTER_MIN_MAG_LINEAR_MIP_POINT</unmanaged>	
        /// <unmanaged-short>D2D1_FILTER_MIN_MAG_LINEAR_MIP_POINT</unmanaged-short>	
        MinimumMagLinearMipPoint = unchecked((int)20),			
        
        /// <summary>	
        /// <dd> <p>Use linear interpolation for minification, magnification, and mip-level sampling.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FILTER_MIN_MAG_MIP_LINEAR']/*"/>	
        /// <msdn-id>hh404306</msdn-id>	
        /// <unmanaged>D2D1_FILTER_MIN_MAG_MIP_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_FILTER_MIN_MAG_MIP_LINEAR</unmanaged-short>	
        MinimumMagMipLinear = unchecked((int)21),			
        
        /// <summary>	
        /// <dd> <p>Use anisotropic interpolation for minification, magnification, and mip-level sampling.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FILTER_ANISOTROPIC']/*"/>	
        /// <msdn-id>hh404306</msdn-id>	
        /// <unmanaged>D2D1_FILTER_ANISOTROPIC</unmanaged>	
        /// <unmanaged-short>D2D1_FILTER_ANISOTROPIC</unmanaged-short>	
        Anisotropic = unchecked((int)85),			
    }
    
    /// <summary>	
    /// <p>Use the flood effect to  generate   a bitmap based on the specified color and alpha value. You can use this effect when you want a specific color as an input for an effect, like a background color. </p><p><strong>Note</strong>??The effect passes along the specified color value as specified. You must manually pre-multiply the values if you plan to pass the output  to effects that expect a pre-multiplied input.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.Flood"/>.</p><p>The flood effect has no input image.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Output</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FLOOD_PROP']/*"/>	
    /// <msdn-id>hh706336</msdn-id>	
    /// <unmanaged>D2D1_FLOOD_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_FLOOD_PROP</unmanaged-short>	
    public enum FloodProperties : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_FLOOD_PROP_COLOR']/*"/>	
        /// <msdn-id>hh706336</msdn-id>	
        /// <unmanaged>D2D1_FLOOD_PROP_COLOR</unmanaged>	
        /// <unmanaged-short>D2D1_FLOOD_PROP_COLOR</unmanaged-short>	
        Color = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Specifies which gamma is used for interpolation.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Interpolating in a linear gamma space (<strong><see cref="SharpDX.Direct2D1.Gamma.Linear"/></strong>) can avoid changes in perceived brightness caused by the effect of gamma correction in spaces where the gamma is not 1.0, such as the default sRGB color space, where the gamma is 2.2. For an example of the differences between these two blending modes, consider the following illustration, which shows two gradients, each of which blends from red to blue to green:</p><p></p><p>The first gradient is interpolated linearly in the space of the render target (sRGB in this case), and one can see the dark bands between each color. The second gradient uses a gamma-correct linear interpolation, and thus does not exhibit the same variations in brightness.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GAMMA']/*"/>	
    /// <msdn-id>dd368113</msdn-id>	
    /// <unmanaged>D2D1_GAMMA</unmanaged>	
    /// <unmanaged-short>D2D1_GAMMA</unmanaged-short>	
    public enum Gamma : int {	
        
        /// <summary>	
        /// <dd> <p>Interpolation is performed in the standard RGB (sRGB) gamma.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GAMMA_2_2']/*"/>	
        /// <msdn-id>dd368113</msdn-id>	
        /// <unmanaged>D2D1_GAMMA_2_2</unmanaged>	
        /// <unmanaged-short>D2D1_GAMMA_2_2</unmanaged-short>	
        StandardRgb = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Interpolation is performed in the linear-gamma color space.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GAMMA_1_0']/*"/>	
        /// <msdn-id>dd368113</msdn-id>	
        /// <unmanaged>D2D1_GAMMA_1_0</unmanaged>	
        /// <unmanaged-short>D2D1_GAMMA_1_0</unmanaged-short>	
        Linear = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Use the gamma  transfer effect to map the color intensities of an image using a  gamma function created using  an amplitude, exponent, and offset you provide for each channel.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.GammaTransfer"/>. To use this effect, add dxguid.lib to the linker dependencies.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Output</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GAMMATRANSFER_PROP']/*"/>	
    /// <msdn-id>hh706337</msdn-id>	
    /// <unmanaged>D2D1_GAMMATRANSFER_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP</unmanaged-short>	
    public enum GammaTransferProperties : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GAMMATRANSFER_PROP_RED_AMPLITUDE']/*"/>	
        /// <msdn-id>hh706337</msdn-id>	
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_RED_AMPLITUDE</unmanaged>	
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_RED_AMPLITUDE</unmanaged-short>	
        RedAmplitude = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GAMMATRANSFER_PROP_RED_EXPONENT']/*"/>	
        /// <msdn-id>hh706337</msdn-id>	
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_RED_EXPONENT</unmanaged>	
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_RED_EXPONENT</unmanaged-short>	
        RedExponent = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GAMMATRANSFER_PROP_RED_OFFSET']/*"/>	
        /// <msdn-id>hh706337</msdn-id>	
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_RED_OFFSET</unmanaged>	
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_RED_OFFSET</unmanaged-short>	
        RedOffset = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GAMMATRANSFER_PROP_RED_DISABLE']/*"/>	
        /// <msdn-id>hh706337</msdn-id>	
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_RED_DISABLE</unmanaged>	
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_RED_DISABLE</unmanaged-short>	
        RedDisable = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GAMMATRANSFER_PROP_GREEN_AMPLITUDE']/*"/>	
        /// <msdn-id>hh706337</msdn-id>	
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_GREEN_AMPLITUDE</unmanaged>	
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_GREEN_AMPLITUDE</unmanaged-short>	
        GreenAmplitude = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GAMMATRANSFER_PROP_GREEN_EXPONENT']/*"/>	
        /// <msdn-id>hh706337</msdn-id>	
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_GREEN_EXPONENT</unmanaged>	
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_GREEN_EXPONENT</unmanaged-short>	
        GreenExponent = unchecked((int)5),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GAMMATRANSFER_PROP_GREEN_OFFSET']/*"/>	
        /// <msdn-id>hh706337</msdn-id>	
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_GREEN_OFFSET</unmanaged>	
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_GREEN_OFFSET</unmanaged-short>	
        GreenOffset = unchecked((int)6),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GAMMATRANSFER_PROP_GREEN_DISABLE']/*"/>	
        /// <msdn-id>hh706337</msdn-id>	
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_GREEN_DISABLE</unmanaged>	
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_GREEN_DISABLE</unmanaged-short>	
        GreenDisable = unchecked((int)7),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GAMMATRANSFER_PROP_BLUE_AMPLITUDE']/*"/>	
        /// <msdn-id>hh706337</msdn-id>	
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_BLUE_AMPLITUDE</unmanaged>	
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_BLUE_AMPLITUDE</unmanaged-short>	
        BlueAmplitude = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GAMMATRANSFER_PROP_BLUE_EXPONENT']/*"/>	
        /// <msdn-id>hh706337</msdn-id>	
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_BLUE_EXPONENT</unmanaged>	
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_BLUE_EXPONENT</unmanaged-short>	
        BlueExponent = unchecked((int)9),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GAMMATRANSFER_PROP_BLUE_OFFSET']/*"/>	
        /// <msdn-id>hh706337</msdn-id>	
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_BLUE_OFFSET</unmanaged>	
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_BLUE_OFFSET</unmanaged-short>	
        BlueOffset = unchecked((int)10),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GAMMATRANSFER_PROP_BLUE_DISABLE']/*"/>	
        /// <msdn-id>hh706337</msdn-id>	
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_BLUE_DISABLE</unmanaged>	
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_BLUE_DISABLE</unmanaged-short>	
        BlueDisable = unchecked((int)11),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GAMMATRANSFER_PROP_ALPHA_AMPLITUDE']/*"/>	
        /// <msdn-id>hh706337</msdn-id>	
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_ALPHA_AMPLITUDE</unmanaged>	
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_ALPHA_AMPLITUDE</unmanaged-short>	
        AlphaAmplitude = unchecked((int)12),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GAMMATRANSFER_PROP_ALPHA_EXPONENT']/*"/>	
        /// <msdn-id>hh706337</msdn-id>	
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_ALPHA_EXPONENT</unmanaged>	
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_ALPHA_EXPONENT</unmanaged-short>	
        AlphaExponent = unchecked((int)13),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GAMMATRANSFER_PROP_ALPHA_OFFSET']/*"/>	
        /// <msdn-id>hh706337</msdn-id>	
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_ALPHA_OFFSET</unmanaged>	
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_ALPHA_OFFSET</unmanaged-short>	
        AlphaOffset = unchecked((int)14),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GAMMATRANSFER_PROP_ALPHA_DISABLE']/*"/>	
        /// <msdn-id>hh706337</msdn-id>	
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_ALPHA_DISABLE</unmanaged>	
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_ALPHA_DISABLE</unmanaged-short>	
        AlphaDisable = unchecked((int)15),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GAMMATRANSFER_PROP_CLAMP_OUTPUT']/*"/>	
        /// <msdn-id>hh706337</msdn-id>	
        /// <unmanaged>D2D1_GAMMATRANSFER_PROP_CLAMP_OUTPUT</unmanaged>	
        /// <unmanaged-short>D2D1_GAMMATRANSFER_PROP_CLAMP_OUTPUT</unmanaged-short>	
        ClampOutput = unchecked((int)16),			
    }
    
    /// <summary>	
    /// <p>Use the Gaussian blur effect to create a blur based on the Gaussian function over the entire input image.</p><p>You can use this effect to create glows and drop shadows and use the composite effect to apply the result to the original image. It is useful in photo processing for filters like highlights and shadows. You can use the output of this effect for input into lighting effects, like the Specular Lighting or Diffuse Lighting effects, because the alpha channel is blurred, too and lighting effects use the alpha channel to determine surface geometry as a height map.</p><p>This effect is used by the built-in Shadow effect.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.GaussianBlur"/>.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Optimization</li> <li>Border</li> <li>Output</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GAUSSIANBLUR_OPTIMIZATION']/*"/>	
    /// <msdn-id>hh706338</msdn-id>	
    /// <unmanaged>D2D1_GAUSSIANBLUR_OPTIMIZATION</unmanaged>	
    /// <unmanaged-short>D2D1_GAUSSIANBLUR_OPTIMIZATION</unmanaged-short>	
    public enum GaussianBlurOptimization : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GAUSSIANBLUR_OPTIMIZATION_SPEED']/*"/>	
        /// <msdn-id>hh706338</msdn-id>	
        /// <unmanaged>D2D1_GAUSSIANBLUR_OPTIMIZATION_SPEED</unmanaged>	
        /// <unmanaged-short>D2D1_GAUSSIANBLUR_OPTIMIZATION_SPEED</unmanaged-short>	
        Speed = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GAUSSIANBLUR_OPTIMIZATION_BALANCED']/*"/>	
        /// <msdn-id>hh706338</msdn-id>	
        /// <unmanaged>D2D1_GAUSSIANBLUR_OPTIMIZATION_BALANCED</unmanaged>	
        /// <unmanaged-short>D2D1_GAUSSIANBLUR_OPTIMIZATION_BALANCED</unmanaged-short>	
        Balanced = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GAUSSIANBLUR_OPTIMIZATION_QUALITY']/*"/>	
        /// <msdn-id>hh706338</msdn-id>	
        /// <unmanaged>D2D1_GAUSSIANBLUR_OPTIMIZATION_QUALITY</unmanaged>	
        /// <unmanaged-short>D2D1_GAUSSIANBLUR_OPTIMIZATION_QUALITY</unmanaged-short>	
        Quality = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Use the Gaussian blur effect to create a blur based on the Gaussian function over the entire input image.</p><p>You can use this effect to create glows and drop shadows and use the composite effect to apply the result to the original image. It is useful in photo processing for filters like highlights and shadows. You can use the output of this effect for input into lighting effects, like the Specular Lighting or Diffuse Lighting effects, because the alpha channel is blurred, too and lighting effects use the alpha channel to determine surface geometry as a height map.</p><p>This effect is used by the built-in Shadow effect.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.GaussianBlur"/>.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Optimization</li> <li>Border</li> <li>Output</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GAUSSIANBLUR_PROP']/*"/>	
    /// <msdn-id>hh706338</msdn-id>	
    /// <unmanaged>D2D1_GAUSSIANBLUR_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_GAUSSIANBLUR_PROP</unmanaged-short>	
    public enum GaussianBlurProperties : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GAUSSIANBLUR_PROP_STANDARD_DEVIATION']/*"/>	
        /// <msdn-id>hh706338</msdn-id>	
        /// <unmanaged>D2D1_GAUSSIANBLUR_PROP_STANDARD_DEVIATION</unmanaged>	
        /// <unmanaged-short>D2D1_GAUSSIANBLUR_PROP_STANDARD_DEVIATION</unmanaged-short>	
        StandardDeviation = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GAUSSIANBLUR_PROP_OPTIMIZATION']/*"/>	
        /// <msdn-id>hh706338</msdn-id>	
        /// <unmanaged>D2D1_GAUSSIANBLUR_PROP_OPTIMIZATION</unmanaged>	
        /// <unmanaged-short>D2D1_GAUSSIANBLUR_PROP_OPTIMIZATION</unmanaged-short>	
        Optimization = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GAUSSIANBLUR_PROP_BORDER_MODE']/*"/>	
        /// <msdn-id>hh706338</msdn-id>	
        /// <unmanaged>D2D1_GAUSSIANBLUR_PROP_BORDER_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_GAUSSIANBLUR_PROP_BORDER_MODE</unmanaged-short>	
        BorderMode = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Describes how one geometry object is spatially related to another geometry object. </p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GEOMETRY_RELATION']/*"/>	
    /// <msdn-id>dd368115</msdn-id>	
    /// <unmanaged>D2D1_GEOMETRY_RELATION</unmanaged>	
    /// <unmanaged-short>D2D1_GEOMETRY_RELATION</unmanaged-short>	
    public enum GeometryRelation : int {	
        
        /// <summary>	
        /// <dd> <p>The relationship between the two geometries cannot be determined. This value is never returned by any D2D method.  </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GEOMETRY_RELATION_UNKNOWN']/*"/>	
        /// <msdn-id>dd368115</msdn-id>	
        /// <unmanaged>D2D1_GEOMETRY_RELATION_UNKNOWN</unmanaged>	
        /// <unmanaged-short>D2D1_GEOMETRY_RELATION_UNKNOWN</unmanaged-short>	
        Unknown = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The two geometries  do not intersect at all.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GEOMETRY_RELATION_DISJOINT']/*"/>	
        /// <msdn-id>dd368115</msdn-id>	
        /// <unmanaged>D2D1_GEOMETRY_RELATION_DISJOINT</unmanaged>	
        /// <unmanaged-short>D2D1_GEOMETRY_RELATION_DISJOINT</unmanaged-short>	
        Disjoint = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The instance geometry is entirely contained by  the passed-in geometry.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GEOMETRY_RELATION_IS_CONTAINED']/*"/>	
        /// <msdn-id>dd368115</msdn-id>	
        /// <unmanaged>D2D1_GEOMETRY_RELATION_IS_CONTAINED</unmanaged>	
        /// <unmanaged-short>D2D1_GEOMETRY_RELATION_IS_CONTAINED</unmanaged-short>	
        IsContained = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>The instance geometry entirely contains the passed-in geometry.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GEOMETRY_RELATION_CONTAINS']/*"/>	
        /// <msdn-id>dd368115</msdn-id>	
        /// <unmanaged>D2D1_GEOMETRY_RELATION_CONTAINS</unmanaged>	
        /// <unmanaged-short>D2D1_GEOMETRY_RELATION_CONTAINS</unmanaged-short>	
        Contains = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>The two geometries overlap but neither completely contains the other. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GEOMETRY_RELATION_OVERLAP']/*"/>	
        /// <msdn-id>dd368115</msdn-id>	
        /// <unmanaged>D2D1_GEOMETRY_RELATION_OVERLAP</unmanaged>	
        /// <unmanaged-short>D2D1_GEOMETRY_RELATION_OVERLAP</unmanaged-short>	
        Overlap = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p>Specifies how a geometry is simplified to an <strong><see cref="SharpDX.Direct2D1.SimplifiedGeometrySink"/></strong>.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GEOMETRY_SIMPLIFICATION_OPTION']/*"/>	
    /// <msdn-id>dd368117</msdn-id>	
    /// <unmanaged>D2D1_GEOMETRY_SIMPLIFICATION_OPTION</unmanaged>	
    /// <unmanaged-short>D2D1_GEOMETRY_SIMPLIFICATION_OPTION</unmanaged-short>	
    public enum GeometrySimplificationOption : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GEOMETRY_SIMPLIFICATION_OPTION_CUBICS_AND_LINES']/*"/>	
        /// <msdn-id>dd368117</msdn-id>	
        /// <unmanaged>D2D1_GEOMETRY_SIMPLIFICATION_OPTION_CUBICS_AND_LINES</unmanaged>	
        /// <unmanaged-short>D2D1_GEOMETRY_SIMPLIFICATION_OPTION_CUBICS_AND_LINES</unmanaged-short>	
        CubicsAndLines = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_GEOMETRY_SIMPLIFICATION_OPTION_LINES']/*"/>	
        /// <msdn-id>dd368117</msdn-id>	
        /// <unmanaged>D2D1_GEOMETRY_SIMPLIFICATION_OPTION_LINES</unmanaged>	
        /// <unmanaged-short>D2D1_GEOMETRY_SIMPLIFICATION_OPTION_LINES</unmanaged-short>	
        Lines = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Values for the <strong><see cref="SharpDX.Direct2D1.HighlightSandShadowsProperty.InputGamma"/></strong> property  of the Highlights and Shadows effect.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA']/*"/>	
    /// <msdn-id>dn890727</msdn-id>	
    /// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA</unmanaged>	
    /// <unmanaged-short>D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA</unmanaged-short>	
    public enum HighlightSandShadowsInputGamma : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_LINEAR']/*"/>	
        /// <msdn-id>dn890727</msdn-id>	
        /// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_LINEAR</unmanaged-short>	
        Linear = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_SRGB']/*"/>	
        /// <msdn-id>dn890727</msdn-id>	
        /// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_SRGB</unmanaged>	
        /// <unmanaged-short>D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_SRGB</unmanaged-short>	
        SRgb = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Identifiers for properties of the Highlights and Shadows effect.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_HIGHLIGHTSANDSHADOWS_PROP']/*"/>	
    /// <msdn-id>dn890728</msdn-id>	
    /// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_HIGHLIGHTSANDSHADOWS_PROP</unmanaged-short>	
    public enum HighlightSandShadowsProperty : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_HIGHLIGHTSANDSHADOWS_PROP_HIGHLIGHTS']/*"/>	
        /// <msdn-id>dn890728</msdn-id>	
        /// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_PROP_HIGHLIGHTS</unmanaged>	
        /// <unmanaged-short>D2D1_HIGHLIGHTSANDSHADOWS_PROP_HIGHLIGHTS</unmanaged-short>	
        Highlights = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_HIGHLIGHTSANDSHADOWS_PROP_SHADOWS']/*"/>	
        /// <msdn-id>dn890728</msdn-id>	
        /// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_PROP_SHADOWS</unmanaged>	
        /// <unmanaged-short>D2D1_HIGHLIGHTSANDSHADOWS_PROP_SHADOWS</unmanaged-short>	
        Shadows = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_HIGHLIGHTSANDSHADOWS_PROP_CLARITY']/*"/>	
        /// <msdn-id>dn890728</msdn-id>	
        /// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_PROP_CLARITY</unmanaged>	
        /// <unmanaged-short>D2D1_HIGHLIGHTSANDSHADOWS_PROP_CLARITY</unmanaged-short>	
        Clarity = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_HIGHLIGHTSANDSHADOWS_PROP_INPUT_GAMMA']/*"/>	
        /// <msdn-id>dn890728</msdn-id>	
        /// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_PROP_INPUT_GAMMA</unmanaged>	
        /// <unmanaged-short>D2D1_HIGHLIGHTSANDSHADOWS_PROP_INPUT_GAMMA</unmanaged-short>	
        InputGamma = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_HIGHLIGHTSANDSHADOWS_PROP_MASK_BLUR_RADIUS']/*"/>	
        /// <msdn-id>dn890728</msdn-id>	
        /// <unmanaged>D2D1_HIGHLIGHTSANDSHADOWS_PROP_MASK_BLUR_RADIUS</unmanaged>	
        /// <unmanaged-short>D2D1_HIGHLIGHTSANDSHADOWS_PROP_MASK_BLUR_RADIUS</unmanaged-short>	
        MaskBlurRadius = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p>Use the histogram effect to generate a histogram for the input bitmap based on the specified number of bins.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.Histogram"/>.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Channel</li> <li>Data</li> <li>Remarks</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <remarks>	
    /// <p><strong>Note</strong>??The <strong>CreateEffect</strong> method fails if the device doesn't support DirectCompute and returns <see cref="SharpDX.Result"/> = <see cref="SharpDX.Direct2D1.ResultCode.InsufficientDeviceCapabilities"/>.	
    /// All DirectX11 cards and DirectX10 cards that support DirectCompute can use the effect.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_HISTOGRAM_PROP']/*"/>	
    /// <msdn-id>hh706340</msdn-id>	
    /// <unmanaged>D2D1_HISTOGRAM_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_HISTOGRAM_PROP</unmanaged-short>	
    public enum HistogramProperties : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_HISTOGRAM_PROP_NUM_BINS']/*"/>	
        /// <msdn-id>hh706340</msdn-id>	
        /// <unmanaged>D2D1_HISTOGRAM_PROP_NUM_BINS</unmanaged>	
        /// <unmanaged-short>D2D1_HISTOGRAM_PROP_NUM_BINS</unmanaged-short>	
        NumBins = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_HISTOGRAM_PROP_CHANNEL_SELECT']/*"/>	
        /// <msdn-id>hh706340</msdn-id>	
        /// <unmanaged>D2D1_HISTOGRAM_PROP_CHANNEL_SELECT</unmanaged>	
        /// <unmanaged-short>D2D1_HISTOGRAM_PROP_CHANNEL_SELECT</unmanaged-short>	
        ChannelSelect = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_HISTOGRAM_PROP_HISTOGRAM_OUTPUT']/*"/>	
        /// <msdn-id>hh706340</msdn-id>	
        /// <unmanaged>D2D1_HISTOGRAM_PROP_HISTOGRAM_OUTPUT</unmanaged>	
        /// <unmanaged-short>D2D1_HISTOGRAM_PROP_HISTOGRAM_OUTPUT</unmanaged-short>	
        HistogramOutput = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Use the hue rotate effect to alter the hue of an image by applying a color matrix based on the rotation angle. </p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.HueRotation"/>.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Output</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_HUEROTATION_PROP']/*"/>	
    /// <msdn-id>hh706342</msdn-id>	
    /// <unmanaged>D2D1_HUEROTATION_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_HUEROTATION_PROP</unmanaged-short>	
    public enum HueRotationProperties : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_HUEROTATION_PROP_ANGLE']/*"/>	
        /// <msdn-id>hh706342</msdn-id>	
        /// <unmanaged>D2D1_HUEROTATION_PROP_ANGLE</unmanaged>	
        /// <unmanaged-short>D2D1_HUEROTATION_PROP_ANGLE</unmanaged-short>	
        Angle = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Values for the <strong><see cref="SharpDX.Direct2D1.HueToRgbProperty.InputColorSpace"/></strong> property of the Hue to RGB effect.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_HUETORGB_INPUT_COLOR_SPACE']/*"/>	
    /// <msdn-id>dn890729</msdn-id>	
    /// <unmanaged>D2D1_HUETORGB_INPUT_COLOR_SPACE</unmanaged>	
    /// <unmanaged-short>D2D1_HUETORGB_INPUT_COLOR_SPACE</unmanaged-short>	
    public enum HueToRgbInputColorSpace : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_HUETORGB_INPUT_COLOR_SPACE_HUE_SATURATION_VALUE']/*"/>	
        /// <msdn-id>dn890729</msdn-id>	
        /// <unmanaged>D2D1_HUETORGB_INPUT_COLOR_SPACE_HUE_SATURATION_VALUE</unmanaged>	
        /// <unmanaged-short>D2D1_HUETORGB_INPUT_COLOR_SPACE_HUE_SATURATION_VALUE</unmanaged-short>	
        HueSaturationValue = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_HUETORGB_INPUT_COLOR_SPACE_HUE_SATURATION_LIGHTNESS']/*"/>	
        /// <msdn-id>dn890729</msdn-id>	
        /// <unmanaged>D2D1_HUETORGB_INPUT_COLOR_SPACE_HUE_SATURATION_LIGHTNESS</unmanaged>	
        /// <unmanaged-short>D2D1_HUETORGB_INPUT_COLOR_SPACE_HUE_SATURATION_LIGHTNESS</unmanaged-short>	
        HueSaturationLightness = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Identifiers for properties of the Hue to RGB effect.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_HUETORGB_PROP']/*"/>	
    /// <msdn-id>dn890730</msdn-id>	
    /// <unmanaged>D2D1_HUETORGB_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_HUETORGB_PROP</unmanaged-short>	
    public enum HueToRgbProperty : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_HUETORGB_PROP_INPUT_COLOR_SPACE']/*"/>	
        /// <msdn-id>dn890730</msdn-id>	
        /// <unmanaged>D2D1_HUETORGB_PROP_INPUT_COLOR_SPACE</unmanaged>	
        /// <unmanaged-short>D2D1_HUETORGB_PROP_INPUT_COLOR_SPACE</unmanaged-short>	
        InputColorSpace = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Option flags controlling primary conversion performed by <strong>CreateImageSourceFromDxgi</strong>, if any.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS']/*"/>	
    /// <msdn-id>dn890733</msdn-id>	
    /// <unmanaged>D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS</unmanaged>	
    /// <unmanaged-short>D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS</unmanaged-short>	
    [Flags]
    public enum ImageSourceFromDxgiOptions : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_NONE']/*"/>	
        /// <msdn-id>dn890733</msdn-id>	
        /// <unmanaged>D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_NONE</unmanaged>	
        /// <unmanaged-short>D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_NONE</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_LOW_QUALITY_PRIMARY_CONVERSION']/*"/>	
        /// <msdn-id>dn890733</msdn-id>	
        /// <unmanaged>D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_LOW_QUALITY_PRIMARY_CONVERSION</unmanaged>	
        /// <unmanaged-short>D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_LOW_QUALITY_PRIMARY_CONVERSION</unmanaged-short>	
        LowQualityPrimaryConversion = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Controls option flags for a new <see cref="SharpDX.Direct2D1.ImageSource"/> when it is created.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> ? </p><p>D2D1_IMAGE_SOURCE_CREATION_OPTIONS_RELEASE_SOURCE causes the image source to not retain a reference to the source object used to create it.   It can decrease the quality and efficiency of printing.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_IMAGE_SOURCE_LOADING_OPTIONS']/*"/>	
    /// <msdn-id>dn890734</msdn-id>	
    /// <unmanaged>D2D1_IMAGE_SOURCE_LOADING_OPTIONS</unmanaged>	
    /// <unmanaged-short>D2D1_IMAGE_SOURCE_LOADING_OPTIONS</unmanaged-short>	
    [Flags]
    public enum ImageSourceLoadingOptions : int {	
        
        /// <summary>	
        /// <dd> <p>No options are used.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_IMAGE_SOURCE_LOADING_OPTIONS_NONE']/*"/>	
        /// <msdn-id>dn890734</msdn-id>	
        /// <unmanaged>D2D1_IMAGE_SOURCE_LOADING_OPTIONS_NONE</unmanaged>	
        /// <unmanaged-short>D2D1_IMAGE_SOURCE_LOADING_OPTIONS_NONE</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Indicates the image source should release its reference to the WIC bitmap source after it has initialized.  By default, the image source retains a reference to the WIC bitmap source for the lifetime of the object to enable quality and speed optimizations for printing.  This option disables that optimization.	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_IMAGE_SOURCE_LOADING_OPTIONS_RELEASE_SOURCE']/*"/>	
        /// <msdn-id>dn890734</msdn-id>	
        /// <unmanaged>D2D1_IMAGE_SOURCE_LOADING_OPTIONS_RELEASE_SOURCE</unmanaged>	
        /// <unmanaged-short>D2D1_IMAGE_SOURCE_LOADING_OPTIONS_RELEASE_SOURCE</unmanaged-short>	
        ReleaseSource = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Indicates the image source should only populate subregions of the image cache on-demand. You can control this behavior using  the <strong>EnsureCached</strong> and <strong>TrimCache</strong> methods.  This options provides the ability to improve memory usage by only keeping needed portions of the image in memory.  This option requires that the image source has a reference to the WIC bitmap source, and is incompatible with <see cref="SharpDX.Direct2D1.ImageSourceLoadingOptions.ReleaseSource"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_IMAGE_SOURCE_LOADING_OPTIONS_CACHE_ON_DEMAND']/*"/>	
        /// <msdn-id>dn890734</msdn-id>	
        /// <unmanaged>D2D1_IMAGE_SOURCE_LOADING_OPTIONS_CACHE_ON_DEMAND</unmanaged>	
        /// <unmanaged-short>D2D1_IMAGE_SOURCE_LOADING_OPTIONS_CACHE_ON_DEMAND</unmanaged-short>	
        CacheOnDemand = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p> Specifies the appearance of the ink nib (pen tip) as part of an <strong><see cref="SharpDX.Direct2D1.InkStyleProperties"/></strong> structure. </p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INK_NIB_SHAPE']/*"/>	
    /// <msdn-id>dn890735</msdn-id>	
    /// <unmanaged>D2D1_INK_NIB_SHAPE</unmanaged>	
    /// <unmanaged-short>D2D1_INK_NIB_SHAPE</unmanaged-short>	
    public enum InkNibShape : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INK_NIB_SHAPE_ROUND']/*"/>	
        /// <msdn-id>dn890735</msdn-id>	
        /// <unmanaged>D2D1_INK_NIB_SHAPE_ROUND</unmanaged>	
        /// <unmanaged-short>D2D1_INK_NIB_SHAPE_ROUND</unmanaged-short>	
        Round = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INK_NIB_SHAPE_SQUARE']/*"/>	
        /// <msdn-id>dn890735</msdn-id>	
        /// <unmanaged>D2D1_INK_NIB_SHAPE_SQUARE</unmanaged>	
        /// <unmanaged-short>D2D1_INK_NIB_SHAPE_SQUARE</unmanaged-short>	
        Square = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>This is used to specify the quality of image scaling with  <strong><see cref="SharpDX.Direct2D1.DeviceContext.DrawImage"/></strong> and with the 2D affine transform effect. </p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INTERPOLATION_MODE']/*"/>	
    /// <msdn-id>hh447004</msdn-id>	
    /// <unmanaged>D2D1_INTERPOLATION_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_INTERPOLATION_MODE</unmanaged-short>	
    public enum InterpolationMode : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INTERPOLATION_MODE_NEAREST_NEIGHBOR']/*"/>	
        /// <msdn-id>hh447004</msdn-id>	
        /// <unmanaged>D2D1_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>	
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged-short>	
        NearestNeighbor = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INTERPOLATION_MODE_LINEAR']/*"/>	
        /// <msdn-id>hh447004</msdn-id>	
        /// <unmanaged>D2D1_INTERPOLATION_MODE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_LINEAR</unmanaged-short>	
        Linear = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INTERPOLATION_MODE_CUBIC']/*"/>	
        /// <msdn-id>hh447004</msdn-id>	
        /// <unmanaged>D2D1_INTERPOLATION_MODE_CUBIC</unmanaged>	
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_CUBIC</unmanaged-short>	
        Cubic = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR']/*"/>	
        /// <msdn-id>hh447004</msdn-id>	
        /// <unmanaged>D2D1_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>	
        MultiSampleLinear = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INTERPOLATION_MODE_ANISOTROPIC']/*"/>	
        /// <msdn-id>hh447004</msdn-id>	
        /// <unmanaged>D2D1_INTERPOLATION_MODE_ANISOTROPIC</unmanaged>	
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_ANISOTROPIC</unmanaged-short>	
        Anisotropic = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC']/*"/>	
        /// <msdn-id>hh447004</msdn-id>	
        /// <unmanaged>D2D1_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged>	
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>	
        HighQualityCubic = unchecked((int)5),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ENUM_0']/*"/>	
    /// <unmanaged>D2D1_ENUM_0</unmanaged>	
    /// <unmanaged-short>D2D1_ENUM_0</unmanaged-short>	
    public enum InterpolationModeDefinition : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INTERPOLATION_MODE_DEFINITION_NEAREST_NEIGHBOR']/*"/>	
        /// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION_NEAREST_NEIGHBOR</unmanaged>	
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_DEFINITION_NEAREST_NEIGHBOR</unmanaged-short>	
        NearestNeighbor = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INTERPOLATION_MODE_DEFINITION_LINEAR']/*"/>	
        /// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_DEFINITION_LINEAR</unmanaged-short>	
        Linear = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INTERPOLATION_MODE_DEFINITION_CUBIC']/*"/>	
        /// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION_CUBIC</unmanaged>	
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_DEFINITION_CUBIC</unmanaged-short>	
        Cubic = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INTERPOLATION_MODE_DEFINITION_MULTI_SAMPLE_LINEAR']/*"/>	
        /// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION_MULTI_SAMPLE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_DEFINITION_MULTI_SAMPLE_LINEAR</unmanaged-short>	
        MultiSampleLinear = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INTERPOLATION_MODE_DEFINITION_ANISOTROPIC']/*"/>	
        /// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION_ANISOTROPIC</unmanaged>	
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_DEFINITION_ANISOTROPIC</unmanaged-short>	
        Anisotropic = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INTERPOLATION_MODE_DEFINITION_HIGH_QUALITY_CUBIC']/*"/>	
        /// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION_HIGH_QUALITY_CUBIC</unmanaged>	
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_DEFINITION_HIGH_QUALITY_CUBIC</unmanaged-short>	
        HighQualityCubic = unchecked((int)5),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INTERPOLATION_MODE_DEFINITION_FANT']/*"/>	
        /// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION_FANT</unmanaged>	
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_DEFINITION_FANT</unmanaged-short>	
        Fant = unchecked((int)6),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_INTERPOLATION_MODE_DEFINITION_MIPMAP_LINEAR']/*"/>	
        /// <unmanaged>D2D1_INTERPOLATION_MODE_DEFINITION_MIPMAP_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_INTERPOLATION_MODE_DEFINITION_MIPMAP_LINEAR</unmanaged-short>	
        MipmapLinear = unchecked((int)7),			
    }
    
    /// <summary>	
    /// <p>Specifies options that can be applied when a layer resource is applied to create a layer. </p><p><strong>Note</strong>??Starting in Windows?8, the <strong><see cref="SharpDX.Direct2D1.LayerOptions.InitializeForCleartype"/></strong> option is no longer supported.  See <strong><see cref="SharpDX.Direct2D1.LayerOptions1"/></strong> for Windows?8 layer options.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>ClearType antialiasing must use the current contents of the render target to blend properly. When a pushed layer requests initializing for ClearType, Direct2D copies the current contents of the render target into the layer so that ClearType antialiasing can be performed. Rendering ClearType text into a transparent layer does not produce the desired results.</p><p>A small performance hit from re-copying content occurs when <strong><see cref="SharpDX.Direct2D1.RenderTarget.Clear"/></strong> is called.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LAYER_OPTIONS']/*"/>	
    /// <msdn-id>dd368124</msdn-id>	
    /// <unmanaged>D2D1_LAYER_OPTIONS</unmanaged>	
    /// <unmanaged-short>D2D1_LAYER_OPTIONS</unmanaged-short>	
    [Flags]
    public enum LayerOptions : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LAYER_OPTIONS_NONE']/*"/>	
        /// <msdn-id>dd368124</msdn-id>	
        /// <unmanaged>D2D1_LAYER_OPTIONS_NONE</unmanaged>	
        /// <unmanaged-short>D2D1_LAYER_OPTIONS_NONE</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LAYER_OPTIONS_INITIALIZE_FOR_CLEARTYPE']/*"/>	
        /// <msdn-id>dd368124</msdn-id>	
        /// <unmanaged>D2D1_LAYER_OPTIONS_INITIALIZE_FOR_CLEARTYPE</unmanaged>	
        /// <unmanaged-short>D2D1_LAYER_OPTIONS_INITIALIZE_FOR_CLEARTYPE</unmanaged-short>	
        InitializeForCleartype = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Specifies how the layer contents should be prepared.	
    /// </p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LAYER_OPTIONS1']/*"/>	
    /// <msdn-id>hh997712</msdn-id>	
    /// <unmanaged>D2D1_LAYER_OPTIONS1</unmanaged>	
    /// <unmanaged-short>D2D1_LAYER_OPTIONS1</unmanaged-short>	
    [Flags]
    public enum LayerOptions1 : int {	
        
        /// <summary>	
        /// <dd> <p>Default layer behavior. A premultiplied layer target is pushed and its contents are cleared to transparent black. 	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LAYER_OPTIONS1_NONE']/*"/>	
        /// <msdn-id>hh997712</msdn-id>	
        /// <unmanaged>D2D1_LAYER_OPTIONS1_NONE</unmanaged>	
        /// <unmanaged-short>D2D1_LAYER_OPTIONS1_NONE</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p> The layer is not cleared to transparent black.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LAYER_OPTIONS1_INITIALIZE_FROM_BACKGROUND']/*"/>	
        /// <msdn-id>hh997712</msdn-id>	
        /// <unmanaged>D2D1_LAYER_OPTIONS1_INITIALIZE_FROM_BACKGROUND</unmanaged>	
        /// <unmanaged-short>D2D1_LAYER_OPTIONS1_INITIALIZE_FROM_BACKGROUND</unmanaged-short>	
        InitializeFromBackground = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p> The layer is always created as ignore alpha. All content rendered into the layer will be treated as opaque.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LAYER_OPTIONS1_IGNORE_ALPHA']/*"/>	
        /// <msdn-id>hh997712</msdn-id>	
        /// <unmanaged>D2D1_LAYER_OPTIONS1_IGNORE_ALPHA</unmanaged>	
        /// <unmanaged-short>D2D1_LAYER_OPTIONS1_IGNORE_ALPHA</unmanaged-short>	
        IgnoreAlpha = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Use the linear  transfer effect to map the color intensities of an image using a  linear function created  from a list of values you provide for each channel.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.LinearTransfer"/>.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LINEARTRANSFER_PROP']/*"/>	
    /// <msdn-id>hh706362</msdn-id>	
    /// <unmanaged>D2D1_LINEARTRANSFER_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP</unmanaged-short>	
    public enum LinearTransferProperties : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LINEARTRANSFER_PROP_RED_Y_INTERCEPT']/*"/>	
        /// <msdn-id>hh706362</msdn-id>	
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_RED_Y_INTERCEPT</unmanaged>	
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_RED_Y_INTERCEPT</unmanaged-short>	
        RedYIntercept = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LINEARTRANSFER_PROP_RED_SLOPE']/*"/>	
        /// <msdn-id>hh706362</msdn-id>	
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_RED_SLOPE</unmanaged>	
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_RED_SLOPE</unmanaged-short>	
        RedSlope = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LINEARTRANSFER_PROP_RED_DISABLE']/*"/>	
        /// <msdn-id>hh706362</msdn-id>	
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_RED_DISABLE</unmanaged>	
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_RED_DISABLE</unmanaged-short>	
        RedDisable = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LINEARTRANSFER_PROP_GREEN_Y_INTERCEPT']/*"/>	
        /// <msdn-id>hh706362</msdn-id>	
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_GREEN_Y_INTERCEPT</unmanaged>	
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_GREEN_Y_INTERCEPT</unmanaged-short>	
        GreenYIntercept = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LINEARTRANSFER_PROP_GREEN_SLOPE']/*"/>	
        /// <msdn-id>hh706362</msdn-id>	
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_GREEN_SLOPE</unmanaged>	
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_GREEN_SLOPE</unmanaged-short>	
        GreenSlope = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LINEARTRANSFER_PROP_GREEN_DISABLE']/*"/>	
        /// <msdn-id>hh706362</msdn-id>	
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_GREEN_DISABLE</unmanaged>	
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_GREEN_DISABLE</unmanaged-short>	
        GreenDisable = unchecked((int)5),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LINEARTRANSFER_PROP_BLUE_Y_INTERCEPT']/*"/>	
        /// <msdn-id>hh706362</msdn-id>	
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_BLUE_Y_INTERCEPT</unmanaged>	
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_BLUE_Y_INTERCEPT</unmanaged-short>	
        BlueYIntercept = unchecked((int)6),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LINEARTRANSFER_PROP_BLUE_SLOPE']/*"/>	
        /// <msdn-id>hh706362</msdn-id>	
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_BLUE_SLOPE</unmanaged>	
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_BLUE_SLOPE</unmanaged-short>	
        BlueSlope = unchecked((int)7),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LINEARTRANSFER_PROP_BLUE_DISABLE']/*"/>	
        /// <msdn-id>hh706362</msdn-id>	
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_BLUE_DISABLE</unmanaged>	
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_BLUE_DISABLE</unmanaged-short>	
        BlueDisable = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LINEARTRANSFER_PROP_ALPHA_Y_INTERCEPT']/*"/>	
        /// <msdn-id>hh706362</msdn-id>	
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_ALPHA_Y_INTERCEPT</unmanaged>	
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_ALPHA_Y_INTERCEPT</unmanaged-short>	
        AlphaYIntercept = unchecked((int)9),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LINEARTRANSFER_PROP_ALPHA_SLOPE']/*"/>	
        /// <msdn-id>hh706362</msdn-id>	
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_ALPHA_SLOPE</unmanaged>	
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_ALPHA_SLOPE</unmanaged-short>	
        AlphaSlope = unchecked((int)10),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LINEARTRANSFER_PROP_ALPHA_DISABLE']/*"/>	
        /// <msdn-id>hh706362</msdn-id>	
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_ALPHA_DISABLE</unmanaged>	
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_ALPHA_DISABLE</unmanaged-short>	
        AlphaDisable = unchecked((int)11),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LINEARTRANSFER_PROP_CLAMP_OUTPUT']/*"/>	
        /// <msdn-id>hh706362</msdn-id>	
        /// <unmanaged>D2D1_LINEARTRANSFER_PROP_CLAMP_OUTPUT</unmanaged>	
        /// <unmanaged-short>D2D1_LINEARTRANSFER_PROP_CLAMP_OUTPUT</unmanaged-short>	
        ClampOutput = unchecked((int)12),			
    }
    
    /// <summary>	
    /// <p>Describes the shape that joins two lines or segments.  </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> A miter limit affects how sharp miter joins are allowed to be. If the line join style is <strong><see cref="SharpDX.Direct2D1.LineJoin.MiterOrBevel"/></strong>, then the join will be mitered with regular angular vertices if it doesn't extend beyond the miter limit; otherwise, the line join will be beveled.</p><p>The following illustration shows  different line join settings for the same stroked path geometry.  For more information, see Stroke Style Example.</p><p></p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LINE_JOIN']/*"/>	
    /// <msdn-id>dd368130</msdn-id>	
    /// <unmanaged>D2D1_LINE_JOIN</unmanaged>	
    /// <unmanaged-short>D2D1_LINE_JOIN</unmanaged-short>	
    public enum LineJoin : int {	
        
        /// <summary>	
        /// <dd> <p>Regular angular vertices. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LINE_JOIN_MITER']/*"/>	
        /// <msdn-id>dd368130</msdn-id>	
        /// <unmanaged>D2D1_LINE_JOIN_MITER</unmanaged>	
        /// <unmanaged-short>D2D1_LINE_JOIN_MITER</unmanaged-short>	
        Miter = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Beveled vertices.   </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LINE_JOIN_BEVEL']/*"/>	
        /// <msdn-id>dd368130</msdn-id>	
        /// <unmanaged>D2D1_LINE_JOIN_BEVEL</unmanaged>	
        /// <unmanaged-short>D2D1_LINE_JOIN_BEVEL</unmanaged-short>	
        Bevel = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Rounded vertices. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LINE_JOIN_ROUND']/*"/>	
        /// <msdn-id>dd368130</msdn-id>	
        /// <unmanaged>D2D1_LINE_JOIN_ROUND</unmanaged>	
        /// <unmanaged-short>D2D1_LINE_JOIN_ROUND</unmanaged-short>	
        Round = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Regular angular vertices unless the join would extend beyond the miter limit; otherwise, beveled vertices.  </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LINE_JOIN_MITER_OR_BEVEL']/*"/>	
        /// <msdn-id>dd368130</msdn-id>	
        /// <unmanaged>D2D1_LINE_JOIN_MITER_OR_BEVEL</unmanaged>	
        /// <unmanaged-short>D2D1_LINE_JOIN_MITER_OR_BEVEL</unmanaged-short>	
        MiterOrBevel = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>Identifiers for the properties of the 3D Lookup Table effect.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LOOKUPTABLE3D_PROP']/*"/>	
    /// <msdn-id>dn890738</msdn-id>	
    /// <unmanaged>D2D1_LOOKUPTABLE3D_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_LOOKUPTABLE3D_PROP</unmanaged-short>	
    public enum LookupTable3DProperty : int {	
        
        /// <summary>	
        /// <dd> <p>The <see cref="SharpDX.Direct2D1.LookupTable3DProperty.Lut"/> property is a reference to an <strong><see cref="SharpDX.Direct2D1.LookupTable3D"/></strong> object.  The default value is null.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LOOKUPTABLE3D_PROP_LUT']/*"/>	
        /// <msdn-id>dn890738</msdn-id>	
        /// <unmanaged>D2D1_LOOKUPTABLE3D_PROP_LUT</unmanaged>	
        /// <unmanaged-short>D2D1_LOOKUPTABLE3D_PROP_LUT</unmanaged-short>	
        Lut = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The <see cref="SharpDX.Direct2D1.LookupTable3DProperty.AlphaMode"/> property is a <strong><see cref="SharpDX.Direct2D1.AlphaMode"/></strong> value indicating the alpha mode of the input file. See the About Alpha Modes section of the Supported Pixel Formats and Alpha Modes topic for additional information.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_LOOKUPTABLE3D_PROP_ALPHA_MODE']/*"/>	
        /// <msdn-id>dn890738</msdn-id>	
        /// <unmanaged>D2D1_LOOKUPTABLE3D_PROP_ALPHA_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_LOOKUPTABLE3D_PROP_ALPHA_MODE</unmanaged-short>	
        AlphaMode = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Specifies how the memory to be mapped from the corresponding <strong><see cref="SharpDX.Direct2D1.Bitmap1"/></strong> should be treated.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <strong><see cref="SharpDX.Direct2D1.MapOptions.Read"/></strong> option can be used only if the bitmap was created with the <strong><see cref="SharpDX.Direct2D1.BitmapOptions.CpuRead"/></strong> flag.</p><p>These flags will be not be able to be used on bitmaps created by the <strong><see cref="SharpDX.Direct2D1.DeviceContext"/></strong>. However, the <see cref="SharpDX.Direct2D1.SourceTransform"/> will receive bitmaps for which these flags are valid.</p><p><strong><see cref="SharpDX.Direct2D1.MapOptions.Discard"/></strong> can only be used with <strong><see cref="SharpDX.Direct2D1.MapOptions.Write"/></strong>.  Both of these options are only available through the effect author API, not through the Direct2D rendering API.	
    /// </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_MAP_OPTIONS']/*"/>	
    /// <msdn-id>hh447006</msdn-id>	
    /// <unmanaged>D2D1_MAP_OPTIONS</unmanaged>	
    /// <unmanaged-short>D2D1_MAP_OPTIONS</unmanaged-short>	
    [Flags]
    public enum MapOptions : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_MAP_OPTIONS_NONE']/*"/>	
        /// <msdn-id>hh447006</msdn-id>	
        /// <unmanaged>D2D1_MAP_OPTIONS_NONE</unmanaged>	
        /// <unmanaged-short>D2D1_MAP_OPTIONS_NONE</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_MAP_OPTIONS_READ']/*"/>	
        /// <msdn-id>hh447006</msdn-id>	
        /// <unmanaged>D2D1_MAP_OPTIONS_READ</unmanaged>	
        /// <unmanaged-short>D2D1_MAP_OPTIONS_READ</unmanaged-short>	
        Read = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_MAP_OPTIONS_WRITE']/*"/>	
        /// <msdn-id>hh447006</msdn-id>	
        /// <unmanaged>D2D1_MAP_OPTIONS_WRITE</unmanaged>	
        /// <unmanaged-short>D2D1_MAP_OPTIONS_WRITE</unmanaged-short>	
        Write = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_MAP_OPTIONS_DISCARD']/*"/>	
        /// <msdn-id>hh447006</msdn-id>	
        /// <unmanaged>D2D1_MAP_OPTIONS_DISCARD</unmanaged>	
        /// <unmanaged-short>D2D1_MAP_OPTIONS_DISCARD</unmanaged-short>	
        Discard = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p> Indicates the measuring method used for text layout.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DWRITE_MEASURING_MODE']/*"/>	
    /// <msdn-id>dd368133</msdn-id>	
    /// <unmanaged>DWRITE_MEASURING_MODE</unmanaged>	
    /// <unmanaged-short>DWRITE_MEASURING_MODE</unmanaged-short>	
    public enum MeasuringMode : int {	
        
        /// <summary>	
        /// <dd> <p> Specifies that text is measured using glyph ideal metrics whose values are independent to the current display resolution.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DWRITE_MEASURING_MODE_NATURAL']/*"/>	
        /// <msdn-id>dd368133</msdn-id>	
        /// <unmanaged>DWRITE_MEASURING_MODE_NATURAL</unmanaged>	
        /// <unmanaged-short>DWRITE_MEASURING_MODE_NATURAL</unmanaged-short>	
        Natural = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p> Specifies that text is measured using glyph display-compatible metrics whose values tuned for the current display resolution.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DWRITE_MEASURING_MODE_GDI_CLASSIC']/*"/>	
        /// <msdn-id>dd368133</msdn-id>	
        /// <unmanaged>DWRITE_MEASURING_MODE_GDI_CLASSIC</unmanaged>	
        /// <unmanaged-short>DWRITE_MEASURING_MODE_GDI_CLASSIC</unmanaged-short>	
        GdiClassic = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p> Specifies that text is measured using the same glyph display metrics as text measured by GDI using a font created with CLEARTYPE_NATURAL_QUALITY.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DWRITE_MEASURING_MODE_GDI_NATURAL']/*"/>	
        /// <msdn-id>dd368133</msdn-id>	
        /// <unmanaged>DWRITE_MEASURING_MODE_GDI_NATURAL</unmanaged>	
        /// <unmanaged-short>DWRITE_MEASURING_MODE_GDI_NATURAL</unmanaged-short>	
        GdiNatural = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Use the morphology effect to thin or thicken edge boundaries in an image. This effect creates a kernel that is 2 times the Width and Height values you specify. This effect centers the kernel on the pixel it is calculating and returns the maximum value in the kernel (if dilating) or minimum value in the kernel (if eroding).</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.Morphology"/>.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_MORPHOLOGY_MODE']/*"/>	
    /// <msdn-id>hh706364</msdn-id>	
    /// <unmanaged>D2D1_MORPHOLOGY_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_MORPHOLOGY_MODE</unmanaged-short>	
    public enum MorphologyMode : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_MORPHOLOGY_MODE_ERODE']/*"/>	
        /// <msdn-id>hh706364</msdn-id>	
        /// <unmanaged>D2D1_MORPHOLOGY_MODE_ERODE</unmanaged>	
        /// <unmanaged-short>D2D1_MORPHOLOGY_MODE_ERODE</unmanaged-short>	
        Erode = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_MORPHOLOGY_MODE_DILATE']/*"/>	
        /// <msdn-id>hh706364</msdn-id>	
        /// <unmanaged>D2D1_MORPHOLOGY_MODE_DILATE</unmanaged>	
        /// <unmanaged-short>D2D1_MORPHOLOGY_MODE_DILATE</unmanaged-short>	
        Dilate = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Use the morphology effect to thin or thicken edge boundaries in an image. This effect creates a kernel that is 2 times the Width and Height values you specify. This effect centers the kernel on the pixel it is calculating and returns the maximum value in the kernel (if dilating) or minimum value in the kernel (if eroding).</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.Morphology"/>.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_MORPHOLOGY_PROP']/*"/>	
    /// <msdn-id>hh706364</msdn-id>	
    /// <unmanaged>D2D1_MORPHOLOGY_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_MORPHOLOGY_PROP</unmanaged-short>	
    public enum MorphologyProperties : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_MORPHOLOGY_PROP_MODE']/*"/>	
        /// <msdn-id>hh706364</msdn-id>	
        /// <unmanaged>D2D1_MORPHOLOGY_PROP_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_MORPHOLOGY_PROP_MODE</unmanaged-short>	
        Mode = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_MORPHOLOGY_PROP_WIDTH']/*"/>	
        /// <msdn-id>hh706364</msdn-id>	
        /// <unmanaged>D2D1_MORPHOLOGY_PROP_WIDTH</unmanaged>	
        /// <unmanaged-short>D2D1_MORPHOLOGY_PROP_WIDTH</unmanaged-short>	
        Width = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_MORPHOLOGY_PROP_HEIGHT']/*"/>	
        /// <msdn-id>hh706364</msdn-id>	
        /// <unmanaged>D2D1_MORPHOLOGY_PROP_HEIGHT</unmanaged>	
        /// <unmanaged-short>D2D1_MORPHOLOGY_PROP_HEIGHT</unmanaged-short>	
        Height = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Describes whether an opacity mask contains graphics or text. Direct2D uses this information to determine which gamma space to use when blending the opacity mask.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_OPACITY_MASK_CONTENT']/*"/>	
    /// <msdn-id>dd756629</msdn-id>	
    /// <unmanaged>D2D1_OPACITY_MASK_CONTENT</unmanaged>	
    /// <unmanaged-short>D2D1_OPACITY_MASK_CONTENT</unmanaged-short>	
    public enum OpacityMaskContent : int {	
        
        /// <summary>	
        /// <dd> <p>The opacity mask contains graphics. The opacity mask is blended in the gamma 2.2 color space.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_OPACITY_MASK_CONTENT_GRAPHICS']/*"/>	
        /// <msdn-id>dd756629</msdn-id>	
        /// <unmanaged>D2D1_OPACITY_MASK_CONTENT_GRAPHICS</unmanaged>	
        /// <unmanaged-short>D2D1_OPACITY_MASK_CONTENT_GRAPHICS</unmanaged-short>	
        Graphics = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The opacity mask contains non-GDI text. The gamma space used for blending is obtained from the render target's text rendering parameters. (<strong><see cref="SharpDX.Direct2D1.RenderTarget.SetTextRenderingParams"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_OPACITY_MASK_CONTENT_TEXT_NATURAL']/*"/>	
        /// <msdn-id>dd756629</msdn-id>	
        /// <unmanaged>D2D1_OPACITY_MASK_CONTENT_TEXT_NATURAL</unmanaged>	
        /// <unmanaged-short>D2D1_OPACITY_MASK_CONTENT_TEXT_NATURAL</unmanaged-short>	
        TextNatural = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The opacity mask contains text rendered using the GDI-compatible rendering mode. The opacity mask is blended using the gamma for GDI rendering.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_OPACITY_MASK_CONTENT_TEXT_GDI_COMPATIBLE']/*"/>	
        /// <msdn-id>dd756629</msdn-id>	
        /// <unmanaged>D2D1_OPACITY_MASK_CONTENT_TEXT_GDI_COMPATIBLE</unmanaged>	
        /// <unmanaged-short>D2D1_OPACITY_MASK_CONTENT_TEXT_GDI_COMPATIBLE</unmanaged-short>	
        TextGdiCompatible = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>You can use this effect to mark an area of an input image as opaque, so  internal rendering optimizations to the graph are possible.</p><p><strong>Note</strong>??This effect doesn't modify the image itself to be opaque. It modifies data associated with the image so the renderer  assumes the specified region is opaque.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.OpacityMetadata"/>.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_OPACITYMETADATA_PROP']/*"/>	
    /// <msdn-id>jj155493</msdn-id>	
    /// <unmanaged>D2D1_OPACITYMETADATA_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_OPACITYMETADATA_PROP</unmanaged-short>	
    public enum OpacityMetadataProperties : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_OPACITYMETADATA_PROP_INPUT_OPAQUE_RECT']/*"/>	
        /// <msdn-id>jj155493</msdn-id>	
        /// <unmanaged>D2D1_OPACITYMETADATA_PROP_INPUT_OPAQUE_RECT</unmanaged>	
        /// <unmanaged-short>D2D1_OPACITYMETADATA_PROP_INPUT_OPAQUE_RECT</unmanaged-short>	
        InputOpaqueRectangle = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Specifies the flip and rotation at which an image appears.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ORIENTATION']/*"/>	
    /// <msdn-id>dn890739</msdn-id>	
    /// <unmanaged>D2D1_ORIENTATION</unmanaged>	
    /// <unmanaged-short>D2D1_ORIENTATION</unmanaged-short>	
    public enum Orientation : int {	
        
        /// <summary>	
        /// <dd> <p>The orientation is unchanged.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ORIENTATION_DEFAULT']/*"/>	
        /// <msdn-id>dn890739</msdn-id>	
        /// <unmanaged>D2D1_ORIENTATION_DEFAULT</unmanaged>	
        /// <unmanaged-short>D2D1_ORIENTATION_DEFAULT</unmanaged-short>	
        Default = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The image is flipped horizontally.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ORIENTATION_FLIP_HORIZONTAL']/*"/>	
        /// <msdn-id>dn890739</msdn-id>	
        /// <unmanaged>D2D1_ORIENTATION_FLIP_HORIZONTAL</unmanaged>	
        /// <unmanaged-short>D2D1_ORIENTATION_FLIP_HORIZONTAL</unmanaged-short>	
        FlipHorizontal = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>The image is rotated clockwise 180 degrees.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ORIENTATION_ROTATE_CLOCKWISE180']/*"/>	
        /// <msdn-id>dn890739</msdn-id>	
        /// <unmanaged>D2D1_ORIENTATION_ROTATE_CLOCKWISE180</unmanaged>	
        /// <unmanaged-short>D2D1_ORIENTATION_ROTATE_CLOCKWISE180</unmanaged-short>	
        RotateClockwise180 = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>The image is rotated clockwise 180 degrees, then flipped horizontally.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL']/*"/>	
        /// <msdn-id>dn890739</msdn-id>	
        /// <unmanaged>D2D1_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL</unmanaged>	
        /// <unmanaged-short>D2D1_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL</unmanaged-short>	
        RotateClockwise180FlipHorizontal = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>The image is rotated clockwise 90 degrees, then flipped horizontally.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL']/*"/>	
        /// <msdn-id>dn890739</msdn-id>	
        /// <unmanaged>D2D1_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL</unmanaged>	
        /// <unmanaged-short>D2D1_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL</unmanaged-short>	
        RotateClockwise90FlipHorizontal = unchecked((int)5),			
        
        /// <summary>	
        /// <dd> <p>The image is rotated clockwise 270 degrees.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ORIENTATION_ROTATE_CLOCKWISE270']/*"/>	
        /// <msdn-id>dn890739</msdn-id>	
        /// <unmanaged>D2D1_ORIENTATION_ROTATE_CLOCKWISE270</unmanaged>	
        /// <unmanaged-short>D2D1_ORIENTATION_ROTATE_CLOCKWISE270</unmanaged-short>	
        RotateClockwise270 = unchecked((int)6),			
        
        /// <summary>	
        /// <dd> <p>The image is rotated clockwise 270 degrees, then flipped horizontally.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL']/*"/>	
        /// <msdn-id>dn890739</msdn-id>	
        /// <unmanaged>D2D1_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL</unmanaged>	
        /// <unmanaged-short>D2D1_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL</unmanaged-short>	
        RotateClockwise270FlipHorizontal = unchecked((int)7),			
        
        /// <summary>	
        /// <dd> <p>The image is rotated clockwise 90 degrees.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_ORIENTATION_ROTATE_CLOCKWISE90']/*"/>	
        /// <msdn-id>dn890739</msdn-id>	
        /// <unmanaged>D2D1_ORIENTATION_ROTATE_CLOCKWISE90</unmanaged>	
        /// <unmanaged-short>D2D1_ORIENTATION_ROTATE_CLOCKWISE90</unmanaged-short>	
        RotateClockwise90 = unchecked((int)8),			
    }
    
    /// <summary>	
    /// <p>Specifies how to render gradient mesh edges.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PATCH_EDGE_MODE']/*"/>	
    /// <msdn-id>dn986881</msdn-id>	
    /// <unmanaged>D2D1_PATCH_EDGE_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_PATCH_EDGE_MODE</unmanaged-short>	
    public enum PatchEdgeMode : int {	
        
        /// <summary>	
        /// <dd> <p>Render this patch edge aliased. Use this value for the internal edges of your gradient mesh.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PATCH_EDGE_MODE_ALIASED']/*"/>	
        /// <msdn-id>dn986881</msdn-id>	
        /// <unmanaged>D2D1_PATCH_EDGE_MODE_ALIASED</unmanaged>	
        /// <unmanaged-short>D2D1_PATCH_EDGE_MODE_ALIASED</unmanaged-short>	
        Aliased = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Render this patch edge antialiased. Use this value for the external (boundary) edges of your mesh.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PATCH_EDGE_MODE_ANTIALIASED']/*"/>	
        /// <msdn-id>dn986881</msdn-id>	
        /// <unmanaged>D2D1_PATCH_EDGE_MODE_ANTIALIASED</unmanaged>	
        /// <unmanaged-short>D2D1_PATCH_EDGE_MODE_ANTIALIASED</unmanaged-short>	
        Antialiased = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Render this patch edge aliased and also slightly inflated. Use this for the internal edges of your gradient mesh when there could be t-junctions among patches.  Inflating the internal edges mitigates seams that can appear along those junctions.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PATCH_EDGE_MODE_ALIASED_INFLATED']/*"/>	
        /// <msdn-id>dn986881</msdn-id>	
        /// <unmanaged>D2D1_PATCH_EDGE_MODE_ALIASED_INFLATED</unmanaged>	
        /// <unmanaged-short>D2D1_PATCH_EDGE_MODE_ALIASED_INFLATED</unmanaged-short>	
        AliasedInflated = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Indicates whether a segment should be stroked and whether the join between this segment and the previous one should be smooth. This enumeration allows a bitwise combination of its member values. </p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PATH_SEGMENT']/*"/>	
    /// <msdn-id>dd368136</msdn-id>	
    /// <unmanaged>D2D1_PATH_SEGMENT</unmanaged>	
    /// <unmanaged-short>D2D1_PATH_SEGMENT</unmanaged-short>	
    public enum PathSegment : int {	
        
        /// <summary>	
        /// <dd> <p>The segment is joined  as specified by the <strong><see cref="SharpDX.Direct2D1.StrokeStyle"/></strong> interface, and it is stroked. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PATH_SEGMENT_NONE']/*"/>	
        /// <msdn-id>dd368136</msdn-id>	
        /// <unmanaged>D2D1_PATH_SEGMENT_NONE</unmanaged>	
        /// <unmanaged-short>D2D1_PATH_SEGMENT_NONE</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The segment is not stroked.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PATH_SEGMENT_FORCE_UNSTROKED']/*"/>	
        /// <msdn-id>dd368136</msdn-id>	
        /// <unmanaged>D2D1_PATH_SEGMENT_FORCE_UNSTROKED</unmanaged>	
        /// <unmanaged-short>D2D1_PATH_SEGMENT_FORCE_UNSTROKED</unmanaged-short>	
        ForceUnstroked = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The segment is always joined with the one preceding it using a round line join, regardless of which <strong><see cref="SharpDX.Direct2D1.LineJoin"/></strong>enumeration is specified by the <strong><see cref="SharpDX.Direct2D1.StrokeStyle"/></strong> interface. If this segment is the first segment and the figure is closed, a round line join is used to connect the closing segment with the first segment. If the figure is not closed, this setting has no effect on the first segment of the figure. If <strong><see cref="SharpDX.Direct2D1.SimplifiedGeometrySink.SetSegmentFlags"/></strong> is called just before <strong><see cref="SharpDX.Direct2D1.SimplifiedGeometrySink.EndFigure"/></strong>, the join between the closing segment and the last explicitly specified segment is affected.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PATH_SEGMENT_FORCE_ROUND_LINE_JOIN']/*"/>	
        /// <msdn-id>dd368136</msdn-id>	
        /// <unmanaged>D2D1_PATH_SEGMENT_FORCE_ROUND_LINE_JOIN</unmanaged>	
        /// <unmanaged-short>D2D1_PATH_SEGMENT_FORCE_ROUND_LINE_JOIN</unmanaged-short>	
        ForceRoundLineJoin = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Use the 3D perspective transform effect to rotate the image in 3 dimensions as if viewed from a distance.</p><p>The 3D perspective transform is more convenient than the 3D transform effect, but only exposes a subset of the functionality. You can compute a full 3D transformation matrix and apply  a more arbitrary transform matrix to an image using the 3D transform effect.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.PerspectiveTransform3D"/>.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Interpolation</li> <li>Border</li> <li>Output</li> <li>Sample</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE']/*"/>	
    /// <msdn-id>Hh706310</msdn-id>	
    /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE</unmanaged-short>	
    public enum PerspectiveTransform3DInteroplationMode : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR']/*"/>	
        /// <msdn-id>Hh706310</msdn-id>	
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>	
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged-short>	
        NearestNeighbor = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_LINEAR']/*"/>	
        /// <msdn-id>Hh706310</msdn-id>	
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_LINEAR</unmanaged-short>	
        Linear = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_CUBIC']/*"/>	
        /// <msdn-id>Hh706310</msdn-id>	
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_CUBIC</unmanaged>	
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_CUBIC</unmanaged-short>	
        Cubic = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR']/*"/>	
        /// <msdn-id>Hh706310</msdn-id>	
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>	
        MultiSampleLinear = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_ANISOTROPIC']/*"/>	
        /// <msdn-id>Hh706310</msdn-id>	
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_ANISOTROPIC</unmanaged>	
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_ANISOTROPIC</unmanaged-short>	
        Anisotropic = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p>Use the 3D perspective transform effect to rotate the image in 3 dimensions as if viewed from a distance.</p><p>The 3D perspective transform is more convenient than the 3D transform effect, but only exposes a subset of the functionality. You can compute a full 3D transformation matrix and apply  a more arbitrary transform matrix to an image using the 3D transform effect.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.PerspectiveTransform3D"/>.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Interpolation</li> <li>Border</li> <li>Output</li> <li>Sample</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_3DPERSPECTIVETRANSFORM_PROP']/*"/>	
    /// <msdn-id>Hh706310</msdn-id>	
    /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_PROP</unmanaged-short>	
    public enum PerspectiveTransform3DProperties : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_3DPERSPECTIVETRANSFORM_PROP_INTERPOLATION_MODE']/*"/>	
        /// <msdn-id>Hh706310</msdn-id>	
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP_INTERPOLATION_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_PROP_INTERPOLATION_MODE</unmanaged-short>	
        InterpolationMode = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_3DPERSPECTIVETRANSFORM_PROP_BORDER_MODE']/*"/>	
        /// <msdn-id>Hh706310</msdn-id>	
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP_BORDER_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_PROP_BORDER_MODE</unmanaged-short>	
        BorderMode = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_3DPERSPECTIVETRANSFORM_PROP_DEPTH']/*"/>	
        /// <msdn-id>Hh706310</msdn-id>	
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP_DEPTH</unmanaged>	
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_PROP_DEPTH</unmanaged-short>	
        Depth = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_3DPERSPECTIVETRANSFORM_PROP_PERSPECTIVE_ORIGIN']/*"/>	
        /// <msdn-id>Hh706310</msdn-id>	
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP_PERSPECTIVE_ORIGIN</unmanaged>	
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_PROP_PERSPECTIVE_ORIGIN</unmanaged-short>	
        PerspectiveOrigin = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_3DPERSPECTIVETRANSFORM_PROP_LOCAL_OFFSET']/*"/>	
        /// <msdn-id>Hh706310</msdn-id>	
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP_LOCAL_OFFSET</unmanaged>	
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_PROP_LOCAL_OFFSET</unmanaged-short>	
        LocalOffset = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_3DPERSPECTIVETRANSFORM_PROP_GLOBAL_OFFSET']/*"/>	
        /// <msdn-id>Hh706310</msdn-id>	
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP_GLOBAL_OFFSET</unmanaged>	
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_PROP_GLOBAL_OFFSET</unmanaged-short>	
        GlobalOffset = unchecked((int)5),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION_ORIGIN']/*"/>	
        /// <msdn-id>Hh706310</msdn-id>	
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION_ORIGIN</unmanaged>	
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION_ORIGIN</unmanaged-short>	
        RotationOrigin = unchecked((int)6),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION']/*"/>	
        /// <msdn-id>Hh706310</msdn-id>	
        /// <unmanaged>D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION</unmanaged>	
        /// <unmanaged-short>D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION</unmanaged-short>	
        Rotation = unchecked((int)7),			
    }
    
    /// <summary>	
    /// <p>Indicates how pixel shader sampling will be restricted. This indicates whether the vertex buffer is large and tends to change infrequently or smaller and changes frequently (typically frame over frame). </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> If the shader specifies <strong><see cref="SharpDX.Direct2D1.PixelOptions.None"/></strong>, it must still correctly implement the region of interest calculations in <strong><see cref="SharpDX.Direct2D1.Transform.MapOutputRectToInputRects"/></strong> and <strong><see cref="SharpDX.Direct2D1.Transform.MapInputRectsToOutputRect"/></strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PIXEL_OPTIONS']/*"/>	
    /// <msdn-id>hh404316</msdn-id>	
    /// <unmanaged>D2D1_PIXEL_OPTIONS</unmanaged>	
    /// <unmanaged-short>D2D1_PIXEL_OPTIONS</unmanaged-short>	
    [Flags]
    public enum PixelOptions : int {	
        
        /// <summary>	
        /// <dd> <p>The pixel shader is not restricted in its sampling.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PIXEL_OPTIONS_NONE']/*"/>	
        /// <msdn-id>hh404316</msdn-id>	
        /// <unmanaged>D2D1_PIXEL_OPTIONS_NONE</unmanaged>	
        /// <unmanaged-short>D2D1_PIXEL_OPTIONS_NONE</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p> The pixel shader samples inputs only at the same scene coordinate as the output pixel and returns transparent black whenever the input pixels are also transparent black.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PIXEL_OPTIONS_TRIVIAL_SAMPLING']/*"/>	
        /// <msdn-id>hh404316</msdn-id>	
        /// <unmanaged>D2D1_PIXEL_OPTIONS_TRIVIAL_SAMPLING</unmanaged>	
        /// <unmanaged-short>D2D1_PIXEL_OPTIONS_TRIVIAL_SAMPLING</unmanaged-short>	
        TrivialSampling = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Use the point-diffuse lighting effect to create an image that appears to be a reflective surface with light reflecting in all directions. This effect uses the alpha channel as a height map and lights the image with a point light source.</p><p>The color of the output bitmap is a result of light color, light position,  and the surface geometry.  The alpha channel output for each pixel with diffuse lighting is always 1.0.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.PointDiffuse"/>. To use this effect, add dxguid.lib to the linker dependencies.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Scale</li> <li>Sample</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINTDIFFUSE_PROP']/*"/>	
    /// <msdn-id>hh706367</msdn-id>	
    /// <unmanaged>D2D1_POINTDIFFUSE_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_POINTDIFFUSE_PROP</unmanaged-short>	
    public enum PointDiffuseProperties : int {	
        
        /// <summary>	
        /// <dd>Lr, Lg, Lb = the light color in RGB components.</dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINTDIFFUSE_PROP_LIGHT_POSITION']/*"/>	
        /// <msdn-id>hh706367</msdn-id>	
        /// <unmanaged>D2D1_POINTDIFFUSE_PROP_LIGHT_POSITION</unmanaged>	
        /// <unmanaged-short>D2D1_POINTDIFFUSE_PROP_LIGHT_POSITION</unmanaged-short>	
        LightPosition = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINTDIFFUSE_PROP_DIFFUSE_CONSTANT']/*"/>	
        /// <msdn-id>hh706367</msdn-id>	
        /// <unmanaged>D2D1_POINTDIFFUSE_PROP_DIFFUSE_CONSTANT</unmanaged>	
        /// <unmanaged-short>D2D1_POINTDIFFUSE_PROP_DIFFUSE_CONSTANT</unmanaged-short>	
        DiffuseConstant = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINTDIFFUSE_PROP_SURFACE_SCALE']/*"/>	
        /// <msdn-id>hh706367</msdn-id>	
        /// <unmanaged>D2D1_POINTDIFFUSE_PROP_SURFACE_SCALE</unmanaged>	
        /// <unmanaged-short>D2D1_POINTDIFFUSE_PROP_SURFACE_SCALE</unmanaged-short>	
        SurfaceScale = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINTDIFFUSE_PROP_COLOR']/*"/>	
        /// <msdn-id>hh706367</msdn-id>	
        /// <unmanaged>D2D1_POINTDIFFUSE_PROP_COLOR</unmanaged>	
        /// <unmanaged-short>D2D1_POINTDIFFUSE_PROP_COLOR</unmanaged-short>	
        Color = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINTDIFFUSE_PROP_KERNEL_UNIT_LENGTH']/*"/>	
        /// <msdn-id>hh706367</msdn-id>	
        /// <unmanaged>D2D1_POINTDIFFUSE_PROP_KERNEL_UNIT_LENGTH</unmanaged>	
        /// <unmanaged-short>D2D1_POINTDIFFUSE_PROP_KERNEL_UNIT_LENGTH</unmanaged-short>	
        KernelUnitLength = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINTDIFFUSE_PROP_SCALE_MODE']/*"/>	
        /// <msdn-id>hh706367</msdn-id>	
        /// <unmanaged>D2D1_POINTDIFFUSE_PROP_SCALE_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_POINTDIFFUSE_PROP_SCALE_MODE</unmanaged-short>	
        ScaleMode = unchecked((int)5),			
    }
    
    /// <summary>	
    /// <p>Use the point-diffuse lighting effect to create an image that appears to be a reflective surface with light reflecting in all directions. This effect uses the alpha channel as a height map and lights the image with a point light source.</p><p>The color of the output bitmap is a result of light color, light position,  and the surface geometry.  The alpha channel output for each pixel with diffuse lighting is always 1.0.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.PointDiffuse"/>. To use this effect, add dxguid.lib to the linker dependencies.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Scale</li> <li>Sample</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINTDIFFUSE_SCALE_MODE']/*"/>	
    /// <msdn-id>hh706367</msdn-id>	
    /// <unmanaged>D2D1_POINTDIFFUSE_SCALE_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_POINTDIFFUSE_SCALE_MODE</unmanaged-short>	
    public enum PointDiffuseScaleMode : int {	
        
        /// <summary>	
        /// <dd>Lr, Lg, Lb = the light color in RGB components.</dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR']/*"/>	
        /// <msdn-id>hh706367</msdn-id>	
        /// <unmanaged>D2D1_POINTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged>	
        /// <unmanaged-short>D2D1_POINTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged-short>	
        NearestNeighbor = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINTDIFFUSE_SCALE_MODE_LINEAR']/*"/>	
        /// <msdn-id>hh706367</msdn-id>	
        /// <unmanaged>D2D1_POINTDIFFUSE_SCALE_MODE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_POINTDIFFUSE_SCALE_MODE_LINEAR</unmanaged-short>	
        Linear = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINTDIFFUSE_SCALE_MODE_CUBIC']/*"/>	
        /// <msdn-id>hh706367</msdn-id>	
        /// <unmanaged>D2D1_POINTDIFFUSE_SCALE_MODE_CUBIC</unmanaged>	
        /// <unmanaged-short>D2D1_POINTDIFFUSE_SCALE_MODE_CUBIC</unmanaged-short>	
        Cubic = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR']/*"/>	
        /// <msdn-id>hh706367</msdn-id>	
        /// <unmanaged>D2D1_POINTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_POINTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>	
        MultiSampleLinear = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINTDIFFUSE_SCALE_MODE_ANISOTROPIC']/*"/>	
        /// <msdn-id>hh706367</msdn-id>	
        /// <unmanaged>D2D1_POINTDIFFUSE_SCALE_MODE_ANISOTROPIC</unmanaged>	
        /// <unmanaged-short>D2D1_POINTDIFFUSE_SCALE_MODE_ANISOTROPIC</unmanaged-short>	
        Anisotropic = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC']/*"/>	
        /// <msdn-id>hh706367</msdn-id>	
        /// <unmanaged>D2D1_POINTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged>	
        /// <unmanaged-short>D2D1_POINTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>	
        HighQualityCubic = unchecked((int)5),			
    }
    
    /// <summary>	
    /// <p>Use the point-specular lighting effect to create an image that appears to be a reflective surface.  The effect uses the alpha channel of the image as a height map and a point light source that you position, and calculates the reflection and light according to the specular portion of the Phong lighting model. </p><p>The color of the output bitmap is a result of light color, light position,  and the surface geometry.  The alpha channel output for each pixel with specular lighting is the maximum of the red, green, and blue channel outputs for that pixel.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.PointSpecular"/>.</p><p> </p><ul> <li>Example</li> <li>Point</li> <li>Height</li> <li>Specular</li> <li>Effect</li> <li>Scales</li> <li>Sample</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINTSPECULAR_PROP']/*"/>	
    /// <msdn-id>hh706368</msdn-id>	
    /// <unmanaged>D2D1_POINTSPECULAR_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_POINTSPECULAR_PROP</unmanaged-short>	
    public enum PointSpecularProperties : int {	
        
        /// <summary>	
        /// <dd>Lr, Lg, Lb = the light color in RGB components.</dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINTSPECULAR_PROP_LIGHT_POSITION']/*"/>	
        /// <msdn-id>hh706368</msdn-id>	
        /// <unmanaged>D2D1_POINTSPECULAR_PROP_LIGHT_POSITION</unmanaged>	
        /// <unmanaged-short>D2D1_POINTSPECULAR_PROP_LIGHT_POSITION</unmanaged-short>	
        LightPosition = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINTSPECULAR_PROP_SPECULAR_EXPONENT']/*"/>	
        /// <msdn-id>hh706368</msdn-id>	
        /// <unmanaged>D2D1_POINTSPECULAR_PROP_SPECULAR_EXPONENT</unmanaged>	
        /// <unmanaged-short>D2D1_POINTSPECULAR_PROP_SPECULAR_EXPONENT</unmanaged-short>	
        SpecularExponent = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINTSPECULAR_PROP_SPECULAR_CONSTANT']/*"/>	
        /// <msdn-id>hh706368</msdn-id>	
        /// <unmanaged>D2D1_POINTSPECULAR_PROP_SPECULAR_CONSTANT</unmanaged>	
        /// <unmanaged-short>D2D1_POINTSPECULAR_PROP_SPECULAR_CONSTANT</unmanaged-short>	
        SpecularConstant = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINTSPECULAR_PROP_SURFACE_SCALE']/*"/>	
        /// <msdn-id>hh706368</msdn-id>	
        /// <unmanaged>D2D1_POINTSPECULAR_PROP_SURFACE_SCALE</unmanaged>	
        /// <unmanaged-short>D2D1_POINTSPECULAR_PROP_SURFACE_SCALE</unmanaged-short>	
        SurfaceScale = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINTSPECULAR_PROP_COLOR']/*"/>	
        /// <msdn-id>hh706368</msdn-id>	
        /// <unmanaged>D2D1_POINTSPECULAR_PROP_COLOR</unmanaged>	
        /// <unmanaged-short>D2D1_POINTSPECULAR_PROP_COLOR</unmanaged-short>	
        Color = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINTSPECULAR_PROP_KERNEL_UNIT_LENGTH']/*"/>	
        /// <msdn-id>hh706368</msdn-id>	
        /// <unmanaged>D2D1_POINTSPECULAR_PROP_KERNEL_UNIT_LENGTH</unmanaged>	
        /// <unmanaged-short>D2D1_POINTSPECULAR_PROP_KERNEL_UNIT_LENGTH</unmanaged-short>	
        KernelUnitLength = unchecked((int)5),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINTSPECULAR_PROP_SCALE_MODE']/*"/>	
        /// <msdn-id>hh706368</msdn-id>	
        /// <unmanaged>D2D1_POINTSPECULAR_PROP_SCALE_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_POINTSPECULAR_PROP_SCALE_MODE</unmanaged-short>	
        ScaleMode = unchecked((int)6),			
    }
    
    /// <summary>	
    /// <p>Use the point-specular lighting effect to create an image that appears to be a reflective surface.  The effect uses the alpha channel of the image as a height map and a point light source that you position, and calculates the reflection and light according to the specular portion of the Phong lighting model. </p><p>The color of the output bitmap is a result of light color, light position,  and the surface geometry.  The alpha channel output for each pixel with specular lighting is the maximum of the red, green, and blue channel outputs for that pixel.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.PointSpecular"/>.</p><p> </p><ul> <li>Example</li> <li>Point</li> <li>Height</li> <li>Specular</li> <li>Effect</li> <li>Scales</li> <li>Sample</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINTSPECULAR_SCALE_MODE']/*"/>	
    /// <msdn-id>hh706368</msdn-id>	
    /// <unmanaged>D2D1_POINTSPECULAR_SCALE_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_POINTSPECULAR_SCALE_MODE</unmanaged-short>	
    public enum PointSpecularScaleMode : int {	
        
        /// <summary>	
        /// <dd>Lr, Lg, Lb = the light color in RGB components.</dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR']/*"/>	
        /// <msdn-id>hh706368</msdn-id>	
        /// <unmanaged>D2D1_POINTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged>	
        /// <unmanaged-short>D2D1_POINTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged-short>	
        NearestNeighbor = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINTSPECULAR_SCALE_MODE_LINEAR']/*"/>	
        /// <msdn-id>hh706368</msdn-id>	
        /// <unmanaged>D2D1_POINTSPECULAR_SCALE_MODE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_POINTSPECULAR_SCALE_MODE_LINEAR</unmanaged-short>	
        Linear = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINTSPECULAR_SCALE_MODE_CUBIC']/*"/>	
        /// <msdn-id>hh706368</msdn-id>	
        /// <unmanaged>D2D1_POINTSPECULAR_SCALE_MODE_CUBIC</unmanaged>	
        /// <unmanaged-short>D2D1_POINTSPECULAR_SCALE_MODE_CUBIC</unmanaged-short>	
        Cubic = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR']/*"/>	
        /// <msdn-id>hh706368</msdn-id>	
        /// <unmanaged>D2D1_POINTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_POINTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>	
        MultiSampleLinear = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINTSPECULAR_SCALE_MODE_ANISOTROPIC']/*"/>	
        /// <msdn-id>hh706368</msdn-id>	
        /// <unmanaged>D2D1_POINTSPECULAR_SCALE_MODE_ANISOTROPIC</unmanaged>	
        /// <unmanaged-short>D2D1_POINTSPECULAR_SCALE_MODE_ANISOTROPIC</unmanaged-short>	
        Anisotropic = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POINTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC']/*"/>	
        /// <msdn-id>hh706368</msdn-id>	
        /// <unmanaged>D2D1_POINTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged>	
        /// <unmanaged-short>D2D1_POINTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>	
        HighQualityCubic = unchecked((int)5),			
    }
    
    /// <summary>	
    /// <p>Identifiers for properties of the Posterize effect.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POSTERIZE_PROP']/*"/>	
    /// <msdn-id>dn890742</msdn-id>	
    /// <unmanaged>D2D1_POSTERIZE_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_POSTERIZE_PROP</unmanaged-short>	
    public enum PosterizeProperty : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POSTERIZE_PROP_RED_VALUE_COUNT']/*"/>	
        /// <msdn-id>dn890742</msdn-id>	
        /// <unmanaged>D2D1_POSTERIZE_PROP_RED_VALUE_COUNT</unmanaged>	
        /// <unmanaged-short>D2D1_POSTERIZE_PROP_RED_VALUE_COUNT</unmanaged-short>	
        RedValueCount = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POSTERIZE_PROP_GREEN_VALUE_COUNT']/*"/>	
        /// <msdn-id>dn890742</msdn-id>	
        /// <unmanaged>D2D1_POSTERIZE_PROP_GREEN_VALUE_COUNT</unmanaged>	
        /// <unmanaged-short>D2D1_POSTERIZE_PROP_GREEN_VALUE_COUNT</unmanaged-short>	
        GreenValueCount = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_POSTERIZE_PROP_BLUE_VALUE_COUNT']/*"/>	
        /// <msdn-id>dn890742</msdn-id>	
        /// <unmanaged>D2D1_POSTERIZE_PROP_BLUE_VALUE_COUNT</unmanaged>	
        /// <unmanaged-short>D2D1_POSTERIZE_PROP_BLUE_VALUE_COUNT</unmanaged-short>	
        BlueValueCount = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Describes how a render target behaves when it presents its content. This enumeration allows a bitwise combination of its member values.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PRESENT_OPTIONS']/*"/>	
    /// <msdn-id>dd368144</msdn-id>	
    /// <unmanaged>D2D1_PRESENT_OPTIONS</unmanaged>	
    /// <unmanaged-short>D2D1_PRESENT_OPTIONS</unmanaged-short>	
    [Flags]
    public enum PresentOptions : int {	
        
        /// <summary>	
        /// <dd> <p>The render target waits until the display refreshes to present and discards the frame upon presenting.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PRESENT_OPTIONS_NONE']/*"/>	
        /// <msdn-id>dd368144</msdn-id>	
        /// <unmanaged>D2D1_PRESENT_OPTIONS_NONE</unmanaged>	
        /// <unmanaged-short>D2D1_PRESENT_OPTIONS_NONE</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The render target does not discard the frame upon presenting.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PRESENT_OPTIONS_RETAIN_CONTENTS']/*"/>	
        /// <msdn-id>dd368144</msdn-id>	
        /// <unmanaged>D2D1_PRESENT_OPTIONS_RETAIN_CONTENTS</unmanaged>	
        /// <unmanaged-short>D2D1_PRESENT_OPTIONS_RETAIN_CONTENTS</unmanaged-short>	
        RetainContents = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The render target does not wait until the display refreshes to present.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PRESENT_OPTIONS_IMMEDIATELY']/*"/>	
        /// <msdn-id>dd368144</msdn-id>	
        /// <unmanaged>D2D1_PRESENT_OPTIONS_IMMEDIATELY</unmanaged>	
        /// <unmanaged-short>D2D1_PRESENT_OPTIONS_IMMEDIATELY</unmanaged-short>	
        Immediately = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Used to specify the geometric blend mode for all Direct2D primitives.  </p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PRIMITIVE_BLEND']/*"/>	
    /// <msdn-id>hh447008</msdn-id>	
    /// <unmanaged>D2D1_PRIMITIVE_BLEND</unmanaged>	
    /// <unmanaged-short>D2D1_PRIMITIVE_BLEND</unmanaged-short>	
    public enum PrimitiveBlend : int {	
        
        /// <summary>	
        /// <dd> <p>The standard source-over-destination blend mode.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PRIMITIVE_BLEND_SOURCE_OVER']/*"/>	
        /// <msdn-id>hh447008</msdn-id>	
        /// <unmanaged>D2D1_PRIMITIVE_BLEND_SOURCE_OVER</unmanaged>	
        /// <unmanaged-short>D2D1_PRIMITIVE_BLEND_SOURCE_OVER</unmanaged-short>	
        SourceOver = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The source is copied to the destination; the destination pixels are ignored.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PRIMITIVE_BLEND_COPY']/*"/>	
        /// <msdn-id>hh447008</msdn-id>	
        /// <unmanaged>D2D1_PRIMITIVE_BLEND_COPY</unmanaged>	
        /// <unmanaged-short>D2D1_PRIMITIVE_BLEND_COPY</unmanaged-short>	
        Copy = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The resulting pixel values use the minimum of the source and destination pixel values. Available in Windows?8 and later.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PRIMITIVE_BLEND_MIN']/*"/>	
        /// <msdn-id>hh447008</msdn-id>	
        /// <unmanaged>D2D1_PRIMITIVE_BLEND_MIN</unmanaged>	
        /// <unmanaged-short>D2D1_PRIMITIVE_BLEND_MIN</unmanaged-short>	
        Minimum = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>The resulting pixel values are the sum of the source and destination pixel values. Available in Windows?8 and later.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PRIMITIVE_BLEND_ADD']/*"/>	
        /// <msdn-id>hh447008</msdn-id>	
        /// <unmanaged>D2D1_PRIMITIVE_BLEND_ADD</unmanaged>	
        /// <unmanaged-short>D2D1_PRIMITIVE_BLEND_ADD</unmanaged-short>	
        Add = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>Defines when font resources should be subset during printing.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PRINT_FONT_SUBSET_MODE']/*"/>	
    /// <msdn-id>hh871442</msdn-id>	
    /// <unmanaged>D2D1_PRINT_FONT_SUBSET_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_PRINT_FONT_SUBSET_MODE</unmanaged-short>	
    public enum PrintFontSubsetMode : int {	
        
        /// <summary>	
        /// <dd> <p>Uses a heuristic strategy to decide when to subset fonts. </p> <p><strong>Note</strong>??If the print driver has requested archive-optimized content, then Direct2D will subset fonts once, for the entire document.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PRINT_FONT_SUBSET_MODE_DEFAULT']/*"/>	
        /// <msdn-id>hh871442</msdn-id>	
        /// <unmanaged>D2D1_PRINT_FONT_SUBSET_MODE_DEFAULT</unmanaged>	
        /// <unmanaged-short>D2D1_PRINT_FONT_SUBSET_MODE_DEFAULT</unmanaged-short>	
        Default = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Subsets and embeds font resources in each page, then discards that font subset after the page is printed out. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PRINT_FONT_SUBSET_MODE_EACHPAGE']/*"/>	
        /// <msdn-id>hh871442</msdn-id>	
        /// <unmanaged>D2D1_PRINT_FONT_SUBSET_MODE_EACHPAGE</unmanaged>	
        /// <unmanaged-short>D2D1_PRINT_FONT_SUBSET_MODE_EACHPAGE</unmanaged-short>	
        Eachpage = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Sends out the original font resources without subsetting along with the page that first uses the font, and re-uses the font resources for later pages without resending them.  </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PRINT_FONT_SUBSET_MODE_NONE']/*"/>	
        /// <msdn-id>hh871442</msdn-id>	
        /// <unmanaged>D2D1_PRINT_FONT_SUBSET_MODE_NONE</unmanaged>	
        /// <unmanaged-short>D2D1_PRINT_FONT_SUBSET_MODE_NONE</unmanaged-short>	
        None = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Specifies the types of properties supported by the Direct2D property interface. </p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY']/*"/>	
    /// <msdn-id>hh447012</msdn-id>	
    /// <unmanaged>D2D1_PROPERTY</unmanaged>	
    /// <unmanaged-short>D2D1_PROPERTY</unmanaged-short>	
    public enum Property : int {	
        
        /// <summary>	
        /// <dd> <p>An unknown property.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_CLSID']/*"/>	
        /// <msdn-id>hh447012</msdn-id>	
        /// <unmanaged>D2D1_PROPERTY_CLSID</unmanaged>	
        /// <unmanaged-short>D2D1_PROPERTY_CLSID</unmanaged-short>	
        Clsid = unchecked((int)-2147483648),			
        
        /// <summary>	
        /// <dd> <p>An arbitrary-length string.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_DISPLAYNAME']/*"/>	
        /// <msdn-id>hh447012</msdn-id>	
        /// <unmanaged>D2D1_PROPERTY_DISPLAYNAME</unmanaged>	
        /// <unmanaged-short>D2D1_PROPERTY_DISPLAYNAME</unmanaged-short>	
        DisplayName = unchecked((int)-2147483647),			
        
        /// <summary>	
        /// <dd> <p>A 32-bit integer value constrained to be either 0 or 1.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_AUTHOR']/*"/>	
        /// <msdn-id>hh447012</msdn-id>	
        /// <unmanaged>D2D1_PROPERTY_AUTHOR</unmanaged>	
        /// <unmanaged-short>D2D1_PROPERTY_AUTHOR</unmanaged-short>	
        Author = unchecked((int)-2147483646),			
        
        /// <summary>	
        /// <dd> <p>An unsigned 32-bit integer.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_CATEGORY']/*"/>	
        /// <msdn-id>hh447012</msdn-id>	
        /// <unmanaged>D2D1_PROPERTY_CATEGORY</unmanaged>	
        /// <unmanaged-short>D2D1_PROPERTY_CATEGORY</unmanaged-short>	
        Category = unchecked((int)-2147483645),			
        
        /// <summary>	
        /// <dd> <p>A signed 32-bit integer.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_DESCRIPTION']/*"/>	
        /// <msdn-id>hh447012</msdn-id>	
        /// <unmanaged>D2D1_PROPERTY_DESCRIPTION</unmanaged>	
        /// <unmanaged-short>D2D1_PROPERTY_DESCRIPTION</unmanaged-short>	
        Description = unchecked((int)-2147483644),			
        
        /// <summary>	
        /// <dd> <p>A 32-bit float.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_INPUTS']/*"/>	
        /// <msdn-id>hh447012</msdn-id>	
        /// <unmanaged>D2D1_PROPERTY_INPUTS</unmanaged>	
        /// <unmanaged-short>D2D1_PROPERTY_INPUTS</unmanaged-short>	
        Inputs = unchecked((int)-2147483643),			
        
        /// <summary>	
        /// <dd> <p>Two 32-bit float values.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_CACHED']/*"/>	
        /// <msdn-id>hh447012</msdn-id>	
        /// <unmanaged>D2D1_PROPERTY_CACHED</unmanaged>	
        /// <unmanaged-short>D2D1_PROPERTY_CACHED</unmanaged-short>	
        Cached = unchecked((int)-2147483642),			
        
        /// <summary>	
        /// <dd> <p> Three 32-bit float values.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_PRECISION']/*"/>	
        /// <msdn-id>hh447012</msdn-id>	
        /// <unmanaged>D2D1_PROPERTY_PRECISION</unmanaged>	
        /// <unmanaged-short>D2D1_PROPERTY_PRECISION</unmanaged-short>	
        Precision = unchecked((int)-2147483641),			
        
        /// <summary>	
        /// <dd> <p>Four 32-bit float values.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_MIN_INPUTS']/*"/>	
        /// <msdn-id>hh447012</msdn-id>	
        /// <unmanaged>D2D1_PROPERTY_MIN_INPUTS</unmanaged>	
        /// <unmanaged-short>D2D1_PROPERTY_MIN_INPUTS</unmanaged-short>	
        MinimumInputs = unchecked((int)-2147483640),			
        
        /// <summary>	
        /// <dd> <p>An arbitrary number of bytes.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_MAX_INPUTS']/*"/>	
        /// <msdn-id>hh447012</msdn-id>	
        /// <unmanaged>D2D1_PROPERTY_MAX_INPUTS</unmanaged>	
        /// <unmanaged-short>D2D1_PROPERTY_MAX_INPUTS</unmanaged-short>	
        MaximumInputs = unchecked((int)-2147483639),			
    }
    
    /// <summary>	
    /// <p>Specifies the types of properties supported by the Direct2D property interface. </p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_TYPE']/*"/>	
    /// <msdn-id>hh447012</msdn-id>	
    /// <unmanaged>D2D1_PROPERTY_TYPE</unmanaged>	
    /// <unmanaged-short>D2D1_PROPERTY_TYPE</unmanaged-short>	
    public enum PropertyType : int {	
        
        /// <summary>	
        /// <dd> <p>An unknown property.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_TYPE_UNKNOWN']/*"/>	
        /// <msdn-id>hh447012</msdn-id>	
        /// <unmanaged>D2D1_PROPERTY_TYPE_UNKNOWN</unmanaged>	
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_UNKNOWN</unmanaged-short>	
        Unknown = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>An arbitrary-length string.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_TYPE_STRING']/*"/>	
        /// <msdn-id>hh447012</msdn-id>	
        /// <unmanaged>D2D1_PROPERTY_TYPE_STRING</unmanaged>	
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_STRING</unmanaged-short>	
        String = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>A 32-bit integer value constrained to be either 0 or 1.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_TYPE_BOOL']/*"/>	
        /// <msdn-id>hh447012</msdn-id>	
        /// <unmanaged>D2D1_PROPERTY_TYPE_BOOL</unmanaged>	
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_BOOL</unmanaged-short>	
        Bool = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>An unsigned 32-bit integer.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_TYPE_UINT32']/*"/>	
        /// <msdn-id>hh447012</msdn-id>	
        /// <unmanaged>D2D1_PROPERTY_TYPE_UINT32</unmanaged>	
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_UINT32</unmanaged-short>	
        UInt32 = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>A signed 32-bit integer.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_TYPE_INT32']/*"/>	
        /// <msdn-id>hh447012</msdn-id>	
        /// <unmanaged>D2D1_PROPERTY_TYPE_INT32</unmanaged>	
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_INT32</unmanaged-short>	
        Int32 = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>A 32-bit float.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_TYPE_FLOAT']/*"/>	
        /// <msdn-id>hh447012</msdn-id>	
        /// <unmanaged>D2D1_PROPERTY_TYPE_FLOAT</unmanaged>	
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_FLOAT</unmanaged-short>	
        Float = unchecked((int)5),			
        
        /// <summary>	
        /// <dd> <p>Two 32-bit float values.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_TYPE_VECTOR2']/*"/>	
        /// <msdn-id>hh447012</msdn-id>	
        /// <unmanaged>D2D1_PROPERTY_TYPE_VECTOR2</unmanaged>	
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_VECTOR2</unmanaged-short>	
        Vector2 = unchecked((int)6),			
        
        /// <summary>	
        /// <dd> <p> Three 32-bit float values.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_TYPE_VECTOR3']/*"/>	
        /// <msdn-id>hh447012</msdn-id>	
        /// <unmanaged>D2D1_PROPERTY_TYPE_VECTOR3</unmanaged>	
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_VECTOR3</unmanaged-short>	
        Vector3 = unchecked((int)7),			
        
        /// <summary>	
        /// <dd> <p>Four 32-bit float values.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_TYPE_VECTOR4']/*"/>	
        /// <msdn-id>hh447012</msdn-id>	
        /// <unmanaged>D2D1_PROPERTY_TYPE_VECTOR4</unmanaged>	
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_VECTOR4</unmanaged-short>	
        Vector4 = unchecked((int)8),			
        
        /// <summary>	
        /// <dd> <p>An arbitrary number of bytes.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_TYPE_BLOB']/*"/>	
        /// <msdn-id>hh447012</msdn-id>	
        /// <unmanaged>D2D1_PROPERTY_TYPE_BLOB</unmanaged>	
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_BLOB</unmanaged-short>	
        Blob = unchecked((int)9),			
        
        /// <summary>	
        /// <dd> <p>A returned COM or nano-COM interface. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_TYPE_IUNKNOWN']/*"/>	
        /// <msdn-id>hh447012</msdn-id>	
        /// <unmanaged>D2D1_PROPERTY_TYPE_IUNKNOWN</unmanaged>	
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_IUNKNOWN</unmanaged-short>	
        IUnknown = unchecked((int)10),			
        
        /// <summary>	
        /// <dd> <p>An enumeration. The value should be treated as a <strong>UINT32</strong> with a defined array of fields to specify the bindings to human-readable strings.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_TYPE_ENUM']/*"/>	
        /// <msdn-id>hh447012</msdn-id>	
        /// <unmanaged>D2D1_PROPERTY_TYPE_ENUM</unmanaged>	
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_ENUM</unmanaged-short>	
        Enum = unchecked((int)11),			
        
        /// <summary>	
        /// <dd> <p>An enumeration. The value is the count of sub-properties in the array. The set of array elements will be contained in the sub-property.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_TYPE_ARRAY']/*"/>	
        /// <msdn-id>hh447012</msdn-id>	
        /// <unmanaged>D2D1_PROPERTY_TYPE_ARRAY</unmanaged>	
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_ARRAY</unmanaged-short>	
        Array = unchecked((int)12),			
        
        /// <summary>	
        /// <dd> <p>A CLSID.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_TYPE_CLSID']/*"/>	
        /// <msdn-id>hh447012</msdn-id>	
        /// <unmanaged>D2D1_PROPERTY_TYPE_CLSID</unmanaged>	
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_CLSID</unmanaged-short>	
        Clsid = unchecked((int)13),			
        
        /// <summary>	
        /// <dd> <p>A 3x2 matrix of  float values.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_TYPE_MATRIX_3X2']/*"/>	
        /// <msdn-id>hh447012</msdn-id>	
        /// <unmanaged>D2D1_PROPERTY_TYPE_MATRIX_3X2</unmanaged>	
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_MATRIX_3X2</unmanaged-short>	
        Matrix3x2 = unchecked((int)14),			
        
        /// <summary>	
        /// <dd> <p>A 4x2 matrix of  float values.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_TYPE_MATRIX_4X3']/*"/>	
        /// <msdn-id>hh447012</msdn-id>	
        /// <unmanaged>D2D1_PROPERTY_TYPE_MATRIX_4X3</unmanaged>	
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_MATRIX_4X3</unmanaged-short>	
        Matrix4x3 = unchecked((int)15),			
        
        /// <summary>	
        /// <dd> <p>A 4x4 matrix of  float values.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_TYPE_MATRIX_4X4']/*"/>	
        /// <msdn-id>hh447012</msdn-id>	
        /// <unmanaged>D2D1_PROPERTY_TYPE_MATRIX_4X4</unmanaged>	
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_MATRIX_4X4</unmanaged-short>	
        Matrix4x4 = unchecked((int)16),			
        
        /// <summary>	
        /// <dd> <p>A 5x4 matrix of  float values.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_TYPE_MATRIX_5X4']/*"/>	
        /// <msdn-id>hh447012</msdn-id>	
        /// <unmanaged>D2D1_PROPERTY_TYPE_MATRIX_5X4</unmanaged>	
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_MATRIX_5X4</unmanaged-short>	
        Matrix5x4 = unchecked((int)17),			
        
        /// <summary>	
        /// <dd> <p>A nano-COM color context interface reference.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_PROPERTY_TYPE_COLOR_CONTEXT']/*"/>	
        /// <msdn-id>hh447012</msdn-id>	
        /// <unmanaged>D2D1_PROPERTY_TYPE_COLOR_CONTEXT</unmanaged>	
        /// <unmanaged-short>D2D1_PROPERTY_TYPE_COLOR_CONTEXT</unmanaged-short>	
        ColorContext = unchecked((int)18),			
    }
    
    /// <summary>	
    /// <p>The rendering priority affects the extent to which Direct2D will throttle its rendering workload.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RENDERING_PRIORITY']/*"/>	
    /// <msdn-id>dn280382</msdn-id>	
    /// <unmanaged>D2D1_RENDERING_PRIORITY</unmanaged>	
    /// <unmanaged-short>D2D1_RENDERING_PRIORITY</unmanaged-short>	
    public enum RenderingPriority : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RENDERING_PRIORITY_NORMAL']/*"/>	
        /// <msdn-id>dn280382</msdn-id>	
        /// <unmanaged>D2D1_RENDERING_PRIORITY_NORMAL</unmanaged>	
        /// <unmanaged-short>D2D1_RENDERING_PRIORITY_NORMAL</unmanaged-short>	
        Normal = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RENDERING_PRIORITY_LOW']/*"/>	
        /// <msdn-id>dn280382</msdn-id>	
        /// <unmanaged>D2D1_RENDERING_PRIORITY_LOW</unmanaged>	
        /// <unmanaged-short>D2D1_RENDERING_PRIORITY_LOW</unmanaged-short>	
        Low = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Describes whether a render target uses hardware or software rendering, or if Direct2D should select the rendering mode.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Not every render target supports hardware rendering. For more information, see the Render Targets Overview. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RENDER_TARGET_TYPE']/*"/>	
    /// <msdn-id>dd756630</msdn-id>	
    /// <unmanaged>D2D1_RENDER_TARGET_TYPE</unmanaged>	
    /// <unmanaged-short>D2D1_RENDER_TARGET_TYPE</unmanaged-short>	
    public enum RenderTargetType : int {	
        
        /// <summary>	
        /// <dd> <p>The render target uses hardware rendering, if available; otherwise, it uses software rendering.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RENDER_TARGET_TYPE_DEFAULT']/*"/>	
        /// <msdn-id>dd756630</msdn-id>	
        /// <unmanaged>D2D1_RENDER_TARGET_TYPE_DEFAULT</unmanaged>	
        /// <unmanaged-short>D2D1_RENDER_TARGET_TYPE_DEFAULT</unmanaged-short>	
        Default = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The render target uses software rendering only.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RENDER_TARGET_TYPE_SOFTWARE']/*"/>	
        /// <msdn-id>dd756630</msdn-id>	
        /// <unmanaged>D2D1_RENDER_TARGET_TYPE_SOFTWARE</unmanaged>	
        /// <unmanaged-short>D2D1_RENDER_TARGET_TYPE_SOFTWARE</unmanaged-short>	
        Software = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The render target uses hardware rendering only. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RENDER_TARGET_TYPE_HARDWARE']/*"/>	
        /// <msdn-id>dd756630</msdn-id>	
        /// <unmanaged>D2D1_RENDER_TARGET_TYPE_HARDWARE</unmanaged>	
        /// <unmanaged-short>D2D1_RENDER_TARGET_TYPE_HARDWARE</unmanaged-short>	
        Hardware = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p> Describes how a render target is remoted and whether it should be GDI-compatible. This enumeration allows a bitwise combination of its member values.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RENDER_TARGET_USAGE']/*"/>	
    /// <msdn-id>dd368157</msdn-id>	
    /// <unmanaged>D2D1_RENDER_TARGET_USAGE</unmanaged>	
    /// <unmanaged-short>D2D1_RENDER_TARGET_USAGE</unmanaged-short>	
    public enum RenderTargetUsage : int {	
        
        /// <summary>	
        /// <dd> <p>The render target attempts to use Direct3D command-stream remoting and uses bitmap remoting if stream remoting fails. The render target is not GDI-compatible.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RENDER_TARGET_USAGE_NONE']/*"/>	
        /// <msdn-id>dd368157</msdn-id>	
        /// <unmanaged>D2D1_RENDER_TARGET_USAGE_NONE</unmanaged>	
        /// <unmanaged-short>D2D1_RENDER_TARGET_USAGE_NONE</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The render target renders content locally and sends it to the terminal services client as a bitmap. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RENDER_TARGET_USAGE_FORCE_BITMAP_REMOTING']/*"/>	
        /// <msdn-id>dd368157</msdn-id>	
        /// <unmanaged>D2D1_RENDER_TARGET_USAGE_FORCE_BITMAP_REMOTING</unmanaged>	
        /// <unmanaged-short>D2D1_RENDER_TARGET_USAGE_FORCE_BITMAP_REMOTING</unmanaged-short>	
        ForceBitmapRemoting = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The render target can be used efficiently with GDI.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RENDER_TARGET_USAGE_GDI_COMPATIBLE']/*"/>	
        /// <msdn-id>dd368157</msdn-id>	
        /// <unmanaged>D2D1_RENDER_TARGET_USAGE_GDI_COMPATIBLE</unmanaged>	
        /// <unmanaged-short>D2D1_RENDER_TARGET_USAGE_GDI_COMPATIBLE</unmanaged-short>	
        GdiCompatible = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Values for the <strong><see cref="SharpDX.Direct2D1.RgbToHueProperty.OutputColorSpace"/></strong> property of the RGB to Hue effect.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE']/*"/>	
    /// <msdn-id>dn890743</msdn-id>	
    /// <unmanaged>D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE</unmanaged>	
    /// <unmanaged-short>D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE</unmanaged-short>	
    public enum RgbToHueOutputColorSpace : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_HUE_SATURATION_VALUE']/*"/>	
        /// <msdn-id>dn890743</msdn-id>	
        /// <unmanaged>D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_HUE_SATURATION_VALUE</unmanaged>	
        /// <unmanaged-short>D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_HUE_SATURATION_VALUE</unmanaged-short>	
        HueSaturationValue = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_HUE_SATURATION_LIGHTNESS']/*"/>	
        /// <msdn-id>dn890743</msdn-id>	
        /// <unmanaged>D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_HUE_SATURATION_LIGHTNESS</unmanaged>	
        /// <unmanaged-short>D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_HUE_SATURATION_LIGHTNESS</unmanaged-short>	
        HueSaturationLightness = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Indentifiers for properties of the RGB to Hue effect.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RGBTOHUE_PROP']/*"/>	
    /// <msdn-id>dn890744</msdn-id>	
    /// <unmanaged>D2D1_RGBTOHUE_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_RGBTOHUE_PROP</unmanaged-short>	
    public enum RgbToHueProperty : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_RGBTOHUE_PROP_OUTPUT_COLOR_SPACE']/*"/>	
        /// <msdn-id>dn890744</msdn-id>	
        /// <unmanaged>D2D1_RGBTOHUE_PROP_OUTPUT_COLOR_SPACE</unmanaged>	
        /// <unmanaged-short>D2D1_RGBTOHUE_PROP_OUTPUT_COLOR_SPACE</unmanaged-short>	
        OutputColorSpace = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Use this effect to alter the saturation of an image.  The saturation effect is a specialization of the color matrix effect.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.Saturation"/>.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SATURATION_PROP']/*"/>	
    /// <msdn-id>hh706369</msdn-id>	
    /// <unmanaged>D2D1_SATURATION_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_SATURATION_PROP</unmanaged-short>	
    public enum SaturationProperties : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SATURATION_PROP_SATURATION']/*"/>	
        /// <msdn-id>hh706369</msdn-id>	
        /// <unmanaged>D2D1_SATURATION_PROP_SATURATION</unmanaged>	
        /// <unmanaged-short>D2D1_SATURATION_PROP_SATURATION</unmanaged-short>	
        Saturation = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Use this effect to scale an image up or down.  The effect has six scaling modes:  nearest neighbor, linear, cubic, multi-sample linear, anisotropic, and high quality cubic.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.Scale"/>.</p><p> </p><ul> <li>Example</li> <li>Effect<ul> <li>Border</li> </ul> </li> <li>Interpolation</li> <li>Output</li> <li>Sample</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SCALE_INTERPOLATION_MODE']/*"/>	
    /// <msdn-id>hh706339</msdn-id>	
    /// <unmanaged>D2D1_SCALE_INTERPOLATION_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_SCALE_INTERPOLATION_MODE</unmanaged-short>	
    public enum ScaleInterpolationMode : int {	
        
        /// <summary>	
        /// <dd>BitmapSizey(Pixels)=Scaley*Original Bitmap Sizey (DIPs)*(UserDPI/96)</dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SCALE_INTERPOLATION_MODE_NEAREST_NEIGHBOR']/*"/>	
        /// <msdn-id>hh706339</msdn-id>	
        /// <unmanaged>D2D1_SCALE_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>	
        /// <unmanaged-short>D2D1_SCALE_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged-short>	
        NearestNeighbor = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SCALE_INTERPOLATION_MODE_LINEAR']/*"/>	
        /// <msdn-id>hh706339</msdn-id>	
        /// <unmanaged>D2D1_SCALE_INTERPOLATION_MODE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_SCALE_INTERPOLATION_MODE_LINEAR</unmanaged-short>	
        Linear = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SCALE_INTERPOLATION_MODE_CUBIC']/*"/>	
        /// <msdn-id>hh706339</msdn-id>	
        /// <unmanaged>D2D1_SCALE_INTERPOLATION_MODE_CUBIC</unmanaged>	
        /// <unmanaged-short>D2D1_SCALE_INTERPOLATION_MODE_CUBIC</unmanaged-short>	
        Cubic = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SCALE_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR']/*"/>	
        /// <msdn-id>hh706339</msdn-id>	
        /// <unmanaged>D2D1_SCALE_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_SCALE_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>	
        MultiSampleLinear = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SCALE_INTERPOLATION_MODE_ANISOTROPIC']/*"/>	
        /// <msdn-id>hh706339</msdn-id>	
        /// <unmanaged>D2D1_SCALE_INTERPOLATION_MODE_ANISOTROPIC</unmanaged>	
        /// <unmanaged-short>D2D1_SCALE_INTERPOLATION_MODE_ANISOTROPIC</unmanaged-short>	
        Anisotropic = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SCALE_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC']/*"/>	
        /// <msdn-id>hh706339</msdn-id>	
        /// <unmanaged>D2D1_SCALE_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged>	
        /// <unmanaged-short>D2D1_SCALE_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>	
        HighQualityCubic = unchecked((int)5),			
    }
    
    /// <summary>	
    /// <p>Use this effect to scale an image up or down.  The effect has six scaling modes:  nearest neighbor, linear, cubic, multi-sample linear, anisotropic, and high quality cubic.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.Scale"/>.</p><p> </p><ul> <li>Example</li> <li>Effect<ul> <li>Border</li> </ul> </li> <li>Interpolation</li> <li>Output</li> <li>Sample</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SCALE_PROP']/*"/>	
    /// <msdn-id>hh706339</msdn-id>	
    /// <unmanaged>D2D1_SCALE_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_SCALE_PROP</unmanaged-short>	
    public enum ScaleProperties : int {	
        
        /// <summary>	
        /// <dd>BitmapSizey(Pixels)=Scaley*Original Bitmap Sizey (DIPs)*(UserDPI/96)</dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SCALE_PROP_SCALE']/*"/>	
        /// <msdn-id>hh706339</msdn-id>	
        /// <unmanaged>D2D1_SCALE_PROP_SCALE</unmanaged>	
        /// <unmanaged-short>D2D1_SCALE_PROP_SCALE</unmanaged-short>	
        Scale = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SCALE_PROP_CENTER_POINT']/*"/>	
        /// <msdn-id>hh706339</msdn-id>	
        /// <unmanaged>D2D1_SCALE_PROP_CENTER_POINT</unmanaged>	
        /// <unmanaged-short>D2D1_SCALE_PROP_CENTER_POINT</unmanaged-short>	
        CenterPoint = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SCALE_PROP_INTERPOLATION_MODE']/*"/>	
        /// <msdn-id>hh706339</msdn-id>	
        /// <unmanaged>D2D1_SCALE_PROP_INTERPOLATION_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_SCALE_PROP_INTERPOLATION_MODE</unmanaged-short>	
        InterpolationMode = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SCALE_PROP_BORDER_MODE']/*"/>	
        /// <msdn-id>hh706339</msdn-id>	
        /// <unmanaged>D2D1_SCALE_PROP_BORDER_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_SCALE_PROP_BORDER_MODE</unmanaged-short>	
        BorderMode = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SCALE_PROP_SHARPNESS']/*"/>	
        /// <msdn-id>hh706339</msdn-id>	
        /// <unmanaged>D2D1_SCALE_PROP_SHARPNESS</unmanaged>	
        /// <unmanaged-short>D2D1_SCALE_PROP_SHARPNESS</unmanaged-short>	
        Sharpness = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p>Identifiers for properties of the Sepia effect.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SEPIA_PROP']/*"/>	
    /// <msdn-id>dn890745</msdn-id>	
    /// <unmanaged>D2D1_SEPIA_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_SEPIA_PROP</unmanaged-short>	
    public enum SepiaProperty : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SEPIA_PROP_INTENSITY']/*"/>	
        /// <msdn-id>dn890745</msdn-id>	
        /// <unmanaged>D2D1_SEPIA_PROP_INTENSITY</unmanaged>	
        /// <unmanaged-short>D2D1_SEPIA_PROP_INTENSITY</unmanaged-short>	
        Intensity = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SEPIA_PROP_ALPHA_MODE']/*"/>	
        /// <msdn-id>dn890745</msdn-id>	
        /// <unmanaged>D2D1_SEPIA_PROP_ALPHA_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_SEPIA_PROP_ALPHA_MODE</unmanaged-short>	
        AlphaMode = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Use the shadow effect to generate a shadow from the alpha channel of an image. The shadow is more opaque for higher alpha values and more transparent for lower alpha values. You can set the amount of blur and the color of the shadow. </p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Optimization</li> <li>Output</li> <li>Requirements</li> <li>Related</li> </ul><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.Shadow"/>.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SHADOW_OPTIMIZATION']/*"/>	
    /// <msdn-id>hh706334</msdn-id>	
    /// <unmanaged>D2D1_SHADOW_OPTIMIZATION</unmanaged>	
    /// <unmanaged-short>D2D1_SHADOW_OPTIMIZATION</unmanaged-short>	
    public enum ShadowOptimization : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SHADOW_OPTIMIZATION_SPEED']/*"/>	
        /// <msdn-id>hh706334</msdn-id>	
        /// <unmanaged>D2D1_SHADOW_OPTIMIZATION_SPEED</unmanaged>	
        /// <unmanaged-short>D2D1_SHADOW_OPTIMIZATION_SPEED</unmanaged-short>	
        Speed = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SHADOW_OPTIMIZATION_BALANCED']/*"/>	
        /// <msdn-id>hh706334</msdn-id>	
        /// <unmanaged>D2D1_SHADOW_OPTIMIZATION_BALANCED</unmanaged>	
        /// <unmanaged-short>D2D1_SHADOW_OPTIMIZATION_BALANCED</unmanaged-short>	
        Balanced = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SHADOW_OPTIMIZATION_QUALITY']/*"/>	
        /// <msdn-id>hh706334</msdn-id>	
        /// <unmanaged>D2D1_SHADOW_OPTIMIZATION_QUALITY</unmanaged>	
        /// <unmanaged-short>D2D1_SHADOW_OPTIMIZATION_QUALITY</unmanaged-short>	
        Quality = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Use the shadow effect to generate a shadow from the alpha channel of an image. The shadow is more opaque for higher alpha values and more transparent for lower alpha values. You can set the amount of blur and the color of the shadow. </p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Optimization</li> <li>Output</li> <li>Requirements</li> <li>Related</li> </ul><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.Shadow"/>.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SHADOW_PROP']/*"/>	
    /// <msdn-id>hh706334</msdn-id>	
    /// <unmanaged>D2D1_SHADOW_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_SHADOW_PROP</unmanaged-short>	
    public enum ShadowProperties : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SHADOW_PROP_BLUR_STANDARD_DEVIATION']/*"/>	
        /// <msdn-id>hh706334</msdn-id>	
        /// <unmanaged>D2D1_SHADOW_PROP_BLUR_STANDARD_DEVIATION</unmanaged>	
        /// <unmanaged-short>D2D1_SHADOW_PROP_BLUR_STANDARD_DEVIATION</unmanaged-short>	
        BlurStandardDeviation = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SHADOW_PROP_COLOR']/*"/>	
        /// <msdn-id>hh706334</msdn-id>	
        /// <unmanaged>D2D1_SHADOW_PROP_COLOR</unmanaged>	
        /// <unmanaged-short>D2D1_SHADOW_PROP_COLOR</unmanaged-short>	
        Color = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SHADOW_PROP_OPTIMIZATION']/*"/>	
        /// <msdn-id>hh706334</msdn-id>	
        /// <unmanaged>D2D1_SHADOW_PROP_OPTIMIZATION</unmanaged>	
        /// <unmanaged-short>D2D1_SHADOW_PROP_OPTIMIZATION</unmanaged-short>	
        Optimization = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Identifiers for properties of the Sharpen effect.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SHARPEN_PROP']/*"/>	
    /// <msdn-id>dn890746</msdn-id>	
    /// <unmanaged>D2D1_SHARPEN_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_SHARPEN_PROP</unmanaged-short>	
    public enum SharpenProperty : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SHARPEN_PROP_SHARPNESS']/*"/>	
        /// <msdn-id>dn890746</msdn-id>	
        /// <unmanaged>D2D1_SHARPEN_PROP_SHARPNESS</unmanaged>	
        /// <unmanaged-short>D2D1_SHARPEN_PROP_SHARPNESS</unmanaged-short>	
        Sharpness = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SHARPEN_PROP_THRESHOLD']/*"/>	
        /// <msdn-id>dn890746</msdn-id>	
        /// <unmanaged>D2D1_SHARPEN_PROP_THRESHOLD</unmanaged>	
        /// <unmanaged-short>D2D1_SHARPEN_PROP_THRESHOLD</unmanaged-short>	
        Threshold = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Use the spot-diffuse lighting effect to create an image that appears to be a reflective surface with where the light source is limited to a directed cone of light and the light is reflecting in all directions. This effect uses the alpha channel as a height map and lights the image with a spot light source.</p><p>The color of the output bitmap is a result of light color, light position,  and the surface geometry.  The alpha channel output for each pixel with diffuse lighting is always 1.0.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.SpotDiffuse"/>.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Scale</li> <li>Sample</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTDIFFUSE_PROP']/*"/>	
    /// <msdn-id>hh706326</msdn-id>	
    /// <unmanaged>D2D1_SPOTDIFFUSE_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_SPOTDIFFUSE_PROP</unmanaged-short>	
    public enum SpotDiffuseProperties : int {	
        
        /// <summary>	
        /// <dd>Lr, Lg, Lb = the light color in RGB components.</dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTDIFFUSE_PROP_LIGHT_POSITION']/*"/>	
        /// <msdn-id>hh706326</msdn-id>	
        /// <unmanaged>D2D1_SPOTDIFFUSE_PROP_LIGHT_POSITION</unmanaged>	
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_PROP_LIGHT_POSITION</unmanaged-short>	
        LightPosition = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTDIFFUSE_PROP_POINTS_AT']/*"/>	
        /// <msdn-id>hh706326</msdn-id>	
        /// <unmanaged>D2D1_SPOTDIFFUSE_PROP_POINTS_AT</unmanaged>	
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_PROP_POINTS_AT</unmanaged-short>	
        PointsAt = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTDIFFUSE_PROP_FOCUS']/*"/>	
        /// <msdn-id>hh706326</msdn-id>	
        /// <unmanaged>D2D1_SPOTDIFFUSE_PROP_FOCUS</unmanaged>	
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_PROP_FOCUS</unmanaged-short>	
        Focus = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTDIFFUSE_PROP_LIMITING_CONE_ANGLE']/*"/>	
        /// <msdn-id>hh706326</msdn-id>	
        /// <unmanaged>D2D1_SPOTDIFFUSE_PROP_LIMITING_CONE_ANGLE</unmanaged>	
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_PROP_LIMITING_CONE_ANGLE</unmanaged-short>	
        LimitingConeAngle = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTDIFFUSE_PROP_DIFFUSE_CONSTANT']/*"/>	
        /// <msdn-id>hh706326</msdn-id>	
        /// <unmanaged>D2D1_SPOTDIFFUSE_PROP_DIFFUSE_CONSTANT</unmanaged>	
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_PROP_DIFFUSE_CONSTANT</unmanaged-short>	
        DiffuseConstant = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTDIFFUSE_PROP_SURFACE_SCALE']/*"/>	
        /// <msdn-id>hh706326</msdn-id>	
        /// <unmanaged>D2D1_SPOTDIFFUSE_PROP_SURFACE_SCALE</unmanaged>	
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_PROP_SURFACE_SCALE</unmanaged-short>	
        SurfaceScale = unchecked((int)5),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTDIFFUSE_PROP_COLOR']/*"/>	
        /// <msdn-id>hh706326</msdn-id>	
        /// <unmanaged>D2D1_SPOTDIFFUSE_PROP_COLOR</unmanaged>	
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_PROP_COLOR</unmanaged-short>	
        Color = unchecked((int)6),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTDIFFUSE_PROP_KERNEL_UNIT_LENGTH']/*"/>	
        /// <msdn-id>hh706326</msdn-id>	
        /// <unmanaged>D2D1_SPOTDIFFUSE_PROP_KERNEL_UNIT_LENGTH</unmanaged>	
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_PROP_KERNEL_UNIT_LENGTH</unmanaged-short>	
        KernelUnitLength = unchecked((int)7),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTDIFFUSE_PROP_SCALE_MODE']/*"/>	
        /// <msdn-id>hh706326</msdn-id>	
        /// <unmanaged>D2D1_SPOTDIFFUSE_PROP_SCALE_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_PROP_SCALE_MODE</unmanaged-short>	
        ScaleMode = unchecked((int)8),			
    }
    
    /// <summary>	
    /// <p>Use the spot-diffuse lighting effect to create an image that appears to be a reflective surface with where the light source is limited to a directed cone of light and the light is reflecting in all directions. This effect uses the alpha channel as a height map and lights the image with a spot light source.</p><p>The color of the output bitmap is a result of light color, light position,  and the surface geometry.  The alpha channel output for each pixel with diffuse lighting is always 1.0.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.SpotDiffuse"/>.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Scale</li> <li>Sample</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTDIFFUSE_SCALE_MODE']/*"/>	
    /// <msdn-id>hh706326</msdn-id>	
    /// <unmanaged>D2D1_SPOTDIFFUSE_SCALE_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_SPOTDIFFUSE_SCALE_MODE</unmanaged-short>	
    public enum SpotDiffuseScaleMode : int {	
        
        /// <summary>	
        /// <dd>Lr, Lg, Lb = the light color in RGB components.</dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR']/*"/>	
        /// <msdn-id>hh706326</msdn-id>	
        /// <unmanaged>D2D1_SPOTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged>	
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged-short>	
        NearestNeighbor = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTDIFFUSE_SCALE_MODE_LINEAR']/*"/>	
        /// <msdn-id>hh706326</msdn-id>	
        /// <unmanaged>D2D1_SPOTDIFFUSE_SCALE_MODE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_SCALE_MODE_LINEAR</unmanaged-short>	
        Linear = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTDIFFUSE_SCALE_MODE_CUBIC']/*"/>	
        /// <msdn-id>hh706326</msdn-id>	
        /// <unmanaged>D2D1_SPOTDIFFUSE_SCALE_MODE_CUBIC</unmanaged>	
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_SCALE_MODE_CUBIC</unmanaged-short>	
        Cubic = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR']/*"/>	
        /// <msdn-id>hh706326</msdn-id>	
        /// <unmanaged>D2D1_SPOTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>	
        MultiSampleLinear = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTDIFFUSE_SCALE_MODE_ANISOTROPIC']/*"/>	
        /// <msdn-id>hh706326</msdn-id>	
        /// <unmanaged>D2D1_SPOTDIFFUSE_SCALE_MODE_ANISOTROPIC</unmanaged>	
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_SCALE_MODE_ANISOTROPIC</unmanaged-short>	
        Anisotropic = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC']/*"/>	
        /// <msdn-id>hh706326</msdn-id>	
        /// <unmanaged>D2D1_SPOTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged>	
        /// <unmanaged-short>D2D1_SPOTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>	
        HighQualityCubic = unchecked((int)5),			
    }
    
    /// <summary>	
    /// <p>Use the spot-specular lighting effect to create an image that appears to be a reflective surface where the light source is limited to a directed cone of light. This effect uses the alpha channel as a height map and lights the image with a point light source.</p><p>The color of the output bitmap is a result of light color, light position, the direction of the cone and the surface geometry according to the specular portion of the Phong lighting model. The alpha channel output for each pixel with specular lighting is the maximum of the red, green, and blue channel outputs for that pixel.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.SpotSpecular"/>.</p><p> </p><ul> <li>Example</li> <li>Spot</li> <li>Effect</li> <li>Scale</li> <li>Sample</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTSPECULAR_PROP']/*"/>	
    /// <msdn-id>hh706371</msdn-id>	
    /// <unmanaged>D2D1_SPOTSPECULAR_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP</unmanaged-short>	
    public enum SpotSpecularProperties : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTSPECULAR_PROP_LIGHT_POSITION']/*"/>	
        /// <msdn-id>hh706371</msdn-id>	
        /// <unmanaged>D2D1_SPOTSPECULAR_PROP_LIGHT_POSITION</unmanaged>	
        /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP_LIGHT_POSITION</unmanaged-short>	
        LightPosition = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTSPECULAR_PROP_POINTS_AT']/*"/>	
        /// <msdn-id>hh706371</msdn-id>	
        /// <unmanaged>D2D1_SPOTSPECULAR_PROP_POINTS_AT</unmanaged>	
        /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP_POINTS_AT</unmanaged-short>	
        PointsAt = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTSPECULAR_PROP_FOCUS']/*"/>	
        /// <msdn-id>hh706371</msdn-id>	
        /// <unmanaged>D2D1_SPOTSPECULAR_PROP_FOCUS</unmanaged>	
        /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP_FOCUS</unmanaged-short>	
        Focus = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTSPECULAR_PROP_LIMITING_CONE_ANGLE']/*"/>	
        /// <msdn-id>hh706371</msdn-id>	
        /// <unmanaged>D2D1_SPOTSPECULAR_PROP_LIMITING_CONE_ANGLE</unmanaged>	
        /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP_LIMITING_CONE_ANGLE</unmanaged-short>	
        LimitingConeAngle = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTSPECULAR_PROP_SPECULAR_EXPONENT']/*"/>	
        /// <msdn-id>hh706371</msdn-id>	
        /// <unmanaged>D2D1_SPOTSPECULAR_PROP_SPECULAR_EXPONENT</unmanaged>	
        /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP_SPECULAR_EXPONENT</unmanaged-short>	
        SpecularExponent = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTSPECULAR_PROP_SPECULAR_CONSTANT']/*"/>	
        /// <msdn-id>hh706371</msdn-id>	
        /// <unmanaged>D2D1_SPOTSPECULAR_PROP_SPECULAR_CONSTANT</unmanaged>	
        /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP_SPECULAR_CONSTANT</unmanaged-short>	
        SpecularConstant = unchecked((int)5),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTSPECULAR_PROP_SURFACE_SCALE']/*"/>	
        /// <msdn-id>hh706371</msdn-id>	
        /// <unmanaged>D2D1_SPOTSPECULAR_PROP_SURFACE_SCALE</unmanaged>	
        /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP_SURFACE_SCALE</unmanaged-short>	
        SurfaceScale = unchecked((int)6),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTSPECULAR_PROP_COLOR']/*"/>	
        /// <msdn-id>hh706371</msdn-id>	
        /// <unmanaged>D2D1_SPOTSPECULAR_PROP_COLOR</unmanaged>	
        /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP_COLOR</unmanaged-short>	
        Color = unchecked((int)7),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTSPECULAR_PROP_KERNEL_UNIT_LENGTH']/*"/>	
        /// <msdn-id>hh706371</msdn-id>	
        /// <unmanaged>D2D1_SPOTSPECULAR_PROP_KERNEL_UNIT_LENGTH</unmanaged>	
        /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP_KERNEL_UNIT_LENGTH</unmanaged-short>	
        KernelUnitLength = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTSPECULAR_PROP_SCALE_MODE']/*"/>	
        /// <msdn-id>hh706371</msdn-id>	
        /// <unmanaged>D2D1_SPOTSPECULAR_PROP_SCALE_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_SPOTSPECULAR_PROP_SCALE_MODE</unmanaged-short>	
        ScaleMode = unchecked((int)9),			
    }
    
    /// <summary>	
    /// <p>Use the spot-specular lighting effect to create an image that appears to be a reflective surface where the light source is limited to a directed cone of light. This effect uses the alpha channel as a height map and lights the image with a point light source.</p><p>The color of the output bitmap is a result of light color, light position, the direction of the cone and the surface geometry according to the specular portion of the Phong lighting model. The alpha channel output for each pixel with specular lighting is the maximum of the red, green, and blue channel outputs for that pixel.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.SpotSpecular"/>.</p><p> </p><ul> <li>Example</li> <li>Spot</li> <li>Effect</li> <li>Scale</li> <li>Sample</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTSPECULAR_SCALE_MODE']/*"/>	
    /// <msdn-id>hh706371</msdn-id>	
    /// <unmanaged>D2D1_SPOTSPECULAR_SCALE_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_SPOTSPECULAR_SCALE_MODE</unmanaged-short>	
    public enum SpotSpecularScaleMode : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR']/*"/>	
        /// <msdn-id>hh706371</msdn-id>	
        /// <unmanaged>D2D1_SPOTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged>	
        /// <unmanaged-short>D2D1_SPOTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged-short>	
        NearestNeighbor = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTSPECULAR_SCALE_MODE_LINEAR']/*"/>	
        /// <msdn-id>hh706371</msdn-id>	
        /// <unmanaged>D2D1_SPOTSPECULAR_SCALE_MODE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_SPOTSPECULAR_SCALE_MODE_LINEAR</unmanaged-short>	
        Linear = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTSPECULAR_SCALE_MODE_CUBIC']/*"/>	
        /// <msdn-id>hh706371</msdn-id>	
        /// <unmanaged>D2D1_SPOTSPECULAR_SCALE_MODE_CUBIC</unmanaged>	
        /// <unmanaged-short>D2D1_SPOTSPECULAR_SCALE_MODE_CUBIC</unmanaged-short>	
        Cubic = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR']/*"/>	
        /// <msdn-id>hh706371</msdn-id>	
        /// <unmanaged>D2D1_SPOTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_SPOTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>	
        MultiSampleLinear = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTSPECULAR_SCALE_MODE_ANISOTROPIC']/*"/>	
        /// <msdn-id>hh706371</msdn-id>	
        /// <unmanaged>D2D1_SPOTSPECULAR_SCALE_MODE_ANISOTROPIC</unmanaged>	
        /// <unmanaged-short>D2D1_SPOTSPECULAR_SCALE_MODE_ANISOTROPIC</unmanaged-short>	
        Anisotropic = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SPOTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC']/*"/>	
        /// <msdn-id>hh706371</msdn-id>	
        /// <unmanaged>D2D1_SPOTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged>	
        /// <unmanaged-short>D2D1_SPOTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>	
        HighQualityCubic = unchecked((int)5),			
    }
    
    /// <summary>	
    /// <p>Identifiers for properties of the Straighten effect.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_STRAIGHTEN_PROP']/*"/>	
    /// <msdn-id>dn890747</msdn-id>	
    /// <unmanaged>D2D1_STRAIGHTEN_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_STRAIGHTEN_PROP</unmanaged-short>	
    public enum StraightenProperty : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_STRAIGHTEN_PROP_ANGLE']/*"/>	
        /// <msdn-id>dn890747</msdn-id>	
        /// <unmanaged>D2D1_STRAIGHTEN_PROP_ANGLE</unmanaged>	
        /// <unmanaged-short>D2D1_STRAIGHTEN_PROP_ANGLE</unmanaged-short>	
        Angle = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_STRAIGHTEN_PROP_MAINTAIN_SIZE']/*"/>	
        /// <msdn-id>dn890747</msdn-id>	
        /// <unmanaged>D2D1_STRAIGHTEN_PROP_MAINTAIN_SIZE</unmanaged>	
        /// <unmanaged-short>D2D1_STRAIGHTEN_PROP_MAINTAIN_SIZE</unmanaged-short>	
        MaintainSize = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_STRAIGHTEN_PROP_SCALE_MODE']/*"/>	
        /// <msdn-id>dn890747</msdn-id>	
        /// <unmanaged>D2D1_STRAIGHTEN_PROP_SCALE_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_STRAIGHTEN_PROP_SCALE_MODE</unmanaged-short>	
        ScaleMode = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Values for the <strong><see cref="SharpDX.Direct2D1.StraightenProperty.ScaleMode"/></strong> property of the Straighten effect.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_STRAIGHTEN_SCALE_MODE']/*"/>	
    /// <msdn-id>dn890748</msdn-id>	
    /// <unmanaged>D2D1_STRAIGHTEN_SCALE_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_STRAIGHTEN_SCALE_MODE</unmanaged-short>	
    public enum StraightenScaleMode : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_STRAIGHTEN_SCALE_MODE_NEAREST_NEIGHBOR']/*"/>	
        /// <msdn-id>dn890748</msdn-id>	
        /// <unmanaged>D2D1_STRAIGHTEN_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged>	
        /// <unmanaged-short>D2D1_STRAIGHTEN_SCALE_MODE_NEAREST_NEIGHBOR</unmanaged-short>	
        NearestNeighbor = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_STRAIGHTEN_SCALE_MODE_LINEAR']/*"/>	
        /// <msdn-id>dn890748</msdn-id>	
        /// <unmanaged>D2D1_STRAIGHTEN_SCALE_MODE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_STRAIGHTEN_SCALE_MODE_LINEAR</unmanaged-short>	
        Linear = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_STRAIGHTEN_SCALE_MODE_CUBIC']/*"/>	
        /// <msdn-id>dn890748</msdn-id>	
        /// <unmanaged>D2D1_STRAIGHTEN_SCALE_MODE_CUBIC</unmanaged>	
        /// <unmanaged-short>D2D1_STRAIGHTEN_SCALE_MODE_CUBIC</unmanaged-short>	
        Cubic = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_STRAIGHTEN_SCALE_MODE_MULTI_SAMPLE_LINEAR']/*"/>	
        /// <msdn-id>dn890748</msdn-id>	
        /// <unmanaged>D2D1_STRAIGHTEN_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_STRAIGHTEN_SCALE_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>	
        MultiSampleLinear = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_STRAIGHTEN_SCALE_MODE_ANISOTROPIC']/*"/>	
        /// <msdn-id>dn890748</msdn-id>	
        /// <unmanaged>D2D1_STRAIGHTEN_SCALE_MODE_ANISOTROPIC</unmanaged>	
        /// <unmanaged-short>D2D1_STRAIGHTEN_SCALE_MODE_ANISOTROPIC</unmanaged-short>	
        Anisotropic = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p>Defines how the world transform, dots per inch (dpi), and stroke width affect the shape of the pen used to stroke a primitive.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>If you specify <strong><see cref="SharpDX.Direct2D1.StrokeTransformType.Fixed"/></strong> the stroke isn't affected by the world transform.</p><p>If you specify <strong><see cref="SharpDX.Direct2D1.StrokeTransformType.Fixed"/></strong> the application has the same behavior in Windows 7 and later.</p><p>If you specify <strong><see cref="SharpDX.Direct2D1.StrokeTransformType.Hairline"/></strong> the stroke is always 1 pixel wide.</p><p>Apart from the stroke, any value derived from the stroke width is not affected when the transformType is either fixed or hairline. This includes miters, line caps and so on.</p><p> It is important to distinguish between the geometry being stroked and the shape of the stroke pen. When <see cref="SharpDX.Direct2D1.StrokeTransformType.Fixed"/> or <see cref="SharpDX.Direct2D1.StrokeTransformType.Hairline"/> is specified, the geometry still respects the transform and dpi, but the pen that traces the geometry will not.</p><p>Here is an illustration of a stroke with dashing and a skew and stretch transform.</p><p>And here is an illustration of a fixed width stroke which does not get transformed.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_STROKE_TRANSFORM_TYPE']/*"/>	
    /// <msdn-id>hh447016</msdn-id>	
    /// <unmanaged>D2D1_STROKE_TRANSFORM_TYPE</unmanaged>	
    /// <unmanaged-short>D2D1_STROKE_TRANSFORM_TYPE</unmanaged-short>	
    public enum StrokeTransformType : int {	
        
        /// <summary>	
        /// <dd> <p>The stroke respects the currently set world transform, the dpi, and the stroke width.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_STROKE_TRANSFORM_TYPE_NORMAL']/*"/>	
        /// <msdn-id>hh447016</msdn-id>	
        /// <unmanaged>D2D1_STROKE_TRANSFORM_TYPE_NORMAL</unmanaged>	
        /// <unmanaged-short>D2D1_STROKE_TRANSFORM_TYPE_NORMAL</unmanaged-short>	
        Normal = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The stroke does not respect the world transform but it does respect the dpi and stroke width.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_STROKE_TRANSFORM_TYPE_FIXED']/*"/>	
        /// <msdn-id>hh447016</msdn-id>	
        /// <unmanaged>D2D1_STROKE_TRANSFORM_TYPE_FIXED</unmanaged>	
        /// <unmanaged-short>D2D1_STROKE_TRANSFORM_TYPE_FIXED</unmanaged-short>	
        Fixed = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The stroke is forced to 1 pixel wide (in device space) and does not respect the world transform, the dpi, or the stroke width.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_STROKE_TRANSFORM_TYPE_HAIRLINE']/*"/>	
        /// <msdn-id>hh447016</msdn-id>	
        /// <unmanaged>D2D1_STROKE_TRANSFORM_TYPE_HAIRLINE</unmanaged>	
        /// <unmanaged-short>D2D1_STROKE_TRANSFORM_TYPE_HAIRLINE</unmanaged-short>	
        Hairline = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Specifies how the edges of nontext primitives are rendered.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SUBPROPERTY']/*"/>	
    /// <msdn-id>dd368061</msdn-id>	
    /// <unmanaged>D2D1_SUBPROPERTY</unmanaged>	
    /// <unmanaged-short>D2D1_SUBPROPERTY</unmanaged-short>	
    public enum SubProperty : int {	
        
        /// <summary>	
        /// <dd> <p>Edges are antialiased using the Direct2D per-primitive method of high-quality antialiasing.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SUBPROPERTY_DISPLAYNAME']/*"/>	
        /// <msdn-id>dd368061</msdn-id>	
        /// <unmanaged>D2D1_SUBPROPERTY_DISPLAYNAME</unmanaged>	
        /// <unmanaged-short>D2D1_SUBPROPERTY_DISPLAYNAME</unmanaged-short>	
        DisplayName = unchecked((int)-2147483648),			
        
        /// <summary>	
        /// <dd> <p>Objects are aliased in most cases. Objects are antialiased only when they are drawn to a render target created by the <strong>CreateDxgiSurfaceRenderTarget</strong> method and  Direct3D multisampling has been enabled on the backing DirectX Graphics Infrastructure (DXGI) surface. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SUBPROPERTY_ISREADONLY']/*"/>	
        /// <msdn-id>dd368061</msdn-id>	
        /// <unmanaged>D2D1_SUBPROPERTY_ISREADONLY</unmanaged>	
        /// <unmanaged-short>D2D1_SUBPROPERTY_ISREADONLY</unmanaged-short>	
        Isreadonly = unchecked((int)-2147483647),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SUBPROPERTY_MIN']/*"/>	
        /// <msdn-id>dd368061</msdn-id>	
        /// <unmanaged>D2D1_SUBPROPERTY_MIN</unmanaged>	
        /// <unmanaged-short>D2D1_SUBPROPERTY_MIN</unmanaged-short>	
        Minimum = unchecked((int)-2147483646),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SUBPROPERTY_MAX']/*"/>	
        /// <msdn-id>dd368061</msdn-id>	
        /// <unmanaged>D2D1_SUBPROPERTY_MAX</unmanaged>	
        /// <unmanaged-short>D2D1_SUBPROPERTY_MAX</unmanaged-short>	
        Maximum = unchecked((int)-2147483645),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SUBPROPERTY_DEFAULT']/*"/>	
        /// <msdn-id>dd368061</msdn-id>	
        /// <unmanaged>D2D1_SUBPROPERTY_DEFAULT</unmanaged>	
        /// <unmanaged-short>D2D1_SUBPROPERTY_DEFAULT</unmanaged-short>	
        Default = unchecked((int)-2147483644),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SUBPROPERTY_FIELDS']/*"/>	
        /// <msdn-id>dd368061</msdn-id>	
        /// <unmanaged>D2D1_SUBPROPERTY_FIELDS</unmanaged>	
        /// <unmanaged-short>D2D1_SUBPROPERTY_FIELDS</unmanaged-short>	
        Fields = unchecked((int)-2147483643),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SUBPROPERTY_INDEX']/*"/>	
        /// <msdn-id>dd368061</msdn-id>	
        /// <unmanaged>D2D1_SUBPROPERTY_INDEX</unmanaged>	
        /// <unmanaged-short>D2D1_SUBPROPERTY_INDEX</unmanaged-short>	
        Index = unchecked((int)-2147483642),			
    }
    
    /// <summary>	
    /// <p>Defines the direction that an elliptical arc is drawn.  </p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SWEEP_DIRECTION']/*"/>	
    /// <msdn-id>dd368166</msdn-id>	
    /// <unmanaged>D2D1_SWEEP_DIRECTION</unmanaged>	
    /// <unmanaged-short>D2D1_SWEEP_DIRECTION</unmanaged-short>	
    public enum SweepDirection : int {	
        
        /// <summary>	
        /// <dd> <p> Arcs are drawn in a counterclockwise (negative-angle) direction. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SWEEP_DIRECTION_COUNTER_CLOCKWISE']/*"/>	
        /// <msdn-id>dd368166</msdn-id>	
        /// <unmanaged>D2D1_SWEEP_DIRECTION_COUNTER_CLOCKWISE</unmanaged>	
        /// <unmanaged-short>D2D1_SWEEP_DIRECTION_COUNTER_CLOCKWISE</unmanaged-short>	
        CounterClockwise = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p> Arcs are drawn in a clockwise (positive-angle) direction. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_SWEEP_DIRECTION_CLOCKWISE']/*"/>	
        /// <msdn-id>dd368166</msdn-id>	
        /// <unmanaged>D2D1_SWEEP_DIRECTION_CLOCKWISE</unmanaged>	
        /// <unmanaged-short>D2D1_SWEEP_DIRECTION_CLOCKWISE</unmanaged-short>	
        Clockwise = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Use the table  transfer effect to map the color intensities of an image using a  transfer function created from interpolating a list of values you provide.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.TableTransfer"/>.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TABLETRANSFER_PROP']/*"/>	
    /// <msdn-id>hh706373</msdn-id>	
    /// <unmanaged>D2D1_TABLETRANSFER_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_TABLETRANSFER_PROP</unmanaged-short>	
    public enum TableTransferProperties : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TABLETRANSFER_PROP_RED_TABLE']/*"/>	
        /// <msdn-id>hh706373</msdn-id>	
        /// <unmanaged>D2D1_TABLETRANSFER_PROP_RED_TABLE</unmanaged>	
        /// <unmanaged-short>D2D1_TABLETRANSFER_PROP_RED_TABLE</unmanaged-short>	
        RedTable = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TABLETRANSFER_PROP_RED_DISABLE']/*"/>	
        /// <msdn-id>hh706373</msdn-id>	
        /// <unmanaged>D2D1_TABLETRANSFER_PROP_RED_DISABLE</unmanaged>	
        /// <unmanaged-short>D2D1_TABLETRANSFER_PROP_RED_DISABLE</unmanaged-short>	
        RedDisable = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TABLETRANSFER_PROP_GREEN_TABLE']/*"/>	
        /// <msdn-id>hh706373</msdn-id>	
        /// <unmanaged>D2D1_TABLETRANSFER_PROP_GREEN_TABLE</unmanaged>	
        /// <unmanaged-short>D2D1_TABLETRANSFER_PROP_GREEN_TABLE</unmanaged-short>	
        GreenTable = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TABLETRANSFER_PROP_GREEN_DISABLE']/*"/>	
        /// <msdn-id>hh706373</msdn-id>	
        /// <unmanaged>D2D1_TABLETRANSFER_PROP_GREEN_DISABLE</unmanaged>	
        /// <unmanaged-short>D2D1_TABLETRANSFER_PROP_GREEN_DISABLE</unmanaged-short>	
        GreenDisable = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TABLETRANSFER_PROP_BLUE_TABLE']/*"/>	
        /// <msdn-id>hh706373</msdn-id>	
        /// <unmanaged>D2D1_TABLETRANSFER_PROP_BLUE_TABLE</unmanaged>	
        /// <unmanaged-short>D2D1_TABLETRANSFER_PROP_BLUE_TABLE</unmanaged-short>	
        BlueTable = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TABLETRANSFER_PROP_BLUE_DISABLE']/*"/>	
        /// <msdn-id>hh706373</msdn-id>	
        /// <unmanaged>D2D1_TABLETRANSFER_PROP_BLUE_DISABLE</unmanaged>	
        /// <unmanaged-short>D2D1_TABLETRANSFER_PROP_BLUE_DISABLE</unmanaged-short>	
        BlueDisable = unchecked((int)5),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TABLETRANSFER_PROP_ALPHA_TABLE']/*"/>	
        /// <msdn-id>hh706373</msdn-id>	
        /// <unmanaged>D2D1_TABLETRANSFER_PROP_ALPHA_TABLE</unmanaged>	
        /// <unmanaged-short>D2D1_TABLETRANSFER_PROP_ALPHA_TABLE</unmanaged-short>	
        AlphaTable = unchecked((int)6),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TABLETRANSFER_PROP_ALPHA_DISABLE']/*"/>	
        /// <msdn-id>hh706373</msdn-id>	
        /// <unmanaged>D2D1_TABLETRANSFER_PROP_ALPHA_DISABLE</unmanaged>	
        /// <unmanaged-short>D2D1_TABLETRANSFER_PROP_ALPHA_DISABLE</unmanaged-short>	
        AlphaDisable = unchecked((int)7),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TABLETRANSFER_PROP_CLAMP_OUTPUT']/*"/>	
        /// <msdn-id>hh706373</msdn-id>	
        /// <unmanaged>D2D1_TABLETRANSFER_PROP_CLAMP_OUTPUT</unmanaged>	
        /// <unmanaged-short>D2D1_TABLETRANSFER_PROP_CLAMP_OUTPUT</unmanaged-short>	
        ClampOutput = unchecked((int)8),			
    }
    
    /// <summary>	
    /// <p>Identifiers for properties of the Temperature and Tint effect.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TEMPERATUREANDTINT_PROP']/*"/>	
    /// <msdn-id>dn890749</msdn-id>	
    /// <unmanaged>D2D1_TEMPERATUREANDTINT_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_TEMPERATUREANDTINT_PROP</unmanaged-short>	
    public enum TemperatureAndTintProperty : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TEMPERATUREANDTINT_PROP_TEMPERATURE']/*"/>	
        /// <msdn-id>dn890749</msdn-id>	
        /// <unmanaged>D2D1_TEMPERATUREANDTINT_PROP_TEMPERATURE</unmanaged>	
        /// <unmanaged-short>D2D1_TEMPERATUREANDTINT_PROP_TEMPERATURE</unmanaged-short>	
        Temperature = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TEMPERATUREANDTINT_PROP_TINT']/*"/>	
        /// <msdn-id>dn890749</msdn-id>	
        /// <unmanaged>D2D1_TEMPERATUREANDTINT_PROP_TINT</unmanaged>	
        /// <unmanaged-short>D2D1_TEMPERATUREANDTINT_PROP_TINT</unmanaged-short>	
        Tint = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Describes the antialiasing mode used for drawing text. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This enumeration is used with the <strong>SetTextAntialiasMode</strong> of an <strong><see cref="SharpDX.Direct2D1.RenderTarget"/></strong> to specify how text and glyphs are antialiased.</p><p> By default, Direct2D renders text in ClearType mode. Factors that  can downgrade the default quality to grayscale or aliased:</p><ul> <li>If the <strong><see cref="SharpDX.DirectWrite.RenderingMode"/></strong> value  is <strong><see cref="SharpDX.DirectWrite.RenderingMode.Aliased"/> </strong>, then the  default text antialiasing mode is aliased.  To change the DirectWrite rendering mode of an <strong><see cref="SharpDX.Direct2D1.RenderTarget"/></strong>, use the  <strong><see cref="SharpDX.Direct2D1.RenderTarget.SetTextRenderingParams"/></strong> method. </li> <li>If the <strong><see cref="SharpDX.DirectWrite.RenderingMode"/></strong> value is <strong><see cref="SharpDX.DirectWrite.RenderingMode.Outline"/></strong>, then the default text  antialiasing mode is grayscale.</li> <li>If the render target has an alpha channel and is not set to <strong><see cref="SharpDX.Direct2D1.AlphaMode.Ignore"/></strong>, then  the default text antialiasing mode is grayscale.</li> <li>If <strong><see cref="SharpDX.Direct2D1.RenderTarget.PushLayer"/></strong> is called without <strong><see cref="SharpDX.Direct2D1.LayerOptions.InitializeForCleartype"/></strong> (and the corresponding <strong>PopLayer</strong> has not  been called yet), then the default text  antialiasing mode is grayscale.</li> </ul>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TEXT_ANTIALIAS_MODE']/*"/>	
    /// <msdn-id>dd368170</msdn-id>	
    /// <unmanaged>D2D1_TEXT_ANTIALIAS_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_TEXT_ANTIALIAS_MODE</unmanaged-short>	
    public enum TextAntialiasMode : int {	
        
        /// <summary>	
        /// <dd> <p>Use the system default. See Remarks.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TEXT_ANTIALIAS_MODE_DEFAULT']/*"/>	
        /// <msdn-id>dd368170</msdn-id>	
        /// <unmanaged>D2D1_TEXT_ANTIALIAS_MODE_DEFAULT</unmanaged>	
        /// <unmanaged-short>D2D1_TEXT_ANTIALIAS_MODE_DEFAULT</unmanaged-short>	
        Default = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Use ClearType antialiasing.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TEXT_ANTIALIAS_MODE_CLEARTYPE']/*"/>	
        /// <msdn-id>dd368170</msdn-id>	
        /// <unmanaged>D2D1_TEXT_ANTIALIAS_MODE_CLEARTYPE</unmanaged>	
        /// <unmanaged-short>D2D1_TEXT_ANTIALIAS_MODE_CLEARTYPE</unmanaged-short>	
        Cleartype = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Use grayscale antialiasing.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TEXT_ANTIALIAS_MODE_GRAYSCALE']/*"/>	
        /// <msdn-id>dd368170</msdn-id>	
        /// <unmanaged>D2D1_TEXT_ANTIALIAS_MODE_GRAYSCALE</unmanaged>	
        /// <unmanaged-short>D2D1_TEXT_ANTIALIAS_MODE_GRAYSCALE</unmanaged-short>	
        Grayscale = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Do not use antialiasing.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TEXT_ANTIALIAS_MODE_ALIASED']/*"/>	
        /// <msdn-id>dd368170</msdn-id>	
        /// <unmanaged>D2D1_TEXT_ANTIALIAS_MODE_ALIASED</unmanaged>	
        /// <unmanaged-short>D2D1_TEXT_ANTIALIAS_MODE_ALIASED</unmanaged-short>	
        Aliased = unchecked((int)3),			
    }
    
    /// <summary>	
    /// <p>Specifies the threading mode used while simultaneously creating the device, factory, and device context.	
    /// </p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_THREADING_MODE']/*"/>	
    /// <msdn-id>hh447020</msdn-id>	
    /// <unmanaged>D2D1_THREADING_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_THREADING_MODE</unmanaged-short>	
    public enum ThreadingMode : int {	
        
        /// <summary>	
        /// <dd> <p>Resources may only be invoked serially.  Device context state is not protected from multi-threaded access. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_THREADING_MODE_SINGLE_THREADED']/*"/>	
        /// <msdn-id>hh447020</msdn-id>	
        /// <unmanaged>D2D1_THREADING_MODE_SINGLE_THREADED</unmanaged>	
        /// <unmanaged-short>D2D1_THREADING_MODE_SINGLE_THREADED</unmanaged-short>	
        SingleThreaded = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Resources may be invoked from multiple threads. Resources use interlocked reference counting and their state is protected.	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_THREADING_MODE_MULTI_THREADED']/*"/>	
        /// <msdn-id>hh447020</msdn-id>	
        /// <unmanaged>D2D1_THREADING_MODE_MULTI_THREADED</unmanaged>	
        /// <unmanaged-short>D2D1_THREADING_MODE_MULTI_THREADED</unmanaged-short>	
        MultiThreaded = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Use the tile effect to repeat the specified region of the image.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.Tile"/>.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TILE_PROP']/*"/>	
    /// <msdn-id>hh706374</msdn-id>	
    /// <unmanaged>D2D1_TILE_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_TILE_PROP</unmanaged-short>	
    public enum TileProperties : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TILE_PROP_RECT']/*"/>	
        /// <msdn-id>hh706374</msdn-id>	
        /// <unmanaged>D2D1_TILE_PROP_RECT</unmanaged>	
        /// <unmanaged-short>D2D1_TILE_PROP_RECT</unmanaged-short>	
        Rectangle = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Use the 3D perspective transform effect to rotate the image in 3 dimensions as if viewed from a distance.</p><p>The 3D perspective transform is more convenient than the 3D transform effect, but only exposes a subset of the functionality. You can compute a full 3D transformation matrix and apply  a more arbitrary transform matrix to an image using the 3D transform effect.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.PerspectiveTransform3D"/>.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Interpolation</li> <li>Border</li> <li>Output</li> <li>Sample</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_3DTRANSFORM_INTERPOLATION_MODE']/*"/>	
    /// <msdn-id>Hh706310</msdn-id>	
    /// <unmanaged>D2D1_3DTRANSFORM_INTERPOLATION_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_3DTRANSFORM_INTERPOLATION_MODE</unmanaged-short>	
    public enum Transform3DInterpolationMode : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_3DTRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR']/*"/>	
        /// <msdn-id>Hh706310</msdn-id>	
        /// <unmanaged>D2D1_3DTRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>	
        /// <unmanaged-short>D2D1_3DTRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged-short>	
        NearestNeighbor = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_3DTRANSFORM_INTERPOLATION_MODE_LINEAR']/*"/>	
        /// <msdn-id>Hh706310</msdn-id>	
        /// <unmanaged>D2D1_3DTRANSFORM_INTERPOLATION_MODE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_3DTRANSFORM_INTERPOLATION_MODE_LINEAR</unmanaged-short>	
        Linear = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_3DTRANSFORM_INTERPOLATION_MODE_CUBIC']/*"/>	
        /// <msdn-id>Hh706310</msdn-id>	
        /// <unmanaged>D2D1_3DTRANSFORM_INTERPOLATION_MODE_CUBIC</unmanaged>	
        /// <unmanaged-short>D2D1_3DTRANSFORM_INTERPOLATION_MODE_CUBIC</unmanaged-short>	
        Cubic = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_3DTRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR']/*"/>	
        /// <msdn-id>Hh706310</msdn-id>	
        /// <unmanaged>D2D1_3DTRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_3DTRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>	
        MultiSampleLinear = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_3DTRANSFORM_INTERPOLATION_MODE_ANISOTROPIC']/*"/>	
        /// <msdn-id>Hh706310</msdn-id>	
        /// <unmanaged>D2D1_3DTRANSFORM_INTERPOLATION_MODE_ANISOTROPIC</unmanaged>	
        /// <unmanaged-short>D2D1_3DTRANSFORM_INTERPOLATION_MODE_ANISOTROPIC</unmanaged-short>	
        Anisotropic = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p>Use the 3D perspective transform effect to rotate the image in 3 dimensions as if viewed from a distance.</p><p>The 3D perspective transform is more convenient than the 3D transform effect, but only exposes a subset of the functionality. You can compute a full 3D transformation matrix and apply  a more arbitrary transform matrix to an image using the 3D transform effect.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.PerspectiveTransform3D"/>.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Interpolation</li> <li>Border</li> <li>Output</li> <li>Sample</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_3DTRANSFORM_PROP']/*"/>	
    /// <msdn-id>Hh706310</msdn-id>	
    /// <unmanaged>D2D1_3DTRANSFORM_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_3DTRANSFORM_PROP</unmanaged-short>	
    public enum Transform3DProperties : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_3DTRANSFORM_PROP_INTERPOLATION_MODE']/*"/>	
        /// <msdn-id>Hh706310</msdn-id>	
        /// <unmanaged>D2D1_3DTRANSFORM_PROP_INTERPOLATION_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_3DTRANSFORM_PROP_INTERPOLATION_MODE</unmanaged-short>	
        InterpolationMode = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_3DTRANSFORM_PROP_BORDER_MODE']/*"/>	
        /// <msdn-id>Hh706310</msdn-id>	
        /// <unmanaged>D2D1_3DTRANSFORM_PROP_BORDER_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_3DTRANSFORM_PROP_BORDER_MODE</unmanaged-short>	
        BorderMode = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_3DTRANSFORM_PROP_TRANSFORM_MATRIX']/*"/>	
        /// <msdn-id>Hh706310</msdn-id>	
        /// <unmanaged>D2D1_3DTRANSFORM_PROP_TRANSFORM_MATRIX</unmanaged>	
        /// <unmanaged-short>D2D1_3DTRANSFORM_PROP_TRANSFORM_MATRIX</unmanaged-short>	
        TransformMatrix = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Option flags for transformed image sources.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS']/*"/>	
    /// <msdn-id>dn934270</msdn-id>	
    /// <unmanaged>D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS</unmanaged>	
    /// <unmanaged-short>D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS</unmanaged-short>	
    [Flags]
    public enum TransformedImageSourceOptions : int {	
        
        /// <summary>	
        /// <dd></dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_NONE']/*"/>	
        /// <msdn-id>dn934270</msdn-id>	
        /// <unmanaged>D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_NONE</unmanaged>	
        /// <unmanaged-short>D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_NONE</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Prevents the image source from being automatically scaled (by a ratio of the context DPI divided by 96) while drawn.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_DISABLE_DPI_SCALE']/*"/>	
        /// <msdn-id>dn934270</msdn-id>	
        /// <unmanaged>D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_DISABLE_DPI_SCALE</unmanaged>	
        /// <unmanaged-short>D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_DISABLE_DPI_SCALE</unmanaged-short>	
        DisableDpiScale = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Use the turbulence effect to generate a bitmap based on the Perlin noise function.</p><p>The turbulence effect has no input image.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.Turbulence"/>.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Noise</li> <li>Output</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TURBULENCE_NOISE']/*"/>	
    /// <msdn-id>hh706378</msdn-id>	
    /// <unmanaged>D2D1_TURBULENCE_NOISE</unmanaged>	
    /// <unmanaged-short>D2D1_TURBULENCE_NOISE</unmanaged-short>	
    public enum TurbulenceNoise : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TURBULENCE_NOISE_FRACTAL_SUM']/*"/>	
        /// <msdn-id>hh706378</msdn-id>	
        /// <unmanaged>D2D1_TURBULENCE_NOISE_FRACTAL_SUM</unmanaged>	
        /// <unmanaged-short>D2D1_TURBULENCE_NOISE_FRACTAL_SUM</unmanaged-short>	
        FractalSum = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TURBULENCE_NOISE_TURBULENCE']/*"/>	
        /// <msdn-id>hh706378</msdn-id>	
        /// <unmanaged>D2D1_TURBULENCE_NOISE_TURBULENCE</unmanaged>	
        /// <unmanaged-short>D2D1_TURBULENCE_NOISE_TURBULENCE</unmanaged-short>	
        Turbulence = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Use the turbulence effect to generate a bitmap based on the Perlin noise function.</p><p>The turbulence effect has no input image.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.Turbulence"/>.</p><p> </p><ul> <li>Example</li> <li>Effect</li> <li>Noise</li> <li>Output</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TURBULENCE_PROP']/*"/>	
    /// <msdn-id>hh706378</msdn-id>	
    /// <unmanaged>D2D1_TURBULENCE_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_TURBULENCE_PROP</unmanaged-short>	
    public enum TurbulenceProperties : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TURBULENCE_PROP_OFFSET']/*"/>	
        /// <msdn-id>hh706378</msdn-id>	
        /// <unmanaged>D2D1_TURBULENCE_PROP_OFFSET</unmanaged>	
        /// <unmanaged-short>D2D1_TURBULENCE_PROP_OFFSET</unmanaged-short>	
        Offset = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TURBULENCE_PROP_SIZE']/*"/>	
        /// <msdn-id>hh706378</msdn-id>	
        /// <unmanaged>D2D1_TURBULENCE_PROP_SIZE</unmanaged>	
        /// <unmanaged-short>D2D1_TURBULENCE_PROP_SIZE</unmanaged-short>	
        Size = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TURBULENCE_PROP_BASE_FREQUENCY']/*"/>	
        /// <msdn-id>hh706378</msdn-id>	
        /// <unmanaged>D2D1_TURBULENCE_PROP_BASE_FREQUENCY</unmanaged>	
        /// <unmanaged-short>D2D1_TURBULENCE_PROP_BASE_FREQUENCY</unmanaged-short>	
        BaseFrequency = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TURBULENCE_PROP_NUM_OCTAVES']/*"/>	
        /// <msdn-id>hh706378</msdn-id>	
        /// <unmanaged>D2D1_TURBULENCE_PROP_NUM_OCTAVES</unmanaged>	
        /// <unmanaged-short>D2D1_TURBULENCE_PROP_NUM_OCTAVES</unmanaged-short>	
        NumOctaves = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TURBULENCE_PROP_SEED']/*"/>	
        /// <msdn-id>hh706378</msdn-id>	
        /// <unmanaged>D2D1_TURBULENCE_PROP_SEED</unmanaged>	
        /// <unmanaged-short>D2D1_TURBULENCE_PROP_SEED</unmanaged-short>	
        Seed = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TURBULENCE_PROP_NOISE']/*"/>	
        /// <msdn-id>hh706378</msdn-id>	
        /// <unmanaged>D2D1_TURBULENCE_PROP_NOISE</unmanaged>	
        /// <unmanaged-short>D2D1_TURBULENCE_PROP_NOISE</unmanaged-short>	
        Noise = unchecked((int)5),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_TURBULENCE_PROP_STITCHABLE']/*"/>	
        /// <msdn-id>hh706378</msdn-id>	
        /// <unmanaged>D2D1_TURBULENCE_PROP_STITCHABLE</unmanaged>	
        /// <unmanaged-short>D2D1_TURBULENCE_PROP_STITCHABLE</unmanaged-short>	
        Stitchable = unchecked((int)6),			
    }
    
    /// <summary>	
    /// <p>Specifies how units in Direct2D will be interpreted.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Setting the unit mode to <strong><see cref="SharpDX.Direct2D1.UnitMode.Pixels"/></strong> is similar to setting the <strong><see cref="SharpDX.Direct2D1.DeviceContext"/></strong> dots per inch (dpi) to 96. However, Direct2D still checks the dpi to determine the threshold for enabling vertical antialiasing for text, and when the unit mode is restored, the dpi will be remembered.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_UNIT_MODE']/*"/>	
    /// <msdn-id>hh447022</msdn-id>	
    /// <unmanaged>D2D1_UNIT_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_UNIT_MODE</unmanaged-short>	
    public enum UnitMode : int {	
        
        /// <summary>	
        /// <dd> <p>Units will be interpreted as device-independent pixels (1/96").</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_UNIT_MODE_DIPS']/*"/>	
        /// <msdn-id>hh447022</msdn-id>	
        /// <unmanaged>D2D1_UNIT_MODE_DIPS</unmanaged>	
        /// <unmanaged-short>D2D1_UNIT_MODE_DIPS</unmanaged-short>	
        Dips = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Units will be interpreted as pixels.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_UNIT_MODE_PIXELS']/*"/>	
        /// <msdn-id>hh447022</msdn-id>	
        /// <unmanaged>D2D1_UNIT_MODE_PIXELS</unmanaged>	
        /// <unmanaged-short>D2D1_UNIT_MODE_PIXELS</unmanaged-short>	
        Pixels = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Describes flags that influence how the renderer interacts with a custom vertex shader.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_VERTEX_OPTIONS']/*"/>	
    /// <msdn-id>hh404332</msdn-id>	
    /// <unmanaged>D2D1_VERTEX_OPTIONS</unmanaged>	
    /// <unmanaged-short>D2D1_VERTEX_OPTIONS</unmanaged-short>	
    [Flags]
    public enum VertexOptions : int {	
        
        /// <summary>	
        /// <dd> <p>The logical equivalent of having no flags set.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_VERTEX_OPTIONS_NONE']/*"/>	
        /// <msdn-id>hh404332</msdn-id>	
        /// <unmanaged>D2D1_VERTEX_OPTIONS_NONE</unmanaged>	
        /// <unmanaged-short>D2D1_VERTEX_OPTIONS_NONE</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>If this flag is set, the renderer  assumes that the vertex shader will cover the entire region of interest with vertices and need not clear the destination render target. If this flag is not set, the renderer assumes that the vertices do not cover the entire region interest and must clear the render target to transparent black first.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_VERTEX_OPTIONS_DO_NOT_CLEAR']/*"/>	
        /// <msdn-id>hh404332</msdn-id>	
        /// <unmanaged>D2D1_VERTEX_OPTIONS_DO_NOT_CLEAR</unmanaged>	
        /// <unmanaged-short>D2D1_VERTEX_OPTIONS_DO_NOT_CLEAR</unmanaged-short>	
        DoNotClear = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The renderer will use a depth buffer when rendering custom vertices. The depth buffer will be used for calculating occlusion information. This can result in the renderer output being draw-order dependent if it contains transparency.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_VERTEX_OPTIONS_USE_DEPTH_BUFFER']/*"/>	
        /// <msdn-id>hh404332</msdn-id>	
        /// <unmanaged>D2D1_VERTEX_OPTIONS_USE_DEPTH_BUFFER</unmanaged>	
        /// <unmanaged-short>D2D1_VERTEX_OPTIONS_USE_DEPTH_BUFFER</unmanaged-short>	
        UseDepthBuffer = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Indicates that custom vertices do not overlap each other.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_VERTEX_OPTIONS_ASSUME_NO_OVERLAP']/*"/>	
        /// <msdn-id>hh404332</msdn-id>	
        /// <unmanaged>D2D1_VERTEX_OPTIONS_ASSUME_NO_OVERLAP</unmanaged>	
        /// <unmanaged-short>D2D1_VERTEX_OPTIONS_ASSUME_NO_OVERLAP</unmanaged-short>	
        AssumeNoOverlap = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p>Indicates whether the vertex buffer changes infrequently or frequently.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>If a dynamic vertex buffer is created, Direct2D will not necessarily map the buffer directly to a Direct3D vertex buffer. Instead, a system memory copy can be copied to the rendering engine vertex buffer as the effects are rendered.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_VERTEX_USAGE']/*"/>	
    /// <msdn-id>hh404337</msdn-id>	
    /// <unmanaged>D2D1_VERTEX_USAGE</unmanaged>	
    /// <unmanaged-short>D2D1_VERTEX_USAGE</unmanaged-short>	
    public enum VertexUsage : int {	
        
        /// <summary>	
        /// <dd> <p>The created vertex buffer is updated infrequently.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_VERTEX_USAGE_STATIC']/*"/>	
        /// <msdn-id>hh404337</msdn-id>	
        /// <unmanaged>D2D1_VERTEX_USAGE_STATIC</unmanaged>	
        /// <unmanaged-short>D2D1_VERTEX_USAGE_STATIC</unmanaged-short>	
        Static = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The created vertex buffer is changed frequently.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_VERTEX_USAGE_DYNAMIC']/*"/>	
        /// <msdn-id>hh404337</msdn-id>	
        /// <unmanaged>D2D1_VERTEX_USAGE_DYNAMIC</unmanaged>	
        /// <unmanaged-short>D2D1_VERTEX_USAGE_DYNAMIC</unmanaged-short>	
        Dynamic = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Identifiers for properties of the Vignette effect.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_VIGNETTE_PROP']/*"/>	
    /// <msdn-id>dn890750</msdn-id>	
    /// <unmanaged>D2D1_VIGNETTE_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_VIGNETTE_PROP</unmanaged-short>	
    public enum VignetteProperty : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_VIGNETTE_PROP_COLOR']/*"/>	
        /// <msdn-id>dn890750</msdn-id>	
        /// <unmanaged>D2D1_VIGNETTE_PROP_COLOR</unmanaged>	
        /// <unmanaged-short>D2D1_VIGNETTE_PROP_COLOR</unmanaged-short>	
        Color = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_VIGNETTE_PROP_TRANSITION_SIZE']/*"/>	
        /// <msdn-id>dn890750</msdn-id>	
        /// <unmanaged>D2D1_VIGNETTE_PROP_TRANSITION_SIZE</unmanaged>	
        /// <unmanaged-short>D2D1_VIGNETTE_PROP_TRANSITION_SIZE</unmanaged-short>	
        TransitionSize = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_VIGNETTE_PROP_STRENGTH']/*"/>	
        /// <msdn-id>dn890750</msdn-id>	
        /// <unmanaged>D2D1_VIGNETTE_PROP_STRENGTH</unmanaged>	
        /// <unmanaged-short>D2D1_VIGNETTE_PROP_STRENGTH</unmanaged-short>	
        Strength = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p>Describes whether a window is occluded. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>If the window was occluded the last time  <strong>EndDraw</strong> was called, the next time the render target calls <strong>CheckWindowState</strong>, it  returns <strong><see cref="SharpDX.Direct2D1.WindowState.Occluded"/></strong> regardless of the current window state. If you want to use <strong>CheckWindowState</strong> to check the current window state, call <strong>CheckWindowState</strong> after every <strong>EndDraw</strong> call and ignore its return value. This will ensure that your next call to <strong>CheckWindowState</strong> state  returns the actual window state.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_WINDOW_STATE']/*"/>	
    /// <msdn-id>dd368174</msdn-id>	
    /// <unmanaged>D2D1_WINDOW_STATE</unmanaged>	
    /// <unmanaged-short>D2D1_WINDOW_STATE</unmanaged-short>	
    public enum WindowState : int {	
        
        /// <summary>	
        /// <dd> <p>The window is not occluded.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_WINDOW_STATE_NONE']/*"/>	
        /// <msdn-id>dd368174</msdn-id>	
        /// <unmanaged>D2D1_WINDOW_STATE_NONE</unmanaged>	
        /// <unmanaged-short>D2D1_WINDOW_STATE_NONE</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The window is occluded.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_WINDOW_STATE_OCCLUDED']/*"/>	
        /// <msdn-id>dd368174</msdn-id>	
        /// <unmanaged>D2D1_WINDOW_STATE_OCCLUDED</unmanaged>	
        /// <unmanaged-short>D2D1_WINDOW_STATE_OCCLUDED</unmanaged-short>	
        Occluded = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Converts planar and chroma subsampled JPEG YCbCr data to RGB.  This effect assumes that the YCbCr data is formatted in compliance with the JPEG standard.  Data for the inputs may be obtained from <see cref="SharpDX.WIC.PlanarBitmapSourceTransform"/>.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.YCbCr"/>.</p><p> </p><ul> <li>Effect</li> <li>Subsampling</li> <li>Interpolation</li> <li>Output</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_YCBCR_CHROMA_SUBSAMPLING']/*"/>	
    /// <msdn-id>dn280624</msdn-id>	
    /// <unmanaged>D2D1_YCBCR_CHROMA_SUBSAMPLING</unmanaged>	
    /// <unmanaged-short>D2D1_YCBCR_CHROMA_SUBSAMPLING</unmanaged-short>	
    public enum YcbcrChromaSubSampling : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_YCBCR_CHROMA_SUBSAMPLING_AUTO']/*"/>	
        /// <msdn-id>dn280624</msdn-id>	
        /// <unmanaged>D2D1_YCBCR_CHROMA_SUBSAMPLING_AUTO</unmanaged>	
        /// <unmanaged-short>D2D1_YCBCR_CHROMA_SUBSAMPLING_AUTO</unmanaged-short>	
        Auto = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_YCBCR_CHROMA_SUBSAMPLING_420']/*"/>	
        /// <msdn-id>dn280624</msdn-id>	
        /// <unmanaged>D2D1_YCBCR_CHROMA_SUBSAMPLING_420</unmanaged>	
        /// <unmanaged-short>D2D1_YCBCR_CHROMA_SUBSAMPLING_420</unmanaged-short>	
        Both = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_YCBCR_CHROMA_SUBSAMPLING_422']/*"/>	
        /// <msdn-id>dn280624</msdn-id>	
        /// <unmanaged>D2D1_YCBCR_CHROMA_SUBSAMPLING_422</unmanaged>	
        /// <unmanaged-short>D2D1_YCBCR_CHROMA_SUBSAMPLING_422</unmanaged-short>	
        Horizontal = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_YCBCR_CHROMA_SUBSAMPLING_444']/*"/>	
        /// <msdn-id>dn280624</msdn-id>	
        /// <unmanaged>D2D1_YCBCR_CHROMA_SUBSAMPLING_444</unmanaged>	
        /// <unmanaged-short>D2D1_YCBCR_CHROMA_SUBSAMPLING_444</unmanaged-short>	
        None = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_YCBCR_CHROMA_SUBSAMPLING_440']/*"/>	
        /// <msdn-id>dn280624</msdn-id>	
        /// <unmanaged>D2D1_YCBCR_CHROMA_SUBSAMPLING_440</unmanaged>	
        /// <unmanaged-short>D2D1_YCBCR_CHROMA_SUBSAMPLING_440</unmanaged-short>	
        Vertical = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p>Converts planar and chroma subsampled JPEG YCbCr data to RGB.  This effect assumes that the YCbCr data is formatted in compliance with the JPEG standard.  Data for the inputs may be obtained from <see cref="SharpDX.WIC.PlanarBitmapSourceTransform"/>.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.YCbCr"/>.</p><p> </p><ul> <li>Effect</li> <li>Subsampling</li> <li>Interpolation</li> <li>Output</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_YCBCR_INTERPOLATION_MODE']/*"/>	
    /// <msdn-id>dn280624</msdn-id>	
    /// <unmanaged>D2D1_YCBCR_INTERPOLATION_MODE</unmanaged>	
    /// <unmanaged-short>D2D1_YCBCR_INTERPOLATION_MODE</unmanaged-short>	
    public enum YcbcrInterpolationMode : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_YCBCR_INTERPOLATION_MODE_NEAREST_NEIGHBOR']/*"/>	
        /// <msdn-id>dn280624</msdn-id>	
        /// <unmanaged>D2D1_YCBCR_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged>	
        /// <unmanaged-short>D2D1_YCBCR_INTERPOLATION_MODE_NEAREST_NEIGHBOR</unmanaged-short>	
        NearestNeighbor = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_YCBCR_INTERPOLATION_MODE_LINEAR']/*"/>	
        /// <msdn-id>dn280624</msdn-id>	
        /// <unmanaged>D2D1_YCBCR_INTERPOLATION_MODE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_YCBCR_INTERPOLATION_MODE_LINEAR</unmanaged-short>	
        Linear = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_YCBCR_INTERPOLATION_MODE_CUBIC']/*"/>	
        /// <msdn-id>dn280624</msdn-id>	
        /// <unmanaged>D2D1_YCBCR_INTERPOLATION_MODE_CUBIC</unmanaged>	
        /// <unmanaged-short>D2D1_YCBCR_INTERPOLATION_MODE_CUBIC</unmanaged-short>	
        Cubic = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_YCBCR_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR']/*"/>	
        /// <msdn-id>dn280624</msdn-id>	
        /// <unmanaged>D2D1_YCBCR_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged>	
        /// <unmanaged-short>D2D1_YCBCR_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR</unmanaged-short>	
        MultiSampleLinear = unchecked((int)3),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_YCBCR_INTERPOLATION_MODE_ANISOTROPIC']/*"/>	
        /// <msdn-id>dn280624</msdn-id>	
        /// <unmanaged>D2D1_YCBCR_INTERPOLATION_MODE_ANISOTROPIC</unmanaged>	
        /// <unmanaged-short>D2D1_YCBCR_INTERPOLATION_MODE_ANISOTROPIC</unmanaged-short>	
        Anisotropic = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_YCBCR_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC']/*"/>	
        /// <msdn-id>dn280624</msdn-id>	
        /// <unmanaged>D2D1_YCBCR_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged>	
        /// <unmanaged-short>D2D1_YCBCR_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC</unmanaged-short>	
        HighQualityCubic = unchecked((int)5),			
    }
    
    /// <summary>	
    /// <p>Converts planar and chroma subsampled JPEG YCbCr data to RGB.  This effect assumes that the YCbCr data is formatted in compliance with the JPEG standard.  Data for the inputs may be obtained from <see cref="SharpDX.WIC.PlanarBitmapSourceTransform"/>.</p><p>The CLSID for this effect is <see cref="SharpDX.Direct2D1.Effect.YCbCr"/>.</p><p> </p><ul> <li>Effect</li> <li>Subsampling</li> <li>Interpolation</li> <li>Output</li> <li>Requirements</li> <li>Related</li> </ul>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_YCBCR_PROP']/*"/>	
    /// <msdn-id>dn280624</msdn-id>	
    /// <unmanaged>D2D1_YCBCR_PROP</unmanaged>	
    /// <unmanaged-short>D2D1_YCBCR_PROP</unmanaged-short>	
    public enum YCbCrProperties : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_YCBCR_PROP_CHROMA_SUBSAMPLING']/*"/>	
        /// <msdn-id>dn280624</msdn-id>	
        /// <unmanaged>D2D1_YCBCR_PROP_CHROMA_SUBSAMPLING</unmanaged>	
        /// <unmanaged-short>D2D1_YCBCR_PROP_CHROMA_SUBSAMPLING</unmanaged-short>	
        ChromaSubSampling = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_YCBCR_PROP_TRANSFORM_MATRIX']/*"/>	
        /// <msdn-id>dn280624</msdn-id>	
        /// <unmanaged>D2D1_YCBCR_PROP_TRANSFORM_MATRIX</unmanaged>	
        /// <unmanaged-short>D2D1_YCBCR_PROP_TRANSFORM_MATRIX</unmanaged-short>	
        TransformMatrix = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D2D1_YCBCR_PROP_INTERPOLATION_MODE']/*"/>	
        /// <msdn-id>dn280624</msdn-id>	
        /// <unmanaged>D2D1_YCBCR_PROP_INTERPOLATION_MODE</unmanaged>	
        /// <unmanaged-short>D2D1_YCBCR_PROP_INTERPOLATION_MODE</unmanaged-short>	
        InterpolationMode = unchecked((int)2),			
    }
}
