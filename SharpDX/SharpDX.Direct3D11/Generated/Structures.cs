// Copyright (c) 2010-2014 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Types declaration for SharpDX.Direct3D11 namespace.
//     This code was generated by a tool.
//     Date : 6/25/2016 10:38:08 PM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
namespace SharpDX.Direct3D11 {

#pragma warning disable 282
#pragma warning disable 649
#pragma warning disable 419
#pragma warning disable 1587
#pragma warning disable 1574
    
    /// <summary>	
    /// <p>Contains an initialization vector (IV) for 128-bit Advanced Encryption Standard CTR mode (AES-CTR) block cipher encryption. </p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AES_CTR_IV']/*"/>	
    /// <msdn-id>hh447597</msdn-id>	
    /// <unmanaged>D3D11_AES_CTR_IV</unmanaged>	
    /// <unmanaged-short>D3D11_AES_CTR_IV</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct AesCtrIv {	
        
        /// <summary>	
        /// <dd> <p>The IV, in big-endian format.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AES_CTR_IV::IV']/*"/>	
        /// <msdn-id>hh447597</msdn-id>	
        /// <unmanaged>unsigned longlong IV</unmanaged>	
        /// <unmanaged-short>unsigned longlong IV</unmanaged-short>	
        public long Iv;
        
        /// <summary>	
        /// <dd> <p>The block count, in big-endian format.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AES_CTR_IV::Count']/*"/>	
        /// <msdn-id>hh447597</msdn-id>	
        /// <unmanaged>unsigned longlong Count</unmanaged>	
        /// <unmanaged-short>unsigned longlong Count</unmanaged-short>	
        public long Count;
    }
    
    /// <summary>	
    /// <p>Contains input data for a <strong>D3D11_AUTHENTICATED_CONFIGURE_ENCRYPTION_WHEN_ACCESSIBLE</strong> command.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT']/*"/>	
    /// <msdn-id>hh447600</msdn-id>	
    /// <unmanaged>D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT</unmanaged>	
    /// <unmanaged-short>D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT</unmanaged-short>	
    public  partial struct AuthenticatedConfigureAccessibleEncryptionInput {	
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.AuthenticatedConfigureInput"/></strong> structure that contains the command <see cref="System.Guid"/> and other data. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT::Parameters']/*"/>	
        /// <msdn-id>hh447600</msdn-id>	
        /// <unmanaged>D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters</unmanaged>	
        /// <unmanaged-short>D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters</unmanaged-short>	
        public SharpDX.Direct3D11.AuthenticatedConfigureInput Parameters;
        
        /// <summary>	
        /// <dd> <p>A <see cref="System.Guid"/> that specifies the type of encryption to apply.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT::EncryptionGuid']/*"/>	
        /// <msdn-id>hh447600</msdn-id>	
        /// <unmanaged>GUID EncryptionGuid</unmanaged>	
        /// <unmanaged-short>GUID EncryptionGuid</unmanaged-short>	
        public System.Guid EncryptionGuid;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public SharpDX.Direct3D11.AuthenticatedConfigureInput.__Native Parameters;
            public System.Guid EncryptionGuid;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                this.Parameters.__MarshalFree();
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Parameters = new SharpDX.Direct3D11.AuthenticatedConfigureInput();
			this.Parameters.__MarshalFrom(ref @ref.Parameters);
            this.EncryptionGuid = @ref.EncryptionGuid;
        }
    }
    
    /// <summary>	
    /// <p>Contains input data for a <strong>D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION</strong> command.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT']/*"/>	
    /// <msdn-id>hh447601</msdn-id>	
    /// <unmanaged>D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT</unmanaged>	
    /// <unmanaged-short>D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT</unmanaged-short>	
    public  partial struct AuthenticatedConfigureCryptoSessionInput {	
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.AuthenticatedConfigureInput"/></strong> structure that contains the command <see cref="System.Guid"/> and other data. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT::Parameters']/*"/>	
        /// <msdn-id>hh447601</msdn-id>	
        /// <unmanaged>D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters</unmanaged>	
        /// <unmanaged-short>D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters</unmanaged-short>	
        public SharpDX.Direct3D11.AuthenticatedConfigureInput Parameters;
        
        /// <summary>	
        /// <dd> <p>A handle to the decoder device. Get this from <strong><see cref="SharpDX.Direct3D11.VideoDecoder.GetDriverHandle"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT::DecoderHandle']/*"/>	
        /// <msdn-id>hh447601</msdn-id>	
        /// <unmanaged>void* DecoderHandle</unmanaged>	
        /// <unmanaged-short>void DecoderHandle</unmanaged-short>	
        public System.IntPtr DecoderHandle;
        
        /// <summary>	
        /// <dd> <p>A handle to the cryptographic session. Get this from <strong><see cref="SharpDX.Direct3D11.CryptoSession.GetCryptoSessionHandle"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT::CryptoSessionHandle']/*"/>	
        /// <msdn-id>hh447601</msdn-id>	
        /// <unmanaged>void* CryptoSessionHandle</unmanaged>	
        /// <unmanaged-short>void CryptoSessionHandle</unmanaged-short>	
        public System.IntPtr CryptoSessionHandle;
        
        /// <summary>	
        /// <dd> <p>A handle to the Direct3D device. Get this from <strong>D3D11VideoContext::QueryAuthenticatedChannel</strong> using <strong>D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE</strong>.	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT::DeviceHandle']/*"/>	
        /// <msdn-id>hh447601</msdn-id>	
        /// <unmanaged>void* DeviceHandle</unmanaged>	
        /// <unmanaged-short>void DeviceHandle</unmanaged-short>	
        public System.IntPtr DeviceHandle;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public SharpDX.Direct3D11.AuthenticatedConfigureInput.__Native Parameters;
            public System.IntPtr DecoderHandle;
            public System.IntPtr CryptoSessionHandle;
            public System.IntPtr DeviceHandle;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                this.Parameters.__MarshalFree();
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Parameters = new SharpDX.Direct3D11.AuthenticatedConfigureInput();
			this.Parameters.__MarshalFrom(ref @ref.Parameters);
            this.DecoderHandle = @ref.DecoderHandle;
            this.CryptoSessionHandle = @ref.CryptoSessionHandle;
            this.DeviceHandle = @ref.DeviceHandle;
        }
    }
    
    /// <summary>	
    /// <p>Contains input data for a <strong>D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE</strong> command.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT']/*"/>	
    /// <msdn-id>hh447602</msdn-id>	
    /// <unmanaged>D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT</unmanaged>	
    /// <unmanaged-short>D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT</unmanaged-short>	
    public  partial struct AuthenticatedConfigureInitializeInput {	
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.AuthenticatedConfigureInput"/></strong> structure that contains the command <see cref="System.Guid"/> and other data. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT::Parameters']/*"/>	
        /// <msdn-id>hh447602</msdn-id>	
        /// <unmanaged>D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters</unmanaged>	
        /// <unmanaged-short>D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters</unmanaged-short>	
        public SharpDX.Direct3D11.AuthenticatedConfigureInput Parameters;
        
        /// <summary>	
        /// <dd> <p>The initial sequence number for queries.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT::StartSequenceQuery']/*"/>	
        /// <msdn-id>hh447602</msdn-id>	
        /// <unmanaged>unsigned int StartSequenceQuery</unmanaged>	
        /// <unmanaged-short>unsigned int StartSequenceQuery</unmanaged-short>	
        public int StartSequenceQuery;
        
        /// <summary>	
        /// <dd> <p>The initial sequence number for commands.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT::StartSequenceConfigure']/*"/>	
        /// <msdn-id>hh447602</msdn-id>	
        /// <unmanaged>unsigned int StartSequenceConfigure</unmanaged>	
        /// <unmanaged-short>unsigned int StartSequenceConfigure</unmanaged-short>	
        public int StartSequenceConfigure;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public SharpDX.Direct3D11.AuthenticatedConfigureInput.__Native Parameters;
            public int StartSequenceQuery;
            public int StartSequenceConfigure;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                this.Parameters.__MarshalFree();
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Parameters = new SharpDX.Direct3D11.AuthenticatedConfigureInput();
			this.Parameters.__MarshalFrom(ref @ref.Parameters);
            this.StartSequenceQuery = @ref.StartSequenceQuery;
            this.StartSequenceConfigure = @ref.StartSequenceConfigure;
        }
    }
    
    /// <summary>	
    /// <p>Contains input data for the <strong><see cref="SharpDX.Direct3D11.VideoContext.ConfigureAuthenticatedChannel"/></strong> method.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_CONFIGURE_INPUT']/*"/>	
    /// <msdn-id>hh447603</msdn-id>	
    /// <unmanaged>D3D11_AUTHENTICATED_CONFIGURE_INPUT</unmanaged>	
    /// <unmanaged-short>D3D11_AUTHENTICATED_CONFIGURE_INPUT</unmanaged-short>	
    public  partial struct AuthenticatedConfigureInput {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_CONFIGURE_INPUT::omac']/*"/>	
        /// <msdn-id>hh447603</msdn-id>	
        /// <unmanaged>D3D11_OMAC omac</unmanaged>	
        /// <unmanaged-short>D3D11_OMAC omac</unmanaged-short>	
        public SharpDX.Direct3D11.MessageAuthenticationCode Omac;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_CONFIGURE_INPUT::ConfigureType']/*"/>	
        /// <msdn-id>hh447603</msdn-id>	
        /// <unmanaged>GUID ConfigureType</unmanaged>	
        /// <unmanaged-short>GUID ConfigureType</unmanaged-short>	
        public System.Guid ConfigureType;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_CONFIGURE_INPUT::hChannel']/*"/>	
        /// <msdn-id>hh447603</msdn-id>	
        /// <unmanaged>void* hChannel</unmanaged>	
        /// <unmanaged-short>void hChannel</unmanaged-short>	
        public System.IntPtr HChannel;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_CONFIGURE_INPUT::SequenceNumber']/*"/>	
        /// <msdn-id>hh447603</msdn-id>	
        /// <unmanaged>unsigned int SequenceNumber</unmanaged>	
        /// <unmanaged-short>unsigned int SequenceNumber</unmanaged-short>	
        public int SequenceNumber;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public SharpDX.Direct3D11.MessageAuthenticationCode.__Native Omac;
            public System.Guid ConfigureType;
            public System.IntPtr HChannel;
            public int SequenceNumber;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                this.Omac.__MarshalFree();
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Omac = new SharpDX.Direct3D11.MessageAuthenticationCode();
			this.Omac.__MarshalFrom(ref @ref.Omac);
            this.ConfigureType = @ref.ConfigureType;
            this.HChannel = @ref.HChannel;
            this.SequenceNumber = @ref.SequenceNumber;
        }
    }
    
    /// <summary>	
    /// <p>Contains the response from the <strong><see cref="SharpDX.Direct3D11.VideoContext.ConfigureAuthenticatedChannel"/></strong> method.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_CONFIGURE_OUTPUT']/*"/>	
    /// <msdn-id>hh447604</msdn-id>	
    /// <unmanaged>D3D11_AUTHENTICATED_CONFIGURE_OUTPUT</unmanaged>	
    /// <unmanaged-short>D3D11_AUTHENTICATED_CONFIGURE_OUTPUT</unmanaged-short>	
    public  partial struct AuthenticatedConfigureOutput {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_CONFIGURE_OUTPUT::omac']/*"/>	
        /// <msdn-id>hh447604</msdn-id>	
        /// <unmanaged>D3D11_OMAC omac</unmanaged>	
        /// <unmanaged-short>D3D11_OMAC omac</unmanaged-short>	
        public SharpDX.Direct3D11.MessageAuthenticationCode Omac;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_CONFIGURE_OUTPUT::ConfigureType']/*"/>	
        /// <msdn-id>hh447604</msdn-id>	
        /// <unmanaged>GUID ConfigureType</unmanaged>	
        /// <unmanaged-short>GUID ConfigureType</unmanaged-short>	
        public System.Guid ConfigureType;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_CONFIGURE_OUTPUT::hChannel']/*"/>	
        /// <msdn-id>hh447604</msdn-id>	
        /// <unmanaged>void* hChannel</unmanaged>	
        /// <unmanaged-short>void hChannel</unmanaged-short>	
        public System.IntPtr HChannel;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_CONFIGURE_OUTPUT::SequenceNumber']/*"/>	
        /// <msdn-id>hh447604</msdn-id>	
        /// <unmanaged>unsigned int SequenceNumber</unmanaged>	
        /// <unmanaged-short>unsigned int SequenceNumber</unmanaged-short>	
        public int SequenceNumber;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_CONFIGURE_OUTPUT::ReturnCode']/*"/>	
        /// <msdn-id>hh447604</msdn-id>	
        /// <unmanaged>HRESULT ReturnCode</unmanaged>	
        /// <unmanaged-short>HRESULT ReturnCode</unmanaged-short>	
        public SharpDX.Result ReturnCode;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public SharpDX.Direct3D11.MessageAuthenticationCode.__Native Omac;
            public System.Guid ConfigureType;
            public System.IntPtr HChannel;
            public int SequenceNumber;
            public SharpDX.Result ReturnCode;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                this.Omac.__MarshalFree();
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Omac = new SharpDX.Direct3D11.MessageAuthenticationCode();
			this.Omac.__MarshalFrom(ref @ref.Omac);
            this.ConfigureType = @ref.ConfigureType;
            this.HChannel = @ref.HChannel;
            this.SequenceNumber = @ref.SequenceNumber;
            this.ReturnCode = @ref.ReturnCode;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
			@ref.Omac = new SharpDX.Direct3D11.MessageAuthenticationCode.__Native();
						
                this.Omac.__MarshalTo(ref @ref.Omac);
            @ref.ConfigureType = this.ConfigureType;
            @ref.HChannel = this.HChannel;
            @ref.SequenceNumber = this.SequenceNumber;
            @ref.ReturnCode = this.ReturnCode;
		
		}
    }
    
    /// <summary>	
    /// <p>Contains input data for a <strong>D3D11_AUTHENTICATED_CONFIGURE_PROTECTION</strong> command.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT']/*"/>	
    /// <msdn-id>hh447598</msdn-id>	
    /// <unmanaged>D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT</unmanaged>	
    /// <unmanaged-short>D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT</unmanaged-short>	
    public  partial struct AuthenticatedConfigureProtectionInput {	
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.AuthenticatedConfigureInput"/></strong> structure that contains the command <see cref="System.Guid"/> and other data. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT::Parameters']/*"/>	
        /// <msdn-id>hh447598</msdn-id>	
        /// <unmanaged>D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters</unmanaged>	
        /// <unmanaged-short>D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters</unmanaged-short>	
        public SharpDX.Direct3D11.AuthenticatedConfigureInput Parameters;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.AuthenticatedProtectionFlags"/></strong> union that specifies the protection level.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT::Protections']/*"/>	
        /// <msdn-id>hh447598</msdn-id>	
        /// <unmanaged>D3D11_AUTHENTICATED_PROTECTION_FLAGS Protections</unmanaged>	
        /// <unmanaged-short>D3D11_AUTHENTICATED_PROTECTION_FLAGS Protections</unmanaged-short>	
        public SharpDX.Direct3D11.AuthenticatedProtectionFlags Protections;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public SharpDX.Direct3D11.AuthenticatedConfigureInput.__Native Parameters;
            public SharpDX.Direct3D11.AuthenticatedProtectionFlags Protections;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                this.Parameters.__MarshalFree();
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Parameters = new SharpDX.Direct3D11.AuthenticatedConfigureInput();
			this.Parameters.__MarshalFrom(ref @ref.Parameters);
            this.Protections = @ref.Protections;
        }
    }
    
    /// <summary>	
    /// <p>Contains input data for a <strong>D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE</strong> command.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT']/*"/>	
    /// <msdn-id>hh447605</msdn-id>	
    /// <unmanaged>D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT</unmanaged>	
    /// <unmanaged-short>D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT</unmanaged-short>	
    public  partial struct AuthenticatedConfigureSharedResourceInput {	
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.AuthenticatedConfigureInput"/></strong> structure that contains the command <see cref="System.Guid"/> and other data. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT::Parameters']/*"/>	
        /// <msdn-id>hh447605</msdn-id>	
        /// <unmanaged>D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters</unmanaged>	
        /// <unmanaged-short>D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters</unmanaged-short>	
        public SharpDX.Direct3D11.AuthenticatedConfigureInput Parameters;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.AuthenticatedProcessIdentifierType"/></strong> value that specifies the type of process. To specify the Desktop Window Manager (DWM) process, set this member to <strong><see cref="SharpDX.Direct3D11.AuthenticatedProcessIdentifierType.ProcessidtypeDwm"/></strong>. Otherwise, set this member to <strong><see cref="SharpDX.Direct3D11.AuthenticatedProcessIdentifierType.ProcessidtypeHandle"/></strong> and set the <strong>ProcessHandle</strong> member to a valid handle.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT::ProcessType']/*"/>	
        /// <msdn-id>hh447605</msdn-id>	
        /// <unmanaged>D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE ProcessType</unmanaged>	
        /// <unmanaged-short>D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE ProcessType</unmanaged-short>	
        public SharpDX.Direct3D11.AuthenticatedProcessIdentifierType ProcessType;
        
        /// <summary>	
        /// <dd> <p>A process handle. If the <strong>ProcessType</strong> member equals <strong><see cref="SharpDX.Direct3D11.AuthenticatedProcessIdentifierType.ProcessidtypeHandle"/></strong>, the <strong>ProcessHandle</strong> member specifies a handle to a process. Otherwise, the value is ignored.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT::ProcessHandle']/*"/>	
        /// <msdn-id>hh447605</msdn-id>	
        /// <unmanaged>void* ProcessHandle</unmanaged>	
        /// <unmanaged-short>void ProcessHandle</unmanaged-short>	
        public System.IntPtr ProcessHandle;
        
        /// <summary>	
        /// <dd> <p>If <strong>TRUE</strong>, the specified process has access to restricted shared resources.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT::AllowAccess']/*"/>	
        /// <msdn-id>hh447605</msdn-id>	
        /// <unmanaged>BOOL AllowAccess</unmanaged>	
        /// <unmanaged-short>BOOL AllowAccess</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool AllowAccess;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public SharpDX.Direct3D11.AuthenticatedConfigureInput.__Native Parameters;
            public SharpDX.Direct3D11.AuthenticatedProcessIdentifierType ProcessType;
            public System.IntPtr ProcessHandle;
            public SharpDX.Mathematics.Interop.RawBool AllowAccess;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                this.Parameters.__MarshalFree();
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Parameters = new SharpDX.Direct3D11.AuthenticatedConfigureInput();
			this.Parameters.__MarshalFrom(ref @ref.Parameters);
            this.ProcessType = @ref.ProcessType;
            this.ProcessHandle = @ref.ProcessHandle;
            this.AllowAccess = @ref.AllowAccess;
        }
    }
    
    /// <summary>	
    /// <p>Specifies the protection level for video content.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_PROTECTION_FLAGS']/*"/>	
    /// <msdn-id>hh447607</msdn-id>	
    /// <unmanaged>D3D11_AUTHENTICATED_PROTECTION_FLAGS</unmanaged>	
    /// <unmanaged-short>D3D11_AUTHENTICATED_PROTECTION_FLAGS</unmanaged-short>	
    [StructLayout(LayoutKind.Explicit)]
    public  partial struct AuthenticatedProtectionFlags {	
        
        /// <summary>	
        /// <dd> <dl> <dt><strong>ProtectionEnabled</strong></dt> <dd> <p>If 1, video content protection is enabled. </p> </dd> <dt><strong>OverlayOrFullscreenRequired</strong></dt> <dd> <p>If 1, the application requires video to be displayed using either a hardware overlay or full-screen exclusive mode.</p> </dd> <dt><strong>Reserved </strong></dt> <dd> <p>Reserved. Set all bits to zero. </p> </dd> </dl> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_PROTECTION_FLAGS::Flags']/*"/>	
        /// <msdn-id>hh447607</msdn-id>	
        /// <unmanaged>D3D11_AUTHENTICATED_PROTECTION_FLAGS___MIDL___MIDL_itf_d3d11_0000_0034_0001_INNER Flags</unmanaged>	
        /// <unmanaged-short>D3D11_AUTHENTICATED_PROTECTION_FLAGS___MIDL___MIDL_itf_d3d11_0000_0034_0001_INNER Flags</unmanaged-short>	
        [FieldOffset(0)]
        public SharpDX.Direct3D11.AuthenticatedProtectionFlagsMidlMidlItfD3d11000000340001Inner Flags;
        
        /// <summary>	
        /// <dd> <p>Use this member to access all of the bits in the union. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_PROTECTION_FLAGS::Value']/*"/>	
        /// <msdn-id>hh447607</msdn-id>	
        /// <unmanaged>unsigned int Value</unmanaged>	
        /// <unmanaged-short>unsigned int Value</unmanaged-short>	
        [FieldOffset(0)]
        public int Value;
    }
    
    /// <summary>	
    /// <p>Specifies the protection level for video content.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_PROTECTION_FLAGS___MIDL___MIDL_itf_d3d11_0000_0034_0001_INNER']/*"/>	
    /// <msdn-id>hh447607</msdn-id>	
    /// <unmanaged>D3D11_AUTHENTICATED_PROTECTION_FLAGS___MIDL___MIDL_itf_d3d11_0000_0034_0001_INNER</unmanaged>	
    /// <unmanaged-short>D3D11_AUTHENTICATED_PROTECTION_FLAGS___MIDL___MIDL_itf_d3d11_0000_0034_0001_INNER</unmanaged-short>	
    [StructLayout(LayoutKind.Explicit)]
    public  partial struct AuthenticatedProtectionFlagsMidlMidlItfD3d11000000340001Inner {	
        
        /// <summary>	
        /// <dd> <dl> <dt><strong>ProtectionEnabled</strong></dt> <dd> <p>If 1, video content protection is enabled. </p> </dd> <dt><strong>OverlayOrFullscreenRequired</strong></dt> <dd> <p>If 1, the application requires video to be displayed using either a hardware overlay or full-screen exclusive mode.</p> </dd> <dt><strong>Reserved </strong></dt> <dd> <p>Reserved. Set all bits to zero. </p> </dd> </dl> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_PROTECTION_FLAGS___MIDL___MIDL_itf_d3d11_0000_0034_0001_INNER::ProtectionEnabled']/*"/>	
        /// <msdn-id>hh447607</msdn-id>	
        /// <unmanaged>unsigned int ProtectionEnabled</unmanaged>	
        /// <unmanaged-short>unsigned int ProtectionEnabled</unmanaged-short>	
        public bool  ProtectionEnabled { 
            get { 
                return 0 != ((_ProtectionEnabled >> 0)  &  1);
            }
            set { 
                _ProtectionEnabled = (int)((_ProtectionEnabled & ~( 1 << 0)) | ( ( (value?1:0) & 1) << 0));
            }
        }
        [FieldOffset(0)]
        internal int _ProtectionEnabled;
		
        
        /// <summary>	
        /// <dd> <p>Use this member to access all of the bits in the union. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_PROTECTION_FLAGS___MIDL___MIDL_itf_d3d11_0000_0034_0001_INNER::OverlayOrFullscreenRequired']/*"/>	
        /// <msdn-id>hh447607</msdn-id>	
        /// <unmanaged>unsigned int OverlayOrFullscreenRequired</unmanaged>	
        /// <unmanaged-short>unsigned int OverlayOrFullscreenRequired</unmanaged-short>	
        public bool  OverlayOrFullscreenRequired { 
            get { 
                return 0 != ((_OverlayOrFullscreenRequired >> 1)  &  1);
            }
            set { 
                _OverlayOrFullscreenRequired = (int)((_OverlayOrFullscreenRequired & ~( 1 << 1)) | ( ( (value?1:0) & 1) << 1));
            }
        }
        [FieldOffset(0)]
        internal int _OverlayOrFullscreenRequired;
		
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_PROTECTION_FLAGS___MIDL___MIDL_itf_d3d11_0000_0034_0001_INNER::Reserved']/*"/>	
        /// <msdn-id>hh447607</msdn-id>	
        /// <unmanaged>unsigned int Reserved</unmanaged>	
        /// <unmanaged-short>unsigned int Reserved</unmanaged-short>	
        public int  Reserved { 
            get { 
                return (int)((_Reserved >> 2)  &  1073741823);
            }
            set { 
                _Reserved = (int)((_Reserved & ~( 1073741823 << 2)) | ( (value & 1073741823) << 2));
            }
        }
        [FieldOffset(0)]
        internal int _Reserved;
		
    }
    
    /// <summary>	
    /// <p>Contains the response to a <strong>D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID_COUNT</strong> query.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT']/*"/>	
    /// <msdn-id>hh447608</msdn-id>	
    /// <unmanaged>D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT</unmanaged>	
    /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT</unmanaged-short>	
    public  partial struct AuthenticatedQueryAccessibilityEncryptionGuidCountOutput {	
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.AuthenticatedQueryOutput"/></strong> structure that contains a Message Authentication Code (MAC) and other data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT::Output']/*"/>	
        /// <msdn-id>hh447608</msdn-id>	
        /// <unmanaged>D3D11_AUTHENTICATED_QUERY_OUTPUT Output</unmanaged>	
        /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_OUTPUT Output</unmanaged-short>	
        public SharpDX.Direct3D11.AuthenticatedQueryOutput Output;
        
        /// <summary>	
        /// <dd> <p>The number of encryption GUIDs. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT::EncryptionGuidCount']/*"/>	
        /// <msdn-id>hh447608</msdn-id>	
        /// <unmanaged>unsigned int EncryptionGuidCount</unmanaged>	
        /// <unmanaged-short>unsigned int EncryptionGuidCount</unmanaged-short>	
        public int EncryptionGuidCount;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public SharpDX.Direct3D11.AuthenticatedQueryOutput.__Native Output;
            public int EncryptionGuidCount;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                this.Output.__MarshalFree();
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Output = new SharpDX.Direct3D11.AuthenticatedQueryOutput();
			this.Output.__MarshalFrom(ref @ref.Output);
            this.EncryptionGuidCount = @ref.EncryptionGuidCount;
        }
    }
    
    /// <summary>	
    /// <p>Contains input data for a <strong>D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID</strong> query.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT']/*"/>	
    /// <msdn-id>hh447609</msdn-id>	
    /// <unmanaged>D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT</unmanaged>	
    /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct AuthenticatedQueryAccessibilityEncryptionGuidInput {	
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.AuthenticatedQueryInput"/></strong> structure that contains the <see cref="System.Guid"/> for the query and other data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT::Input']/*"/>	
        /// <msdn-id>hh447609</msdn-id>	
        /// <unmanaged>D3D11_AUTHENTICATED_QUERY_INPUT Input</unmanaged>	
        /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_INPUT Input</unmanaged-short>	
        public SharpDX.Direct3D11.AuthenticatedQueryInput Input;
        
        /// <summary>	
        /// <dd> <p>The index of the encryption <see cref="System.Guid"/>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT::EncryptionGuidIndex']/*"/>	
        /// <msdn-id>hh447609</msdn-id>	
        /// <unmanaged>unsigned int EncryptionGuidIndex</unmanaged>	
        /// <unmanaged-short>unsigned int EncryptionGuidIndex</unmanaged-short>	
        public int EncryptionGuidIndex;
    }
    
    /// <summary>	
    /// <p>Contains the response to a <strong>D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID</strong> query.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT']/*"/>	
    /// <msdn-id>hh447610</msdn-id>	
    /// <unmanaged>D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT</unmanaged>	
    /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT</unmanaged-short>	
    public  partial struct AuthenticatedQueryAccessibilityEncryptionGuidOutput {	
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.AuthenticatedQueryOutput"/></strong> structure that contains a Message Authentication Code (MAC) and other data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT::Output']/*"/>	
        /// <msdn-id>hh447610</msdn-id>	
        /// <unmanaged>D3D11_AUTHENTICATED_QUERY_OUTPUT Output</unmanaged>	
        /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_OUTPUT Output</unmanaged-short>	
        public SharpDX.Direct3D11.AuthenticatedQueryOutput Output;
        
        /// <summary>	
        /// <dd> <p>The index of the encryption <see cref="System.Guid"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT::EncryptionGuidIndex']/*"/>	
        /// <msdn-id>hh447610</msdn-id>	
        /// <unmanaged>unsigned int EncryptionGuidIndex</unmanaged>	
        /// <unmanaged-short>unsigned int EncryptionGuidIndex</unmanaged-short>	
        public int EncryptionGuidIndex;
        
        /// <summary>	
        /// <dd> <p>A <see cref="System.Guid"/> that specifies a supported encryption type.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT::EncryptionGuid']/*"/>	
        /// <msdn-id>hh447610</msdn-id>	
        /// <unmanaged>GUID EncryptionGuid</unmanaged>	
        /// <unmanaged-short>GUID EncryptionGuid</unmanaged-short>	
        public System.Guid EncryptionGuid;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public SharpDX.Direct3D11.AuthenticatedQueryOutput.__Native Output;
            public int EncryptionGuidIndex;
            public System.Guid EncryptionGuid;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                this.Output.__MarshalFree();
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Output = new SharpDX.Direct3D11.AuthenticatedQueryOutput();
			this.Output.__MarshalFrom(ref @ref.Output);
            this.EncryptionGuidIndex = @ref.EncryptionGuidIndex;
            this.EncryptionGuid = @ref.EncryptionGuid;
        }
    }
    
    /// <summary>	
    /// <p>Contains the response to a <strong>D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ATTRIBUTES</strong> query.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT']/*"/>	
    /// <msdn-id>hh447611</msdn-id>	
    /// <unmanaged>D3D11_AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT</unmanaged>	
    /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT</unmanaged-short>	
    public  partial struct AuthenticatedQueryAcessibilityOutput {	
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.AuthenticatedQueryOutput"/></strong> structure that contains a Message Authentication Code (MAC) and other data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT::Output']/*"/>	
        /// <msdn-id>hh447611</msdn-id>	
        /// <unmanaged>D3D11_AUTHENTICATED_QUERY_OUTPUT Output</unmanaged>	
        /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_OUTPUT Output</unmanaged-short>	
        public SharpDX.Direct3D11.AuthenticatedQueryOutput Output;
        
        /// <summary>	
        /// <dd> <p>A bitwise <strong>OR</strong> of flags from the <strong><see cref="SharpDX.Direct3D11.BusType"/></strong> enumeration.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT::BusType']/*"/>	
        /// <msdn-id>hh447611</msdn-id>	
        /// <unmanaged>D3D11_BUS_TYPE BusType</unmanaged>	
        /// <unmanaged-short>D3D11_BUS_TYPE BusType</unmanaged-short>	
        public SharpDX.Direct3D11.BusType BusType;
        
        /// <summary>	
        /// <dd> <p>If <strong>TRUE</strong>, contiguous blocks of video memory may be accessible to the CPU or the bus.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT::AccessibleInContiguousBlocks']/*"/>	
        /// <msdn-id>hh447611</msdn-id>	
        /// <unmanaged>BOOL AccessibleInContiguousBlocks</unmanaged>	
        /// <unmanaged-short>BOOL AccessibleInContiguousBlocks</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool AccessibleInContiguousBlocks;
        
        /// <summary>	
        /// <dd> <p>If <strong>TRUE</strong>, non-contiguous blocks of video memory may be accessible to the CPU or the bus.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT::AccessibleInNonContiguousBlocks']/*"/>	
        /// <msdn-id>hh447611</msdn-id>	
        /// <unmanaged>BOOL AccessibleInNonContiguousBlocks</unmanaged>	
        /// <unmanaged-short>BOOL AccessibleInNonContiguousBlocks</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool AccessibleInNonContiguousBlocks;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public SharpDX.Direct3D11.AuthenticatedQueryOutput.__Native Output;
            public SharpDX.Direct3D11.BusType BusType;
            public SharpDX.Mathematics.Interop.RawBool AccessibleInContiguousBlocks;
            public SharpDX.Mathematics.Interop.RawBool AccessibleInNonContiguousBlocks;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                this.Output.__MarshalFree();
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Output = new SharpDX.Direct3D11.AuthenticatedQueryOutput();
			this.Output.__MarshalFrom(ref @ref.Output);
            this.BusType = @ref.BusType;
            this.AccessibleInContiguousBlocks = @ref.AccessibleInContiguousBlocks;
            this.AccessibleInNonContiguousBlocks = @ref.AccessibleInNonContiguousBlocks;
        }
    }
    
    /// <summary>	
    /// <p>Contains the response to a <strong>D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE</strong> query.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT']/*"/>	
    /// <msdn-id>hh447612</msdn-id>	
    /// <unmanaged>D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT</unmanaged>	
    /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT</unmanaged-short>	
    public  partial struct AuthenticatedQueryChannelTypeOutput {	
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.AuthenticatedQueryOutput"/></strong> structure that contains a Message Authentication Code (MAC) and other data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT::Output']/*"/>	
        /// <msdn-id>hh447612</msdn-id>	
        /// <unmanaged>D3D11_AUTHENTICATED_QUERY_OUTPUT Output</unmanaged>	
        /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_OUTPUT Output</unmanaged-short>	
        public SharpDX.Direct3D11.AuthenticatedQueryOutput Output;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.AuthenticatedChannelType"/></strong> value that specifies the channel type. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT::ChannelType']/*"/>	
        /// <msdn-id>hh447612</msdn-id>	
        /// <unmanaged>D3D11_AUTHENTICATED_CHANNEL_TYPE ChannelType</unmanaged>	
        /// <unmanaged-short>D3D11_AUTHENTICATED_CHANNEL_TYPE ChannelType</unmanaged-short>	
        public SharpDX.Direct3D11.AuthenticatedChannelType ChannelType;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public SharpDX.Direct3D11.AuthenticatedQueryOutput.__Native Output;
            public SharpDX.Direct3D11.AuthenticatedChannelType ChannelType;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                this.Output.__MarshalFree();
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Output = new SharpDX.Direct3D11.AuthenticatedQueryOutput();
			this.Output.__MarshalFrom(ref @ref.Output);
            this.ChannelType = @ref.ChannelType;
        }
    }
    
    /// <summary>	
    /// <p>Contains input data for a <strong>D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION</strong> query. </p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT']/*"/>	
    /// <msdn-id>hh447613</msdn-id>	
    /// <unmanaged>D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT</unmanaged>	
    /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct AuthenticatedQueryCryptoSessionInput {	
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.AuthenticatedQueryInput"/></strong> structure that contains the <see cref="System.Guid"/> for the query and other data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT::Input']/*"/>	
        /// <msdn-id>hh447613</msdn-id>	
        /// <unmanaged>D3D11_AUTHENTICATED_QUERY_INPUT Input</unmanaged>	
        /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_INPUT Input</unmanaged-short>	
        public SharpDX.Direct3D11.AuthenticatedQueryInput Input;
        
        /// <summary>	
        /// <dd> <p>A handle to a decoder device.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT::DecoderHandle']/*"/>	
        /// <msdn-id>hh447613</msdn-id>	
        /// <unmanaged>void* DecoderHandle</unmanaged>	
        /// <unmanaged-short>void DecoderHandle</unmanaged-short>	
        public System.IntPtr DecoderHandle;
    }
    
    /// <summary>	
    /// <p>Contains the response to a <strong>D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION</strong> query. </p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT']/*"/>	
    /// <msdn-id>hh447614</msdn-id>	
    /// <unmanaged>D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT</unmanaged>	
    /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT</unmanaged-short>	
    public  partial struct AuthenticatedQueryCryptoSessionOutput {	
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.AuthenticatedQueryOutput"/></strong> structure that contains a Message Authentication Code (MAC) and other data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT::Output']/*"/>	
        /// <msdn-id>hh447614</msdn-id>	
        /// <unmanaged>D3D11_AUTHENTICATED_QUERY_OUTPUT Output</unmanaged>	
        /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_OUTPUT Output</unmanaged-short>	
        public SharpDX.Direct3D11.AuthenticatedQueryOutput Output;
        
        /// <summary>	
        /// <dd> <p>A handle to a decoder device.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT::DecoderHandle']/*"/>	
        /// <msdn-id>hh447614</msdn-id>	
        /// <unmanaged>void* DecoderHandle</unmanaged>	
        /// <unmanaged-short>void DecoderHandle</unmanaged-short>	
        public System.IntPtr DecoderHandle;
        
        /// <summary>	
        /// <dd> <p>A handle to the cryptographic session that is associated with the decoder device.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT::CryptoSessionHandle']/*"/>	
        /// <msdn-id>hh447614</msdn-id>	
        /// <unmanaged>void* CryptoSessionHandle</unmanaged>	
        /// <unmanaged-short>void CryptoSessionHandle</unmanaged-short>	
        public System.IntPtr CryptoSessionHandle;
        
        /// <summary>	
        /// <dd> <p>A handle to the Direct3D device that is associated with the decoder device.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT::DeviceHandle']/*"/>	
        /// <msdn-id>hh447614</msdn-id>	
        /// <unmanaged>void* DeviceHandle</unmanaged>	
        /// <unmanaged-short>void DeviceHandle</unmanaged-short>	
        public System.IntPtr DeviceHandle;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public SharpDX.Direct3D11.AuthenticatedQueryOutput.__Native Output;
            public System.IntPtr DecoderHandle;
            public System.IntPtr CryptoSessionHandle;
            public System.IntPtr DeviceHandle;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                this.Output.__MarshalFree();
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Output = new SharpDX.Direct3D11.AuthenticatedQueryOutput();
			this.Output.__MarshalFrom(ref @ref.Output);
            this.DecoderHandle = @ref.DecoderHandle;
            this.CryptoSessionHandle = @ref.CryptoSessionHandle;
            this.DeviceHandle = @ref.DeviceHandle;
        }
    }
    
    /// <summary>	
    /// <p>Contains the response to a <strong>D3D11_AUTHENTICATED_QUERY_CURRENT_ENCRYPTION_WHEN_ACCESSIBLE </strong>query.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT']/*"/>	
    /// <msdn-id>hh447615</msdn-id>	
    /// <unmanaged>D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT</unmanaged>	
    /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT</unmanaged-short>	
    public  partial struct AuthenticatedQueryCurrentAccessibilityEncryptionOutput {	
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.AuthenticatedQueryOutput"/></strong> structure that contains a Message Authentication Code (MAC) and other data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT::Output']/*"/>	
        /// <msdn-id>hh447615</msdn-id>	
        /// <unmanaged>D3D11_AUTHENTICATED_QUERY_OUTPUT Output</unmanaged>	
        /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_OUTPUT Output</unmanaged-short>	
        public SharpDX.Direct3D11.AuthenticatedQueryOutput Output;
        
        /// <summary>	
        /// <dd> <p>A <see cref="System.Guid"/> that specifies the current encryption type. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT::EncryptionGuid']/*"/>	
        /// <msdn-id>hh447615</msdn-id>	
        /// <unmanaged>GUID EncryptionGuid</unmanaged>	
        /// <unmanaged-short>GUID EncryptionGuid</unmanaged-short>	
        public System.Guid EncryptionGuid;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public SharpDX.Direct3D11.AuthenticatedQueryOutput.__Native Output;
            public System.Guid EncryptionGuid;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                this.Output.__MarshalFree();
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Output = new SharpDX.Direct3D11.AuthenticatedQueryOutput();
			this.Output.__MarshalFrom(ref @ref.Output);
            this.EncryptionGuid = @ref.EncryptionGuid;
        }
    }
    
    /// <summary>	
    /// <p>Contains the response to a <strong>D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE</strong> query. </p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT']/*"/>	
    /// <msdn-id>hh447616</msdn-id>	
    /// <unmanaged>D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT</unmanaged>	
    /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT</unmanaged-short>	
    public  partial struct AuthenticatedQueryDeviceHandleOutput {	
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.AuthenticatedQueryOutput"/></strong> structure that contains a Message Authentication Code (MAC) and other data. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT::Output']/*"/>	
        /// <msdn-id>hh447616</msdn-id>	
        /// <unmanaged>D3D11_AUTHENTICATED_QUERY_OUTPUT Output</unmanaged>	
        /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_OUTPUT Output</unmanaged-short>	
        public SharpDX.Direct3D11.AuthenticatedQueryOutput Output;
        
        /// <summary>	
        /// <dd> <p>A handle to the device. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT::DeviceHandle']/*"/>	
        /// <msdn-id>hh447616</msdn-id>	
        /// <unmanaged>void* DeviceHandle</unmanaged>	
        /// <unmanaged-short>void DeviceHandle</unmanaged-short>	
        public System.IntPtr DeviceHandle;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public SharpDX.Direct3D11.AuthenticatedQueryOutput.__Native Output;
            public System.IntPtr DeviceHandle;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                this.Output.__MarshalFree();
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Output = new SharpDX.Direct3D11.AuthenticatedQueryOutput();
			this.Output.__MarshalFrom(ref @ref.Output);
            this.DeviceHandle = @ref.DeviceHandle;
        }
    }
    
    /// <summary>	
    /// <p>Contains input data for the <strong><see cref="SharpDX.Direct3D11.VideoContext.QueryAuthenticatedChannel"/></strong> method. </p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_INPUT']/*"/>	
    /// <msdn-id>hh447617</msdn-id>	
    /// <unmanaged>D3D11_AUTHENTICATED_QUERY_INPUT</unmanaged>	
    /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_INPUT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct AuthenticatedQueryInput {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_INPUT::QueryType']/*"/>	
        /// <msdn-id>hh447617</msdn-id>	
        /// <unmanaged>GUID QueryType</unmanaged>	
        /// <unmanaged-short>GUID QueryType</unmanaged-short>	
        public System.Guid QueryType;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_INPUT::hChannel']/*"/>	
        /// <msdn-id>hh447617</msdn-id>	
        /// <unmanaged>void* hChannel</unmanaged>	
        /// <unmanaged-short>void hChannel</unmanaged-short>	
        public System.IntPtr HChannel;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_INPUT::SequenceNumber']/*"/>	
        /// <msdn-id>hh447617</msdn-id>	
        /// <unmanaged>unsigned int SequenceNumber</unmanaged>	
        /// <unmanaged-short>unsigned int SequenceNumber</unmanaged-short>	
        public int SequenceNumber;
    }
    
    /// <summary>	
    /// <p>Contains a response from the <strong><see cref="SharpDX.Direct3D11.VideoContext.QueryAuthenticatedChannel"/></strong> method.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_OUTPUT']/*"/>	
    /// <msdn-id>hh447618</msdn-id>	
    /// <unmanaged>D3D11_AUTHENTICATED_QUERY_OUTPUT</unmanaged>	
    /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_OUTPUT</unmanaged-short>	
    public  partial struct AuthenticatedQueryOutput {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_OUTPUT::omac']/*"/>	
        /// <msdn-id>hh447618</msdn-id>	
        /// <unmanaged>D3D11_OMAC omac</unmanaged>	
        /// <unmanaged-short>D3D11_OMAC omac</unmanaged-short>	
        public SharpDX.Direct3D11.MessageAuthenticationCode Omac;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_OUTPUT::QueryType']/*"/>	
        /// <msdn-id>hh447618</msdn-id>	
        /// <unmanaged>GUID QueryType</unmanaged>	
        /// <unmanaged-short>GUID QueryType</unmanaged-short>	
        public System.Guid QueryType;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_OUTPUT::hChannel']/*"/>	
        /// <msdn-id>hh447618</msdn-id>	
        /// <unmanaged>void* hChannel</unmanaged>	
        /// <unmanaged-short>void hChannel</unmanaged-short>	
        public System.IntPtr HChannel;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_OUTPUT::SequenceNumber']/*"/>	
        /// <msdn-id>hh447618</msdn-id>	
        /// <unmanaged>unsigned int SequenceNumber</unmanaged>	
        /// <unmanaged-short>unsigned int SequenceNumber</unmanaged-short>	
        public int SequenceNumber;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_OUTPUT::ReturnCode']/*"/>	
        /// <msdn-id>hh447618</msdn-id>	
        /// <unmanaged>HRESULT ReturnCode</unmanaged>	
        /// <unmanaged-short>HRESULT ReturnCode</unmanaged-short>	
        public SharpDX.Result ReturnCode;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public SharpDX.Direct3D11.MessageAuthenticationCode.__Native Omac;
            public System.Guid QueryType;
            public System.IntPtr HChannel;
            public int SequenceNumber;
            public SharpDX.Result ReturnCode;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                this.Omac.__MarshalFree();
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Omac = new SharpDX.Direct3D11.MessageAuthenticationCode();
			this.Omac.__MarshalFrom(ref @ref.Omac);
            this.QueryType = @ref.QueryType;
            this.HChannel = @ref.HChannel;
            this.SequenceNumber = @ref.SequenceNumber;
            this.ReturnCode = @ref.ReturnCode;
        }
    }
    
    /// <summary>	
    /// <p>Contains input data for a <strong>D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT</strong> query.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT']/*"/>	
    /// <msdn-id>hh447619</msdn-id>	
    /// <unmanaged>D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT</unmanaged>	
    /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct AuthenticatedQueryOutputIdCountInput {	
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.AuthenticatedQueryInput"/></strong> structure that contains the <see cref="System.Guid"/> for the query and other data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT::Input']/*"/>	
        /// <msdn-id>hh447619</msdn-id>	
        /// <unmanaged>D3D11_AUTHENTICATED_QUERY_INPUT Input</unmanaged>	
        /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_INPUT Input</unmanaged-short>	
        public SharpDX.Direct3D11.AuthenticatedQueryInput Input;
        
        /// <summary>	
        /// <dd> <p>A handle to the device.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT::DeviceHandle']/*"/>	
        /// <msdn-id>hh447619</msdn-id>	
        /// <unmanaged>void* DeviceHandle</unmanaged>	
        /// <unmanaged-short>void DeviceHandle</unmanaged-short>	
        public System.IntPtr DeviceHandle;
        
        /// <summary>	
        /// <dd> <p>A handle to the cryptographic session.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT::CryptoSessionHandle']/*"/>	
        /// <msdn-id>hh447619</msdn-id>	
        /// <unmanaged>void* CryptoSessionHandle</unmanaged>	
        /// <unmanaged-short>void CryptoSessionHandle</unmanaged-short>	
        public System.IntPtr CryptoSessionHandle;
    }
    
    /// <summary>	
    /// <p>Contains the response to a <strong>D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT</strong> query.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT']/*"/>	
    /// <msdn-id>hh447620</msdn-id>	
    /// <unmanaged>D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT</unmanaged>	
    /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT</unmanaged-short>	
    public  partial struct AuthenticatedQueryOutputIdCountOutput {	
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.AuthenticatedQueryOutput"/></strong> structure that contains a Message Authentication Code (MAC) and other data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT::Output']/*"/>	
        /// <msdn-id>hh447620</msdn-id>	
        /// <unmanaged>D3D11_AUTHENTICATED_QUERY_OUTPUT Output</unmanaged>	
        /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_OUTPUT Output</unmanaged-short>	
        public SharpDX.Direct3D11.AuthenticatedQueryOutput Output;
        
        /// <summary>	
        /// <dd> <p>A handle to the device.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT::DeviceHandle']/*"/>	
        /// <msdn-id>hh447620</msdn-id>	
        /// <unmanaged>void* DeviceHandle</unmanaged>	
        /// <unmanaged-short>void DeviceHandle</unmanaged-short>	
        public System.IntPtr DeviceHandle;
        
        /// <summary>	
        /// <dd> <p>A handle to the cryptographic session.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT::CryptoSessionHandle']/*"/>	
        /// <msdn-id>hh447620</msdn-id>	
        /// <unmanaged>void* CryptoSessionHandle</unmanaged>	
        /// <unmanaged-short>void CryptoSessionHandle</unmanaged-short>	
        public System.IntPtr CryptoSessionHandle;
        
        /// <summary>	
        /// <dd> <p>The number of output IDs associated with the specified device and cryptographic session.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT::OutputIDCount']/*"/>	
        /// <msdn-id>hh447620</msdn-id>	
        /// <unmanaged>unsigned int OutputIDCount</unmanaged>	
        /// <unmanaged-short>unsigned int OutputIDCount</unmanaged-short>	
        public int OutputIDCount;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public SharpDX.Direct3D11.AuthenticatedQueryOutput.__Native Output;
            public System.IntPtr DeviceHandle;
            public System.IntPtr CryptoSessionHandle;
            public int OutputIDCount;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                this.Output.__MarshalFree();
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Output = new SharpDX.Direct3D11.AuthenticatedQueryOutput();
			this.Output.__MarshalFrom(ref @ref.Output);
            this.DeviceHandle = @ref.DeviceHandle;
            this.CryptoSessionHandle = @ref.CryptoSessionHandle;
            this.OutputIDCount = @ref.OutputIDCount;
        }
    }
    
    /// <summary>	
    /// <p>Contains input data for a <strong>D3D11_AUTHENTICATED_QUERY_OUTPUT_ID</strong> query.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT']/*"/>	
    /// <msdn-id>hh447621</msdn-id>	
    /// <unmanaged>D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT</unmanaged>	
    /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct AuthenticatedQueryOutputIdInput {	
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.AuthenticatedQueryInput"/></strong> structure that contains the <see cref="System.Guid"/> for the query and other data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT::Input']/*"/>	
        /// <msdn-id>hh447621</msdn-id>	
        /// <unmanaged>D3D11_AUTHENTICATED_QUERY_INPUT Input</unmanaged>	
        /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_INPUT Input</unmanaged-short>	
        public SharpDX.Direct3D11.AuthenticatedQueryInput Input;
        
        /// <summary>	
        /// <dd> <p>A handle to the device.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT::DeviceHandle']/*"/>	
        /// <msdn-id>hh447621</msdn-id>	
        /// <unmanaged>void* DeviceHandle</unmanaged>	
        /// <unmanaged-short>void DeviceHandle</unmanaged-short>	
        public System.IntPtr DeviceHandle;
        
        /// <summary>	
        /// <dd> <p>A handle to the cryptographic session.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT::CryptoSessionHandle']/*"/>	
        /// <msdn-id>hh447621</msdn-id>	
        /// <unmanaged>void* CryptoSessionHandle</unmanaged>	
        /// <unmanaged-short>void CryptoSessionHandle</unmanaged-short>	
        public System.IntPtr CryptoSessionHandle;
        
        /// <summary>	
        /// <dd> <p>The index of the output ID.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT::OutputIDIndex']/*"/>	
        /// <msdn-id>hh447621</msdn-id>	
        /// <unmanaged>unsigned int OutputIDIndex</unmanaged>	
        /// <unmanaged-short>unsigned int OutputIDIndex</unmanaged-short>	
        public int OutputIDIndex;
    }
    
    /// <summary>	
    /// <p>Contains the response to a <strong>D3D11_AUTHENTICATED_QUERY_OUTPUT_ID</strong> query.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT']/*"/>	
    /// <msdn-id>hh447622</msdn-id>	
    /// <unmanaged>D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT</unmanaged>	
    /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT</unmanaged-short>	
    public  partial struct AuthenticatedQueryOutputIdOutput {	
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.AuthenticatedQueryOutput"/></strong> structure that contains a Message Authentication Code (MAC) and other data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT::Output']/*"/>	
        /// <msdn-id>hh447622</msdn-id>	
        /// <unmanaged>D3D11_AUTHENTICATED_QUERY_OUTPUT Output</unmanaged>	
        /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_OUTPUT Output</unmanaged-short>	
        public SharpDX.Direct3D11.AuthenticatedQueryOutput Output;
        
        /// <summary>	
        /// <dd> <p>A handle to the device.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT::DeviceHandle']/*"/>	
        /// <msdn-id>hh447622</msdn-id>	
        /// <unmanaged>void* DeviceHandle</unmanaged>	
        /// <unmanaged-short>void DeviceHandle</unmanaged-short>	
        public System.IntPtr DeviceHandle;
        
        /// <summary>	
        /// <dd> <p>A handle to the cryptographic session.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT::CryptoSessionHandle']/*"/>	
        /// <msdn-id>hh447622</msdn-id>	
        /// <unmanaged>void* CryptoSessionHandle</unmanaged>	
        /// <unmanaged-short>void CryptoSessionHandle</unmanaged-short>	
        public System.IntPtr CryptoSessionHandle;
        
        /// <summary>	
        /// <dd> <p>The index of the output ID.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT::OutputIDIndex']/*"/>	
        /// <msdn-id>hh447622</msdn-id>	
        /// <unmanaged>unsigned int OutputIDIndex</unmanaged>	
        /// <unmanaged-short>unsigned int OutputIDIndex</unmanaged-short>	
        public int OutputIDIndex;
        
        /// <summary>	
        /// <dd> <p>An output ID that is associated with the specified device and cryptographic session.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT::OutputID']/*"/>	
        /// <msdn-id>hh447622</msdn-id>	
        /// <unmanaged>unsigned longlong OutputID</unmanaged>	
        /// <unmanaged-short>unsigned longlong OutputID</unmanaged-short>	
        public long OutputID;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public SharpDX.Direct3D11.AuthenticatedQueryOutput.__Native Output;
            public System.IntPtr DeviceHandle;
            public System.IntPtr CryptoSessionHandle;
            public int OutputIDIndex;
            public long OutputID;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                this.Output.__MarshalFree();
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Output = new SharpDX.Direct3D11.AuthenticatedQueryOutput();
			this.Output.__MarshalFrom(ref @ref.Output);
            this.DeviceHandle = @ref.DeviceHandle;
            this.CryptoSessionHandle = @ref.CryptoSessionHandle;
            this.OutputIDIndex = @ref.OutputIDIndex;
            this.OutputID = @ref.OutputID;
        }
    }
    
    /// <summary>	
    /// <p>Contains the response to a <strong>D3D11_AUTHENTICATED_QUERY_PROTECTION</strong> query. </p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT']/*"/>	
    /// <msdn-id>hh447623</msdn-id>	
    /// <unmanaged>D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT</unmanaged>	
    /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT</unmanaged-short>	
    public  partial struct AuthenticatedQueryProtectionOutput {	
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.AuthenticatedQueryOutput"/></strong> structure that contains a Message Authentication Code (MAC) and other data. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT::Output']/*"/>	
        /// <msdn-id>hh447623</msdn-id>	
        /// <unmanaged>D3D11_AUTHENTICATED_QUERY_OUTPUT Output</unmanaged>	
        /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_OUTPUT Output</unmanaged-short>	
        public SharpDX.Direct3D11.AuthenticatedQueryOutput Output;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.AuthenticatedProtectionFlags"/></strong> union that specifies the protection level. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT::ProtectionFlags']/*"/>	
        /// <msdn-id>hh447623</msdn-id>	
        /// <unmanaged>D3D11_AUTHENTICATED_PROTECTION_FLAGS ProtectionFlags</unmanaged>	
        /// <unmanaged-short>D3D11_AUTHENTICATED_PROTECTION_FLAGS ProtectionFlags</unmanaged-short>	
        public SharpDX.Direct3D11.AuthenticatedProtectionFlags ProtectionFlags;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public SharpDX.Direct3D11.AuthenticatedQueryOutput.__Native Output;
            public SharpDX.Direct3D11.AuthenticatedProtectionFlags ProtectionFlags;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                this.Output.__MarshalFree();
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Output = new SharpDX.Direct3D11.AuthenticatedQueryOutput();
			this.Output.__MarshalFrom(ref @ref.Output);
            this.ProtectionFlags = @ref.ProtectionFlags;
        }
    }
    
    /// <summary>	
    /// <p>Contains the response to a <strong>D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT</strong> query.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT']/*"/>	
    /// <msdn-id>hh447624</msdn-id>	
    /// <unmanaged>D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT</unmanaged>	
    /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT</unmanaged-short>	
    public  partial struct AuthenticatedQueryRestrictedSharedResourceProcessCountOutput {	
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.AuthenticatedQueryOutput"/></strong> structure that contains a Message Authentication Code (MAC) and other data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT::Output']/*"/>	
        /// <msdn-id>hh447624</msdn-id>	
        /// <unmanaged>D3D11_AUTHENTICATED_QUERY_OUTPUT Output</unmanaged>	
        /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_OUTPUT Output</unmanaged-short>	
        public SharpDX.Direct3D11.AuthenticatedQueryOutput Output;
        
        /// <summary>	
        /// <dd> <p>The number of processes that are allowed to open shared resources that have restricted access. A process cannot open such a resource unless the process has been granted access. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT::RestrictedSharedResourceProcessCount']/*"/>	
        /// <msdn-id>hh447624</msdn-id>	
        /// <unmanaged>unsigned int RestrictedSharedResourceProcessCount</unmanaged>	
        /// <unmanaged-short>unsigned int RestrictedSharedResourceProcessCount</unmanaged-short>	
        public int RestrictedSharedResourceProcessCount;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public SharpDX.Direct3D11.AuthenticatedQueryOutput.__Native Output;
            public int RestrictedSharedResourceProcessCount;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                this.Output.__MarshalFree();
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Output = new SharpDX.Direct3D11.AuthenticatedQueryOutput();
			this.Output.__MarshalFrom(ref @ref.Output);
            this.RestrictedSharedResourceProcessCount = @ref.RestrictedSharedResourceProcessCount;
        }
    }
    
    /// <summary>	
    /// <p>Contains input data for a <strong>D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS</strong> query.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT']/*"/>	
    /// <msdn-id>hh447625</msdn-id>	
    /// <unmanaged>D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT</unmanaged>	
    /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct AuthenticatedQueryRestrictedSharedResourceProcessInput {	
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.AuthenticatedQueryInput"/></strong> structure that contains the <see cref="System.Guid"/> for the query and other data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT::Input']/*"/>	
        /// <msdn-id>hh447625</msdn-id>	
        /// <unmanaged>D3D11_AUTHENTICATED_QUERY_INPUT Input</unmanaged>	
        /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_INPUT Input</unmanaged-short>	
        public SharpDX.Direct3D11.AuthenticatedQueryInput Input;
        
        /// <summary>	
        /// <dd> <p>The index of the process. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT::ProcessIndex']/*"/>	
        /// <msdn-id>hh447625</msdn-id>	
        /// <unmanaged>unsigned int ProcessIndex</unmanaged>	
        /// <unmanaged-short>unsigned int ProcessIndex</unmanaged-short>	
        public int ProcessIndex;
    }
    
    /// <summary>	
    /// <p>Contains the response to a <strong>D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS</strong> query.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The Desktop Window Manager (DWM) process is identified by setting <strong>ProcessIdentifier</strong> equal to <strong><see cref="SharpDX.Direct3D11.AuthenticatedProcessIdentifierType.ProcessidtypeDwm"/></strong>. Other processes are identified by setting the process handle in <strong>ProcessHandle</strong> and setting <strong>ProcessIdentifier</strong> equal to <strong><see cref="SharpDX.Direct3D11.AuthenticatedProcessIdentifierType.ProcessidtypeHandle"/></strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT']/*"/>	
    /// <msdn-id>hh447626</msdn-id>	
    /// <unmanaged>D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT</unmanaged>	
    /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT</unmanaged-short>	
    public  partial struct AuthenticatedQueryRestrictedSharedResourceProcessOutput {	
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.AuthenticatedQueryOutput"/></strong> structure that contains a Message Authentication Code (MAC) and other data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT::Output']/*"/>	
        /// <msdn-id>hh447626</msdn-id>	
        /// <unmanaged>D3D11_AUTHENTICATED_QUERY_OUTPUT Output</unmanaged>	
        /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_OUTPUT Output</unmanaged-short>	
        public SharpDX.Direct3D11.AuthenticatedQueryOutput Output;
        
        /// <summary>	
        /// <dd> <p>The index of the process in the list of processes.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT::ProcessIndex']/*"/>	
        /// <msdn-id>hh447626</msdn-id>	
        /// <unmanaged>unsigned int ProcessIndex</unmanaged>	
        /// <unmanaged-short>unsigned int ProcessIndex</unmanaged-short>	
        public int ProcessIndex;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.AuthenticatedProcessIdentifierType"/></strong> value that specifies the type of process.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT::ProcessIdentifier']/*"/>	
        /// <msdn-id>hh447626</msdn-id>	
        /// <unmanaged>D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE ProcessIdentifier</unmanaged>	
        /// <unmanaged-short>D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE ProcessIdentifier</unmanaged-short>	
        public SharpDX.Direct3D11.AuthenticatedProcessIdentifierType ProcessIdentifier;
        
        /// <summary>	
        /// <dd> <p>A process handle. If the <strong>ProcessIdentifier</strong> member equals <strong><see cref="SharpDX.Direct3D11.AuthenticatedProcessIdentifierType.ProcessidtypeHandle"/></strong>, the <strong>ProcessHandle</strong> member contains a valid handle to a process. Otherwise, this member is ignored.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT::ProcessHandle']/*"/>	
        /// <msdn-id>hh447626</msdn-id>	
        /// <unmanaged>void* ProcessHandle</unmanaged>	
        /// <unmanaged-short>void ProcessHandle</unmanaged-short>	
        public System.IntPtr ProcessHandle;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public SharpDX.Direct3D11.AuthenticatedQueryOutput.__Native Output;
            public int ProcessIndex;
            public SharpDX.Direct3D11.AuthenticatedProcessIdentifierType ProcessIdentifier;
            public System.IntPtr ProcessHandle;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                this.Output.__MarshalFree();
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Output = new SharpDX.Direct3D11.AuthenticatedQueryOutput();
			this.Output.__MarshalFrom(ref @ref.Output);
            this.ProcessIndex = @ref.ProcessIndex;
            this.ProcessIdentifier = @ref.ProcessIdentifier;
            this.ProcessHandle = @ref.ProcessHandle;
        }
    }
    
    /// <summary>	
    /// <p>Contains the response to a <strong>D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT</strong> query.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT']/*"/>	
    /// <msdn-id>hh447627</msdn-id>	
    /// <unmanaged>D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT</unmanaged>	
    /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT</unmanaged-short>	
    public  partial struct AuthenticatedQueryUnrestrictedProtectedSharedResourceCountOutput {	
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.AuthenticatedQueryOutput"/></strong> structure that contains a Message Authentication Code (MAC) and other data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT::Output']/*"/>	
        /// <msdn-id>hh447627</msdn-id>	
        /// <unmanaged>D3D11_AUTHENTICATED_QUERY_OUTPUT Output</unmanaged>	
        /// <unmanaged-short>D3D11_AUTHENTICATED_QUERY_OUTPUT Output</unmanaged-short>	
        public SharpDX.Direct3D11.AuthenticatedQueryOutput Output;
        
        /// <summary>	
        /// <dd> <p>The number of protected, shared resources that can be opened by any process without restrictions.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT::UnrestrictedProtectedSharedResourceCount']/*"/>	
        /// <msdn-id>hh447627</msdn-id>	
        /// <unmanaged>unsigned int UnrestrictedProtectedSharedResourceCount</unmanaged>	
        /// <unmanaged-short>unsigned int UnrestrictedProtectedSharedResourceCount</unmanaged-short>	
        public int UnrestrictedProtectedSharedResourceCount;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public SharpDX.Direct3D11.AuthenticatedQueryOutput.__Native Output;
            public int UnrestrictedProtectedSharedResourceCount;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                this.Output.__MarshalFree();
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Output = new SharpDX.Direct3D11.AuthenticatedQueryOutput();
			this.Output.__MarshalFrom(ref @ref.Output);
            this.UnrestrictedProtectedSharedResourceCount = @ref.UnrestrictedProtectedSharedResourceCount;
        }
    }
    
    /// <summary>	
    /// <p>Describes the blend state that you use in a call to <strong><see cref="SharpDX.Direct3D11.Device.CreateBlendState"/></strong> to create a blend-state object.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Here are the default values for blend state.</p><table> <tr><th>State</th><th>Default Value</th></tr> <tr><td>AlphaToCoverageEnable</td><td><strong><see cref="SharpDX.Result.False"/></strong></td></tr> <tr><td>IndependentBlendEnable</td><td><strong><see cref="SharpDX.Result.False"/></strong></td></tr> <tr><td>RenderTarget[0].BlendEnable</td><td><strong><see cref="SharpDX.Result.False"/></strong></td></tr> <tr><td>RenderTarget[0].SrcBlend</td><td><see cref="SharpDX.Direct3D11.BlendOption.One"/></td></tr> <tr><td>RenderTarget[0].DestBlend</td><td><see cref="SharpDX.Direct3D11.BlendOption.Zero"/></td></tr> <tr><td>RenderTarget[0].BlendOp</td><td><see cref="SharpDX.Direct3D11.BlendOperation.Add"/></td></tr> <tr><td>RenderTarget[0].SrcBlendAlpha</td><td><see cref="SharpDX.Direct3D11.BlendOption.One"/></td></tr> <tr><td>RenderTarget[0].DestBlendAlpha</td><td><see cref="SharpDX.Direct3D11.BlendOption.Zero"/></td></tr> <tr><td>RenderTarget[0].BlendOpAlpha</td><td><see cref="SharpDX.Direct3D11.BlendOperation.Add"/></td></tr> <tr><td>RenderTarget[0].RenderTargetWriteMask</td><td><see cref="SharpDX.Direct3D11.ColorWriteMaskFlags.All"/></td></tr> </table><p>?</p><p><strong>Note</strong>??<strong><see cref="SharpDX.Direct3D11.BlendStateDescription"/></strong> is identical to <strong>D3D10_BLEND_DESC1</strong>.</p><p>If the driver type is set to <strong><see cref="SharpDX.Direct3D.DriverType.Hardware"/></strong>, the feature level is set to less than or equal to <strong><see cref="SharpDX.Direct3D.FeatureLevel.Level_9_3"/></strong>, and the pixel format of the render target is set to <strong><see cref="SharpDX.DXGI.Format.R8G8B8A8_UNorm_SRgb"/></strong>, <strong><see cref="SharpDX.DXGI.Format.B8G8R8A8_UNorm_SRgb"/></strong>, or <strong><see cref="SharpDX.DXGI.Format.B8G8R8X8_UNorm_SRgb"/></strong>, the display device performs the blend in standard RGB (sRGB) space and not in linear space. However, if the feature level is set to greater than <strong><see cref="SharpDX.Direct3D.FeatureLevel.Level_9_3"/></strong>, the display device performs the blend in linear space, which is ideal.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BLEND_DESC']/*"/>	
    /// <msdn-id>ff476087</msdn-id>	
    /// <unmanaged>D3D11_BLEND_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_BLEND_DESC</unmanaged-short>	
    public  partial struct BlendStateDescription {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BLEND_DESC::AlphaToCoverageEnable']/*"/>	
        /// <msdn-id>ff476087</msdn-id>	
        /// <unmanaged>BOOL AlphaToCoverageEnable</unmanaged>	
        /// <unmanaged-short>BOOL AlphaToCoverageEnable</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool AlphaToCoverageEnable;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BLEND_DESC::IndependentBlendEnable']/*"/>	
        /// <msdn-id>ff476087</msdn-id>	
        /// <unmanaged>BOOL IndependentBlendEnable</unmanaged>	
        /// <unmanaged-short>BOOL IndependentBlendEnable</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IndependentBlendEnable;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BLEND_DESC::RenderTarget']/*"/>	
        /// <msdn-id>ff476087</msdn-id>	
        /// <unmanaged>D3D11_RENDER_TARGET_BLEND_DESC RenderTarget[8]</unmanaged>	
        /// <unmanaged-short>D3D11_RENDER_TARGET_BLEND_DESC RenderTarget</unmanaged-short>	
        public SharpDX.Direct3D11.RenderTargetBlendDescription[] RenderTarget { 
            get { return _RenderTarget ?? (_RenderTarget = new SharpDX.Direct3D11.RenderTargetBlendDescription[8]);}
        }
        internal SharpDX.Direct3D11.RenderTargetBlendDescription[] _RenderTarget;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public SharpDX.Mathematics.Interop.RawBool AlphaToCoverageEnable;
            public SharpDX.Mathematics.Interop.RawBool IndependentBlendEnable;
            public SharpDX.Direct3D11.RenderTargetBlendDescription RenderTarget;
            SharpDX.Direct3D11.RenderTargetBlendDescription __RenderTarget1;
            SharpDX.Direct3D11.RenderTargetBlendDescription __RenderTarget2;
            SharpDX.Direct3D11.RenderTargetBlendDescription __RenderTarget3;
            SharpDX.Direct3D11.RenderTargetBlendDescription __RenderTarget4;
            SharpDX.Direct3D11.RenderTargetBlendDescription __RenderTarget5;
            SharpDX.Direct3D11.RenderTargetBlendDescription __RenderTarget6;
            SharpDX.Direct3D11.RenderTargetBlendDescription __RenderTarget7;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.AlphaToCoverageEnable = @ref.AlphaToCoverageEnable;
            this.IndependentBlendEnable = @ref.IndependentBlendEnable;
            fixed (void* __to = &this.RenderTarget[0]) fixed (void* __from = &@ref.RenderTarget) SharpDX.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, 8*sizeof ( SharpDX.Direct3D11.RenderTargetBlendDescription));
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.AlphaToCoverageEnable = this.AlphaToCoverageEnable;
            @ref.IndependentBlendEnable = this.IndependentBlendEnable;
            fixed (void* __to = &@ref.RenderTarget) fixed (void* __from = &this.RenderTarget[0]) SharpDX.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, 8*sizeof ( SharpDX.Direct3D11.RenderTargetBlendDescription));
		
		}
    }
    
    /// <summary>	
    /// <p><strong>Note</strong>??This structure is supported by the Direct3D 11.1 runtime, which is available on Windows?8 and later operating systems.</p><p>Describes the blend state that you use in a call to <strong><see cref="SharpDX.Direct3D11.Device1.CreateBlendState1"/></strong> to create a blend-state object.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Here are the default values for blend state.</p><table> <tr><th>State</th><th>Default Value</th></tr> <tr><td>AlphaToCoverageEnable</td><td><strong><see cref="SharpDX.Result.False"/></strong></td></tr> <tr><td>IndependentBlendEnable</td><td><strong><see cref="SharpDX.Result.False"/></strong></td></tr> <tr><td>RenderTarget[0].BlendEnable</td><td><strong><see cref="SharpDX.Result.False"/></strong></td></tr> <tr><td>RenderTarget[0].LogicOpEnable</td><td><strong><see cref="SharpDX.Result.False"/></strong></td></tr> <tr><td>RenderTarget[0].SrcBlend</td><td><see cref="SharpDX.Direct3D11.BlendOption.One"/></td></tr> <tr><td>RenderTarget[0].DestBlend</td><td><see cref="SharpDX.Direct3D11.BlendOption.Zero"/></td></tr> <tr><td>RenderTarget[0].BlendOp</td><td><see cref="SharpDX.Direct3D11.BlendOperation.Add"/></td></tr> <tr><td>RenderTarget[0].SrcBlendAlpha</td><td><see cref="SharpDX.Direct3D11.BlendOption.One"/></td></tr> <tr><td>RenderTarget[0].DestBlendAlpha</td><td><see cref="SharpDX.Direct3D11.BlendOption.Zero"/></td></tr> <tr><td>RenderTarget[0].BlendOpAlpha</td><td><see cref="SharpDX.Direct3D11.BlendOperation.Add"/></td></tr> <tr><td>RenderTarget[0].LogicOp</td><td><see cref="SharpDX.Direct3D11.LogicOperation.Noop"/></td></tr> <tr><td>RenderTarget[0].RenderTargetWriteMask</td><td><see cref="SharpDX.Direct3D11.ColorWriteMaskFlags.All"/></td></tr> </table><p>?</p><p>If the driver type is set to <strong><see cref="SharpDX.Direct3D.DriverType.Hardware"/></strong>, the feature level is set to less than or equal to <strong><see cref="SharpDX.Direct3D.FeatureLevel.Level_9_3"/></strong>, and the pixel format of the render target is set to <strong><see cref="SharpDX.DXGI.Format.R8G8B8A8_UNorm_SRgb"/></strong>, <strong><see cref="SharpDX.DXGI.Format.B8G8R8A8_UNorm_SRgb"/></strong>, or <strong><see cref="SharpDX.DXGI.Format.B8G8R8X8_UNorm_SRgb"/></strong>, the display device performs the blend in standard RGB (sRGB) space and not in linear space. However, if the feature level is set to greater than <strong><see cref="SharpDX.Direct3D.FeatureLevel.Level_9_3"/></strong>, the display device performs the blend in linear space, which is ideal.</p><p>When you set the <strong>LogicOpEnable</strong> member of the first element of the <strong>RenderTarget</strong> array (<strong>RenderTarget</strong>[0]) to <strong>TRUE</strong>, you must also set the <strong>BlendEnable</strong> member of  <strong>RenderTarget</strong>[0] to <strong><see cref="SharpDX.Result.False"/></strong>, and the <strong>IndependentBlendEnable</strong> member of  this <strong><see cref="SharpDX.Direct3D11.BlendStateDescription1"/></strong> to <strong><see cref="SharpDX.Result.False"/></strong>.  This reflects the limitation in hardware that you can't mix logic operations with blending across multiple render targets, and that when you use a logic operation, you must apply the same logic operation to all render targets.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BLEND_DESC1']/*"/>	
    /// <msdn-id>hh404435</msdn-id>	
    /// <unmanaged>D3D11_BLEND_DESC1</unmanaged>	
    /// <unmanaged-short>D3D11_BLEND_DESC1</unmanaged-short>	
    public  partial struct BlendStateDescription1 {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BLEND_DESC1::AlphaToCoverageEnable']/*"/>	
        /// <msdn-id>hh404435</msdn-id>	
        /// <unmanaged>BOOL AlphaToCoverageEnable</unmanaged>	
        /// <unmanaged-short>BOOL AlphaToCoverageEnable</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool AlphaToCoverageEnable;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BLEND_DESC1::IndependentBlendEnable']/*"/>	
        /// <msdn-id>hh404435</msdn-id>	
        /// <unmanaged>BOOL IndependentBlendEnable</unmanaged>	
        /// <unmanaged-short>BOOL IndependentBlendEnable</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IndependentBlendEnable;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BLEND_DESC1::RenderTarget']/*"/>	
        /// <msdn-id>hh404435</msdn-id>	
        /// <unmanaged>D3D11_RENDER_TARGET_BLEND_DESC1 RenderTarget[8]</unmanaged>	
        /// <unmanaged-short>D3D11_RENDER_TARGET_BLEND_DESC1 RenderTarget</unmanaged-short>	
        public SharpDX.Direct3D11.RenderTargetBlendDescription1[] RenderTarget { 
            get { return _RenderTarget ?? (_RenderTarget = new SharpDX.Direct3D11.RenderTargetBlendDescription1[8]);}
        }
        internal SharpDX.Direct3D11.RenderTargetBlendDescription1[] _RenderTarget;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public SharpDX.Mathematics.Interop.RawBool AlphaToCoverageEnable;
            public SharpDX.Mathematics.Interop.RawBool IndependentBlendEnable;
            public SharpDX.Direct3D11.RenderTargetBlendDescription1 RenderTarget;
            SharpDX.Direct3D11.RenderTargetBlendDescription1 __RenderTarget1;
            SharpDX.Direct3D11.RenderTargetBlendDescription1 __RenderTarget2;
            SharpDX.Direct3D11.RenderTargetBlendDescription1 __RenderTarget3;
            SharpDX.Direct3D11.RenderTargetBlendDescription1 __RenderTarget4;
            SharpDX.Direct3D11.RenderTargetBlendDescription1 __RenderTarget5;
            SharpDX.Direct3D11.RenderTargetBlendDescription1 __RenderTarget6;
            SharpDX.Direct3D11.RenderTargetBlendDescription1 __RenderTarget7;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.AlphaToCoverageEnable = @ref.AlphaToCoverageEnable;
            this.IndependentBlendEnable = @ref.IndependentBlendEnable;
            fixed (void* __to = &this.RenderTarget[0]) fixed (void* __from = &@ref.RenderTarget) SharpDX.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, 8*sizeof ( SharpDX.Direct3D11.RenderTargetBlendDescription1));
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.AlphaToCoverageEnable = this.AlphaToCoverageEnable;
            @ref.IndependentBlendEnable = this.IndependentBlendEnable;
            fixed (void* __to = &@ref.RenderTarget) fixed (void* __from = &this.RenderTarget[0]) SharpDX.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, 8*sizeof ( SharpDX.Direct3D11.RenderTargetBlendDescription1));
		
		}
    }
    
    /// <summary>	
    /// <p>Describes a buffer resource.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This structure is used by <strong><see cref="SharpDX.Direct3D11.Device.CreateBuffer"/></strong> to create buffer resources.</p><p>In addition to this structure, you can also use the <strong>CD3D11_BUFFER_DESC</strong> derived structure, which is defined  in D3D11.h and behaves like an inherited class, to help create a buffer description.</p><p>If the bind flag is <strong><see cref="SharpDX.Direct3D11.BindFlags.ConstantBuffer"/></strong>, you must set the <strong>ByteWidth</strong> value in multiples of 16, and less than or equal to <strong>D3D11_REQ_CONSTANT_BUFFER_ELEMENT_COUNT</strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BUFFER_DESC']/*"/>	
    /// <msdn-id>ff476092</msdn-id>	
    /// <unmanaged>D3D11_BUFFER_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_BUFFER_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct BufferDescription {	
        
        /// <summary>	
        /// <dd> <p>Size of the buffer in bytes.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BUFFER_DESC::ByteWidth']/*"/>	
        /// <msdn-id>ff476092</msdn-id>	
        /// <unmanaged>unsigned int ByteWidth</unmanaged>	
        /// <unmanaged-short>unsigned int ByteWidth</unmanaged-short>	
        public int SizeInBytes;
        
        /// <summary>	
        /// <dd> <p>Identify how the buffer is expected to be read from and written to. Frequency of update is a key factor. The most common value is typically <see cref="SharpDX.Direct3D11.ResourceUsage.Default"/>; see <strong><see cref="SharpDX.Direct3D11.ResourceUsage"/></strong> for all possible values.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BUFFER_DESC::Usage']/*"/>	
        /// <msdn-id>ff476092</msdn-id>	
        /// <unmanaged>D3D11_USAGE Usage</unmanaged>	
        /// <unmanaged-short>D3D11_USAGE Usage</unmanaged-short>	
        public SharpDX.Direct3D11.ResourceUsage Usage;
        
        /// <summary>	
        /// <dd> <p>Identify how the buffer will be bound to the pipeline. Flags (see <strong><see cref="SharpDX.Direct3D11.BindFlags"/></strong>) can be combined with a logical OR.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BUFFER_DESC::BindFlags']/*"/>	
        /// <msdn-id>ff476092</msdn-id>	
        /// <unmanaged>D3D11_BIND_FLAG BindFlags</unmanaged>	
        /// <unmanaged-short>D3D11_BIND_FLAG BindFlags</unmanaged-short>	
        public SharpDX.Direct3D11.BindFlags BindFlags;
        
        /// <summary>	
        /// <dd> <p>CPU access flags (see <strong><see cref="SharpDX.Direct3D11.CpuAccessFlags"/></strong>) or 0 if no CPU access is necessary. Flags can be combined with a logical OR.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BUFFER_DESC::CPUAccessFlags']/*"/>	
        /// <msdn-id>ff476092</msdn-id>	
        /// <unmanaged>D3D11_CPU_ACCESS_FLAG CPUAccessFlags</unmanaged>	
        /// <unmanaged-short>D3D11_CPU_ACCESS_FLAG CPUAccessFlags</unmanaged-short>	
        public SharpDX.Direct3D11.CpuAccessFlags CpuAccessFlags;
        
        /// <summary>	
        /// <dd> <p>Miscellaneous flags (see <strong><see cref="SharpDX.Direct3D11.ResourceOptionFlags"/></strong>) or 0 if unused. Flags can be combined with a logical OR.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BUFFER_DESC::MiscFlags']/*"/>	
        /// <msdn-id>ff476092</msdn-id>	
        /// <unmanaged>D3D11_RESOURCE_MISC_FLAG MiscFlags</unmanaged>	
        /// <unmanaged-short>D3D11_RESOURCE_MISC_FLAG MiscFlags</unmanaged-short>	
        public SharpDX.Direct3D11.ResourceOptionFlags OptionFlags;
        
        /// <summary>	
        /// <dd> <p>The size of each element in the buffer structure (in bytes) when the buffer represents a structured buffer. For more info about structured buffers, see Structured Buffer.</p> <p>The size value in <strong>StructureByteStride</strong> must match the size of the format that you use for views of the buffer. For example, if you use a shader resource view (SRV) to read a buffer in a pixel shader, the SRV format size must match the size value in <strong>StructureByteStride</strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BUFFER_DESC::StructureByteStride']/*"/>	
        /// <msdn-id>ff476092</msdn-id>	
        /// <unmanaged>unsigned int StructureByteStride</unmanaged>	
        /// <unmanaged-short>unsigned int StructureByteStride</unmanaged-short>	
        public int StructureByteStride;
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='CD3D11_VIDEO_DEFAULT']/*"/>	
    /// <unmanaged>CD3D11_VIDEO_DEFAULT</unmanaged>	
    /// <unmanaged-short>CD3D11_VIDEO_DEFAULT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct Cd3d11VideoDefault {	
    }
    
    /// <summary>	
    /// <p>Describes an HLSL class instance.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <see cref="SharpDX.Direct3D11.ClassInstanceDescription"/> structure is returned by the <strong><see cref="SharpDX.Direct3D11.ClassInstance.GetDescription"/></strong> method.</p><p>The members of this structure except <strong>InstanceIndex</strong> are valid (non default values) if they describe a class instance aquired using  <strong><see cref="SharpDX.Direct3D11.ClassLinkage.CreateClassInstance"/></strong>.  The <strong>InstanceIndex</strong> member is only valid when the class instance is aquired using <strong><see cref="SharpDX.Direct3D11.ClassLinkage.GetClassInstance"/></strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_CLASS_INSTANCE_DESC']/*"/>	
    /// <msdn-id>ff476098</msdn-id>	
    /// <unmanaged>D3D11_CLASS_INSTANCE_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_CLASS_INSTANCE_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct ClassInstanceDescription {	
        
        /// <summary>	
        /// <dd> <p>The instance ID of an HLSL class; the default value is 0.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_CLASS_INSTANCE_DESC::InstanceId']/*"/>	
        /// <msdn-id>ff476098</msdn-id>	
        /// <unmanaged>unsigned int InstanceId</unmanaged>	
        /// <unmanaged-short>unsigned int InstanceId</unmanaged-short>	
        public int InstanceId;
        
        /// <summary>	
        /// <dd> <p>The instance index of an HLSL class; the default value is 0.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_CLASS_INSTANCE_DESC::InstanceIndex']/*"/>	
        /// <msdn-id>ff476098</msdn-id>	
        /// <unmanaged>unsigned int InstanceIndex</unmanaged>	
        /// <unmanaged-short>unsigned int InstanceIndex</unmanaged-short>	
        public int InstanceIndex;
        
        /// <summary>	
        /// <dd> <p>The type ID of an HLSL class; the default value is 0.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_CLASS_INSTANCE_DESC::TypeId']/*"/>	
        /// <msdn-id>ff476098</msdn-id>	
        /// <unmanaged>unsigned int TypeId</unmanaged>	
        /// <unmanaged-short>unsigned int TypeId</unmanaged-short>	
        public int TypeId;
        
        /// <summary>	
        /// <dd> <p>Describes the constant buffer associated with an HLSL class; the default value is 0.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_CLASS_INSTANCE_DESC::ConstantBuffer']/*"/>	
        /// <msdn-id>ff476098</msdn-id>	
        /// <unmanaged>unsigned int ConstantBuffer</unmanaged>	
        /// <unmanaged-short>unsigned int ConstantBuffer</unmanaged-short>	
        public int ConstantBuffer;
        
        /// <summary>	
        /// <dd> <p>The base constant buffer offset associated with an HLSL class; the default value is 0.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_CLASS_INSTANCE_DESC::BaseConstantBufferOffset']/*"/>	
        /// <msdn-id>ff476098</msdn-id>	
        /// <unmanaged>unsigned int BaseConstantBufferOffset</unmanaged>	
        /// <unmanaged-short>unsigned int BaseConstantBufferOffset</unmanaged-short>	
        public int BaseConstantBufferOffset;
        
        /// <summary>	
        /// <dd> <p>The base texture associated with an HLSL class; the default value is 127.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_CLASS_INSTANCE_DESC::BaseTexture']/*"/>	
        /// <msdn-id>ff476098</msdn-id>	
        /// <unmanaged>unsigned int BaseTexture</unmanaged>	
        /// <unmanaged-short>unsigned int BaseTexture</unmanaged-short>	
        public int BaseTexture;
        
        /// <summary>	
        /// <dd> <p>The base sampler associated with an HLSL class; the default value is 15.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_CLASS_INSTANCE_DESC::BaseSampler']/*"/>	
        /// <msdn-id>ff476098</msdn-id>	
        /// <unmanaged>unsigned int BaseSampler</unmanaged>	
        /// <unmanaged-short>unsigned int BaseSampler</unmanaged-short>	
        public int BaseSampler;
        
        /// <summary>	
        /// <dd> <p>True if the class was created; the default value is false.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_CLASS_INSTANCE_DESC::Created']/*"/>	
        /// <msdn-id>ff476098</msdn-id>	
        /// <unmanaged>BOOL Created</unmanaged>	
        /// <unmanaged-short>BOOL Created</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IsCreated;
    }
    
    /// <summary>	
    /// <p>Information about the video card's performance counter capabilities.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This structure is returned by <strong><see cref="SharpDX.Direct3D11.Device.GetCounterCapabilities"/></strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_COUNTER_INFO']/*"/>	
    /// <msdn-id>ff476104</msdn-id>	
    /// <unmanaged>D3D11_COUNTER_INFO</unmanaged>	
    /// <unmanaged-short>D3D11_COUNTER_INFO</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct CounterCapabilities {	
        
        /// <summary>	
        /// <dd> <p>Largest device-dependent counter ID that the device supports. If none are supported, this value will be 0. Otherwise it will be greater than or equal to <see cref="SharpDX.Direct3D11.CounterKind.DeviceDependent0"/>. See <strong><see cref="SharpDX.Direct3D11.CounterKind"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_COUNTER_INFO::LastDeviceDependentCounter']/*"/>	
        /// <msdn-id>ff476104</msdn-id>	
        /// <unmanaged>D3D11_COUNTER LastDeviceDependentCounter</unmanaged>	
        /// <unmanaged-short>D3D11_COUNTER LastDeviceDependentCounter</unmanaged-short>	
        public SharpDX.Direct3D11.CounterKind LastDeviceDependentCounter;
        
        /// <summary>	
        /// <dd> <p>Number of counters that can be simultaneously supported.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_COUNTER_INFO::NumSimultaneousCounters']/*"/>	
        /// <msdn-id>ff476104</msdn-id>	
        /// <unmanaged>unsigned int NumSimultaneousCounters</unmanaged>	
        /// <unmanaged-short>unsigned int NumSimultaneousCounters</unmanaged-short>	
        public int SimultaneousCounterCount;
        
        /// <summary>	
        /// <dd> <p>Number of detectable parallel units that the counter is able to discern. Values are 1 ~ 4. Use NumDetectableParallelUnits to interpret the values of the VERTEX_PROCESSING, GEOMETRY_PROCESSING, PIXEL_PROCESSING, and OTHER_GPU_PROCESSING counters. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_COUNTER_INFO::NumDetectableParallelUnits']/*"/>	
        /// <msdn-id>ff476104</msdn-id>	
        /// <unmanaged>unsigned char NumDetectableParallelUnits</unmanaged>	
        /// <unmanaged-short>unsigned char NumDetectableParallelUnits</unmanaged-short>	
        public byte DetectableParallelUnitCount;
    }
    
    /// <summary>	
    /// <p>Describes a counter.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This structure is used by <strong><see cref="SharpDX.Direct3D11.Counter.GetDescription"/></strong>, <strong><see cref="SharpDX.Direct3D11.Device.CheckCounter"/></strong> and <strong><see cref="SharpDX.Direct3D11.Device.CreateCounter"/></strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_COUNTER_DESC']/*"/>	
    /// <msdn-id>ff476103</msdn-id>	
    /// <unmanaged>D3D11_COUNTER_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_COUNTER_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct CounterDescription {	
        
        /// <summary>	
        /// <dd> <p>Type of counter (see <strong><see cref="SharpDX.Direct3D11.CounterKind"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_COUNTER_DESC::Counter']/*"/>	
        /// <msdn-id>ff476103</msdn-id>	
        /// <unmanaged>D3D11_COUNTER Counter</unmanaged>	
        /// <unmanaged-short>D3D11_COUNTER Counter</unmanaged-short>	
        public SharpDX.Direct3D11.CounterKind Counter;
        
        /// <summary>	
        /// <dd> <p>Reserved.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_COUNTER_DESC::MiscFlags']/*"/>	
        /// <msdn-id>ff476103</msdn-id>	
        /// <unmanaged>unsigned int MiscFlags</unmanaged>	
        /// <unmanaged-short>unsigned int MiscFlags</unmanaged-short>	
        public int MiscFlags;
    }
    
    /// <summary>	
    /// <p> Used with <strong><see cref="SharpDX.Direct3D11.ID3D11On12Device.CreateWrappedResource"/></strong> to override flags that would be inferred by the resource properties or heap properties, including bind flags, misc flags, and CPU access flags. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> Use this structure with <strong>CreateWrappedResource</strong>. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RESOURCE_FLAGS']/*"/>	
    /// <msdn-id>dn914753</msdn-id>	
    /// <unmanaged>D3D11_RESOURCE_FLAGS</unmanaged>	
    /// <unmanaged-short>D3D11_RESOURCE_FLAGS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct D3D11ResourceFlags {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RESOURCE_FLAGS::BindFlags']/*"/>	
        /// <msdn-id>dn914753</msdn-id>	
        /// <unmanaged>unsigned int BindFlags</unmanaged>	
        /// <unmanaged-short>unsigned int BindFlags</unmanaged-short>	
        public int BindFlags;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RESOURCE_FLAGS::MiscFlags']/*"/>	
        /// <msdn-id>dn914753</msdn-id>	
        /// <unmanaged>unsigned int MiscFlags</unmanaged>	
        /// <unmanaged-short>unsigned int MiscFlags</unmanaged-short>	
        public int MiscFlags;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RESOURCE_FLAGS::CPUAccessFlags']/*"/>	
        /// <msdn-id>dn914753</msdn-id>	
        /// <unmanaged>unsigned int CPUAccessFlags</unmanaged>	
        /// <unmanaged-short>unsigned int CPUAccessFlags</unmanaged-short>	
        public int CPUAccessFlags;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RESOURCE_FLAGS::StructureByteStride']/*"/>	
        /// <msdn-id>dn914753</msdn-id>	
        /// <unmanaged>unsigned int StructureByteStride</unmanaged>	
        /// <unmanaged-short>unsigned int StructureByteStride</unmanaged-short>	
        public int StructureByteStride;
    }
    
    /// <summary>	
    /// <p>Stencil operations that can be performed based on the results of stencil test.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>All stencil operations are specified as a <strong><see cref="SharpDX.Direct3D11.StencilOperation"/></strong>. The stencil operation can be set differently based on the outcome of the stencil test (which is referred to as <strong>StencilFunc</strong> in the stencil test portion of depth-stencil testing.</p><p>This structure is a member of a <strong>depth-stencil description</strong>. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DEPTH_STENCILOP_DESC']/*"/>	
    /// <msdn-id>ff476109</msdn-id>	
    /// <unmanaged>D3D11_DEPTH_STENCILOP_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_DEPTH_STENCILOP_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct DepthStencilOperationDescription {	
        
        /// <summary>	
        /// <dd> <p>The stencil operation to perform when stencil testing fails.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DEPTH_STENCILOP_DESC::StencilFailOp']/*"/>	
        /// <msdn-id>ff476109</msdn-id>	
        /// <unmanaged>D3D11_STENCIL_OP StencilFailOp</unmanaged>	
        /// <unmanaged-short>D3D11_STENCIL_OP StencilFailOp</unmanaged-short>	
        public SharpDX.Direct3D11.StencilOperation FailOperation;
        
        /// <summary>	
        /// <dd> <p>The stencil operation to perform when stencil testing passes and depth testing fails.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DEPTH_STENCILOP_DESC::StencilDepthFailOp']/*"/>	
        /// <msdn-id>ff476109</msdn-id>	
        /// <unmanaged>D3D11_STENCIL_OP StencilDepthFailOp</unmanaged>	
        /// <unmanaged-short>D3D11_STENCIL_OP StencilDepthFailOp</unmanaged-short>	
        public SharpDX.Direct3D11.StencilOperation DepthFailOperation;
        
        /// <summary>	
        /// <dd> <p>The stencil operation to perform when stencil testing and depth testing both pass.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DEPTH_STENCILOP_DESC::StencilPassOp']/*"/>	
        /// <msdn-id>ff476109</msdn-id>	
        /// <unmanaged>D3D11_STENCIL_OP StencilPassOp</unmanaged>	
        /// <unmanaged-short>D3D11_STENCIL_OP StencilPassOp</unmanaged-short>	
        public SharpDX.Direct3D11.StencilOperation PassOperation;
        
        /// <summary>	
        /// <dd> <p>A function that compares stencil data against existing stencil data. The function options are listed in <strong><see cref="SharpDX.Direct3D11.Comparison"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DEPTH_STENCILOP_DESC::StencilFunc']/*"/>	
        /// <msdn-id>ff476109</msdn-id>	
        /// <unmanaged>D3D11_COMPARISON_FUNC StencilFunc</unmanaged>	
        /// <unmanaged-short>D3D11_COMPARISON_FUNC StencilFunc</unmanaged-short>	
        public SharpDX.Direct3D11.Comparison Comparison;
    }
    
    /// <summary>	
    /// <p>Describes depth-stencil state.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Pass a reference to <strong><see cref="SharpDX.Direct3D11.DepthStencilStateDescription"/></strong> to the  <strong><see cref="SharpDX.Direct3D11.Device.CreateDepthStencilState"/></strong> method to create the depth-stencil state object.</p><p>Depth-stencil state controls how depth-stencil testing is performed by the output-merger stage.</p><p>The following table shows the default values of depth-stencil states.</p><table> <tr><th>State</th><th>Default Value</th></tr> <tr><td>DepthEnable</td><td>TRUE</td></tr> <tr><td>DepthWriteMask</td><td><see cref="SharpDX.Direct3D11.DepthWriteMask.All"/></td></tr> <tr><td>DepthFunc</td><td><see cref="SharpDX.Direct3D11.Comparison.Less"/></td></tr> <tr><td>StencilEnable</td><td><see cref="SharpDX.Result.False"/></td></tr> <tr><td>StencilReadMask</td><td>D3D11_DEFAULT_STENCIL_READ_MASK</td></tr> <tr><td>StencilWriteMask</td><td>D3D11_DEFAULT_STENCIL_WRITE_MASK</td></tr> <tr><td> <p>FrontFace.StencilFunc</p> <p>and</p> <p>BackFace.StencilFunc</p> </td><td><see cref="SharpDX.Direct3D11.Comparison.Always"/></td></tr> <tr><td> <p>FrontFace.StencilDepthFailOp</p> <p>and</p> <p>BackFace.StencilDepthFailOp</p> </td><td><see cref="SharpDX.Direct3D11.StencilOperation.Keep"/></td></tr> <tr><td> <p>FrontFace.StencilPassOp</p> <p>and</p> <p>BackFace.StencilPassOp</p> </td><td><see cref="SharpDX.Direct3D11.StencilOperation.Keep"/></td></tr> <tr><td> <p>FrontFace.StencilFailOp</p> <p>and</p> <p>BackFace.StencilFailOp</p> </td><td><see cref="SharpDX.Direct3D11.StencilOperation.Keep"/></td></tr> </table><p>?</p><p>The formats that support stenciling are <see cref="SharpDX.DXGI.Format.D24_UNorm_S8_UInt"/> and <see cref="SharpDX.DXGI.Format.D32_Float_S8X24_UInt"/>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DEPTH_STENCIL_DESC']/*"/>	
    /// <msdn-id>ff476110</msdn-id>	
    /// <unmanaged>D3D11_DEPTH_STENCIL_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_DEPTH_STENCIL_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct DepthStencilStateDescription {	
        
        /// <summary>	
        /// <dd> <p>Enable depth testing.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DEPTH_STENCIL_DESC::DepthEnable']/*"/>	
        /// <msdn-id>ff476110</msdn-id>	
        /// <unmanaged>BOOL DepthEnable</unmanaged>	
        /// <unmanaged-short>BOOL DepthEnable</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IsDepthEnabled;
        
        /// <summary>	
        /// <dd> <p>Identify a portion of the depth-stencil buffer that can be modified by depth data (see <strong><see cref="SharpDX.Direct3D11.DepthWriteMask"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DEPTH_STENCIL_DESC::DepthWriteMask']/*"/>	
        /// <msdn-id>ff476110</msdn-id>	
        /// <unmanaged>D3D11_DEPTH_WRITE_MASK DepthWriteMask</unmanaged>	
        /// <unmanaged-short>D3D11_DEPTH_WRITE_MASK DepthWriteMask</unmanaged-short>	
        public SharpDX.Direct3D11.DepthWriteMask DepthWriteMask;
        
        /// <summary>	
        /// <dd> <p>A function that compares depth data against existing depth data. The function options are listed in <strong><see cref="SharpDX.Direct3D11.Comparison"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DEPTH_STENCIL_DESC::DepthFunc']/*"/>	
        /// <msdn-id>ff476110</msdn-id>	
        /// <unmanaged>D3D11_COMPARISON_FUNC DepthFunc</unmanaged>	
        /// <unmanaged-short>D3D11_COMPARISON_FUNC DepthFunc</unmanaged-short>	
        public SharpDX.Direct3D11.Comparison DepthComparison;
        
        /// <summary>	
        /// <dd> <p>Enable stencil testing.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DEPTH_STENCIL_DESC::StencilEnable']/*"/>	
        /// <msdn-id>ff476110</msdn-id>	
        /// <unmanaged>BOOL StencilEnable</unmanaged>	
        /// <unmanaged-short>BOOL StencilEnable</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IsStencilEnabled;
        
        /// <summary>	
        /// <dd> <p>Identify a portion of the depth-stencil buffer for reading stencil data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DEPTH_STENCIL_DESC::StencilReadMask']/*"/>	
        /// <msdn-id>ff476110</msdn-id>	
        /// <unmanaged>unsigned char StencilReadMask</unmanaged>	
        /// <unmanaged-short>unsigned char StencilReadMask</unmanaged-short>	
        public byte StencilReadMask;
        
        /// <summary>	
        /// <dd> <p>Identify a portion of the depth-stencil buffer for writing stencil data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DEPTH_STENCIL_DESC::StencilWriteMask']/*"/>	
        /// <msdn-id>ff476110</msdn-id>	
        /// <unmanaged>unsigned char StencilWriteMask</unmanaged>	
        /// <unmanaged-short>unsigned char StencilWriteMask</unmanaged-short>	
        public byte StencilWriteMask;
        
        /// <summary>	
        /// <dd> <p>Identify how to use the results of the depth test and the stencil test for pixels whose surface normal is facing towards the camera (see <strong><see cref="SharpDX.Direct3D11.DepthStencilOperationDescription"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DEPTH_STENCIL_DESC::FrontFace']/*"/>	
        /// <msdn-id>ff476110</msdn-id>	
        /// <unmanaged>D3D11_DEPTH_STENCILOP_DESC FrontFace</unmanaged>	
        /// <unmanaged-short>D3D11_DEPTH_STENCILOP_DESC FrontFace</unmanaged-short>	
        public SharpDX.Direct3D11.DepthStencilOperationDescription FrontFace;
        
        /// <summary>	
        /// <dd> <p>Identify how to use the results of the depth test and the stencil test for pixels whose surface normal is facing away from the camera (see <strong><see cref="SharpDX.Direct3D11.DepthStencilOperationDescription"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DEPTH_STENCIL_DESC::BackFace']/*"/>	
        /// <msdn-id>ff476110</msdn-id>	
        /// <unmanaged>D3D11_DEPTH_STENCILOP_DESC BackFace</unmanaged>	
        /// <unmanaged-short>D3D11_DEPTH_STENCILOP_DESC BackFace</unmanaged-short>	
        public SharpDX.Direct3D11.DepthStencilOperationDescription BackFace;
    }
    
    /// <summary>	
    /// <p>Specifies the subresources of a texture that are accessible from a depth-stencil view.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>These are valid formats for a depth-stencil view:</p><ul> <li><see cref="SharpDX.DXGI.Format.D16_UNorm"/></li> <li><see cref="SharpDX.DXGI.Format.D24_UNorm_S8_UInt"/></li> <li><see cref="SharpDX.DXGI.Format.D32_Float"/></li> <li><see cref="SharpDX.DXGI.Format.D32_Float_S8X24_UInt"/></li> <li><see cref="SharpDX.DXGI.Format.Unknown"/></li> </ul><p>A depth-stencil view cannot use a typeless format.  If the format chosen is <see cref="SharpDX.DXGI.Format.Unknown"/>, then the format of the parent resource is used.</p><p>A depth-stencil-view description is needed when calling <strong><see cref="SharpDX.Direct3D11.Device.CreateDepthStencilView"/></strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DEPTH_STENCIL_VIEW_DESC']/*"/>	
    /// <msdn-id>ff476112</msdn-id>	
    /// <unmanaged>D3D11_DEPTH_STENCIL_VIEW_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_DEPTH_STENCIL_VIEW_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Explicit)]
    public  partial struct DepthStencilViewDescription {	
        
        /// <summary>	
        /// <p>Specifies the subresource from a 2D texture that is accessible to a depth-stencil view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is one member of a depth-stencil-view description (see <strong><see cref="SharpDX.Direct3D11.DepthStencilViewDescription"/></strong>).</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_DSV']/*"/>	
        /// <msdn-id>ff476243</msdn-id>	
        /// <unmanaged>D3D11_TEX2D_DSV</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2D_DSV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DResource {	
            
            /// <summary>	
            /// <dd> <p>The index of the first mipmap level to use.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_DSV::MipSlice']/*"/>	
            /// <msdn-id>ff476243</msdn-id>	
            /// <unmanaged>unsigned int MipSlice</unmanaged>	
            /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
            public int MipSlice;
        }
        
        /// <summary>	
        /// <p>Specifies the subresources from an array of 1D textures to use in a depth-stencil view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is one member of a depth-stencil-view description (see <strong><see cref="SharpDX.Direct3D11.DepthStencilViewDescription"/></strong>).</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX1D_ARRAY_DSV']/*"/>	
        /// <msdn-id>ff476225</msdn-id>	
        /// <unmanaged>D3D11_TEX1D_ARRAY_DSV</unmanaged>	
        /// <unmanaged-short>D3D11_TEX1D_ARRAY_DSV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture1DArrayResource {	
            
            /// <summary>	
            /// <dd> <p>The index of the first mipmap level to use.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX1D_ARRAY_DSV::MipSlice']/*"/>	
            /// <msdn-id>ff476225</msdn-id>	
            /// <unmanaged>unsigned int MipSlice</unmanaged>	
            /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
            public int MipSlice;
            
            /// <summary>	
            /// <dd> <p>The index of the first texture to use in an array of textures.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX1D_ARRAY_DSV::FirstArraySlice']/*"/>	
            /// <msdn-id>ff476225</msdn-id>	
            /// <unmanaged>unsigned int FirstArraySlice</unmanaged>	
            /// <unmanaged-short>unsigned int FirstArraySlice</unmanaged-short>	
            public int FirstArraySlice;
            
            /// <summary>	
            /// <dd> <p>Number of textures to use.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX1D_ARRAY_DSV::ArraySize']/*"/>	
            /// <msdn-id>ff476225</msdn-id>	
            /// <unmanaged>unsigned int ArraySize</unmanaged>	
            /// <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
            public int ArraySize;
        }
        
        /// <summary>	
        /// <p>Specifies the subresource from a 1D texture that is accessible to a depth-stencil view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is one member of a depth-stencil-view description (see <strong><see cref="SharpDX.Direct3D11.DepthStencilViewDescription"/></strong>).</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX1D_DSV']/*"/>	
        /// <msdn-id>ff476229</msdn-id>	
        /// <unmanaged>D3D11_TEX1D_DSV</unmanaged>	
        /// <unmanaged-short>D3D11_TEX1D_DSV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture1DResource {	
            
            /// <summary>	
            /// <dd> <p>The index of the first mipmap level to use.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX1D_DSV::MipSlice']/*"/>	
            /// <msdn-id>ff476229</msdn-id>	
            /// <unmanaged>unsigned int MipSlice</unmanaged>	
            /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
            public int MipSlice;
        }
        
        /// <summary>	
        /// <p>Specifies the subresources from an array 2D textures that are accessible to a depth-stencil view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is one member of a depth-stencil-view description (see <strong><see cref="SharpDX.Direct3D11.DepthStencilViewDescription"/></strong>).</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_DSV']/*"/>	
        /// <msdn-id>ff476239</msdn-id>	
        /// <unmanaged>D3D11_TEX2D_ARRAY_DSV</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2D_ARRAY_DSV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DArrayResource {	
            
            /// <summary>	
            /// <dd> <p>The index of the first mipmap level to use.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_DSV::MipSlice']/*"/>	
            /// <msdn-id>ff476239</msdn-id>	
            /// <unmanaged>unsigned int MipSlice</unmanaged>	
            /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
            public int MipSlice;
            
            /// <summary>	
            /// <dd> <p>The index of the first texture to use in an array of textures.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_DSV::FirstArraySlice']/*"/>	
            /// <msdn-id>ff476239</msdn-id>	
            /// <unmanaged>unsigned int FirstArraySlice</unmanaged>	
            /// <unmanaged-short>unsigned int FirstArraySlice</unmanaged-short>	
            public int FirstArraySlice;
            
            /// <summary>	
            /// <dd> <p>Number of textures to use.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_DSV::ArraySize']/*"/>	
            /// <msdn-id>ff476239</msdn-id>	
            /// <unmanaged>unsigned int ArraySize</unmanaged>	
            /// <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
            public int ArraySize;
        }
        
        /// <summary>	
        /// <p>Specifies the subresource from a multisampled 2D texture that is accessible to a depth-stencil view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>Because a multisampled 2D texture contains a single subtexture, there is nothing to specify; this unused member is included so that this structure will compile in C.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2DMS_DSV']/*"/>	
        /// <msdn-id>ff476236</msdn-id>	
        /// <unmanaged>D3D11_TEX2DMS_DSV</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2DMS_DSV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DMultisampledResource {	
            
            /// <summary>	
            /// <dd> <p>Unused.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2DMS_DSV::UnusedField_NothingToDefine']/*"/>	
            /// <msdn-id>ff476236</msdn-id>	
            /// <unmanaged>unsigned int UnusedField_NothingToDefine</unmanaged>	
            /// <unmanaged-short>unsigned int UnusedField_NothingToDefine</unmanaged-short>	
            public int UnusedFieldNothingToDefine;
        }
        
        /// <summary>	
        /// <p>Specifies the subresources from an array of multisampled 2D textures for a depth-stencil view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is one member of a depth-stencil-view description (see <strong><see cref="SharpDX.Direct3D11.DepthStencilViewDescription"/></strong>).</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2DMS_ARRAY_DSV']/*"/>	
        /// <msdn-id>ff476233</msdn-id>	
        /// <unmanaged>D3D11_TEX2DMS_ARRAY_DSV</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2DMS_ARRAY_DSV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DMultisampledArrayResource {	
            
            /// <summary>	
            /// <dd> <p>The index of the first texture to use in an array of textures.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2DMS_ARRAY_DSV::FirstArraySlice']/*"/>	
            /// <msdn-id>ff476233</msdn-id>	
            /// <unmanaged>unsigned int FirstArraySlice</unmanaged>	
            /// <unmanaged-short>unsigned int FirstArraySlice</unmanaged-short>	
            public int FirstArraySlice;
            
            /// <summary>	
            /// <dd> <p>Number of textures to use.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2DMS_ARRAY_DSV::ArraySize']/*"/>	
            /// <msdn-id>ff476233</msdn-id>	
            /// <unmanaged>unsigned int ArraySize</unmanaged>	
            /// <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
            public int ArraySize;
        }
        
        /// <summary>	
        /// <dd> <p>Resource data  format (see <strong><see cref="SharpDX.DXGI.Format"/></strong>). See remarks for allowable formats.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DEPTH_STENCIL_VIEW_DESC::Format']/*"/>	
        /// <msdn-id>ff476112</msdn-id>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        [FieldOffset(0)]
        public SharpDX.DXGI.Format Format;
        
        /// <summary>	
        /// <dd> <p>Type of resource (see <strong><see cref="SharpDX.Direct3D11.DepthStencilViewDimension"/></strong>). Specifies how a depth-stencil resource will be accessed; the value is stored in the  union in this structure.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DEPTH_STENCIL_VIEW_DESC::ViewDimension']/*"/>	
        /// <msdn-id>ff476112</msdn-id>	
        /// <unmanaged>D3D11_DSV_DIMENSION ViewDimension</unmanaged>	
        /// <unmanaged-short>D3D11_DSV_DIMENSION ViewDimension</unmanaged-short>	
        [FieldOffset(4)]
        public SharpDX.Direct3D11.DepthStencilViewDimension Dimension;
        
        /// <summary>	
        /// <dd> <p>A value that describes whether the texture is read only.  Pass 0 to specify that it is not read only; otherwise, pass one of the members of  the <strong><see cref="SharpDX.Direct3D11.DepthStencilViewFlags"/></strong> enumerated type.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DEPTH_STENCIL_VIEW_DESC::Flags']/*"/>	
        /// <msdn-id>ff476112</msdn-id>	
        /// <unmanaged>D3D11_DSV_FLAG Flags</unmanaged>	
        /// <unmanaged-short>D3D11_DSV_FLAG Flags</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.DepthStencilViewFlags Flags;
        
        /// <summary>	
        /// <dd> <p>Specifies a 1D texture subresource (see <strong><see cref="SharpDX.Direct3D11.DepthStencilViewDescription.Texture1DResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DEPTH_STENCIL_VIEW_DESC::Texture1D']/*"/>	
        /// <msdn-id>ff476112</msdn-id>	
        /// <unmanaged>D3D11_TEX1D_DSV Texture1D</unmanaged>	
        /// <unmanaged-short>D3D11_TEX1D_DSV Texture1D</unmanaged-short>	
        [FieldOffset(12)]
        public SharpDX.Direct3D11.DepthStencilViewDescription.Texture1DResource Texture1D;
        
        /// <summary>	
        /// <dd> <p>Specifies an array of 1D texture subresources (see <strong><see cref="SharpDX.Direct3D11.DepthStencilViewDescription.Texture1DArrayResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DEPTH_STENCIL_VIEW_DESC::Texture1DArray']/*"/>	
        /// <msdn-id>ff476112</msdn-id>	
        /// <unmanaged>D3D11_TEX1D_ARRAY_DSV Texture1DArray</unmanaged>	
        /// <unmanaged-short>D3D11_TEX1D_ARRAY_DSV Texture1DArray</unmanaged-short>	
        [FieldOffset(12)]
        public SharpDX.Direct3D11.DepthStencilViewDescription.Texture1DArrayResource Texture1DArray;
        
        /// <summary>	
        /// <dd> <p>Specifies a 2D texture subresource (see <strong><see cref="SharpDX.Direct3D11.DepthStencilViewDescription.Texture2DResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DEPTH_STENCIL_VIEW_DESC::Texture2D']/*"/>	
        /// <msdn-id>ff476112</msdn-id>	
        /// <unmanaged>D3D11_TEX2D_DSV Texture2D</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2D_DSV Texture2D</unmanaged-short>	
        [FieldOffset(12)]
        public SharpDX.Direct3D11.DepthStencilViewDescription.Texture2DResource Texture2D;
        
        /// <summary>	
        /// <dd> <p>Specifies an array of 2D texture subresources (see <strong><see cref="SharpDX.Direct3D11.DepthStencilViewDescription.Texture2DArrayResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DEPTH_STENCIL_VIEW_DESC::Texture2DArray']/*"/>	
        /// <msdn-id>ff476112</msdn-id>	
        /// <unmanaged>D3D11_TEX2D_ARRAY_DSV Texture2DArray</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2D_ARRAY_DSV Texture2DArray</unmanaged-short>	
        [FieldOffset(12)]
        public SharpDX.Direct3D11.DepthStencilViewDescription.Texture2DArrayResource Texture2DArray;
        
        /// <summary>	
        /// <dd> <p>Specifies a multisampled 2D texture (see <strong><see cref="SharpDX.Direct3D11.DepthStencilViewDescription.Texture2DMultisampledResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DEPTH_STENCIL_VIEW_DESC::Texture2DMS']/*"/>	
        /// <msdn-id>ff476112</msdn-id>	
        /// <unmanaged>D3D11_TEX2DMS_DSV Texture2DMS</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2DMS_DSV Texture2DMS</unmanaged-short>	
        [FieldOffset(12)]
        public SharpDX.Direct3D11.DepthStencilViewDescription.Texture2DMultisampledResource Texture2DMS;
        
        /// <summary>	
        /// <dd> <p>Specifies an array of multisampled 2D textures (see <strong><see cref="SharpDX.Direct3D11.DepthStencilViewDescription.Texture2DMultisampledArrayResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DEPTH_STENCIL_VIEW_DESC::Texture2DMSArray']/*"/>	
        /// <msdn-id>ff476112</msdn-id>	
        /// <unmanaged>D3D11_TEX2DMS_ARRAY_DSV Texture2DMSArray</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2DMS_ARRAY_DSV Texture2DMSArray</unmanaged-short>	
        [FieldOffset(12)]
        public SharpDX.Direct3D11.DepthStencilViewDescription.Texture2DMultisampledArrayResource Texture2DMSArray;
    }
    
    /// <summary>	
    /// <p> Arguments for draw indexed instanced indirect. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> The members of this structure serve the same purpose as the parameters of <strong><see cref="SharpDX.Direct3D11.DeviceContext.DrawIndexedInstanced"/></strong>. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS']/*"/>	
    /// <msdn-id>dn912868</msdn-id>	
    /// <unmanaged>D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS</unmanaged>	
    /// <unmanaged-short>D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct DrawIndexedInstancedIndirectArguments {	
        
        /// <summary>	
        /// <dd> <p> The number of indices read from the index buffer for each instance. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS::IndexCountPerInstance']/*"/>	
        /// <msdn-id>dn912868</msdn-id>	
        /// <unmanaged>unsigned int IndexCountPerInstance</unmanaged>	
        /// <unmanaged-short>unsigned int IndexCountPerInstance</unmanaged-short>	
        public int IndexCountPerInstance;
        
        /// <summary>	
        /// <dd> <p> The number of instances to draw. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS::InstanceCount']/*"/>	
        /// <msdn-id>dn912868</msdn-id>	
        /// <unmanaged>unsigned int InstanceCount</unmanaged>	
        /// <unmanaged-short>unsigned int InstanceCount</unmanaged-short>	
        public int InstanceCount;
        
        /// <summary>	
        /// <dd> <p> The location of the first index read by the GPU from the index buffer. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS::StartIndexLocation']/*"/>	
        /// <msdn-id>dn912868</msdn-id>	
        /// <unmanaged>unsigned int StartIndexLocation</unmanaged>	
        /// <unmanaged-short>unsigned int StartIndexLocation</unmanaged-short>	
        public int StartIndexLocation;
        
        /// <summary>	
        /// <dd> <p> A value added to each index before reading a vertex from the vertex buffer. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS::BaseVertexLocation']/*"/>	
        /// <msdn-id>dn912868</msdn-id>	
        /// <unmanaged>int BaseVertexLocation</unmanaged>	
        /// <unmanaged-short>int BaseVertexLocation</unmanaged-short>	
        public int BaseVertexLocation;
        
        /// <summary>	
        /// <dd> <p> A value added to each index before reading per-instance data from a vertex buffer. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS::StartInstanceLocation']/*"/>	
        /// <msdn-id>dn912868</msdn-id>	
        /// <unmanaged>unsigned int StartInstanceLocation</unmanaged>	
        /// <unmanaged-short>unsigned int StartInstanceLocation</unmanaged-short>	
        public int StartInstanceLocation;
    }
    
    /// <summary>	
    /// <p> Arguments for draw instanced indirect. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> The members of this structure serve the same purpose as the parameters of <strong><see cref="SharpDX.Direct3D11.DeviceContext.DrawInstanced"/></strong>. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DRAW_INSTANCED_INDIRECT_ARGS']/*"/>	
    /// <msdn-id>dn912869</msdn-id>	
    /// <unmanaged>D3D11_DRAW_INSTANCED_INDIRECT_ARGS</unmanaged>	
    /// <unmanaged-short>D3D11_DRAW_INSTANCED_INDIRECT_ARGS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct DrawInstancedIndirectArguments {	
        
        /// <summary>	
        /// <dd> <p> The number of vertices to draw. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DRAW_INSTANCED_INDIRECT_ARGS::VertexCountPerInstance']/*"/>	
        /// <msdn-id>dn912869</msdn-id>	
        /// <unmanaged>unsigned int VertexCountPerInstance</unmanaged>	
        /// <unmanaged-short>unsigned int VertexCountPerInstance</unmanaged-short>	
        public int VertexCountPerInstance;
        
        /// <summary>	
        /// <dd> <p> The number of instances to draw. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DRAW_INSTANCED_INDIRECT_ARGS::InstanceCount']/*"/>	
        /// <msdn-id>dn912869</msdn-id>	
        /// <unmanaged>unsigned int InstanceCount</unmanaged>	
        /// <unmanaged-short>unsigned int InstanceCount</unmanaged-short>	
        public int InstanceCount;
        
        /// <summary>	
        /// <dd> <p> The index of the first vertex. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DRAW_INSTANCED_INDIRECT_ARGS::StartVertexLocation']/*"/>	
        /// <msdn-id>dn912869</msdn-id>	
        /// <unmanaged>unsigned int StartVertexLocation</unmanaged>	
        /// <unmanaged-short>unsigned int StartVertexLocation</unmanaged-short>	
        public int StartVertexLocation;
        
        /// <summary>	
        /// <dd> <p> A value added to each index before reading per-instance data from a vertex buffer. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_DRAW_INSTANCED_INDIRECT_ARGS::StartInstanceLocation']/*"/>	
        /// <msdn-id>dn912869</msdn-id>	
        /// <unmanaged>unsigned int StartInstanceLocation</unmanaged>	
        /// <unmanaged-short>unsigned int StartInstanceLocation</unmanaged-short>	
        public int StartInstanceLocation;
    }
    
    /// <summary>	
    /// <p>Specifies which bytes in a video surface are encrypted. </p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_ENCRYPTED_BLOCK_INFO']/*"/>	
    /// <msdn-id>hh447630</msdn-id>	
    /// <unmanaged>D3D11_ENCRYPTED_BLOCK_INFO</unmanaged>	
    /// <unmanaged-short>D3D11_ENCRYPTED_BLOCK_INFO</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct EncryptedBlockInformation {	
        
        /// <summary>	
        /// <dd> <p>The number of bytes that are encrypted at the start of the buffer. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_ENCRYPTED_BLOCK_INFO::NumEncryptedBytesAtBeginning']/*"/>	
        /// <msdn-id>hh447630</msdn-id>	
        /// <unmanaged>unsigned int NumEncryptedBytesAtBeginning</unmanaged>	
        /// <unmanaged-short>unsigned int NumEncryptedBytesAtBeginning</unmanaged-short>	
        public int NumEncryptedBytesAtBeginning;
        
        /// <summary>	
        /// <dd> <p>The number of bytes that are skipped after the first <strong>NumEncryptedBytesAtBeginning</strong> bytes, and then after each block of <strong>NumBytesInEncryptPattern</strong> bytes. Skipped bytes are not encrypted. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_ENCRYPTED_BLOCK_INFO::NumBytesInSkipPattern']/*"/>	
        /// <msdn-id>hh447630</msdn-id>	
        /// <unmanaged>unsigned int NumBytesInSkipPattern</unmanaged>	
        /// <unmanaged-short>unsigned int NumBytesInSkipPattern</unmanaged-short>	
        public int NumBytesInSkipPattern;
        
        /// <summary>	
        /// <dd> <p>The number of bytes that are encrypted after each block of skipped bytes.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_ENCRYPTED_BLOCK_INFO::NumBytesInEncryptPattern']/*"/>	
        /// <msdn-id>hh447630</msdn-id>	
        /// <unmanaged>unsigned int NumBytesInEncryptPattern</unmanaged>	
        /// <unmanaged-short>unsigned int NumBytesInEncryptPattern</unmanaged-short>	
        public int NumBytesInEncryptPattern;
    }
    
    /// <summary>	
    /// <p><strong>Note</strong>??This structure is supported by the Direct3D 11.1 runtime, which is available on Windows?8 and later operating systems.</p><p>Describes information about Direct3D 11.1 adapter architecture.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_ARCHITECTURE_INFO']/*"/>	
    /// <msdn-id>hh404455</msdn-id>	
    /// <unmanaged>D3D11_FEATURE_DATA_ARCHITECTURE_INFO</unmanaged>	
    /// <unmanaged-short>D3D11_FEATURE_DATA_ARCHITECTURE_INFO</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    internal  partial struct FeatureDataArchitectureInformation {	
        
        /// <summary>	
        /// <dd> <p>Specifies whether a rendering device batches rendering commands and performs multipass rendering into tiles or bins over a render area. Certain API usage patterns that are fine for TileBasedDefferredRenderers (TBDRs) can perform worse on non-TBDRs and vice versa.  Applications that are careful about rendering can be friendly to both TBDR and non-TBDR architectures. <strong>TRUE</strong> if the rendering device batches rendering commands and <strong><see cref="SharpDX.Result.False"/></strong> otherwise. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_ARCHITECTURE_INFO::TileBasedDeferredRenderer']/*"/>	
        /// <msdn-id>hh404455</msdn-id>	
        /// <unmanaged>BOOL TileBasedDeferredRenderer</unmanaged>	
        /// <unmanaged-short>BOOL TileBasedDeferredRenderer</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool TileBasedDeferredRenderer;
    }
    
    /// <summary>	
    /// <p>Describes compute shader and raw and structured buffer support in the current graphics driver.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Direct3D 11 devices (<see cref="SharpDX.Direct3D.FeatureLevel.Level_11_0"/>) are required to support Compute Shader model 5.0.  Direct3D 10.x devices (<see cref="SharpDX.Direct3D.FeatureLevel.Level_10_0"/>, <see cref="SharpDX.Direct3D.FeatureLevel.Level_10_1"/>) can optionally support Compute Shader model 4.0 or 4.1.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS']/*"/>	
    /// <msdn-id>ff476126</msdn-id>	
    /// <unmanaged>D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS</unmanaged>	
    /// <unmanaged-short>D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    internal  partial struct FeatureDataD3D10XHardwareOptions {	
        
        /// <summary>	
        /// <dd> <p><strong>TRUE</strong> if compute shaders and raw and structured buffers are supported; otherwise <strong><see cref="SharpDX.Result.False"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS::ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x']/*"/>	
        /// <msdn-id>ff476126</msdn-id>	
        /// <unmanaged>BOOL ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x</unmanaged>	
        /// <unmanaged-short>BOOL ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool ComputeShadersPlusRawAndStructuredBuffersViaShader4X;
    }
    
    /// <summary>	
    /// <p><strong>Note</strong>??This structure is supported by the Direct3D 11.1 runtime, which is available on Windows?8 and later operating systems.</p><p>Describes Direct3D 11.1 feature options in the current graphics driver.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>If a Microsoft Direct3D device supports feature level 11.1 (<strong><see cref="SharpDX.Direct3D.FeatureLevel.Level_11_1"/></strong>), when you call <strong><see cref="SharpDX.Direct3D11.Device.CheckFeatureSupport"/></strong> with <strong><see cref="SharpDX.Direct3D11.Feature.D3D11Options"/></strong>, <strong>CheckFeatureSupport</strong> returns a reference to <strong><see cref="SharpDX.Direct3D11.FeatureDataD3D11Options"/></strong> with all member set to <strong>TRUE</strong> except the <strong>SAD4ShaderInstructions</strong> and <strong>ExtendedDoublesShaderInstructions</strong> members, which are optionally supported by the hardware and driver and therefore can be <strong>TRUE</strong> or <strong><see cref="SharpDX.Result.False"/></strong>.</p><p>Feature level 11.1  provides the following additional features:</p><ul> <li>UAVs at every shader stage with 64 UAV bind slots instead of 8.</li> <li>Target-independent rasterization, which enables you  to set the <strong>ForcedSampleCount</strong> member of <strong><see cref="SharpDX.Direct3D11.RasterizerStateDescription1"/></strong> to 1, 4, 8, or 16 and to render to RTVs with a single sample.</li> <li>UAV-only rendering with the <strong>ForcedSampleCount</strong> member of <strong><see cref="SharpDX.Direct3D11.RasterizerStateDescription1"/></strong> set to up to 16 (only up to 8 for feature level 11).</li> </ul><p>The runtime always sets the following groupings of members identically. That is, all the values in a grouping are <strong>TRUE</strong> or <strong><see cref="SharpDX.Result.False"/></strong> together:</p><ul> <li><strong>DiscardAPIsSeenByDriver</strong> and <strong>FlagsForUpdateAndCopySeenByDriver</strong></li> <li><strong>ClearView</strong>, <strong>CopyWithOverlap</strong>, <strong>ConstantBufferPartialUpdate</strong>, <strong>ConstantBufferOffsetting</strong>, and <strong>MapNoOverwriteOnDynamicConstantBuffer</strong></li> <li><strong>MapNoOverwriteOnDynamicBufferSRV</strong> and <strong>MultisampleRTVWithForcedSampleCountOne</strong></li> </ul>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D11_OPTIONS']/*"/>	
    /// <msdn-id>hh404457</msdn-id>	
    /// <unmanaged>D3D11_FEATURE_DATA_D3D11_OPTIONS</unmanaged>	
    /// <unmanaged-short>D3D11_FEATURE_DATA_D3D11_OPTIONS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct FeatureDataD3D11Options {	
        
        /// <summary>	
        /// <dd> <p>Specifies whether logic operations are available in blend state. The runtime sets this member to <strong>TRUE</strong> if logic operations are available in blend state and <strong><see cref="SharpDX.Result.False"/></strong> otherwise. This member is <strong><see cref="SharpDX.Result.False"/></strong> for feature level 9.1, 9.2, and 9.3.  This member is optional for feature level 10, 10.1, and 11.  This member is <strong>TRUE</strong> for feature level 11.1.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D11_OPTIONS::OutputMergerLogicOp']/*"/>	
        /// <msdn-id>hh404457</msdn-id>	
        /// <unmanaged>BOOL OutputMergerLogicOp</unmanaged>	
        /// <unmanaged-short>BOOL OutputMergerLogicOp</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool OutputMergerLogicOp;
        
        /// <summary>	
        /// <dd> <p>Specifies whether the driver can render with no render target views (RTVs) or depth stencil views (DSVs), and only unordered access views (UAVs) bound. The runtime sets this member to <strong>TRUE</strong> if  the driver can render with no RTVs or DSVs and only UAVs bound and <strong><see cref="SharpDX.Result.False"/></strong> otherwise. If <strong>TRUE</strong>, you can set the <strong>ForcedSampleCount</strong> member of <strong><see cref="SharpDX.Direct3D11.RasterizerStateDescription1"/></strong> to 1, 4, or 8 when you render with no RTVs or DSV and only UAVs bound.  For feature level 11.1, this member is always <strong>TRUE</strong> and you can also set <strong>ForcedSampleCount</strong> to 16 in addition to 1, 4, or 8.  The default value of <strong>ForcedSampleCount</strong> is 0, which means the same as if the value is set to 1. You can always set <strong>ForcedSampleCount</strong> to 0 or 1 for UAV-only rendering independently of how this member is set.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D11_OPTIONS::UAVOnlyRenderingForcedSampleCount']/*"/>	
        /// <msdn-id>hh404457</msdn-id>	
        /// <unmanaged>BOOL UAVOnlyRenderingForcedSampleCount</unmanaged>	
        /// <unmanaged-short>BOOL UAVOnlyRenderingForcedSampleCount</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool UAVOnlyRenderingForcedSampleCount;
        
        /// <summary>	
        /// <dd> <p>Specifies whether the driver supports the <strong><see cref="SharpDX.Direct3D11.DeviceContext1.DiscardView"/></strong> and <strong><see cref="SharpDX.Direct3D11.DeviceContext1.DiscardResource"/></strong> methods. The runtime sets this member to <strong>TRUE</strong> if the driver supports these methods and <strong><see cref="SharpDX.Result.False"/></strong> otherwise. How this member is set does not indicate whether the driver actually uses these methods; that is,   the driver might ignore these methods if they are not useful to the  hardware.  If <strong><see cref="SharpDX.Result.False"/></strong>, the runtime does not expose these methods to the driver because the driver does not support them.  You can monitor this member during development to rule out legacy drivers on hardware where these methods might have otherwise been beneficial.  You are not required to write separate code paths based on whether this member is <strong>TRUE</strong> or <strong><see cref="SharpDX.Result.False"/></strong>; you can call these methods whenever applicable.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D11_OPTIONS::DiscardAPIsSeenByDriver']/*"/>	
        /// <msdn-id>hh404457</msdn-id>	
        /// <unmanaged>BOOL DiscardAPIsSeenByDriver</unmanaged>	
        /// <unmanaged-short>BOOL DiscardAPIsSeenByDriver</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool DiscardAPIsSeenByDriver;
        
        /// <summary>	
        /// <dd> <p>Specifies whether the driver supports new semantics for copy and update that are exposed by the <strong><see cref="SharpDX.Direct3D11.DeviceContext1.CopySubresourceRegion1"/></strong> and <strong><see cref="SharpDX.Direct3D11.DeviceContext1.UpdateSubresource1"/></strong> methods.  The runtime sets this member to <strong>TRUE</strong> if the driver supports new semantics for copy and update. The runtime sets this member to <strong><see cref="SharpDX.Result.False"/></strong> only for legacy drivers. The runtime handles this member similarly to the <strong>DiscardAPIsSeenByDriver</strong> member.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D11_OPTIONS::FlagsForUpdateAndCopySeenByDriver']/*"/>	
        /// <msdn-id>hh404457</msdn-id>	
        /// <unmanaged>BOOL FlagsForUpdateAndCopySeenByDriver</unmanaged>	
        /// <unmanaged-short>BOOL FlagsForUpdateAndCopySeenByDriver</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool FlagsForUpdateAndCopySeenByDriver;
        
        /// <summary>	
        /// <dd> <p>Specifies whether the driver supports the <strong><see cref="SharpDX.Direct3D11.DeviceContext1.ClearView"/></strong> method. The runtime sets this member to <strong>TRUE</strong> if the driver supports this method and <strong><see cref="SharpDX.Result.False"/></strong> otherwise. If <strong><see cref="SharpDX.Result.False"/></strong>, the runtime does not expose this method to the driver because the driver does not support it.  </p> <p><strong>Note</strong>??For feature level 9.1, 9.2, and 9.3, this member is always <strong>TRUE</strong> because the option is emulated by the runtime.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D11_OPTIONS::ClearView']/*"/>	
        /// <msdn-id>hh404457</msdn-id>	
        /// <unmanaged>BOOL ClearView</unmanaged>	
        /// <unmanaged-short>BOOL ClearView</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool ClearView;
        
        /// <summary>	
        /// <dd> <p>Specifies whether you can call <strong><see cref="SharpDX.Direct3D11.DeviceContext1.CopySubresourceRegion1"/></strong> with overlapping source and destination rectangles. The runtime sets this member to <strong>TRUE</strong> if  you can call <strong>CopySubresourceRegion1</strong> with overlapping source and destination rectangles and <strong><see cref="SharpDX.Result.False"/></strong> otherwise. If <strong><see cref="SharpDX.Result.False"/></strong>, the runtime does not expose this method to the driver because the driver does not support it.  </p> <p><strong>Note</strong>??For feature level 9.1, 9.2, and 9.3, this member is always <strong>TRUE</strong> because drivers already support the option for these feature levels.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D11_OPTIONS::CopyWithOverlap']/*"/>	
        /// <msdn-id>hh404457</msdn-id>	
        /// <unmanaged>BOOL CopyWithOverlap</unmanaged>	
        /// <unmanaged-short>BOOL CopyWithOverlap</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool CopyWithOverlap;
        
        /// <summary>	
        /// <dd> <p>Specifies whether the driver supports partial updates of constant buffers. The runtime sets this member to <strong>TRUE</strong> if  the driver supports partial updates of constant buffers and <strong><see cref="SharpDX.Result.False"/></strong> otherwise. If <strong><see cref="SharpDX.Result.False"/></strong>, the runtime does not expose this operation to the driver because the driver does not support it.  </p> <p><strong>Note</strong>??For feature level 9.1, 9.2, and 9.3, this member is always <strong>TRUE</strong> because the option is emulated by the runtime.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D11_OPTIONS::ConstantBufferPartialUpdate']/*"/>	
        /// <msdn-id>hh404457</msdn-id>	
        /// <unmanaged>BOOL ConstantBufferPartialUpdate</unmanaged>	
        /// <unmanaged-short>BOOL ConstantBufferPartialUpdate</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool ConstantBufferPartialUpdate;
        
        /// <summary>	
        /// <dd> <p>Specifies whether the driver supports new semantics for setting offsets in constant buffers for a shader. The runtime sets this member to <strong>TRUE</strong> if  the driver supports allowing you to specify offsets when you call new methods like the <strong><see cref="SharpDX.Direct3D11.DeviceContext1.VSSetConstantBuffers1"/></strong> method and <strong><see cref="SharpDX.Result.False"/></strong> otherwise. If <strong><see cref="SharpDX.Result.False"/></strong>, the runtime does not expose this operation to the driver because the driver does not support it.    </p> <p><strong>Note</strong>??For feature level 9.1, 9.2, and 9.3, this member is always <strong>TRUE</strong> because the option is emulated by the runtime.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D11_OPTIONS::ConstantBufferOffsetting']/*"/>	
        /// <msdn-id>hh404457</msdn-id>	
        /// <unmanaged>BOOL ConstantBufferOffsetting</unmanaged>	
        /// <unmanaged-short>BOOL ConstantBufferOffsetting</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool ConstantBufferOffsetting;
        
        /// <summary>	
        /// <dd> <p>Specifies whether you can call <strong><see cref="SharpDX.Direct3D11.DeviceContext.MapSubresource"/></strong> with <strong><see cref="SharpDX.Direct3D11.MapMode.WriteNoOverwrite"/></strong> on a dynamic constant buffer (that is, whether the driver supports this operation). The runtime sets this member to <strong>TRUE</strong> if  the driver supports this operation and <strong><see cref="SharpDX.Result.False"/></strong> otherwise. If <strong><see cref="SharpDX.Result.False"/></strong>, the runtime fails this method because the driver does not support the operation.  </p> <p><strong>Note</strong>??For feature level 9.1, 9.2, and 9.3, this member is always <strong>TRUE</strong> because the option is emulated by the runtime.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D11_OPTIONS::MapNoOverwriteOnDynamicConstantBuffer']/*"/>	
        /// <msdn-id>hh404457</msdn-id>	
        /// <unmanaged>BOOL MapNoOverwriteOnDynamicConstantBuffer</unmanaged>	
        /// <unmanaged-short>BOOL MapNoOverwriteOnDynamicConstantBuffer</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool MapNoOverwriteOnDynamicConstantBuffer;
        
        /// <summary>	
        /// <dd> <p>Specifies whether you can call <strong><see cref="SharpDX.Direct3D11.DeviceContext.MapSubresource"/></strong> with <strong><see cref="SharpDX.Direct3D11.MapMode.WriteNoOverwrite"/></strong> on a dynamic buffer SRV (that is, whether the driver supports this operation). The runtime sets this member to <strong>TRUE</strong> if  the driver supports this operation and <strong><see cref="SharpDX.Result.False"/></strong> otherwise. If <strong><see cref="SharpDX.Result.False"/></strong>, the runtime fails this method because the driver does not support the operation.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D11_OPTIONS::MapNoOverwriteOnDynamicBufferSRV']/*"/>	
        /// <msdn-id>hh404457</msdn-id>	
        /// <unmanaged>BOOL MapNoOverwriteOnDynamicBufferSRV</unmanaged>	
        /// <unmanaged-short>BOOL MapNoOverwriteOnDynamicBufferSRV</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool MapNoOverwriteOnDynamicBufferSRV;
        
        /// <summary>	
        /// <dd> <p>Specifies whether the driver supports multisample rendering when you render with RTVs bound. If <strong>TRUE</strong>, you can set the <strong>ForcedSampleCount</strong> member of <strong><see cref="SharpDX.Direct3D11.RasterizerStateDescription1"/></strong> to 1 with a multisample RTV bound. The driver can support this option on feature level 10 and higher.  If <strong><see cref="SharpDX.Result.False"/></strong>, the rasterizer-state creation will fail because the driver is legacy or the feature level is too low.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D11_OPTIONS::MultisampleRTVWithForcedSampleCountOne']/*"/>	
        /// <msdn-id>hh404457</msdn-id>	
        /// <unmanaged>BOOL MultisampleRTVWithForcedSampleCountOne</unmanaged>	
        /// <unmanaged-short>BOOL MultisampleRTVWithForcedSampleCountOne</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool MultisampleRTVWithForcedSampleCountOne;
        
        /// <summary>	
        /// <dd> <p>Specifies whether the hardware and driver support the <strong>msad4</strong> intrinsic function in shaders. The runtime sets this member to <strong>TRUE</strong> if  the hardware and driver support calls to <strong>msad4</strong> intrinsic functions in shaders. If <strong><see cref="SharpDX.Result.False"/></strong>, the driver is legacy or the hardware does not support the option; the runtime will fail shader creation for shaders that use <strong>msad4</strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D11_OPTIONS::SAD4ShaderInstructions']/*"/>	
        /// <msdn-id>hh404457</msdn-id>	
        /// <unmanaged>BOOL SAD4ShaderInstructions</unmanaged>	
        /// <unmanaged-short>BOOL SAD4ShaderInstructions</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool SAD4ShaderInstructions;
        
        /// <summary>	
        /// <dd> <p>Specifies whether the hardware and driver support the <strong>fma</strong> intrinsic function and other extended doubles instructions (<strong>DDIV</strong> and <strong>DRCP</strong>) in shaders. The <strong>fma</strong> intrinsic function emits an extended doubles <strong>DFMA</strong> instruction. The runtime sets this member to <strong>TRUE</strong> if  the hardware and driver support extended doubles instructions in shaders (shader model 5 and higher).  Support of this option implies support of basic double-precision shader instructions as well. You can use the <strong><see cref="SharpDX.Direct3D11.Feature.ShaderDoubles"/></strong> value to query for support of double-precision shaders.  If <strong><see cref="SharpDX.Result.False"/></strong>, the hardware and driver do not support the option; the runtime will fail shader creation for shaders that use extended doubles instructions.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D11_OPTIONS::ExtendedDoublesShaderInstructions']/*"/>	
        /// <msdn-id>hh404457</msdn-id>	
        /// <unmanaged>BOOL ExtendedDoublesShaderInstructions</unmanaged>	
        /// <unmanaged-short>BOOL ExtendedDoublesShaderInstructions</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool ExtendedDoublesShaderInstructions;
        
        /// <summary>	
        /// <dd> <p>Specifies whether the hardware and driver support sharing a greater variety of Texture2D resource types and formats. The runtime sets this member to <strong>TRUE</strong> if  the hardware and driver support extended Texture2D resource sharing.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D11_OPTIONS::ExtendedResourceSharing']/*"/>	
        /// <msdn-id>hh404457</msdn-id>	
        /// <unmanaged>BOOL ExtendedResourceSharing</unmanaged>	
        /// <unmanaged-short>BOOL ExtendedResourceSharing</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool ExtendedResourceSharing;
    }
    
    /// <summary>	
    /// <p><strong>Note</strong>??This structure is supported by the Direct3D 11.1 runtime, which is available on Windows?8 and later operating systems.</p><p>Describes Direct3D 11.1 feature options in the current graphics driver.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>If a Microsoft Direct3D device supports feature level 11.1 (<strong><see cref="SharpDX.Direct3D.FeatureLevel.Level_11_1"/></strong>), when you call <strong><see cref="SharpDX.Direct3D11.Device.CheckFeatureSupport"/></strong> with <strong><see cref="SharpDX.Direct3D11.Feature.D3D11Options"/></strong>, <strong>CheckFeatureSupport</strong> returns a reference to <strong><see cref="SharpDX.Direct3D11.FeatureDataD3D11Options"/></strong> with all member set to <strong>TRUE</strong> except the <strong>SAD4ShaderInstructions</strong> and <strong>ExtendedDoublesShaderInstructions</strong> members, which are optionally supported by the hardware and driver and therefore can be <strong>TRUE</strong> or <strong><see cref="SharpDX.Result.False"/></strong>.</p><p>Feature level 11.1  provides the following additional features:</p><ul> <li>UAVs at every shader stage with 64 UAV bind slots instead of 8.</li> <li>Target-independent rasterization, which enables you  to set the <strong>ForcedSampleCount</strong> member of <strong><see cref="SharpDX.Direct3D11.RasterizerStateDescription1"/></strong> to 1, 4, 8, or 16 and to render to RTVs with a single sample.</li> <li>UAV-only rendering with the <strong>ForcedSampleCount</strong> member of <strong><see cref="SharpDX.Direct3D11.RasterizerStateDescription1"/></strong> set to up to 16 (only up to 8 for feature level 11).</li> </ul><p>The runtime always sets the following groupings of members identically. That is, all the values in a grouping are <strong>TRUE</strong> or <strong><see cref="SharpDX.Result.False"/></strong> together:</p><ul> <li><strong>DiscardAPIsSeenByDriver</strong> and <strong>FlagsForUpdateAndCopySeenByDriver</strong></li> <li><strong>ClearView</strong>, <strong>CopyWithOverlap</strong>, <strong>ConstantBufferPartialUpdate</strong>, <strong>ConstantBufferOffsetting</strong>, and <strong>MapNoOverwriteOnDynamicConstantBuffer</strong></li> <li><strong>MapNoOverwriteOnDynamicBufferSRV</strong> and <strong>MultisampleRTVWithForcedSampleCountOne</strong></li> </ul>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D11_OPTIONS1']/*"/>	
    /// <msdn-id>hh404457</msdn-id>	
    /// <unmanaged>D3D11_FEATURE_DATA_D3D11_OPTIONS1</unmanaged>	
    /// <unmanaged-short>D3D11_FEATURE_DATA_D3D11_OPTIONS1</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct FeatureDataD3D11Options1 {	
        
        /// <summary>	
        /// <dd> <p>Specifies whether logic operations are available in blend state. The runtime sets this member to <strong>TRUE</strong> if logic operations are available in blend state and <strong><see cref="SharpDX.Result.False"/></strong> otherwise. This member is <strong><see cref="SharpDX.Result.False"/></strong> for feature level 9.1, 9.2, and 9.3.  This member is optional for feature level 10, 10.1, and 11.  This member is <strong>TRUE</strong> for feature level 11.1.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D11_OPTIONS1::TiledResourcesTier']/*"/>	
        /// <msdn-id>hh404457</msdn-id>	
        /// <unmanaged>D3D11_TILED_RESOURCES_TIER TiledResourcesTier</unmanaged>	
        /// <unmanaged-short>D3D11_TILED_RESOURCES_TIER TiledResourcesTier</unmanaged-short>	
        public SharpDX.Direct3D11.TiledResourcesTier TiledResourcesTier;
        
        /// <summary>	
        /// <dd> <p>Specifies whether the driver can render with no render target views (RTVs) or depth stencil views (DSVs), and only unordered access views (UAVs) bound. The runtime sets this member to <strong>TRUE</strong> if  the driver can render with no RTVs or DSVs and only UAVs bound and <strong><see cref="SharpDX.Result.False"/></strong> otherwise. If <strong>TRUE</strong>, you can set the <strong>ForcedSampleCount</strong> member of <strong><see cref="SharpDX.Direct3D11.RasterizerStateDescription1"/></strong> to 1, 4, or 8 when you render with no RTVs or DSV and only UAVs bound.  For feature level 11.1, this member is always <strong>TRUE</strong> and you can also set <strong>ForcedSampleCount</strong> to 16 in addition to 1, 4, or 8.  The default value of <strong>ForcedSampleCount</strong> is 0, which means the same as if the value is set to 1. You can always set <strong>ForcedSampleCount</strong> to 0 or 1 for UAV-only rendering independently of how this member is set.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D11_OPTIONS1::MinMaxFiltering']/*"/>	
        /// <msdn-id>hh404457</msdn-id>	
        /// <unmanaged>BOOL MinMaxFiltering</unmanaged>	
        /// <unmanaged-short>BOOL MinMaxFiltering</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool MinMaxFiltering;
        
        /// <summary>	
        /// <dd> <p>Specifies whether the driver supports the <strong><see cref="SharpDX.Direct3D11.DeviceContext1.DiscardView"/></strong> and <strong><see cref="SharpDX.Direct3D11.DeviceContext1.DiscardResource"/></strong> methods. The runtime sets this member to <strong>TRUE</strong> if the driver supports these methods and <strong><see cref="SharpDX.Result.False"/></strong> otherwise. How this member is set does not indicate whether the driver actually uses these methods; that is,   the driver might ignore these methods if they are not useful to the  hardware.  If <strong><see cref="SharpDX.Result.False"/></strong>, the runtime does not expose these methods to the driver because the driver does not support them.  You can monitor this member during development to rule out legacy drivers on hardware where these methods might have otherwise been beneficial.  You are not required to write separate code paths based on whether this member is <strong>TRUE</strong> or <strong><see cref="SharpDX.Result.False"/></strong>; you can call these methods whenever applicable.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D11_OPTIONS1::ClearViewAlsoSupportsDepthOnlyFormats']/*"/>	
        /// <msdn-id>hh404457</msdn-id>	
        /// <unmanaged>BOOL ClearViewAlsoSupportsDepthOnlyFormats</unmanaged>	
        /// <unmanaged-short>BOOL ClearViewAlsoSupportsDepthOnlyFormats</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool ClearViewAlsoSupportsDepthOnlyFormats;
        
        /// <summary>	
        /// <dd> <p>Specifies whether the driver supports new semantics for copy and update that are exposed by the <strong><see cref="SharpDX.Direct3D11.DeviceContext1.CopySubresourceRegion1"/></strong> and <strong><see cref="SharpDX.Direct3D11.DeviceContext1.UpdateSubresource1"/></strong> methods.  The runtime sets this member to <strong>TRUE</strong> if the driver supports new semantics for copy and update. The runtime sets this member to <strong><see cref="SharpDX.Result.False"/></strong> only for legacy drivers. The runtime handles this member similarly to the <strong>DiscardAPIsSeenByDriver</strong> member.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D11_OPTIONS1::MapOnDefaultBuffers']/*"/>	
        /// <msdn-id>hh404457</msdn-id>	
        /// <unmanaged>BOOL MapOnDefaultBuffers</unmanaged>	
        /// <unmanaged-short>BOOL MapOnDefaultBuffers</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool MapOnDefaultBuffers;
    }
    
    /// <summary>	
    /// <strong>Note</strong>?? This structure is supported by the Direct3D 11.2 runtime, which is available on Windows?8.1 and later operating systems.?<p>Describes Direct3D 11.2 feature options in the current graphics driver.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> If the Direct3D API is the Direct3D 11.2 runtime and can support 11.2 features, <strong><see cref="SharpDX.Direct3D11.Device.CheckFeatureSupport"/></strong> for <strong><see cref="SharpDX.Direct3D11.Feature.D3D11Options1"/></strong> will return a SUCCESS code when valid parameters are passed. The members of <strong><see cref="SharpDX.Direct3D11.FeatureDataD3D11Options1"/></strong> will be set appropriately based on the system's graphics hardware and graphics driver. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D11_OPTIONS2']/*"/>	
    /// <msdn-id>dn280377</msdn-id>	
    /// <unmanaged>D3D11_FEATURE_DATA_D3D11_OPTIONS2</unmanaged>	
    /// <unmanaged-short>D3D11_FEATURE_DATA_D3D11_OPTIONS2</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct FeatureDataD3D11Options2 {	
        
        /// <summary>	
        /// <dd> <p> Specifies whether the hardware and driver support tiled resources. The runtime sets this member to a <strong><see cref="SharpDX.Direct3D11.TiledResourcesTier"/></strong>-typed value that indicates if the hardware and driver support tiled resources and at what tier level. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D11_OPTIONS2::PSSpecifiedStencilRefSupported']/*"/>	
        /// <msdn-id>dn280377</msdn-id>	
        /// <unmanaged>BOOL PSSpecifiedStencilRefSupported</unmanaged>	
        /// <unmanaged-short>BOOL PSSpecifiedStencilRefSupported</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool PSSpecifiedStencilRefSupported;
        
        /// <summary>	
        /// <dd> <p> Specifies whether the hardware and driver support the filtering options (<strong><see cref="SharpDX.Direct3D11.Filter"/></strong>) of comparing the result to the minimum or maximum value during texture sampling. The runtime sets this member to <strong>TRUE</strong> if the hardware and driver support these filtering options. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D11_OPTIONS2::TypedUAVLoadAdditionalFormats']/*"/>	
        /// <msdn-id>dn280377</msdn-id>	
        /// <unmanaged>BOOL TypedUAVLoadAdditionalFormats</unmanaged>	
        /// <unmanaged-short>BOOL TypedUAVLoadAdditionalFormats</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool TypedUAVLoadAdditionalFormats;
        
        /// <summary>	
        /// <dd> <p> Specifies whether the hardware and driver also support the <strong><see cref="SharpDX.Direct3D11.DeviceContext1.ClearView"/></strong> method on depth formats. For info about valid depth formats, see <strong><see cref="SharpDX.Direct3D11.DepthStencilViewDescription"/></strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D11_OPTIONS2::ROVsSupported']/*"/>	
        /// <msdn-id>dn280377</msdn-id>	
        /// <unmanaged>BOOL ROVsSupported</unmanaged>	
        /// <unmanaged-short>BOOL ROVsSupported</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool ROVsSupported;
        
        /// <summary>	
        /// <dd> <p> Specifies support for creating <strong><see cref="SharpDX.Direct3D11.Buffer"/></strong> resources that can be passed to the <strong><see cref="SharpDX.Direct3D11.DeviceContext.MapSubresource"/></strong> and <strong><see cref="SharpDX.Direct3D11.DeviceContext.UnmapSubresource"/></strong> methods. This means that the <strong>CPUAccessFlags</strong> member of the <strong><see cref="SharpDX.Direct3D11.BufferDescription"/></strong> structure may be set with the desired <strong><see cref="SharpDX.Direct3D11.CpuAccessFlags"/></strong> elements when the <strong>Usage</strong> member of <strong><see cref="SharpDX.Direct3D11.BufferDescription"/></strong> is set to <strong><see cref="SharpDX.Direct3D11.ResourceUsage.Default"/></strong>. The runtime sets this member to <strong>TRUE</strong> if the hardware is capable of at least <strong><see cref="SharpDX.Direct3D.FeatureLevel.Level_11_0"/></strong> and the graphics device driver supports mappable default buffers. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D11_OPTIONS2::ConservativeRasterizationTier']/*"/>	
        /// <msdn-id>dn280377</msdn-id>	
        /// <unmanaged>D3D11_CONSERVATIVE_RASTERIZATION_TIER ConservativeRasterizationTier</unmanaged>	
        /// <unmanaged-short>D3D11_CONSERVATIVE_RASTERIZATION_TIER ConservativeRasterizationTier</unmanaged-short>	
        public SharpDX.Direct3D11.ConservativeRasterizationTier ConservativeRasterizationTier;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D11_OPTIONS2::TiledResourcesTier']/*"/>	
        /// <msdn-id>dn280377</msdn-id>	
        /// <unmanaged>D3D11_TILED_RESOURCES_TIER TiledResourcesTier</unmanaged>	
        /// <unmanaged-short>D3D11_TILED_RESOURCES_TIER TiledResourcesTier</unmanaged-short>	
        public SharpDX.Direct3D11.TiledResourcesTier TiledResourcesTier;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D11_OPTIONS2::MapOnDefaultTextures']/*"/>	
        /// <msdn-id>dn280377</msdn-id>	
        /// <unmanaged>BOOL MapOnDefaultTextures</unmanaged>	
        /// <unmanaged-short>BOOL MapOnDefaultTextures</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool MapOnDefaultTextures;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D11_OPTIONS2::StandardSwizzle']/*"/>	
        /// <msdn-id>dn280377</msdn-id>	
        /// <unmanaged>BOOL StandardSwizzle</unmanaged>	
        /// <unmanaged-short>BOOL StandardSwizzle</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool StandardSwizzle;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D11_OPTIONS2::UnifiedMemoryArchitecture']/*"/>	
        /// <msdn-id>dn280377</msdn-id>	
        /// <unmanaged>BOOL UnifiedMemoryArchitecture</unmanaged>	
        /// <unmanaged-short>BOOL UnifiedMemoryArchitecture</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool UnifiedMemoryArchitecture;
    }
    
    /// <summary>	
    /// <p>Describes Direct3D 11.3 feature options in the current graphics driver.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D11_OPTIONS3']/*"/>	
    /// <msdn-id>dn933226</msdn-id>	
    /// <unmanaged>D3D11_FEATURE_DATA_D3D11_OPTIONS3</unmanaged>	
    /// <unmanaged-short>D3D11_FEATURE_DATA_D3D11_OPTIONS3</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct FeatureDataD3D11Options3 {	
        
        /// <summary>	
        /// <dd> <p> Whether to use the VP and RT array index from any shader feeding the rasterizer. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D11_OPTIONS3::VPAndRTArrayIndexFromAnyShaderFeedingRasterizer']/*"/>	
        /// <msdn-id>dn933226</msdn-id>	
        /// <unmanaged>BOOL VPAndRTArrayIndexFromAnyShaderFeedingRasterizer</unmanaged>	
        /// <unmanaged-short>BOOL VPAndRTArrayIndexFromAnyShaderFeedingRasterizer</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool VPAndRTArrayIndexFromAnyShaderFeedingRasterizer;
    }
    
    /// <summary>	
    /// <p><strong>Note</strong>??This structure is supported by the Direct3D 11.1 runtime, which is available on Windows?8 and later operating systems.</p><p>Describes Direct3D 9 feature options in the current graphics driver.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D9_OPTIONS']/*"/>	
    /// <msdn-id>hh404458</msdn-id>	
    /// <unmanaged>D3D11_FEATURE_DATA_D3D9_OPTIONS</unmanaged>	
    /// <unmanaged-short>D3D11_FEATURE_DATA_D3D9_OPTIONS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    internal  partial struct FeatureDataD3D9Options {	
        
        /// <summary>	
        /// <dd> <p>Specifies whether the driver supports the nonpowers-of-2-unconditionally feature. For more information about this feature, see feature level. The runtime sets this member to <strong>TRUE</strong> for hardware at Direct3D 10 and higher feature levels.  For hardware at Direct3D 9.3 and lower feature levels, the runtime sets this member to <strong><see cref="SharpDX.Result.False"/></strong> if the hardware and driver support the powers-of-2 (2D textures must have widths and heights specified as powers of two) feature or the nonpowers-of-2-conditionally feature. For more information about this feature, see feature level.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D9_OPTIONS::FullNonPow2TextureSupport']/*"/>	
        /// <msdn-id>hh404458</msdn-id>	
        /// <unmanaged>BOOL FullNonPow2TextureSupport</unmanaged>	
        /// <unmanaged-short>BOOL FullNonPow2TextureSupport</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool FullNonPow2TextureSupport;
    }
    
    /// <summary>	
    /// <p><strong>Note</strong>??This structure is supported by the Direct3D 11.2 runtime, which is available on Windows?8.1 and later operating systems.</p><p>Describes Direct3D 9 feature options in the current graphics driver.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>You can use the <strong><see cref="SharpDX.Direct3D11.Feature.D3D9Options1"/></strong> enumeration value with <strong><see cref="SharpDX.Direct3D11.Device.CheckFeatureSupport"/></strong> to query a driver about support for Direct3D 9 feature options rather than making multiple calls to <strong><see cref="SharpDX.Direct3D11.Device.CheckFeatureSupport"/></strong> by using <strong><see cref="SharpDX.Direct3D11.Feature.D3D9Options"/></strong>, <strong><see cref="SharpDX.Direct3D11.Feature.D3D9ShadowSupport"/></strong>, and <strong><see cref="SharpDX.Direct3D11.Feature.D3D9SimpleInstancingSupport"/></strong>, which provide identical info about supported Direct3D 9 feature options.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D9_OPTIONS1']/*"/>	
    /// <msdn-id>dn629642</msdn-id>	
    /// <unmanaged>D3D11_FEATURE_DATA_D3D9_OPTIONS1</unmanaged>	
    /// <unmanaged-short>D3D11_FEATURE_DATA_D3D9_OPTIONS1</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    internal  partial struct FeatureDataD3D9Options1 {	
        
        /// <summary>	
        /// <dd> <p>Specifies whether the driver supports the nonpowers-of-2-unconditionally feature. For more info about this feature, see feature level. The runtime sets this member to <strong>TRUE</strong> for hardware at Direct3D 10 and higher feature levels.  For hardware at Direct3D 9.3 and lower feature levels, the runtime sets this member to <strong><see cref="SharpDX.Result.False"/></strong> if the hardware and driver support the powers-of-2 (2D textures must have widths and heights specified as powers of two) feature or the nonpowers-of-2-conditionally feature. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D9_OPTIONS1::FullNonPow2TextureSupported']/*"/>	
        /// <msdn-id>dn629642</msdn-id>	
        /// <unmanaged>BOOL FullNonPow2TextureSupported</unmanaged>	
        /// <unmanaged-short>BOOL FullNonPow2TextureSupported</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool FullNonPow2TextureSupported;
        
        /// <summary>	
        /// <dd> <p>Specifies whether the driver supports the shadowing feature with the comparison-filtering mode set to less than or equal to. The runtime sets this member to <strong>TRUE</strong> for hardware at Direct3D 10 and higher feature levels.  For hardware at Direct3D 9.3 and lower feature levels, the runtime sets this member to <strong>TRUE</strong> only if the hardware and driver support the shadowing feature; otherwise <strong><see cref="SharpDX.Result.False"/></strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D9_OPTIONS1::DepthAsTextureWithLessEqualComparisonFilterSupported']/*"/>	
        /// <msdn-id>dn629642</msdn-id>	
        /// <unmanaged>BOOL DepthAsTextureWithLessEqualComparisonFilterSupported</unmanaged>	
        /// <unmanaged-short>BOOL DepthAsTextureWithLessEqualComparisonFilterSupported</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool DepthAsTextureWithLessEqualComparisonFilterSupported;
        
        /// <summary>	
        /// <dd> <p>Specifies whether the hardware and driver support simple instancing. The runtime sets this member to <strong>TRUE</strong> if  the hardware and driver support simple instancing.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D9_OPTIONS1::SimpleInstancingSupported']/*"/>	
        /// <msdn-id>dn629642</msdn-id>	
        /// <unmanaged>BOOL SimpleInstancingSupported</unmanaged>	
        /// <unmanaged-short>BOOL SimpleInstancingSupported</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool SimpleInstancingSupported;
        
        /// <summary>	
        /// <dd> <p>Specifies whether the hardware and driver support setting a single face of a <strong>TextureCube</strong> as a render target while the depth stencil surface that is bound alongside can be a <strong>Texture2D</strong> (as opposed to <strong>TextureCube</strong>). The runtime sets this member to <strong>TRUE</strong> if  the hardware and driver support this feature; otherwise <strong><see cref="SharpDX.Result.False"/></strong>.</p> <p>If the hardware and driver don't support this feature, the app must match the render target surface type with the depth stencil surface type. Because hardware at Direct3D 9.3 and lower feature levels doesn't allow <strong>TextureCube</strong> depth surfaces, the only way to render a scene into a <strong>TextureCube</strong> while having depth buffering enabled is to render each <strong>TextureCube</strong> face separately to a <strong>Texture2D</strong> render target first (because that can be matched with a <strong>Texture2D</strong> depth), and then copy the results into the <strong>TextureCube</strong>.  If  the hardware and driver support this feature, the app can just render to the <strong>TextureCube</strong> faces directly while getting depth buffering out of a <strong>Texture2D</strong> depth buffer.</p> <p>You only need to query this feature from  hardware at Direct3D 9.3 and lower feature levels because hardware at Direct3D 10.0 and higher feature levels allow <strong>TextureCube</strong> depth surfaces.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D9_OPTIONS1::TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported']/*"/>	
        /// <msdn-id>dn629642</msdn-id>	
        /// <unmanaged>BOOL TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported</unmanaged>	
        /// <unmanaged-short>BOOL TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported;
    }
    
    /// <summary>	
    /// <p><strong>Note</strong>??This structure is supported by the Direct3D 11.1 runtime, which is available on Windows?8 and later operating systems.</p><p>Describes Direct3D?9 shadow support in the current graphics driver. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Shadows are an important element in realistic 3D scenes.  You can use the shadow buffer technique to render shadows.  The basic principle of the technique is to use a depth buffer to store the scene depth info from the perspective of the light source, and then compare each point rendered in the scene with that buffer to determine if it is in shadow.</p><p>To render objects into the scene with shadows on them, you create <strong>sampler state objects</strong> with comparison filtering set and  the comparison mode (ComparisonFunc) to LessEqual.  You can also set BorderColor addressing on this depth sampler, even though BorderColor isn't typically allowed on feature levels 9.1 and 9.2.  By using the border color and picking 0.0 or 1.0 as the border color value, you can control whether the regions off the edge of the shadow map appear to be always in shadow or never in shadow respectively.	
    /// You can control the shadow filter quality by the Mag and Min filter settings in the comparison sampler.  Point sampling will produce shadows with non-anti-aliased edges.  Linear filter sampler settings will result in higher quality shadow edges, but might affect performance on some power-optimized devices.</p><p><strong>Note</strong>??If you use a separate setting for Mag versus Min filter options, you produce an undefined result.  Anisotropic filtering is not supported. The Mip filter choice is not relevant because feature level 9.x does not allow mipmapped depth buffers.</p><p><strong>Note</strong>??On feature level 9.x, you can't compile a shader with the <strong>SampleCmp</strong> and <strong>SampleCmpLevelZero</strong> intrinsic functions by using older versions of the compiler. For example,  you can't use the fxc.exe compiler that ships with the DirectX SDK or use the <strong><see cref="SharpDX.D3DCompiler.D3D.Compile"/>**</strong> functions (like <strong><see cref="SharpDX.D3DCompiler.D3D.CompileFromFile"/></strong>) that are implemented in D3DCompiler_43.dll and earlier. These intrinsic functions on feature level 9.x are only supported in the fxc.exe compiler that ships with the Windows?8 SDK and later and with the <strong><see cref="SharpDX.D3DCompiler.D3D.Compile"/>**</strong> functions that are implemented in D3DCompiler_44.dll and later.	
    /// But these intrinsic functions are present in shader models for feature levels higher than 9.x.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT']/*"/>	
    /// <msdn-id>jj247569</msdn-id>	
    /// <unmanaged>D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT</unmanaged>	
    /// <unmanaged-short>D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    internal  partial struct FeatureDataD3D9ShadowSupport {	
        
        /// <summary>	
        /// <dd> <p>Specifies whether the driver supports the shadowing feature with the comparison-filtering mode set to less than or equal to. The runtime sets this member to <strong>TRUE</strong> for hardware at Direct3D 10 and higher feature levels.  For hardware at Direct3D 9.3 and lower feature levels, the runtime sets this member to <strong>TRUE</strong> only if the hardware and driver support the shadowing feature; otherwise <strong><see cref="SharpDX.Result.False"/></strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT::SupportsDepthAsTextureWithLessEqualComparisonFilter']/*"/>	
        /// <msdn-id>jj247569</msdn-id>	
        /// <unmanaged>BOOL SupportsDepthAsTextureWithLessEqualComparisonFilter</unmanaged>	
        /// <unmanaged-short>BOOL SupportsDepthAsTextureWithLessEqualComparisonFilter</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool SupportsDepthAsTextureWithLessEqualComparisonFilter;
    }
    
    /// <summary>	
    /// <p><strong>Note</strong>??This structure is supported by the Direct3D 11.2 runtime, which is available on Windows?8.1 and later operating systems.</p><p>Describes whether simple instancing is supported.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>If the Direct3D API is the Direct3D 11.2 runtime and can support 11.2 features, <strong><see cref="SharpDX.Direct3D11.Device.CheckFeatureSupport"/></strong> for <strong><see cref="SharpDX.Direct3D11.Feature.D3D9SimpleInstancingSupport"/></strong> will return a SUCCESS code when valid parameters are passed. The <strong>SimpleInstancingSupported</strong> member of <strong><see cref="SharpDX.Direct3D11.FeatureDataD3D9SimpleInstancingSupport"/></strong> will be set to <strong>TRUE</strong> or <strong><see cref="SharpDX.Result.False"/></strong>.</p><p>Simple instancing means that instancing is supported with the caveat that the <strong>InstanceDataStepRate</strong> member of the <strong><see cref="SharpDX.Direct3D11.InputElement"/></strong> structure must be equal to 1. This does not change the full instancing support provided by hardware at feature level 9.3 and above, and is meant to expose the instancing support that may be available on feature level 9.2 and 9.1 hardware.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT']/*"/>	
    /// <msdn-id>dn280414</msdn-id>	
    /// <unmanaged>D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT</unmanaged>	
    /// <unmanaged-short>D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    internal  partial struct FeatureDataD3D9SimpleInstancingSupport {	
        
        /// <summary>	
        /// <dd> <p>Specifies whether the hardware and driver support simple instancing. The runtime sets this member to <strong>TRUE</strong> if  the hardware and driver support simple instancing.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT::SimpleInstancingSupported']/*"/>	
        /// <msdn-id>dn280414</msdn-id>	
        /// <unmanaged>BOOL SimpleInstancingSupported</unmanaged>	
        /// <unmanaged-short>BOOL SimpleInstancingSupported</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool SimpleInstancingSupported;
    }
    
    /// <summary>	
    /// <p>Describes double data type support in the current graphics driver.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>If the runtime sets <strong>DoublePrecisionFloatShaderOps</strong> to  <strong>TRUE</strong>, the hardware and driver support the following Shader Model 5 instructions:</p><ul> <li> dadd </li> <li> dmax </li> <li> dmin </li> <li> dmul </li> <li> deq </li> <li> dge </li> <li> dlt </li> <li> dne </li> <li> dmov </li> <li> dmovc </li> <li> dtof </li> <li> ftod </li> </ul><p><strong>Note</strong>??If <strong>DoublePrecisionFloatShaderOps</strong> is <strong>TRUE</strong>, the hardware and driver do not necessarily support double-precision division.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_DOUBLES']/*"/>	
    /// <msdn-id>ff476127</msdn-id>	
    /// <unmanaged>D3D11_FEATURE_DATA_DOUBLES</unmanaged>	
    /// <unmanaged-short>D3D11_FEATURE_DATA_DOUBLES</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    internal  partial struct FeatureDataDoubles {	
        
        /// <summary>	
        /// <dd> <p>Specifies whether double types are allowed. If <strong>TRUE</strong>, double types are allowed; otherwise <strong><see cref="SharpDX.Result.False"/></strong>. The runtime must set <strong>DoublePrecisionFloatShaderOps</strong> to  <strong>TRUE</strong> in order for you to use any HLSL shader that is compiled with a double type.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_DOUBLES::DoublePrecisionFloatShaderOps']/*"/>	
        /// <msdn-id>ff476127</msdn-id>	
        /// <unmanaged>BOOL DoublePrecisionFloatShaderOps</unmanaged>	
        /// <unmanaged-short>BOOL DoublePrecisionFloatShaderOps</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool DoublePrecisionFloatShaderOps;
    }
    
    /// <summary>	
    /// <p>Describes which resources are supported by the current graphics driver for a given format.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_FORMAT_SUPPORT']/*"/>	
    /// <msdn-id>ff476128</msdn-id>	
    /// <unmanaged>D3D11_FEATURE_DATA_FORMAT_SUPPORT</unmanaged>	
    /// <unmanaged-short>D3D11_FEATURE_DATA_FORMAT_SUPPORT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    internal  partial struct FeatureDataFormatSupport {	
        
        /// <summary>	
        /// <dd> <p> <strong><see cref="SharpDX.DXGI.Format"/></strong> to return information on.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_FORMAT_SUPPORT::InFormat']/*"/>	
        /// <msdn-id>ff476128</msdn-id>	
        /// <unmanaged>DXGI_FORMAT InFormat</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT InFormat</unmanaged-short>	
        public SharpDX.DXGI.Format InFormat;
        
        /// <summary>	
        /// <dd> <p>Combination of <strong><see cref="SharpDX.Direct3D11.FormatSupport"/></strong> flags indicating which resources are supported.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_FORMAT_SUPPORT::OutFormatSupport']/*"/>	
        /// <msdn-id>ff476128</msdn-id>	
        /// <unmanaged>D3D11_FORMAT_SUPPORT OutFormatSupport</unmanaged>	
        /// <unmanaged-short>D3D11_FORMAT_SUPPORT OutFormatSupport</unmanaged-short>	
        public SharpDX.Direct3D11.FormatSupport OutFormatSupport;
    }
    
    /// <summary>	
    /// <p>Describes which unordered resource options are supported by the current graphics driver for a given format.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_FORMAT_SUPPORT2']/*"/>	
    /// <msdn-id>ff476129</msdn-id>	
    /// <unmanaged>D3D11_FEATURE_DATA_FORMAT_SUPPORT2</unmanaged>	
    /// <unmanaged-short>D3D11_FEATURE_DATA_FORMAT_SUPPORT2</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    internal  partial struct FeatureDataFormatSupport2 {	
        
        /// <summary>	
        /// <dd> <p> <strong><see cref="SharpDX.DXGI.Format"/></strong> to return information on.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_FORMAT_SUPPORT2::InFormat']/*"/>	
        /// <msdn-id>ff476129</msdn-id>	
        /// <unmanaged>DXGI_FORMAT InFormat</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT InFormat</unmanaged-short>	
        public SharpDX.DXGI.Format InFormat;
        
        /// <summary>	
        /// <dd> <p>Combination of <strong><see cref="SharpDX.Direct3D11.ComputeShaderFormatSupport"/></strong> flags indicating which unordered resource options are supported.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_FORMAT_SUPPORT2::OutFormatSupport2']/*"/>	
        /// <msdn-id>ff476129</msdn-id>	
        /// <unmanaged>D3D11_FORMAT_SUPPORT2 OutFormatSupport2</unmanaged>	
        /// <unmanaged-short>D3D11_FORMAT_SUPPORT2 OutFormatSupport2</unmanaged-short>	
        public SharpDX.Direct3D11.ComputeShaderFormatSupport OutFormatSupport2;
    }
    
    /// <summary>	
    /// <p> Describes feature data GPU virtual address support, including maximum address bits per resource and per process. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> See <strong><see cref="SharpDX.Direct3D11.Feature"/></strong>. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT']/*"/>	
    /// <msdn-id>mt158212</msdn-id>	
    /// <unmanaged>D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT</unmanaged>	
    /// <unmanaged-short>D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    internal  partial struct FeatureDataGpuVirtualAddressSupport {	
        
        /// <summary>	
        /// <dd> <p> The maximum GPU virtual address bits per resource. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT::MaxGPUVirtualAddressBitsPerResource']/*"/>	
        /// <msdn-id>mt158212</msdn-id>	
        /// <unmanaged>unsigned int MaxGPUVirtualAddressBitsPerResource</unmanaged>	
        /// <unmanaged-short>unsigned int MaxGPUVirtualAddressBitsPerResource</unmanaged-short>	
        public int MaxGPUVirtualAddressBitsPerResource;
        
        /// <summary>	
        /// <dd> <p> The maximum GPU virtual address bits per process. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT::MaxGPUVirtualAddressBitsPerProcess']/*"/>	
        /// <msdn-id>mt158212</msdn-id>	
        /// <unmanaged>unsigned int MaxGPUVirtualAddressBitsPerProcess</unmanaged>	
        /// <unmanaged-short>unsigned int MaxGPUVirtualAddressBitsPerProcess</unmanaged-short>	
        public int MaxGPUVirtualAddressBitsPerProcess;
    }
    
    /// <summary>	
    /// <p><strong>Note</strong>??This structure is supported by the Direct3D 11.2 runtime, which is available on Windows?8.1 and later operating systems.</p><p>Describes whether a GPU profiling technique is supported.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>If the Direct3D API is the Direct3D 11.2 runtime and can support 11.2 features, <strong><see cref="SharpDX.Direct3D11.Device.CheckFeatureSupport"/></strong> for <strong><see cref="SharpDX.Direct3D11.Feature.MarkerSupport"/></strong> will return a SUCCESS code when valid parameters are passed. The <strong>Profile</strong> member of <strong><see cref="SharpDX.Direct3D11.FeatureDataMarkerSupport"/></strong> will be set to <strong>TRUE</strong> or <strong><see cref="SharpDX.Result.False"/></strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_MARKER_SUPPORT']/*"/>	
    /// <msdn-id>dn280415</msdn-id>	
    /// <unmanaged>D3D11_FEATURE_DATA_MARKER_SUPPORT</unmanaged>	
    /// <unmanaged-short>D3D11_FEATURE_DATA_MARKER_SUPPORT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    internal  partial struct FeatureDataMarkerSupport {	
        
        /// <summary>	
        /// <dd> <p>Specifies whether the hardware and driver support a GPU profiling technique that can be used with development tools. The runtime sets this member to <strong>TRUE</strong> if  the hardware and driver support data marking.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_MARKER_SUPPORT::Profile']/*"/>	
        /// <msdn-id>dn280415</msdn-id>	
        /// <unmanaged>BOOL Profile</unmanaged>	
        /// <unmanaged-short>BOOL Profile</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool Profile;
    }
    
    /// <summary>	
    /// <p><strong>Note</strong>??This structure is supported by the Direct3D 11.1 runtime, which is available on Windows?8 and later operating systems.</p><p>Describes precision support  options for shaders in the current graphics driver.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>For hardware at Direct3D 10 and higher feature levels, the runtime sets both members identically.  For hardware at Direct3D 9.3 and lower feature levels, the runtime can set a lower precision support in the <strong>PixelShaderMinPrecision</strong> member than the <strong>AllOtherShaderStagesMinPrecision</strong> member; for 9.3 and lower, all other shader stages represent only the vertex shader.</p><p>For more info about HLSL minimum precision, see using HLSL minimum precision.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT']/*"/>	
    /// <msdn-id>hh404460</msdn-id>	
    /// <unmanaged>D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT</unmanaged>	
    /// <unmanaged-short>D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct FeatureDataShaderMinimumPrecisionSupport {	
        
        /// <summary>	
        /// <dd> <p>A combination of <strong><see cref="SharpDX.Direct3D11.ShaderMinimumPrecisionSupport"/></strong>-typed values that are combined by using a bitwise OR operation. The resulting value specifies minimum precision levels that the driver supports for the pixel shader. A value of zero indicates that the driver supports only full 32-bit precision for the pixel shader.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT::PixelShaderMinPrecision']/*"/>	
        /// <msdn-id>hh404460</msdn-id>	
        /// <unmanaged>unsigned int PixelShaderMinPrecision</unmanaged>	
        /// <unmanaged-short>unsigned int PixelShaderMinPrecision</unmanaged-short>	
        public int PixelShaderMinPrecision;
        
        /// <summary>	
        /// <dd> <p>A combination of <strong><see cref="SharpDX.Direct3D11.ShaderMinimumPrecisionSupport"/></strong>-typed values that are combined by using a bitwise OR operation. The resulting value specifies minimum precision levels that the driver supports for all other shader stages. A value of zero indicates that the driver supports only full 32-bit precision for all other shader stages.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT::AllOtherShaderStagesMinPrecision']/*"/>	
        /// <msdn-id>hh404460</msdn-id>	
        /// <unmanaged>unsigned int AllOtherShaderStagesMinPrecision</unmanaged>	
        /// <unmanaged-short>unsigned int AllOtherShaderStagesMinPrecision</unmanaged-short>	
        public int AllOtherShaderStagesMinPrecision;
    }
    
    /// <summary>	
    /// <p>Describes the multi-threading features that are supported by the current graphics driver.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Use the <see cref="SharpDX.Direct3D11.FeatureDataThreading"/> structure with the <strong><see cref="SharpDX.Direct3D11.Device.CheckFeatureSupport"/></strong> method to determine multi-threading support.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_THREADING']/*"/>	
    /// <msdn-id>ff476130</msdn-id>	
    /// <unmanaged>D3D11_FEATURE_DATA_THREADING</unmanaged>	
    /// <unmanaged-short>D3D11_FEATURE_DATA_THREADING</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    internal  partial struct FeatureDataThreading {	
        
        /// <summary>	
        /// <dd> <p><strong>TRUE</strong> means resources can be created concurrently on multiple threads while drawing; <strong><see cref="SharpDX.Result.False"/></strong> means that the presence of coarse synchronization will prevent concurrency.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_THREADING::DriverConcurrentCreates']/*"/>	
        /// <msdn-id>ff476130</msdn-id>	
        /// <unmanaged>BOOL DriverConcurrentCreates</unmanaged>	
        /// <unmanaged-short>BOOL DriverConcurrentCreates</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool DriverConcurrentCreates;
        
        /// <summary>	
        /// <dd> <p><strong>TRUE</strong> means command lists are supported by the current driver; <strong><see cref="SharpDX.Result.False"/></strong> means that the API will emulate deferred contexts and command lists with software.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FEATURE_DATA_THREADING::DriverCommandLists']/*"/>	
        /// <msdn-id>ff476130</msdn-id>	
        /// <unmanaged>BOOL DriverCommandLists</unmanaged>	
        /// <unmanaged-short>BOOL DriverCommandLists</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool DriverCommandLists;
    }
    
    /// <summary>	
    /// <p>Debug message filter; contains a lists of message types to allow or deny.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>For use with an <strong><see cref="SharpDX.Direct3D11.InfoQueue"/> Interface</strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_INFO_QUEUE_FILTER']/*"/>	
    /// <msdn-id>ff476177</msdn-id>	
    /// <unmanaged>D3D11_INFO_QUEUE_FILTER</unmanaged>	
    /// <unmanaged-short>D3D11_INFO_QUEUE_FILTER</unmanaged-short>	
    public  partial class InfoQueueFilter {	
        
        /// <summary>	
        /// <dd> <p>Types of messages that you want to allow. See <strong><see cref="SharpDX.Direct3D11.InfoQueueFilterDescription"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_INFO_QUEUE_FILTER::AllowList']/*"/>	
        /// <msdn-id>ff476177</msdn-id>	
        /// <unmanaged>D3D11_INFO_QUEUE_FILTER_DESC AllowList</unmanaged>	
        /// <unmanaged-short>D3D11_INFO_QUEUE_FILTER_DESC AllowList</unmanaged-short>	
        public SharpDX.Direct3D11.InfoQueueFilterDescription AllowList;
        
        /// <summary>	
        /// <dd> <p>Types of messages that you want to deny.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_INFO_QUEUE_FILTER::DenyList']/*"/>	
        /// <msdn-id>ff476177</msdn-id>	
        /// <unmanaged>D3D11_INFO_QUEUE_FILTER_DESC DenyList</unmanaged>	
        /// <unmanaged-short>D3D11_INFO_QUEUE_FILTER_DESC DenyList</unmanaged-short>	
        public SharpDX.Direct3D11.InfoQueueFilterDescription DenyList;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public SharpDX.Direct3D11.InfoQueueFilterDescription.__Native AllowList;
            public SharpDX.Direct3D11.InfoQueueFilterDescription.__Native DenyList;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                this.AllowList.__MarshalFree();
                this.DenyList.__MarshalFree();
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.AllowList = new SharpDX.Direct3D11.InfoQueueFilterDescription();
			this.AllowList.__MarshalFrom(ref @ref.AllowList);
            this.DenyList = new SharpDX.Direct3D11.InfoQueueFilterDescription();
			this.DenyList.__MarshalFrom(ref @ref.DenyList);
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
			@ref.AllowList = new SharpDX.Direct3D11.InfoQueueFilterDescription.__Native();
						
						if (this.AllowList != null) 						
                this.AllowList.__MarshalTo(ref @ref.AllowList);
			@ref.DenyList = new SharpDX.Direct3D11.InfoQueueFilterDescription.__Native();
						
						if (this.DenyList != null) 						
                this.DenyList.__MarshalTo(ref @ref.DenyList);
		
		}
    }
    
    /// <summary>	
    /// <p>Allow or deny certain types of messages to pass through a filter.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_INFO_QUEUE_FILTER_DESC']/*"/>	
    /// <msdn-id>ff476178</msdn-id>	
    /// <unmanaged>D3D11_INFO_QUEUE_FILTER_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_INFO_QUEUE_FILTER_DESC</unmanaged-short>	
    public  partial class InfoQueueFilterDescription {	
        
        /// <summary>	
        /// <dd> <p>Number of message categories to allow or deny.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_INFO_QUEUE_FILTER_DESC::NumCategories']/*"/>	
        /// <msdn-id>ff476178</msdn-id>	
        /// <unmanaged>unsigned int NumCategories</unmanaged>	
        /// <unmanaged-short>unsigned int NumCategories</unmanaged-short>	
        internal int CategorieCount;
        
        /// <summary>	
        /// <dd> <p>Array of message categories to allow or deny. Array must have at least NumCategories members (see <strong><see cref="SharpDX.Direct3D11.MessageCategory"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_INFO_QUEUE_FILTER_DESC::pCategoryList']/*"/>	
        /// <msdn-id>ff476178</msdn-id>	
        /// <unmanaged>D3D11_MESSAGE_CATEGORY* pCategoryList</unmanaged>	
        /// <unmanaged-short>D3D11_MESSAGE_CATEGORY pCategoryList</unmanaged-short>	
        internal System.IntPtr PCategoryList;
        
        /// <summary>	
        /// <dd> <p>Number of message severity levels to allow or deny.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_INFO_QUEUE_FILTER_DESC::NumSeverities']/*"/>	
        /// <msdn-id>ff476178</msdn-id>	
        /// <unmanaged>unsigned int NumSeverities</unmanaged>	
        /// <unmanaged-short>unsigned int NumSeverities</unmanaged-short>	
        internal int SeveritieCount;
        
        /// <summary>	
        /// <dd> <p>Array of message severity levels to allow or deny. Array must have at least NumSeverities members (see <strong><see cref="SharpDX.Direct3D11.MessageSeverity"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_INFO_QUEUE_FILTER_DESC::pSeverityList']/*"/>	
        /// <msdn-id>ff476178</msdn-id>	
        /// <unmanaged>D3D11_MESSAGE_SEVERITY* pSeverityList</unmanaged>	
        /// <unmanaged-short>D3D11_MESSAGE_SEVERITY pSeverityList</unmanaged-short>	
        internal System.IntPtr PSeverityList;
        
        /// <summary>	
        /// <dd> <p>Number of message IDs to allow or deny.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_INFO_QUEUE_FILTER_DESC::NumIDs']/*"/>	
        /// <msdn-id>ff476178</msdn-id>	
        /// <unmanaged>unsigned int NumIDs</unmanaged>	
        /// <unmanaged-short>unsigned int NumIDs</unmanaged-short>	
        internal int IDCount;
        
        /// <summary>	
        /// <dd> <p>Array of message IDs to allow or deny. Array must have at least NumIDs members (see <strong><see cref="SharpDX.Direct3D11.MessageId"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_INFO_QUEUE_FILTER_DESC::pIDList']/*"/>	
        /// <msdn-id>ff476178</msdn-id>	
        /// <unmanaged>D3D11_MESSAGE_ID* pIDList</unmanaged>	
        /// <unmanaged-short>D3D11_MESSAGE_ID pIDList</unmanaged-short>	
        internal System.IntPtr PIDList;
    }
    
    /// <summary>	
    /// <p>Type of data contained in an input slot.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Use these values to specify the type of data for a particular input element (see <strong><see cref="SharpDX.Direct3D11.InputElement"/></strong>) of an input-layout object.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_INPUT_ELEMENT_DESC']/*"/>	
    /// <msdn-id>ff476179</msdn-id>	
    /// <unmanaged>D3D11_INPUT_ELEMENT_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_INPUT_ELEMENT_DESC</unmanaged-short>	
    public  partial struct InputElement {	
        
        /// <summary>	
        /// <dd> <p>Input data is per-vertex data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_INPUT_ELEMENT_DESC::SemanticName']/*"/>	
        /// <msdn-id>ff476179</msdn-id>	
        /// <unmanaged>const char* SemanticName</unmanaged>	
        /// <unmanaged-short>char SemanticName</unmanaged-short>	
        public string SemanticName;
        
        /// <summary>	
        /// <dd> <p>Input data is per-instance data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_INPUT_ELEMENT_DESC::SemanticIndex']/*"/>	
        /// <msdn-id>ff476179</msdn-id>	
        /// <unmanaged>unsigned int SemanticIndex</unmanaged>	
        /// <unmanaged-short>unsigned int SemanticIndex</unmanaged-short>	
        public int SemanticIndex;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_INPUT_ELEMENT_DESC::Format']/*"/>	
        /// <msdn-id>ff476179</msdn-id>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        public SharpDX.DXGI.Format Format;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_INPUT_ELEMENT_DESC::InputSlot']/*"/>	
        /// <msdn-id>ff476179</msdn-id>	
        /// <unmanaged>unsigned int InputSlot</unmanaged>	
        /// <unmanaged-short>unsigned int InputSlot</unmanaged-short>	
        public int Slot;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_INPUT_ELEMENT_DESC::AlignedByteOffset']/*"/>	
        /// <msdn-id>ff476179</msdn-id>	
        /// <unmanaged>unsigned int AlignedByteOffset</unmanaged>	
        /// <unmanaged-short>unsigned int AlignedByteOffset</unmanaged-short>	
        public int AlignedByteOffset;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_INPUT_ELEMENT_DESC::InputSlotClass']/*"/>	
        /// <msdn-id>ff476179</msdn-id>	
        /// <unmanaged>D3D11_INPUT_CLASSIFICATION InputSlotClass</unmanaged>	
        /// <unmanaged-short>D3D11_INPUT_CLASSIFICATION InputSlotClass</unmanaged-short>	
        public SharpDX.Direct3D11.InputClassification Classification;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_INPUT_ELEMENT_DESC::InstanceDataStepRate']/*"/>	
        /// <msdn-id>ff476179</msdn-id>	
        /// <unmanaged>unsigned int InstanceDataStepRate</unmanaged>	
        /// <unmanaged-short>unsigned int InstanceDataStepRate</unmanaged-short>	
        public int InstanceDataStepRate;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public System.IntPtr SemanticName;
            public int SemanticIndex;
            public SharpDX.DXGI.Format Format;
            public int Slot;
            public int AlignedByteOffset;
            public SharpDX.Direct3D11.InputClassification Classification;
            public int InstanceDataStepRate;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                if (this.SemanticName != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.SemanticName);		
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.SemanticName = ( @ref.SemanticName == IntPtr.Zero )?null:Marshal.PtrToStringAnsi(@ref.SemanticName);
            this.SemanticIndex = @ref.SemanticIndex;
            this.Format = @ref.Format;
            this.Slot = @ref.Slot;
            this.AlignedByteOffset = @ref.AlignedByteOffset;
            this.Classification = @ref.Classification;
            this.InstanceDataStepRate = @ref.InstanceDataStepRate;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.SemanticName = ( this.SemanticName == null )?IntPtr.Zero : Utilities.StringToHGlobalAnsi(this.SemanticName);
            @ref.SemanticIndex = this.SemanticIndex;
            @ref.Format = this.Format;
            @ref.Slot = this.Slot;
            @ref.AlignedByteOffset = this.AlignedByteOffset;
            @ref.Classification = this.Classification;
            @ref.InstanceDataStepRate = this.InstanceDataStepRate;
		
		}
    }
    
    /// <summary>	
    /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Represents key exchange data for hardware content protection.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>A reference to this structure is passed in the <em>pData</em> parameter of <strong><see cref="SharpDX.Direct3D11.VideoContext.NegotiateCryptoSessionKeyExchange"/></strong> method when the <strong><see cref="SharpDX.Direct3D11.CryptoSession"/></strong> is creating using the <strong>D3D11_KEY_EXCHANGE_HW_PROTECTION</strong> key exchange type.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_KEY_EXCHANGE_HW_PROTECTION_DATA']/*"/>	
    /// <msdn-id>dn894115</msdn-id>	
    /// <unmanaged>D3D11_KEY_EXCHANGE_HW_PROTECTION_DATA</unmanaged>	
    /// <unmanaged-short>D3D11_KEY_EXCHANGE_HW_PROTECTION_DATA</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct KeyExchangeHwProtectionData {	
        
        /// <summary>	
        /// <dd> <p>The function ID of the DRM command. The values and meanings of the function ID are defined by the DRM specification.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_KEY_EXCHANGE_HW_PROTECTION_DATA::HWProtectionFunctionID']/*"/>	
        /// <msdn-id>dn894115</msdn-id>	
        /// <unmanaged>unsigned int HWProtectionFunctionID</unmanaged>	
        /// <unmanaged-short>unsigned int HWProtectionFunctionID</unmanaged-short>	
        public int HWProtectionFunctionID;
        
        /// <summary>	
        /// <dd> <p>Pointer to a buffer containing a <strong><see cref="SharpDX.Direct3D11.KeyExchangeHwProtectionInputData"/></strong> structure that specifies memory reserved for IHV use and the input data for the DRM command.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_KEY_EXCHANGE_HW_PROTECTION_DATA::pInputData']/*"/>	
        /// <msdn-id>dn894115</msdn-id>	
        /// <unmanaged>D3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA* pInputData</unmanaged>	
        /// <unmanaged-short>D3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA pInputData</unmanaged-short>	
        public System.IntPtr PInputData;
        
        /// <summary>	
        /// <dd> <p>Pointer to a buffer containing a <strong><see cref="SharpDX.Direct3D11.KeyExchangeHwProtectionOutputData"/></strong> structure that specifies memory reserved for IHV use and the input data for the DRM command.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_KEY_EXCHANGE_HW_PROTECTION_DATA::pOutputData']/*"/>	
        /// <msdn-id>dn894115</msdn-id>	
        /// <unmanaged>D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA* pOutputData</unmanaged>	
        /// <unmanaged-short>D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA pOutputData</unmanaged-short>	
        public System.IntPtr POutputData;
        
        /// <summary>	
        /// <dd> <p>The result of the hardware DRM command.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_KEY_EXCHANGE_HW_PROTECTION_DATA::Status']/*"/>	
        /// <msdn-id>dn894115</msdn-id>	
        /// <unmanaged>HRESULT Status</unmanaged>	
        /// <unmanaged-short>HRESULT Status</unmanaged-short>	
        public SharpDX.Result Status;
    }
    
    /// <summary>	
    /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Represents key exchange input data for hardware content protection.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA']/*"/>	
    /// <msdn-id>dn894116</msdn-id>	
    /// <unmanaged>D3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA</unmanaged>	
    /// <unmanaged-short>D3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA</unmanaged-short>	
    public  partial struct KeyExchangeHwProtectionInputData {	
        
        /// <summary>	
        /// <dd> <p>The size of the private data reserved for IHV usage. This size is determined from the <em>pPrivateInputSize</em> parameter returned by the <strong><see cref="SharpDX.Direct3D11.VideoDevice1.GetCryptoSessionPrivateDataSize"/></strong> function.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA::PrivateDataSize']/*"/>	
        /// <msdn-id>dn894116</msdn-id>	
        /// <unmanaged>unsigned int PrivateDataSize</unmanaged>	
        /// <unmanaged-short>unsigned int PrivateDataSize</unmanaged-short>	
        public int PrivateDataSize;
        
        /// <summary>	
        /// <dd> <p>The size of the DRM command data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA::HWProtectionDataSize']/*"/>	
        /// <msdn-id>dn894116</msdn-id>	
        /// <unmanaged>unsigned int HWProtectionDataSize</unmanaged>	
        /// <unmanaged-short>unsigned int HWProtectionDataSize</unmanaged-short>	
        public int HWProtectionDataSize;
        
        /// <summary>	
        /// <dd> <p>If <strong>PrivateDataSize</strong> is greater than 0,  pbInput[0] ? <strong>pbInput</strong>[<strong>PrivateDataSize</strong> - 1] is reserved for IHV use.</p> <p><strong>pbInput</strong>[<strong>PrivateDataSize</strong>] ? <strong>pbInput</strong>[<strong>HWProtectionDataSize</strong> + <strong>PrivateDataSize</strong> - 1] contains the input data for the DRM command. The format and size of the DRM command is defined by the DRM specification.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA::pbInput']/*"/>	
        /// <msdn-id>dn894116</msdn-id>	
        /// <unmanaged>unsigned char pbInput[4]</unmanaged>	
        /// <unmanaged-short>unsigned char pbInput</unmanaged-short>	
        public byte[] PbInput { 
            get { return _PbInput ?? (_PbInput = new byte[4]);}
        }
        internal byte[] _PbInput;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public int PrivateDataSize;
            public int HWProtectionDataSize;
            public byte PbInput;
            byte __PbInput1;
            byte __PbInput2;
            byte __PbInput3;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.PrivateDataSize = @ref.PrivateDataSize;
            this.HWProtectionDataSize = @ref.HWProtectionDataSize;
            fixed (void* __to = &this.PbInput[0]) fixed (void* __from = &@ref.PbInput) SharpDX.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, 4*sizeof ( byte));
        }
    }
    
    /// <summary>	
    /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Represents key exchange output data for hardware content protection.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA']/*"/>	
    /// <msdn-id>dn894117</msdn-id>	
    /// <unmanaged>D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA</unmanaged>	
    /// <unmanaged-short>D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA</unmanaged-short>	
    public  partial struct KeyExchangeHwProtectionOutputData {	
        
        /// <summary>	
        /// <dd> <p>The size of the private data reserved for IHV usage. This size is determined from the <em>pPrivateOutputSize</em> parameter returned by the <strong><see cref="SharpDX.Direct3D11.VideoDevice1.GetCryptoSessionPrivateDataSize"/></strong> function.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA::PrivateDataSize']/*"/>	
        /// <msdn-id>dn894117</msdn-id>	
        /// <unmanaged>unsigned int PrivateDataSize</unmanaged>	
        /// <unmanaged-short>unsigned int PrivateDataSize</unmanaged-short>	
        public int PrivateDataSize;
        
        /// <summary>	
        /// <dd> <p>The maximum size of data that the driver can return in the output buffer. The last byte that it can write to is <strong>pbOuput</strong>[<strong>PrivateDataSize</strong> + <strong>MaxHWProtectionDataSize</strong> ? 1].</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA::MaxHWProtectionDataSize']/*"/>	
        /// <msdn-id>dn894117</msdn-id>	
        /// <unmanaged>unsigned int MaxHWProtectionDataSize</unmanaged>	
        /// <unmanaged-short>unsigned int MaxHWProtectionDataSize</unmanaged-short>	
        public int MaxHWProtectionDataSize;
        
        /// <summary>	
        /// <dd> <p>The size of the output data written by the driver.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA::HWProtectionDataSize']/*"/>	
        /// <msdn-id>dn894117</msdn-id>	
        /// <unmanaged>unsigned int HWProtectionDataSize</unmanaged>	
        /// <unmanaged-short>unsigned int HWProtectionDataSize</unmanaged-short>	
        public int HWProtectionDataSize;
        
        /// <summary>	
        /// <dd> <p>The number of 100 nanosecond units spent transporting the data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA::TransportTime']/*"/>	
        /// <msdn-id>dn894117</msdn-id>	
        /// <unmanaged>unsigned longlong TransportTime</unmanaged>	
        /// <unmanaged-short>unsigned longlong TransportTime</unmanaged-short>	
        public long TransportTime;
        
        /// <summary>	
        /// <dd> <p>The number of 100 nanosecond units spent executing the content protection command.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA::ExecutionTime']/*"/>	
        /// <msdn-id>dn894117</msdn-id>	
        /// <unmanaged>unsigned longlong ExecutionTime</unmanaged>	
        /// <unmanaged-short>unsigned longlong ExecutionTime</unmanaged-short>	
        public long ExecutionTime;
        
        /// <summary>	
        /// <dd> <p>If <strong>PrivateDataSize</strong> is greater than 0,  pbInput[0] ? <strong>pbOutput</strong>[<strong>PrivateDataSize</strong> - 1] is reserved for IHV use.</p> <p><strong>pbOutput</strong>[<strong>PrivateDataSize</strong>] ? <strong>pbOutput</strong>[<strong>HWProtectionDataSize</strong> + <strong>PrivateDataSize</strong> - 1] contains the input data for the DRM command. The format and size of the DRM command is defined by the DRM specification.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA::pbOutput']/*"/>	
        /// <msdn-id>dn894117</msdn-id>	
        /// <unmanaged>unsigned char pbOutput[4]</unmanaged>	
        /// <unmanaged-short>unsigned char pbOutput</unmanaged-short>	
        public byte[] PbOutput { 
            get { return _PbOutput ?? (_PbOutput = new byte[4]);}
        }
        internal byte[] _PbOutput;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public int PrivateDataSize;
            public int MaxHWProtectionDataSize;
            public int HWProtectionDataSize;
            public long TransportTime;
            public long ExecutionTime;
            public byte PbOutput;
            byte __PbOutput1;
            byte __PbOutput2;
            byte __PbOutput3;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.PrivateDataSize = @ref.PrivateDataSize;
            this.MaxHWProtectionDataSize = @ref.MaxHWProtectionDataSize;
            this.HWProtectionDataSize = @ref.HWProtectionDataSize;
            this.TransportTime = @ref.TransportTime;
            this.ExecutionTime = @ref.ExecutionTime;
            fixed (void* __to = &this.PbOutput[0]) fixed (void* __from = &@ref.PbOutput) SharpDX.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, 4*sizeof ( byte));
        }
    }
    
    /// <summary>	
    /// <p>A debug message in the Information Queue.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This structure is returned from <strong><see cref="SharpDX.Direct3D11.InfoQueue.GetMessage"/></strong> as part of the Information Queue feature (see <strong><see cref="SharpDX.Direct3D11.InfoQueue"/> Interface</strong>).</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_MESSAGE']/*"/>	
    /// <msdn-id>ff476184</msdn-id>	
    /// <unmanaged>D3D11_MESSAGE</unmanaged>	
    /// <unmanaged-short>D3D11_MESSAGE</unmanaged-short>	
    public  partial struct Message {	
        
        /// <summary>	
        /// <dd> <p>The category of the message. See <strong><see cref="SharpDX.Direct3D11.MessageCategory"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_MESSAGE::Category']/*"/>	
        /// <msdn-id>ff476184</msdn-id>	
        /// <unmanaged>D3D11_MESSAGE_CATEGORY Category</unmanaged>	
        /// <unmanaged-short>D3D11_MESSAGE_CATEGORY Category</unmanaged-short>	
        public SharpDX.Direct3D11.MessageCategory Category;
        
        /// <summary>	
        /// <dd> <p>The severity of the message. See <strong><see cref="SharpDX.Direct3D11.MessageSeverity"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_MESSAGE::Severity']/*"/>	
        /// <msdn-id>ff476184</msdn-id>	
        /// <unmanaged>D3D11_MESSAGE_SEVERITY Severity</unmanaged>	
        /// <unmanaged-short>D3D11_MESSAGE_SEVERITY Severity</unmanaged-short>	
        public SharpDX.Direct3D11.MessageSeverity Severity;
        
        /// <summary>	
        /// <dd> <p>The ID of the message. See <strong><see cref="SharpDX.Direct3D11.MessageId"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_MESSAGE::ID']/*"/>	
        /// <msdn-id>ff476184</msdn-id>	
        /// <unmanaged>D3D11_MESSAGE_ID ID</unmanaged>	
        /// <unmanaged-short>D3D11_MESSAGE_ID ID</unmanaged-short>	
        public SharpDX.Direct3D11.MessageId Id;
        
        /// <summary>	
        /// <dd> <p>The message string.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_MESSAGE::pDescription']/*"/>	
        /// <msdn-id>ff476184</msdn-id>	
        /// <unmanaged>const char* pDescription</unmanaged>	
        /// <unmanaged-short>char pDescription</unmanaged-short>	
        public string Description;
        
        /// <summary>	
        /// <dd> <p>The length of pDescription in bytes.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_MESSAGE::DescriptionByteLength']/*"/>	
        /// <msdn-id>ff476184</msdn-id>	
        /// <unmanaged>SIZE_T DescriptionByteLength</unmanaged>	
        /// <unmanaged-short>SIZE_T DescriptionByteLength</unmanaged-short>	
        internal SharpDX.PointerSize DescriptionByteLength;
    }
    
    /// <summary>	
    /// <p>Contains a Message Authentication Code (MAC). </p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_OMAC']/*"/>	
    /// <msdn-id>hh447631</msdn-id>	
    /// <unmanaged>D3D11_OMAC</unmanaged>	
    /// <unmanaged-short>D3D11_OMAC</unmanaged-short>	
    public  partial struct MessageAuthenticationCode {	
        
        /// <summary>	
        /// <dd> <p>A byte array that contains the cryptographic MAC value of the message.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_OMAC::Omac']/*"/>	
        /// <msdn-id>hh447631</msdn-id>	
        /// <unmanaged>unsigned char Omac[16]</unmanaged>	
        /// <unmanaged-short>unsigned char Omac</unmanaged-short>	
        public byte[] Buffer { 
            get { return _Buffer ?? (_Buffer = new byte[16]);}
        }
        internal byte[] _Buffer;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public byte Buffer;
            byte __Buffer1;
            byte __Buffer2;
            byte __Buffer3;
            byte __Buffer4;
            byte __Buffer5;
            byte __Buffer6;
            byte __Buffer7;
            byte __Buffer8;
            byte __Buffer9;
            byte __Buffer10;
            byte __Buffer11;
            byte __Buffer12;
            byte __Buffer13;
            byte __Buffer14;
            byte __Buffer15;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            fixed (void* __to = &this.Buffer[0]) fixed (void* __from = &@ref.Buffer) SharpDX.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, 16*sizeof ( byte));
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            fixed (void* __to = &@ref.Buffer) fixed (void* __from = &this.Buffer[0]) SharpDX.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, 16*sizeof ( byte));
		
		}
    }
    
    /// <summary>	
    /// <p>Describes the tile structure of a tiled resource with mipmaps. </p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_PACKED_MIP_DESC']/*"/>	
    /// <msdn-id>dn280418</msdn-id>	
    /// <unmanaged>D3D11_PACKED_MIP_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_PACKED_MIP_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct PackedMipDescription {	
        
        /// <summary>	
        /// <dd> <p>Number of standard mipmaps in the tiled resource. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_PACKED_MIP_DESC::NumStandardMips']/*"/>	
        /// <msdn-id>dn280418</msdn-id>	
        /// <unmanaged>unsigned char NumStandardMips</unmanaged>	
        /// <unmanaged-short>unsigned char NumStandardMips</unmanaged-short>	
        public byte StandardMipCount;
        
        /// <summary>	
        /// <dd> <p>Number of packed mipmaps in the tiled resource. </p> <p>This number starts from the least detailed mipmap (either sharing tiles or using non standard tile layout). This number is 0 if no	
        /// such packing is in the resource.  For array surfaces, this value is the number of mipmaps that are packed for a given array slice where each array slice repeats the same	
        /// packing.	
        /// </p> <p>On Tier_2 tiled resources hardware, mipmaps that fill at least one standard shaped tile in all dimensions 	
        /// are not allowed to be included in the set of packed mipmaps.  On Tier_1 hardware, mipmaps that are an integer multiple of one standard shaped tile in all dimensions are not allowed to be included in the set of packed mipmaps.  Mipmaps with at least one 	
        /// dimension less than the standard tile shape may or may not be packed.  When a given mipmap needs to be packed, all coarser 	
        /// mipmaps for a given array slice are considered packed as well.	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_PACKED_MIP_DESC::NumPackedMips']/*"/>	
        /// <msdn-id>dn280418</msdn-id>	
        /// <unmanaged>unsigned char NumPackedMips</unmanaged>	
        /// <unmanaged-short>unsigned char NumPackedMips</unmanaged-short>	
        public byte PackedMipCount;
        
        /// <summary>	
        /// <dd> <p>Number of tiles for the packed mipmaps in the tiled resource. </p> <p>If there is no packing, this value is meaningless and is set to 0.	
        /// Otherwise, it is set to the number of tiles	
        /// that are needed to represent the set of packed mipmaps.  	
        /// The pixel layout within the packed mipmaps is hardware specific. 	
        /// If apps define only partial mappings for the set of tiles in packed mipmaps, read and write behavior is vendor specific and undefined.	
        /// For arrays, this value is only the count of packed mipmaps within	
        /// the subresources for each array slice.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_PACKED_MIP_DESC::NumTilesForPackedMips']/*"/>	
        /// <msdn-id>dn280418</msdn-id>	
        /// <unmanaged>unsigned int NumTilesForPackedMips</unmanaged>	
        /// <unmanaged-short>unsigned int NumTilesForPackedMips</unmanaged-short>	
        public int TilesForPackedMipCount;
        
        /// <summary>	
        /// <dd> <p>Offset of the first packed tile for the resource	
        /// in the overall range of tiles.  If <strong>NumPackedMips</strong> is 0, this	
        /// value is meaningless and is 0.  Otherwise, it is the	
        /// offset of the first packed tile for the resource in the overall	
        /// range of tiles for the resource.  A value of 0 for 	
        /// <strong>StartTileIndexInOverallResource</strong> means the entire resource is packed.  	
        /// For array surfaces, this is the offset for the tiles that contain the packed 	
        /// mipmaps for the first array slice. Packed mipmaps for each array slice in arrayed surfaces are at this offset	
        /// past the beginning of the tiles for each array slice.  </p> <p><strong>Note</strong>??The 	
        /// number of overall tiles, packed or not, for a given array slice is	
        /// simply the total number of tiles for the resource divided by the 	
        /// resource's array size, so it is easy to locate the range of tiles for 	
        /// any given array slice, out of which <strong>StartTileIndexInOverallResource</strong> identifies	
        /// which of those are packed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_PACKED_MIP_DESC::StartTileIndexInOverallResource']/*"/>	
        /// <msdn-id>dn280418</msdn-id>	
        /// <unmanaged>unsigned int StartTileIndexInOverallResource</unmanaged>	
        /// <unmanaged-short>unsigned int StartTileIndexInOverallResource</unmanaged-short>	
        public int StartTileIndexInOverallResource;
    }
    
    /// <summary>	
    /// <p>Query information about graphics-pipeline activity in between calls to <strong><see cref="SharpDX.Direct3D11.DeviceContext.Begin"/></strong> and <strong><see cref="SharpDX.Direct3D11.DeviceContext.End"/></strong>.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_QUERY_DATA_PIPELINE_STATISTICS']/*"/>	
    /// <msdn-id>ff476192</msdn-id>	
    /// <unmanaged>D3D11_QUERY_DATA_PIPELINE_STATISTICS</unmanaged>	
    /// <unmanaged-short>D3D11_QUERY_DATA_PIPELINE_STATISTICS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct QueryDataPipelineStatistics {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_QUERY_DATA_PIPELINE_STATISTICS::IAVertices']/*"/>	
        /// <msdn-id>ff476192</msdn-id>	
        /// <unmanaged>unsigned longlong IAVertices</unmanaged>	
        /// <unmanaged-short>unsigned longlong IAVertices</unmanaged-short>	
        public long IAVerticeCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_QUERY_DATA_PIPELINE_STATISTICS::IAPrimitives']/*"/>	
        /// <msdn-id>ff476192</msdn-id>	
        /// <unmanaged>unsigned longlong IAPrimitives</unmanaged>	
        /// <unmanaged-short>unsigned longlong IAPrimitives</unmanaged-short>	
        public long IAPrimitiveCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_QUERY_DATA_PIPELINE_STATISTICS::VSInvocations']/*"/>	
        /// <msdn-id>ff476192</msdn-id>	
        /// <unmanaged>unsigned longlong VSInvocations</unmanaged>	
        /// <unmanaged-short>unsigned longlong VSInvocations</unmanaged-short>	
        public long VSInvocationCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_QUERY_DATA_PIPELINE_STATISTICS::GSInvocations']/*"/>	
        /// <msdn-id>ff476192</msdn-id>	
        /// <unmanaged>unsigned longlong GSInvocations</unmanaged>	
        /// <unmanaged-short>unsigned longlong GSInvocations</unmanaged-short>	
        public long GSInvocationCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_QUERY_DATA_PIPELINE_STATISTICS::GSPrimitives']/*"/>	
        /// <msdn-id>ff476192</msdn-id>	
        /// <unmanaged>unsigned longlong GSPrimitives</unmanaged>	
        /// <unmanaged-short>unsigned longlong GSPrimitives</unmanaged-short>	
        public long GSPrimitiveCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_QUERY_DATA_PIPELINE_STATISTICS::CInvocations']/*"/>	
        /// <msdn-id>ff476192</msdn-id>	
        /// <unmanaged>unsigned longlong CInvocations</unmanaged>	
        /// <unmanaged-short>unsigned longlong CInvocations</unmanaged-short>	
        public long CInvocationCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_QUERY_DATA_PIPELINE_STATISTICS::CPrimitives']/*"/>	
        /// <msdn-id>ff476192</msdn-id>	
        /// <unmanaged>unsigned longlong CPrimitives</unmanaged>	
        /// <unmanaged-short>unsigned longlong CPrimitives</unmanaged-short>	
        public long CPrimitiveCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_QUERY_DATA_PIPELINE_STATISTICS::PSInvocations']/*"/>	
        /// <msdn-id>ff476192</msdn-id>	
        /// <unmanaged>unsigned longlong PSInvocations</unmanaged>	
        /// <unmanaged-short>unsigned longlong PSInvocations</unmanaged-short>	
        public long PSInvocationCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_QUERY_DATA_PIPELINE_STATISTICS::HSInvocations']/*"/>	
        /// <msdn-id>ff476192</msdn-id>	
        /// <unmanaged>unsigned longlong HSInvocations</unmanaged>	
        /// <unmanaged-short>unsigned longlong HSInvocations</unmanaged-short>	
        public long HSInvocationCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_QUERY_DATA_PIPELINE_STATISTICS::DSInvocations']/*"/>	
        /// <msdn-id>ff476192</msdn-id>	
        /// <unmanaged>unsigned longlong DSInvocations</unmanaged>	
        /// <unmanaged-short>unsigned longlong DSInvocations</unmanaged-short>	
        public long DSInvocationCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_QUERY_DATA_PIPELINE_STATISTICS::CSInvocations']/*"/>	
        /// <msdn-id>ff476192</msdn-id>	
        /// <unmanaged>unsigned longlong CSInvocations</unmanaged>	
        /// <unmanaged-short>unsigned longlong CSInvocations</unmanaged-short>	
        public long CSInvocationCount;
    }
    
    /// <summary>	
    /// <p>Query information about the reliability of a timestamp query.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>For a list of query types see <strong><see cref="SharpDX.Direct3D11.QueryType"/></strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_QUERY_DATA_TIMESTAMP_DISJOINT']/*"/>	
    /// <msdn-id>ff476194</msdn-id>	
    /// <unmanaged>D3D11_QUERY_DATA_TIMESTAMP_DISJOINT</unmanaged>	
    /// <unmanaged-short>D3D11_QUERY_DATA_TIMESTAMP_DISJOINT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct QueryDataTimestampDisjoint {	
        
        /// <summary>	
        /// <dd> <p>How frequently the GPU counter increments in Hz.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_QUERY_DATA_TIMESTAMP_DISJOINT::Frequency']/*"/>	
        /// <msdn-id>ff476194</msdn-id>	
        /// <unmanaged>unsigned longlong Frequency</unmanaged>	
        /// <unmanaged-short>unsigned longlong Frequency</unmanaged-short>	
        public long Frequency;
        
        /// <summary>	
        /// <dd> <p>If this is <strong>TRUE</strong>, something occurred in between the query's <strong><see cref="SharpDX.Direct3D11.DeviceContext.Begin"/></strong> and <strong><see cref="SharpDX.Direct3D11.DeviceContext.End"/></strong> calls that caused the timestamp counter to become discontinuous or disjoint, such as unplugging the AC cord on a laptop, overheating, or throttling up/down due to laptop savings events. The timestamp returned by <strong><see cref="SharpDX.Direct3D11.DeviceContext.GetDataInternal"/></strong> for a timestamp query is only reliable if <strong>Disjoint</strong> is <strong><see cref="SharpDX.Result.False"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_QUERY_DATA_TIMESTAMP_DISJOINT::Disjoint']/*"/>	
        /// <msdn-id>ff476194</msdn-id>	
        /// <unmanaged>BOOL Disjoint</unmanaged>	
        /// <unmanaged-short>BOOL Disjoint</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool Disjoint;
    }
    
    /// <summary>	
    /// <p>Describes a query.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_QUERY_DESC']/*"/>	
    /// <msdn-id>ff476195</msdn-id>	
    /// <unmanaged>D3D11_QUERY_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_QUERY_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct QueryDescription {	
        
        /// <summary>	
        /// <dd> <p>Type of query (see <strong><see cref="SharpDX.Direct3D11.QueryType"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_QUERY_DESC::Query']/*"/>	
        /// <msdn-id>ff476195</msdn-id>	
        /// <unmanaged>D3D11_QUERY Query</unmanaged>	
        /// <unmanaged-short>D3D11_QUERY Query</unmanaged-short>	
        public SharpDX.Direct3D11.QueryType Type;
        
        /// <summary>	
        /// <dd> <p>Miscellaneous flags (see <strong><see cref="SharpDX.Direct3D11.QueryFlags"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_QUERY_DESC::MiscFlags']/*"/>	
        /// <msdn-id>ff476195</msdn-id>	
        /// <unmanaged>D3D11_QUERY_MISC_FLAG MiscFlags</unmanaged>	
        /// <unmanaged-short>D3D11_QUERY_MISC_FLAG MiscFlags</unmanaged-short>	
        public SharpDX.Direct3D11.QueryFlags Flags;
    }
    
    /// <summary>	
    /// <p>Describes a query.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_QUERY_DESC1']/*"/>	
    /// <msdn-id>ff476195</msdn-id>	
    /// <unmanaged>D3D11_QUERY_DESC1</unmanaged>	
    /// <unmanaged-short>D3D11_QUERY_DESC1</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct QueryDescription1 {	
        
        /// <summary>	
        /// <dd> <p>Type of query (see <strong><see cref="SharpDX.Direct3D11.QueryType"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_QUERY_DESC1::Query']/*"/>	
        /// <msdn-id>ff476195</msdn-id>	
        /// <unmanaged>D3D11_QUERY Query</unmanaged>	
        /// <unmanaged-short>D3D11_QUERY Query</unmanaged-short>	
        public SharpDX.Direct3D11.QueryType Query;
        
        /// <summary>	
        /// <dd> <p>Miscellaneous flags (see <strong><see cref="SharpDX.Direct3D11.QueryFlags"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_QUERY_DESC1::MiscFlags']/*"/>	
        /// <msdn-id>ff476195</msdn-id>	
        /// <unmanaged>unsigned int MiscFlags</unmanaged>	
        /// <unmanaged-short>unsigned int MiscFlags</unmanaged-short>	
        public int MiscFlags;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_QUERY_DESC1::ContextType']/*"/>	
        /// <msdn-id>ff476195</msdn-id>	
        /// <unmanaged>D3D11_CONTEXT_TYPE ContextType</unmanaged>	
        /// <unmanaged-short>D3D11_CONTEXT_TYPE ContextType</unmanaged-short>	
        public SharpDX.Direct3D11.ContextType ContextType;
    }
    
    /// <summary>	
    /// <p>Describes rasterizer state.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Rasterizer state defines the behavior of the rasterizer stage. To create a rasterizer-state object, call <strong><see cref="SharpDX.Direct3D11.Device.CreateRasterizerState"/></strong>. To set rasterizer state, call <strong><see cref="SharpDX.Direct3D11.RasterizerStage.SetState"/></strong>.</p><p>If you do not specify some rasterizer state,  the Direct3D runtime uses the following default values for rasterizer state.</p><table> <tr><th>State</th><th>Default Value</th></tr> <tr><td><strong>FillMode</strong></td><td>Solid</td></tr> <tr><td><strong>CullMode</strong></td><td>Back</td></tr> <tr><td><strong>FrontCounterClockwise</strong></td><td><strong><see cref="SharpDX.Result.False"/></strong></td></tr> <tr><td><strong>DepthBias</strong></td><td>0</td></tr> <tr><td><strong>SlopeScaledDepthBias</strong></td><td>0.0f</td></tr> <tr><td><strong>DepthBiasClamp</strong></td><td>0.0f</td></tr> <tr><td><strong>DepthClipEnable</strong></td><td><strong>TRUE</strong></td></tr> <tr><td><strong>ScissorEnable</strong></td><td><strong><see cref="SharpDX.Result.False"/></strong></td></tr> <tr><td><strong>MultisampleEnable</strong></td><td><strong><see cref="SharpDX.Result.False"/></strong></td></tr> <tr><td><strong>AntialiasedLineEnable</strong></td><td><strong><see cref="SharpDX.Result.False"/></strong></td></tr> </table><p>?</p><p><strong>Note</strong>??For feature levels 9.1, 9.2, 9.3, and 10.0, if you set <strong>MultisampleEnable</strong> to <strong><see cref="SharpDX.Result.False"/></strong>, the runtime renders all points, lines, and triangles without anti-aliasing even for render targets with a sample count greater than 1. For feature levels 10.1 and higher, the setting of <strong>MultisampleEnable</strong> has no effect on points and triangles with regard to MSAA and impacts only the selection of the line-rendering algorithm as shown in this table:</p><p> </p><table> <tr><th>Line-rendering algorithm</th><th><strong>MultisampleEnable</strong></th><th><strong>AntialiasedLineEnable</strong></th></tr> <tr><td>Aliased</td><td><strong><see cref="SharpDX.Result.False"/></strong></td><td><strong><see cref="SharpDX.Result.False"/></strong></td></tr> <tr><td>Alpha antialiased</td><td><strong><see cref="SharpDX.Result.False"/></strong></td><td><strong>TRUE</strong></td></tr> <tr><td>Quadrilateral</td><td><strong>TRUE</strong></td><td><strong><see cref="SharpDX.Result.False"/></strong></td></tr> <tr><td>Quadrilateral</td><td><strong>TRUE</strong></td><td><strong>TRUE</strong></td></tr> </table><p>?</p><p>The settings of the <strong>MultisampleEnable</strong> and <strong>AntialiasedLineEnable</strong> members apply only to multisample antialiasing (MSAA) render targets (that is, render targets with sample counts greater than 1). Because of the differences in feature-level behavior and as long as you aren?t performing any line drawing or don?t mind that lines render as quadrilaterals, we recommend that you always set <strong>MultisampleEnable</strong> to <strong>TRUE</strong> whenever you render on MSAA render targets.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC']/*"/>	
    /// <msdn-id>ff476198</msdn-id>	
    /// <unmanaged>D3D11_RASTERIZER_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_RASTERIZER_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct RasterizerStateDescription {	
        
        /// <summary>	
        /// <dd> <p>Determines the fill mode to use when rendering (see <strong><see cref="SharpDX.Direct3D11.FillMode"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC::FillMode']/*"/>	
        /// <msdn-id>ff476198</msdn-id>	
        /// <unmanaged>D3D11_FILL_MODE FillMode</unmanaged>	
        /// <unmanaged-short>D3D11_FILL_MODE FillMode</unmanaged-short>	
        public SharpDX.Direct3D11.FillMode FillMode;
        
        /// <summary>	
        /// <dd> <p>Indicates triangles facing the specified direction are not drawn (see <strong><see cref="SharpDX.Direct3D11.CullMode"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC::CullMode']/*"/>	
        /// <msdn-id>ff476198</msdn-id>	
        /// <unmanaged>D3D11_CULL_MODE CullMode</unmanaged>	
        /// <unmanaged-short>D3D11_CULL_MODE CullMode</unmanaged-short>	
        public SharpDX.Direct3D11.CullMode CullMode;
        
        /// <summary>	
        /// <dd> <p>Determines if a triangle is front- or back-facing. If this parameter is <strong>TRUE</strong>, a triangle will be considered front-facing if its vertices are counter-clockwise on the render target and considered back-facing if they are clockwise. If this parameter is <strong><see cref="SharpDX.Result.False"/></strong>, the opposite is true.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC::FrontCounterClockwise']/*"/>	
        /// <msdn-id>ff476198</msdn-id>	
        /// <unmanaged>BOOL FrontCounterClockwise</unmanaged>	
        /// <unmanaged-short>BOOL FrontCounterClockwise</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IsFrontCounterClockwise;
        
        /// <summary>	
        /// <dd> <p>Depth value added to a given pixel. For info about depth bias, see Depth Bias.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC::DepthBias']/*"/>	
        /// <msdn-id>ff476198</msdn-id>	
        /// <unmanaged>int DepthBias</unmanaged>	
        /// <unmanaged-short>int DepthBias</unmanaged-short>	
        public int DepthBias;
        
        /// <summary>	
        /// <dd> <p>Maximum depth bias of a pixel. For info about depth bias, see Depth Bias.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC::DepthBiasClamp']/*"/>	
        /// <msdn-id>ff476198</msdn-id>	
        /// <unmanaged>float DepthBiasClamp</unmanaged>	
        /// <unmanaged-short>float DepthBiasClamp</unmanaged-short>	
        public float DepthBiasClamp;
        
        /// <summary>	
        /// <dd> <p>Scalar on a given pixel's slope. For info about depth bias, see Depth Bias.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC::SlopeScaledDepthBias']/*"/>	
        /// <msdn-id>ff476198</msdn-id>	
        /// <unmanaged>float SlopeScaledDepthBias</unmanaged>	
        /// <unmanaged-short>float SlopeScaledDepthBias</unmanaged-short>	
        public float SlopeScaledDepthBias;
        
        /// <summary>	
        /// <dd> <p>Enable clipping based on distance.</p> <p>The hardware always performs x and y clipping of rasterized coordinates. When <strong>DepthClipEnable</strong> is set to the default?<strong>TRUE</strong>, the hardware also clips the z value (that is, the hardware performs the last step of the following algorithm).	
        /// </p> <code> 0 &lt; w	
        /// -w &lt;= x &lt;= w (or arbitrarily wider range if implementation uses a guard band to reduce clipping burden)	
        /// -w &lt;= y &lt;= w (or arbitrarily wider range if implementation uses a guard band to reduce clipping burden)	
        /// 0 &lt;= z &lt;= w	
        /// </code> <p>When you set <strong>DepthClipEnable</strong> to <strong><see cref="SharpDX.Result.False"/></strong>, the hardware skips the z clipping (that is, the last step in the preceding algorithm). However, the hardware still performs the "0 &lt; w" clipping. When z clipping is disabled, improper depth ordering at the pixel level might result. However, when z clipping is disabled, stencil shadow implementations are simplified. In other words, you can avoid complex special-case handling for geometry that goes beyond the back clipping plane.	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC::DepthClipEnable']/*"/>	
        /// <msdn-id>ff476198</msdn-id>	
        /// <unmanaged>BOOL DepthClipEnable</unmanaged>	
        /// <unmanaged-short>BOOL DepthClipEnable</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IsDepthClipEnabled;
        
        /// <summary>	
        /// <dd> <p>Enable scissor-rectangle culling. All pixels outside an active scissor rectangle are culled.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC::ScissorEnable']/*"/>	
        /// <msdn-id>ff476198</msdn-id>	
        /// <unmanaged>BOOL ScissorEnable</unmanaged>	
        /// <unmanaged-short>BOOL ScissorEnable</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IsScissorEnabled;
        
        /// <summary>	
        /// <dd> <p>Specifies whether to use the quadrilateral or alpha line anti-aliasing algorithm on multisample antialiasing (MSAA) render targets. Set to <strong>TRUE</strong> to use the quadrilateral line anti-aliasing algorithm and to <strong><see cref="SharpDX.Result.False"/></strong> to use the alpha line anti-aliasing algorithm. For more info about this member, see Remarks.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC::MultisampleEnable']/*"/>	
        /// <msdn-id>ff476198</msdn-id>	
        /// <unmanaged>BOOL MultisampleEnable</unmanaged>	
        /// <unmanaged-short>BOOL MultisampleEnable</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IsMultisampleEnabled;
        
        /// <summary>	
        /// <dd> <p>Specifies whether to enable line antialiasing; only applies if doing line drawing and <strong>MultisampleEnable</strong> is <strong><see cref="SharpDX.Result.False"/></strong>. For more info about this member, see Remarks.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC::AntialiasedLineEnable']/*"/>	
        /// <msdn-id>ff476198</msdn-id>	
        /// <unmanaged>BOOL AntialiasedLineEnable</unmanaged>	
        /// <unmanaged-short>BOOL AntialiasedLineEnable</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IsAntialiasedLineEnabled;
    }
    
    /// <summary>	
    /// <p><strong>Note</strong>??This structure is supported by the Direct3D 11.1 runtime, which is available on Windows?8 and later operating systems.</p><p>Describes rasterizer state.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Rasterizer state defines the behavior of the rasterizer stage. To create a rasterizer-state object, call <strong><see cref="SharpDX.Direct3D11.Device1.CreateRasterizerState1"/></strong>. To set rasterizer state, call <strong><see cref="SharpDX.Direct3D11.RasterizerStage.SetState"/></strong>.</p><p>If you do not specify some rasterizer state,  the Direct3D runtime uses the following default values for rasterizer state.</p><table> <tr><th>State</th><th>Default Value</th></tr> <tr><td><strong>FillMode</strong></td><td>Solid</td></tr> <tr><td><strong>CullMode</strong></td><td>Back</td></tr> <tr><td><strong>FrontCounterClockwise</strong></td><td><strong><see cref="SharpDX.Result.False"/></strong></td></tr> <tr><td><strong>DepthBias</strong></td><td>0</td></tr> <tr><td><strong>SlopeScaledDepthBias</strong></td><td>0.0f</td></tr> <tr><td><strong>DepthBiasClamp</strong></td><td>0.0f</td></tr> <tr><td><strong>DepthClipEnable</strong></td><td><strong>TRUE</strong></td></tr> <tr><td><strong>ScissorEnable</strong></td><td><strong><see cref="SharpDX.Result.False"/></strong></td></tr> <tr><td><strong>MultisampleEnable</strong></td><td><strong><see cref="SharpDX.Result.False"/></strong></td></tr> <tr><td><strong>AntialiasedLineEnable</strong></td><td><strong><see cref="SharpDX.Result.False"/></strong></td></tr> <tr><td><strong>ForcedSampleCount</strong></td><td>0</td></tr> </table><p>?</p><p><strong>Note</strong>??For feature levels 9.1, 9.2, 9.3, and 10.0, if you set <strong>MultisampleEnable</strong> to <strong><see cref="SharpDX.Result.False"/></strong>, the runtime renders all points, lines, and triangles without anti-aliasing even for render targets with a sample count greater than 1. For feature levels 10.1 and higher, the setting of <strong>MultisampleEnable</strong> has no effect on points and triangles with regard to MSAA and impacts only the selection of the line-rendering algorithm as shown in this table:</p><p> </p><table> <tr><th>Line-rendering algorithm</th><th><strong>MultisampleEnable</strong></th><th><strong>AntialiasedLineEnable</strong></th></tr> <tr><td>Aliased</td><td><strong><see cref="SharpDX.Result.False"/></strong></td><td><strong><see cref="SharpDX.Result.False"/></strong></td></tr> <tr><td>Alpha antialiased</td><td><strong><see cref="SharpDX.Result.False"/></strong></td><td><strong>TRUE</strong></td></tr> <tr><td>Quadrilateral</td><td><strong>TRUE</strong></td><td><strong><see cref="SharpDX.Result.False"/></strong></td></tr> <tr><td>Quadrilateral</td><td><strong>TRUE</strong></td><td><strong>TRUE</strong></td></tr> </table><p>?</p><p>The settings of the <strong>MultisampleEnable</strong> and <strong>AntialiasedLineEnable</strong> members apply only to multisample antialiasing (MSAA) render targets (that is, render targets with sample counts greater than 1). Because of the differences in feature-level behavior and as long as you aren?t performing any line drawing or don?t mind that lines render as quadrilaterals, we recommend that you always set <strong>MultisampleEnable</strong> to <strong>TRUE</strong> whenever you render on MSAA render targets.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC1']/*"/>	
    /// <msdn-id>hh404489</msdn-id>	
    /// <unmanaged>D3D11_RASTERIZER_DESC1</unmanaged>	
    /// <unmanaged-short>D3D11_RASTERIZER_DESC1</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct RasterizerStateDescription1 {	
        
        /// <summary>	
        /// <dd> <p>Determines the fill mode to use when rendering.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC1::FillMode']/*"/>	
        /// <msdn-id>hh404489</msdn-id>	
        /// <unmanaged>D3D11_FILL_MODE FillMode</unmanaged>	
        /// <unmanaged-short>D3D11_FILL_MODE FillMode</unmanaged-short>	
        public SharpDX.Direct3D11.FillMode FillMode;
        
        /// <summary>	
        /// <dd> <p>Indicates that triangles facing the specified direction are not drawn.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC1::CullMode']/*"/>	
        /// <msdn-id>hh404489</msdn-id>	
        /// <unmanaged>D3D11_CULL_MODE CullMode</unmanaged>	
        /// <unmanaged-short>D3D11_CULL_MODE CullMode</unmanaged-short>	
        public SharpDX.Direct3D11.CullMode CullMode;
        
        /// <summary>	
        /// <dd> <p>Specifies whether a triangle is front- or back-facing. If <strong>TRUE</strong>, a triangle will be considered front-facing if its vertices are counter-clockwise on the render target and considered back-facing if they are clockwise. If <strong><see cref="SharpDX.Result.False"/></strong>, the opposite is true.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC1::FrontCounterClockwise']/*"/>	
        /// <msdn-id>hh404489</msdn-id>	
        /// <unmanaged>BOOL FrontCounterClockwise</unmanaged>	
        /// <unmanaged-short>BOOL FrontCounterClockwise</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IsFrontCounterClockwise;
        
        /// <summary>	
        /// <dd> <p>Depth value added to a given pixel. For info about depth bias, see Depth Bias.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC1::DepthBias']/*"/>	
        /// <msdn-id>hh404489</msdn-id>	
        /// <unmanaged>int DepthBias</unmanaged>	
        /// <unmanaged-short>int DepthBias</unmanaged-short>	
        public int DepthBias;
        
        /// <summary>	
        /// <dd> <p>Maximum depth bias of a pixel. For info about depth bias, see Depth Bias.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC1::DepthBiasClamp']/*"/>	
        /// <msdn-id>hh404489</msdn-id>	
        /// <unmanaged>float DepthBiasClamp</unmanaged>	
        /// <unmanaged-short>float DepthBiasClamp</unmanaged-short>	
        public float DepthBiasClamp;
        
        /// <summary>	
        /// <dd> <p>Scalar on a given pixel's slope. For info about depth bias, see Depth Bias.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC1::SlopeScaledDepthBias']/*"/>	
        /// <msdn-id>hh404489</msdn-id>	
        /// <unmanaged>float SlopeScaledDepthBias</unmanaged>	
        /// <unmanaged-short>float SlopeScaledDepthBias</unmanaged-short>	
        public float SlopeScaledDepthBias;
        
        /// <summary>	
        /// <dd> <p>Specifies whether to enable clipping based on distance.</p> <p>The hardware always performs x and y clipping of rasterized coordinates. When <strong>DepthClipEnable</strong> is set to the default?<strong>TRUE</strong>, the hardware also clips the z value (that is, the hardware performs the last step of the following algorithm).	
        /// </p> <code> 0 &lt; w	
        /// -w &lt;= x &lt;= w (or arbitrarily wider range if implementation uses a guard band to reduce clipping burden)	
        /// -w &lt;= y &lt;= w (or arbitrarily wider range if implementation uses a guard band to reduce clipping burden)	
        /// 0 &lt;= z &lt;= w	
        /// </code> <p>When you set <strong>DepthClipEnable</strong> to <strong><see cref="SharpDX.Result.False"/></strong>, the hardware skips the z clipping (that is, the last step in the preceding algorithm). However, the hardware still performs the "0 &lt; w" clipping. When z clipping is disabled, improper depth ordering at the pixel level might result. However, when z clipping is disabled, stencil shadow implementations are simplified. In other words, you can avoid complex special-case handling for geometry that goes beyond the back clipping plane.	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC1::DepthClipEnable']/*"/>	
        /// <msdn-id>hh404489</msdn-id>	
        /// <unmanaged>BOOL DepthClipEnable</unmanaged>	
        /// <unmanaged-short>BOOL DepthClipEnable</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IsDepthClipEnabled;
        
        /// <summary>	
        /// <dd> <p>Specifies whether to enable scissor-rectangle culling. All pixels outside an active scissor rectangle are culled.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC1::ScissorEnable']/*"/>	
        /// <msdn-id>hh404489</msdn-id>	
        /// <unmanaged>BOOL ScissorEnable</unmanaged>	
        /// <unmanaged-short>BOOL ScissorEnable</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IsScissorEnabled;
        
        /// <summary>	
        /// <dd> <p>Specifies whether to use the quadrilateral or alpha line anti-aliasing algorithm on multisample antialiasing (MSAA) render targets. Set to <strong>TRUE</strong> to use the quadrilateral line anti-aliasing algorithm and to <strong><see cref="SharpDX.Result.False"/></strong> to use the alpha line anti-aliasing algorithm. For more info about this member, see Remarks.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC1::MultisampleEnable']/*"/>	
        /// <msdn-id>hh404489</msdn-id>	
        /// <unmanaged>BOOL MultisampleEnable</unmanaged>	
        /// <unmanaged-short>BOOL MultisampleEnable</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IsMultisampleEnabled;
        
        /// <summary>	
        /// <dd> <p>Specifies whether to enable line antialiasing; only applies if doing line drawing and <strong>MultisampleEnable</strong> is <strong><see cref="SharpDX.Result.False"/></strong>. For more info about this member, see Remarks.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC1::AntialiasedLineEnable']/*"/>	
        /// <msdn-id>hh404489</msdn-id>	
        /// <unmanaged>BOOL AntialiasedLineEnable</unmanaged>	
        /// <unmanaged-short>BOOL AntialiasedLineEnable</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IsAntialiasedLineEnabled;
        
        /// <summary>	
        /// <dd> <p>The sample count that is forced while UAV rendering or rasterizing. Valid values are 0, 1, 2, 4, 8, and optionally 16. 0 indicates that the sample count is not forced.</p> <p><strong>Note</strong>??</p><p>If you want to render with <strong>ForcedSampleCount</strong> set to 1 or greater, you must follow these guidelines: </p> <ul> <li>Don't bind depth-stencil views.</li> <li>Disable depth testing.</li> <li>Ensure the shader doesn't output depth.</li> <li>If you have any render-target views bound (<strong><see cref="SharpDX.Direct3D11.BindFlags.RenderTarget"/></strong>) and <strong>ForcedSampleCount</strong> is greater than 1, ensure that every render target has only a single sample.</li> <li>Don't operate the shader at sample frequency. Therefore, <strong><see cref="SharpDX.D3DCompiler.ShaderReflection.IsSampleFrequencyShader_"/></strong> returns <strong><see cref="SharpDX.Result.False"/></strong>.</li> </ul>Otherwise, rendering behavior is undefined. For info about how to configure depth-stencil, see Configuring Depth-Stencil Functionality.	
        /// </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC1::ForcedSampleCount']/*"/>	
        /// <msdn-id>hh404489</msdn-id>	
        /// <unmanaged>unsigned int ForcedSampleCount</unmanaged>	
        /// <unmanaged-short>unsigned int ForcedSampleCount</unmanaged-short>	
        public int ForcedSampleCount;
    }
    
    /// <summary>	
    /// <p>Describes rasterizer state.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Rasterizer state defines the behavior of the rasterizer stage. To create a rasterizer-state object, call <strong><see cref="SharpDX.Direct3D11.Device.CreateRasterizerState"/></strong>. To set rasterizer state, call <strong><see cref="SharpDX.Direct3D11.RasterizerStage.SetState"/></strong>.</p><p>If you do not specify some rasterizer state,  the Direct3D runtime uses the following default values for rasterizer state.</p><table> <tr><th>State</th><th>Default Value</th></tr> <tr><td><strong>FillMode</strong></td><td>Solid</td></tr> <tr><td><strong>CullMode</strong></td><td>Back</td></tr> <tr><td><strong>FrontCounterClockwise</strong></td><td><strong><see cref="SharpDX.Result.False"/></strong></td></tr> <tr><td><strong>DepthBias</strong></td><td>0</td></tr> <tr><td><strong>SlopeScaledDepthBias</strong></td><td>0.0f</td></tr> <tr><td><strong>DepthBiasClamp</strong></td><td>0.0f</td></tr> <tr><td><strong>DepthClipEnable</strong></td><td><strong>TRUE</strong></td></tr> <tr><td><strong>ScissorEnable</strong></td><td><strong><see cref="SharpDX.Result.False"/></strong></td></tr> <tr><td><strong>MultisampleEnable</strong></td><td><strong><see cref="SharpDX.Result.False"/></strong></td></tr> <tr><td><strong>AntialiasedLineEnable</strong></td><td><strong><see cref="SharpDX.Result.False"/></strong></td></tr> </table><p>?</p><strong>Note</strong>??For feature levels 9.1, 9.2, 9.3, and 10.0, if you set <strong>MultisampleEnable</strong> to <strong><see cref="SharpDX.Result.False"/></strong>, the runtime renders all points, lines, and triangles without anti-aliasing even for render targets with a sample count greater than 1. For feature levels 10.1 and higher, the setting of <strong>MultisampleEnable</strong> has no effect on points and triangles with regard to MSAA and impacts only the selection of the line-rendering algorithm as shown in this table:?<p> </p><table> <tr><th>Line-rendering algorithm</th><th><strong>MultisampleEnable</strong></th><th><strong>AntialiasedLineEnable</strong></th></tr> <tr><td>Aliased</td><td><strong><see cref="SharpDX.Result.False"/></strong></td><td><strong><see cref="SharpDX.Result.False"/></strong></td></tr> <tr><td>Alpha antialiased</td><td><strong><see cref="SharpDX.Result.False"/></strong></td><td><strong>TRUE</strong></td></tr> <tr><td>Quadrilateral</td><td><strong>TRUE</strong></td><td><strong><see cref="SharpDX.Result.False"/></strong></td></tr> <tr><td>Quadrilateral</td><td><strong>TRUE</strong></td><td><strong>TRUE</strong></td></tr> </table><p>?</p><p>The settings of the <strong>MultisampleEnable</strong> and <strong>AntialiasedLineEnable</strong> members apply only to multisample antialiasing (MSAA) render targets (that is, render targets with sample counts greater than 1). Because of the differences in feature-level behavior and as long as you aren?t performing any line drawing or don?t mind that lines render as quadrilaterals, we recommend that you always set <strong>MultisampleEnable</strong> to <strong>TRUE</strong> whenever you render on MSAA render targets.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC2']/*"/>	
    /// <msdn-id>ff476198</msdn-id>	
    /// <unmanaged>D3D11_RASTERIZER_DESC2</unmanaged>	
    /// <unmanaged-short>D3D11_RASTERIZER_DESC2</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct RasterizerStateDescription2 {	
        
        /// <summary>	
        /// <dd> <p>Determines the fill mode to use when rendering (see <strong><see cref="SharpDX.Direct3D11.FillMode"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC2::FillMode']/*"/>	
        /// <msdn-id>ff476198</msdn-id>	
        /// <unmanaged>D3D11_FILL_MODE FillMode</unmanaged>	
        /// <unmanaged-short>D3D11_FILL_MODE FillMode</unmanaged-short>	
        public SharpDX.Direct3D11.FillMode FillMode;
        
        /// <summary>	
        /// <dd> <p>Indicates triangles facing the specified direction are not drawn (see <strong><see cref="SharpDX.Direct3D11.CullMode"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC2::CullMode']/*"/>	
        /// <msdn-id>ff476198</msdn-id>	
        /// <unmanaged>D3D11_CULL_MODE CullMode</unmanaged>	
        /// <unmanaged-short>D3D11_CULL_MODE CullMode</unmanaged-short>	
        public SharpDX.Direct3D11.CullMode CullMode;
        
        /// <summary>	
        /// <dd> <p>Determines if a triangle is front- or back-facing. If this parameter is <strong>TRUE</strong>, a triangle will be considered front-facing if its vertices are counter-clockwise on the render target and considered back-facing if they are clockwise. If this parameter is <strong><see cref="SharpDX.Result.False"/></strong>, the opposite is true.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC2::FrontCounterClockwise']/*"/>	
        /// <msdn-id>ff476198</msdn-id>	
        /// <unmanaged>BOOL FrontCounterClockwise</unmanaged>	
        /// <unmanaged-short>BOOL FrontCounterClockwise</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IsFrontCounterClockwise;
        
        /// <summary>	
        /// <dd> <p>Depth value added to a given pixel. For info about depth bias, see Depth Bias.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC2::DepthBias']/*"/>	
        /// <msdn-id>ff476198</msdn-id>	
        /// <unmanaged>int DepthBias</unmanaged>	
        /// <unmanaged-short>int DepthBias</unmanaged-short>	
        public int DepthBias;
        
        /// <summary>	
        /// <dd> <p>Maximum depth bias of a pixel. For info about depth bias, see Depth Bias.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC2::DepthBiasClamp']/*"/>	
        /// <msdn-id>ff476198</msdn-id>	
        /// <unmanaged>float DepthBiasClamp</unmanaged>	
        /// <unmanaged-short>float DepthBiasClamp</unmanaged-short>	
        public float DepthBiasClamp;
        
        /// <summary>	
        /// <dd> <p>Scalar on a given pixel's slope. For info about depth bias, see Depth Bias.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC2::SlopeScaledDepthBias']/*"/>	
        /// <msdn-id>ff476198</msdn-id>	
        /// <unmanaged>float SlopeScaledDepthBias</unmanaged>	
        /// <unmanaged-short>float SlopeScaledDepthBias</unmanaged-short>	
        public float SlopeScaledDepthBias;
        
        /// <summary>	
        /// <dd> <p>Enable clipping based on distance.</p> <p>The hardware always performs x and y clipping of rasterized coordinates. When <strong>DepthClipEnable</strong> is set to the default?<strong>TRUE</strong>, the hardware also clips the z value (that is, the hardware performs the last step of the following algorithm).	
        /// </p> <code> 0 &lt; w	
        /// -w &lt;= x &lt;= w (or arbitrarily wider range if implementation uses a guard band to reduce clipping burden)	
        /// -w &lt;= y &lt;= w (or arbitrarily wider range if implementation uses a guard band to reduce clipping burden)	
        /// 0 &lt;= z &lt;= w	
        /// </code> <p>When you set <strong>DepthClipEnable</strong> to <strong><see cref="SharpDX.Result.False"/></strong>, the hardware skips the z clipping (that is, the last step in the preceding algorithm). However, the hardware still performs the "0 &lt; w" clipping. When z clipping is disabled, improper depth ordering at the pixel level might result. However, when z clipping is disabled, stencil shadow implementations are simplified. In other words, you can avoid complex special-case handling for geometry that goes beyond the back clipping plane.	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC2::DepthClipEnable']/*"/>	
        /// <msdn-id>ff476198</msdn-id>	
        /// <unmanaged>BOOL DepthClipEnable</unmanaged>	
        /// <unmanaged-short>BOOL DepthClipEnable</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IsDepthClipEnabled;
        
        /// <summary>	
        /// <dd> <p>Enable scissor-rectangle culling. All pixels outside an active scissor rectangle are culled.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC2::ScissorEnable']/*"/>	
        /// <msdn-id>ff476198</msdn-id>	
        /// <unmanaged>BOOL ScissorEnable</unmanaged>	
        /// <unmanaged-short>BOOL ScissorEnable</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IsScissorEnabled;
        
        /// <summary>	
        /// <dd> <p>Specifies whether to use the quadrilateral or alpha line anti-aliasing algorithm on multisample antialiasing (MSAA) render targets. Set to <strong>TRUE</strong> to use the quadrilateral line anti-aliasing algorithm and to <strong><see cref="SharpDX.Result.False"/></strong> to use the alpha line anti-aliasing algorithm. For more info about this member, see Remarks.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC2::MultisampleEnable']/*"/>	
        /// <msdn-id>ff476198</msdn-id>	
        /// <unmanaged>BOOL MultisampleEnable</unmanaged>	
        /// <unmanaged-short>BOOL MultisampleEnable</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IsMultisampleEnabled;
        
        /// <summary>	
        /// <dd> <p>Specifies whether to enable line antialiasing; only applies if doing line drawing and <strong>MultisampleEnable</strong> is <strong><see cref="SharpDX.Result.False"/></strong>. For more info about this member, see Remarks.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC2::AntialiasedLineEnable']/*"/>	
        /// <msdn-id>ff476198</msdn-id>	
        /// <unmanaged>BOOL AntialiasedLineEnable</unmanaged>	
        /// <unmanaged-short>BOOL AntialiasedLineEnable</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IsAntialiasedLineEnabled;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC2::ForcedSampleCount']/*"/>	
        /// <msdn-id>ff476198</msdn-id>	
        /// <unmanaged>unsigned int ForcedSampleCount</unmanaged>	
        /// <unmanaged-short>unsigned int ForcedSampleCount</unmanaged-short>	
        public int ForcedSampleCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RASTERIZER_DESC2::ConservativeRaster']/*"/>	
        /// <msdn-id>ff476198</msdn-id>	
        /// <unmanaged>D3D11_CONSERVATIVE_RASTERIZATION_MODE ConservativeRaster</unmanaged>	
        /// <unmanaged-short>D3D11_CONSERVATIVE_RASTERIZATION_MODE ConservativeRaster</unmanaged-short>	
        public SharpDX.Direct3D11.ConservativeRasterizationMode ConservativeRasterizationMode;
    }
    
    /// <summary>	
    /// <p>Describes the blend state for a render target.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>You specify an array of <strong><see cref="SharpDX.Direct3D11.RenderTargetBlendDescription"/></strong> structures in the <strong>RenderTarget</strong> member of the <strong><see cref="SharpDX.Direct3D11.BlendStateDescription"/></strong> structure to describe the blend states for render targets; you can bind up to eight render targets to the output-merger stage at one time.</p><p>For info about how blending is done, see the output-merger stage.</p><p>Here are the default values for blend state.</p><table> <tr><th>State</th><th>Default Value</th></tr> <tr><td>BlendEnable</td><td><see cref="SharpDX.Result.False"/></td></tr> <tr><td>SrcBlend</td><td><see cref="SharpDX.Direct3D11.BlendOption.One"/></td></tr> <tr><td>DestBlend</td><td><see cref="SharpDX.Direct3D11.BlendOption.Zero"/></td></tr> <tr><td>BlendOp</td><td><see cref="SharpDX.Direct3D11.BlendOperation.Add"/></td></tr> <tr><td>SrcBlendAlpha</td><td><see cref="SharpDX.Direct3D11.BlendOption.One"/></td></tr> <tr><td>DestBlendAlpha</td><td><see cref="SharpDX.Direct3D11.BlendOption.Zero"/></td></tr> <tr><td>BlendOpAlpha</td><td><see cref="SharpDX.Direct3D11.BlendOperation.Add"/></td></tr> <tr><td>RenderTargetWriteMask</td><td><see cref="SharpDX.Direct3D11.ColorWriteMaskFlags.All"/></td></tr> </table><p>?</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_BLEND_DESC']/*"/>	
    /// <msdn-id>ff476200</msdn-id>	
    /// <unmanaged>D3D11_RENDER_TARGET_BLEND_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_RENDER_TARGET_BLEND_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct RenderTargetBlendDescription {	
        
        /// <summary>	
        /// <dd> <p>Enable (or disable) blending.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_BLEND_DESC::BlendEnable']/*"/>	
        /// <msdn-id>ff476200</msdn-id>	
        /// <unmanaged>BOOL BlendEnable</unmanaged>	
        /// <unmanaged-short>BOOL BlendEnable</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IsBlendEnabled;
        
        /// <summary>	
        /// <dd> <p>This <strong>blend option</strong> specifies the operation to perform on the RGB value that the pixel shader outputs. The <strong>BlendOp</strong> member defines how to combine the <strong>SrcBlend</strong> and <strong>DestBlend</strong> operations.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_BLEND_DESC::SrcBlend']/*"/>	
        /// <msdn-id>ff476200</msdn-id>	
        /// <unmanaged>D3D11_BLEND SrcBlend</unmanaged>	
        /// <unmanaged-short>D3D11_BLEND SrcBlend</unmanaged-short>	
        public SharpDX.Direct3D11.BlendOption SourceBlend;
        
        /// <summary>	
        /// <dd> <p>This <strong>blend option</strong> specifies the operation to perform on the current RGB value in the render target. The <strong>BlendOp</strong> member defines how to combine the <strong>SrcBlend</strong> and <strong>DestBlend</strong> operations.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_BLEND_DESC::DestBlend']/*"/>	
        /// <msdn-id>ff476200</msdn-id>	
        /// <unmanaged>D3D11_BLEND DestBlend</unmanaged>	
        /// <unmanaged-short>D3D11_BLEND DestBlend</unmanaged-short>	
        public SharpDX.Direct3D11.BlendOption DestinationBlend;
        
        /// <summary>	
        /// <dd> <p>This <strong>blend operation</strong> defines how to combine the <strong>SrcBlend</strong> and <strong>DestBlend</strong> operations.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_BLEND_DESC::BlendOp']/*"/>	
        /// <msdn-id>ff476200</msdn-id>	
        /// <unmanaged>D3D11_BLEND_OP BlendOp</unmanaged>	
        /// <unmanaged-short>D3D11_BLEND_OP BlendOp</unmanaged-short>	
        public SharpDX.Direct3D11.BlendOperation BlendOperation;
        
        /// <summary>	
        /// <dd> <p>This <strong>blend option</strong> specifies the operation to perform on the alpha value that the pixel shader outputs. Blend options that end in _COLOR are not allowed. The <strong>BlendOpAlpha</strong> member defines how to combine the <strong>SrcBlendAlpha</strong> and <strong>DestBlendAlpha</strong> operations.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_BLEND_DESC::SrcBlendAlpha']/*"/>	
        /// <msdn-id>ff476200</msdn-id>	
        /// <unmanaged>D3D11_BLEND SrcBlendAlpha</unmanaged>	
        /// <unmanaged-short>D3D11_BLEND SrcBlendAlpha</unmanaged-short>	
        public SharpDX.Direct3D11.BlendOption SourceAlphaBlend;
        
        /// <summary>	
        /// <dd> <p>This <strong>blend option</strong> specifies the operation to perform on the current alpha value in the render target. Blend options that end in _COLOR are not allowed. The <strong>BlendOpAlpha</strong> member defines how to combine the <strong>SrcBlendAlpha</strong> and <strong>DestBlendAlpha</strong> operations.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_BLEND_DESC::DestBlendAlpha']/*"/>	
        /// <msdn-id>ff476200</msdn-id>	
        /// <unmanaged>D3D11_BLEND DestBlendAlpha</unmanaged>	
        /// <unmanaged-short>D3D11_BLEND DestBlendAlpha</unmanaged-short>	
        public SharpDX.Direct3D11.BlendOption DestinationAlphaBlend;
        
        /// <summary>	
        /// <dd> <p>This <strong>blend operation</strong> defines how to combine the <strong>SrcBlendAlpha</strong> and <strong>DestBlendAlpha</strong> operations.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_BLEND_DESC::BlendOpAlpha']/*"/>	
        /// <msdn-id>ff476200</msdn-id>	
        /// <unmanaged>D3D11_BLEND_OP BlendOpAlpha</unmanaged>	
        /// <unmanaged-short>D3D11_BLEND_OP BlendOpAlpha</unmanaged-short>	
        public SharpDX.Direct3D11.BlendOperation AlphaBlendOperation;
        
        /// <summary>	
        /// <dd> <p>A write mask.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_BLEND_DESC::RenderTargetWriteMask']/*"/>	
        /// <msdn-id>ff476200</msdn-id>	
        /// <unmanaged>D3D11_COLOR_WRITE_ENABLE RenderTargetWriteMask</unmanaged>	
        /// <unmanaged-short>D3D11_COLOR_WRITE_ENABLE RenderTargetWriteMask</unmanaged-short>	
        public SharpDX.Direct3D11.ColorWriteMaskFlags RenderTargetWriteMask;
    }
    
    /// <summary>	
    /// <p><strong>Note</strong>??This structure is supported by the Direct3D 11.1 runtime, which is available on Windows?8 and later operating systems.</p><p>Describes the blend state for a render target.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>You specify an array of <strong><see cref="SharpDX.Direct3D11.RenderTargetBlendDescription1"/></strong> structures in the <strong>RenderTarget</strong> member of the <strong><see cref="SharpDX.Direct3D11.BlendStateDescription1"/></strong> structure to describe the blend states for render targets; you can bind up to eight render targets to the output-merger stage at one time.</p><p>For info about how blending is done, see the output-merger stage.</p><p>Here are the default values for blend state.</p><table> <tr><th>State</th><th>Default Value</th></tr> <tr><td>BlendEnable</td><td><see cref="SharpDX.Result.False"/></td></tr> <tr><td>LogicOpEnable</td><td><see cref="SharpDX.Result.False"/></td></tr> <tr><td>SrcBlend</td><td><see cref="SharpDX.Direct3D11.BlendOption.One"/></td></tr> <tr><td>DestBlend</td><td><see cref="SharpDX.Direct3D11.BlendOption.Zero"/></td></tr> <tr><td>BlendOp</td><td><see cref="SharpDX.Direct3D11.BlendOperation.Add"/></td></tr> <tr><td>SrcBlendAlpha</td><td><see cref="SharpDX.Direct3D11.BlendOption.One"/></td></tr> <tr><td>DestBlendAlpha</td><td><see cref="SharpDX.Direct3D11.BlendOption.Zero"/></td></tr> <tr><td>BlendOpAlpha</td><td><see cref="SharpDX.Direct3D11.BlendOperation.Add"/></td></tr> <tr><td>LogicOp</td><td><see cref="SharpDX.Direct3D11.LogicOperation.Noop"/></td></tr> <tr><td>RenderTargetWriteMask</td><td><see cref="SharpDX.Direct3D11.ColorWriteMaskFlags.All"/></td></tr> </table><p>?</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_BLEND_DESC1']/*"/>	
    /// <msdn-id>hh404492</msdn-id>	
    /// <unmanaged>D3D11_RENDER_TARGET_BLEND_DESC1</unmanaged>	
    /// <unmanaged-short>D3D11_RENDER_TARGET_BLEND_DESC1</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct RenderTargetBlendDescription1 {	
        
        /// <summary>	
        /// <dd> <p>Enable (or disable) blending.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_BLEND_DESC1::BlendEnable']/*"/>	
        /// <msdn-id>hh404492</msdn-id>	
        /// <unmanaged>BOOL BlendEnable</unmanaged>	
        /// <unmanaged-short>BOOL BlendEnable</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IsBlendEnabled;
        
        /// <summary>	
        /// <dd> <p>Enable (or disable) a logical operation.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_BLEND_DESC1::LogicOpEnable']/*"/>	
        /// <msdn-id>hh404492</msdn-id>	
        /// <unmanaged>BOOL LogicOpEnable</unmanaged>	
        /// <unmanaged-short>BOOL LogicOpEnable</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IsLogicOperationEnabled;
        
        /// <summary>	
        /// <dd> <p>This <strong>blend option</strong> specifies the operation to perform on the RGB value that the pixel shader outputs. The <strong>BlendOp</strong> member defines how to combine the <strong>SrcBlend</strong> and <strong>DestBlend</strong> operations.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_BLEND_DESC1::SrcBlend']/*"/>	
        /// <msdn-id>hh404492</msdn-id>	
        /// <unmanaged>D3D11_BLEND SrcBlend</unmanaged>	
        /// <unmanaged-short>D3D11_BLEND SrcBlend</unmanaged-short>	
        public SharpDX.Direct3D11.BlendOption SourceBlend;
        
        /// <summary>	
        /// <dd> <p>This <strong>blend option</strong> specifies the operation to perform on the current RGB value in the render target. The <strong>BlendOp</strong> member defines how to combine the <strong>SrcBlend</strong> and <strong>DestBlend</strong> operations.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_BLEND_DESC1::DestBlend']/*"/>	
        /// <msdn-id>hh404492</msdn-id>	
        /// <unmanaged>D3D11_BLEND DestBlend</unmanaged>	
        /// <unmanaged-short>D3D11_BLEND DestBlend</unmanaged-short>	
        public SharpDX.Direct3D11.BlendOption DestinationBlend;
        
        /// <summary>	
        /// <dd> <p>This <strong>blend operation</strong> defines how to combine the <strong>SrcBlend</strong> and <strong>DestBlend</strong> operations.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_BLEND_DESC1::BlendOp']/*"/>	
        /// <msdn-id>hh404492</msdn-id>	
        /// <unmanaged>D3D11_BLEND_OP BlendOp</unmanaged>	
        /// <unmanaged-short>D3D11_BLEND_OP BlendOp</unmanaged-short>	
        public SharpDX.Direct3D11.BlendOperation BlendOperation;
        
        /// <summary>	
        /// <dd> <p>This <strong>blend option</strong> specifies the operation to perform on the alpha value that the pixel shader outputs. Blend options that end in _COLOR are not allowed. The <strong>BlendOpAlpha</strong> member defines how to combine the <strong>SrcBlendAlpha</strong> and <strong>DestBlendAlpha</strong> operations.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_BLEND_DESC1::SrcBlendAlpha']/*"/>	
        /// <msdn-id>hh404492</msdn-id>	
        /// <unmanaged>D3D11_BLEND SrcBlendAlpha</unmanaged>	
        /// <unmanaged-short>D3D11_BLEND SrcBlendAlpha</unmanaged-short>	
        public SharpDX.Direct3D11.BlendOption SourceAlphaBlend;
        
        /// <summary>	
        /// <dd> <p>This <strong>blend option</strong> specifies the operation to perform on the current alpha value in the render target. Blend options that end in _COLOR are not allowed. The <strong>BlendOpAlpha</strong> member defines how to combine the <strong>SrcBlendAlpha</strong> and <strong>DestBlendAlpha</strong> operations.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_BLEND_DESC1::DestBlendAlpha']/*"/>	
        /// <msdn-id>hh404492</msdn-id>	
        /// <unmanaged>D3D11_BLEND DestBlendAlpha</unmanaged>	
        /// <unmanaged-short>D3D11_BLEND DestBlendAlpha</unmanaged-short>	
        public SharpDX.Direct3D11.BlendOption DestinationAlphaBlend;
        
        /// <summary>	
        /// <dd> <p>This <strong>blend operation</strong> defines how to combine the <strong>SrcBlendAlpha</strong> and <strong>DestBlendAlpha</strong> operations.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_BLEND_DESC1::BlendOpAlpha']/*"/>	
        /// <msdn-id>hh404492</msdn-id>	
        /// <unmanaged>D3D11_BLEND_OP BlendOpAlpha</unmanaged>	
        /// <unmanaged-short>D3D11_BLEND_OP BlendOpAlpha</unmanaged-short>	
        public SharpDX.Direct3D11.BlendOperation AlphaBlendOperation;
        
        /// <summary>	
        /// <dd> <p>A  <strong><see cref="SharpDX.Direct3D11.LogicOperation"/></strong>-typed value that specifies the logical operation to configure for the render target.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_BLEND_DESC1::LogicOp']/*"/>	
        /// <msdn-id>hh404492</msdn-id>	
        /// <unmanaged>D3D11_LOGIC_OP LogicOp</unmanaged>	
        /// <unmanaged-short>D3D11_LOGIC_OP LogicOp</unmanaged-short>	
        public SharpDX.Direct3D11.LogicOperation LogicOperation;
        
        /// <summary>	
        /// <dd> <p>A write mask.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_BLEND_DESC1::RenderTargetWriteMask']/*"/>	
        /// <msdn-id>hh404492</msdn-id>	
        /// <unmanaged>D3D11_COLOR_WRITE_ENABLE RenderTargetWriteMask</unmanaged>	
        /// <unmanaged-short>D3D11_COLOR_WRITE_ENABLE RenderTargetWriteMask</unmanaged-short>	
        public SharpDX.Direct3D11.ColorWriteMaskFlags RenderTargetWriteMask;
    }
    
    /// <summary>	
    /// <p>Specifies the subresources from a resource that are accessible using a render-target view.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>A render-target-view description is passed into <strong><see cref="SharpDX.Direct3D11.Device.CreateRenderTargetView"/></strong> to create a render target.</p><p>A render-target-view cannot use the following formats:</p><ul> <li>Any typeless format.</li> <li>DXGI_FORMAT_R32G32B32 if the view will be used to bind a buffer (vertex, index, constant, or stream-output).</li> </ul><p>If the format is set to <see cref="SharpDX.DXGI.Format.Unknown"/>, then the format of the resource that the view binds to the pipeline will be used.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_VIEW_DESC']/*"/>	
    /// <msdn-id>ff476201</msdn-id>	
    /// <unmanaged>D3D11_RENDER_TARGET_VIEW_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_RENDER_TARGET_VIEW_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Explicit)]
    public  partial struct RenderTargetViewDescription {	
        
        /// <summary>	
        /// <p>Specifies the subresources from a an array of multisampled 2D textures to use in a render-target view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is one member of a render-target-view description (see <strong><see cref="SharpDX.Direct3D11.RenderTargetViewDescription"/></strong>).</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2DMS_ARRAY_RTV']/*"/>	
        /// <msdn-id>ff476234</msdn-id>	
        /// <unmanaged>D3D11_TEX2DMS_ARRAY_RTV</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2DMS_ARRAY_RTV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DMultisampledArrayResource {	
            
            /// <summary>	
            /// <dd> <p>The index of the first texture to use in an array of textures.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2DMS_ARRAY_RTV::FirstArraySlice']/*"/>	
            /// <msdn-id>ff476234</msdn-id>	
            /// <unmanaged>unsigned int FirstArraySlice</unmanaged>	
            /// <unmanaged-short>unsigned int FirstArraySlice</unmanaged-short>	
            public int FirstArraySlice;
            
            /// <summary>	
            /// <dd> <p>Number of textures to use.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2DMS_ARRAY_RTV::ArraySize']/*"/>	
            /// <msdn-id>ff476234</msdn-id>	
            /// <unmanaged>unsigned int ArraySize</unmanaged>	
            /// <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
            public int ArraySize;
        }
        
        /// <summary>	
        /// <p>Specifies the subresource from a 1D texture to use in a render-target view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is one member of a render-target-view description (see <strong><see cref="SharpDX.Direct3D11.RenderTargetViewDescription"/></strong>).</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX1D_RTV']/*"/>	
        /// <msdn-id>ff476230</msdn-id>	
        /// <unmanaged>D3D11_TEX1D_RTV</unmanaged>	
        /// <unmanaged-short>D3D11_TEX1D_RTV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture1DResource {	
            
            /// <summary>	
            /// <dd> <p>The index of the mipmap level to use mip slice.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX1D_RTV::MipSlice']/*"/>	
            /// <msdn-id>ff476230</msdn-id>	
            /// <unmanaged>unsigned int MipSlice</unmanaged>	
            /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
            public int MipSlice;
        }
        
        /// <summary>	
        /// <p>Specifies the subresource from a multisampled 2D texture to use in a render-target view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>Since a multisampled 2D texture contains a single subresource, there is actually nothing to specify in <see cref="SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DMultisampledResource"/>. Consequently, <strong>UnusedField_NothingToDefine</strong> is included so that this structure will compile in C.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2DMS_RTV']/*"/>	
        /// <msdn-id>ff476237</msdn-id>	
        /// <unmanaged>D3D11_TEX2DMS_RTV</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2DMS_RTV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DMultisampledResource {	
            
            /// <summary>	
            /// <dd> <p>Integer of any value. See remarks.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2DMS_RTV::UnusedField_NothingToDefine']/*"/>	
            /// <msdn-id>ff476237</msdn-id>	
            /// <unmanaged>unsigned int UnusedField_NothingToDefine</unmanaged>	
            /// <unmanaged-short>unsigned int UnusedField_NothingToDefine</unmanaged-short>	
            public int UnusedFieldNothingToDefine;
        }
        
        /// <summary>	
        /// <p>Specifies the subresource from a 2D texture to use in a render-target view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is one member of a render-target-view description (see <strong><see cref="SharpDX.Direct3D11.RenderTargetViewDescription"/></strong>).</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_RTV']/*"/>	
        /// <msdn-id>ff476244</msdn-id>	
        /// <unmanaged>D3D11_TEX2D_RTV</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2D_RTV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DResource {	
            
            /// <summary>	
            /// <dd> <p>The index of the mipmap level to use mip slice.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_RTV::MipSlice']/*"/>	
            /// <msdn-id>ff476244</msdn-id>	
            /// <unmanaged>unsigned int MipSlice</unmanaged>	
            /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
            public int MipSlice;
        }
        
        /// <summary>	
        /// <p>Specifies the subresources from an array of 1D textures to use in a render-target view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is one member of a render-target-view description (see <strong><see cref="SharpDX.Direct3D11.RenderTargetViewDescription"/></strong>).</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX1D_ARRAY_RTV']/*"/>	
        /// <msdn-id>ff476226</msdn-id>	
        /// <unmanaged>D3D11_TEX1D_ARRAY_RTV</unmanaged>	
        /// <unmanaged-short>D3D11_TEX1D_ARRAY_RTV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture1DArrayResource {	
            
            /// <summary>	
            /// <dd> <p>The index of the mipmap level to use mip slice.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX1D_ARRAY_RTV::MipSlice']/*"/>	
            /// <msdn-id>ff476226</msdn-id>	
            /// <unmanaged>unsigned int MipSlice</unmanaged>	
            /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
            public int MipSlice;
            
            /// <summary>	
            /// <dd> <p>The index of the first texture to use in an array of textures.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX1D_ARRAY_RTV::FirstArraySlice']/*"/>	
            /// <msdn-id>ff476226</msdn-id>	
            /// <unmanaged>unsigned int FirstArraySlice</unmanaged>	
            /// <unmanaged-short>unsigned int FirstArraySlice</unmanaged-short>	
            public int FirstArraySlice;
            
            /// <summary>	
            /// <dd> <p>Number of textures to use.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX1D_ARRAY_RTV::ArraySize']/*"/>	
            /// <msdn-id>ff476226</msdn-id>	
            /// <unmanaged>unsigned int ArraySize</unmanaged>	
            /// <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
            public int ArraySize;
        }
        
        /// <summary>	
        /// <p>Specifies the subresources from a 3D texture to use in a render-target view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is one member of a render target view. See <strong><see cref="SharpDX.Direct3D11.RenderTargetViewDescription"/></strong>.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX3D_RTV']/*"/>	
        /// <msdn-id>ff476247</msdn-id>	
        /// <unmanaged>D3D11_TEX3D_RTV</unmanaged>	
        /// <unmanaged-short>D3D11_TEX3D_RTV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture3DResource {	
            
            /// <summary>	
            /// <dd> <p>The index of the mipmap level to use mip slice.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX3D_RTV::MipSlice']/*"/>	
            /// <msdn-id>ff476247</msdn-id>	
            /// <unmanaged>unsigned int MipSlice</unmanaged>	
            /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
            public int MipSlice;
            
            /// <summary>	
            /// <dd> <p>First depth level to use.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX3D_RTV::FirstWSlice']/*"/>	
            /// <msdn-id>ff476247</msdn-id>	
            /// <unmanaged>unsigned int FirstWSlice</unmanaged>	
            /// <unmanaged-short>unsigned int FirstWSlice</unmanaged-short>	
            public int FirstDepthSlice;
            
            /// <summary>	
            /// <dd> <p>Number of depth levels to use in the render-target view, starting from <strong>FirstWSlice</strong>. A value of -1 indicates all of the slices along the w axis, starting from <strong>FirstWSlice</strong>.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX3D_RTV::WSize']/*"/>	
            /// <msdn-id>ff476247</msdn-id>	
            /// <unmanaged>unsigned int WSize</unmanaged>	
            /// <unmanaged-short>unsigned int WSize</unmanaged-short>	
            public int DepthSliceCount;
        }
        
        /// <summary>	
        /// <p>Specifies the subresources from an array of 2D textures to use in a render-target view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is one member of a render-target-view description (see <strong><see cref="SharpDX.Direct3D11.RenderTargetViewDescription"/></strong>).</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_RTV']/*"/>	
        /// <msdn-id>ff476240</msdn-id>	
        /// <unmanaged>D3D11_TEX2D_ARRAY_RTV</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2D_ARRAY_RTV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DArrayResource {	
            
            /// <summary>	
            /// <dd> <p>The index of the mipmap level to use mip slice.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_RTV::MipSlice']/*"/>	
            /// <msdn-id>ff476240</msdn-id>	
            /// <unmanaged>unsigned int MipSlice</unmanaged>	
            /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
            public int MipSlice;
            
            /// <summary>	
            /// <dd> <p>The index of the first texture to use in an array of textures.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_RTV::FirstArraySlice']/*"/>	
            /// <msdn-id>ff476240</msdn-id>	
            /// <unmanaged>unsigned int FirstArraySlice</unmanaged>	
            /// <unmanaged-short>unsigned int FirstArraySlice</unmanaged-short>	
            public int FirstArraySlice;
            
            /// <summary>	
            /// <dd> <p>Number of textures in the array to use in the render target view, starting from <strong>FirstArraySlice</strong>.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_RTV::ArraySize']/*"/>	
            /// <msdn-id>ff476240</msdn-id>	
            /// <unmanaged>unsigned int ArraySize</unmanaged>	
            /// <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
            public int ArraySize;
        }
        
        /// <summary>	
        /// <p>Specifies the elements in a buffer resource to use in a render-target view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>A render-target view is a member of a render-target-view description (see <strong><see cref="SharpDX.Direct3D11.RenderTargetViewDescription"/></strong>). Create a render-target view by calling <strong><see cref="SharpDX.Direct3D11.Device.CreateRenderTargetView"/></strong>.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BUFFER_RTV']/*"/>	
        /// <msdn-id>ff476093</msdn-id>	
        /// <unmanaged>D3D11_BUFFER_RTV</unmanaged>	
        /// <unmanaged-short>D3D11_BUFFER_RTV</unmanaged-short>	
        [StructLayout(LayoutKind.Explicit)]
        public  partial struct BufferResource {	
            
            /// <summary>	
            /// <dd> <p>Number of bytes between the beginning of the buffer and the first element to access.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BUFFER_RTV::FirstElement']/*"/>	
            /// <msdn-id>ff476093</msdn-id>	
            /// <unmanaged>unsigned int FirstElement</unmanaged>	
            /// <unmanaged-short>unsigned int FirstElement</unmanaged-short>	
            [FieldOffset(0)]
            public int FirstElement;
            
            /// <summary>	
            /// <dd> <p>The offset of the first element in the view to access, relative to element 0.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BUFFER_RTV::ElementOffset']/*"/>	
            /// <msdn-id>ff476093</msdn-id>	
            /// <unmanaged>unsigned int ElementOffset</unmanaged>	
            /// <unmanaged-short>unsigned int ElementOffset</unmanaged-short>	
            [FieldOffset(0)]
            public int ElementOffset;
            
            /// <summary>	
            /// <dd> <p>The total number of elements in the view.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BUFFER_RTV::NumElements']/*"/>	
            /// <msdn-id>ff476093</msdn-id>	
            /// <unmanaged>unsigned int NumElements</unmanaged>	
            /// <unmanaged-short>unsigned int NumElements</unmanaged-short>	
            [FieldOffset(4)]
            public int ElementCount;
            
            /// <summary>	
            /// <dd> <p>The width of each element (in bytes). This can be determined from the format stored in the render-target-view description.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BUFFER_RTV::ElementWidth']/*"/>	
            /// <msdn-id>ff476093</msdn-id>	
            /// <unmanaged>unsigned int ElementWidth</unmanaged>	
            /// <unmanaged-short>unsigned int ElementWidth</unmanaged-short>	
            [FieldOffset(4)]
            public int ElementWidth;
        }
        
        /// <summary>	
        /// <dd> <p>The data format (see <strong><see cref="SharpDX.DXGI.Format"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_VIEW_DESC::Format']/*"/>	
        /// <msdn-id>ff476201</msdn-id>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        [FieldOffset(0)]
        public SharpDX.DXGI.Format Format;
        
        /// <summary>	
        /// <dd> <p>The resource type (see <strong><see cref="SharpDX.Direct3D11.RenderTargetViewDimension"/></strong>), which specifies how the render-target resource will be accessed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_VIEW_DESC::ViewDimension']/*"/>	
        /// <msdn-id>ff476201</msdn-id>	
        /// <unmanaged>D3D11_RTV_DIMENSION ViewDimension</unmanaged>	
        /// <unmanaged-short>D3D11_RTV_DIMENSION ViewDimension</unmanaged-short>	
        [FieldOffset(4)]
        public SharpDX.Direct3D11.RenderTargetViewDimension Dimension;
        
        /// <summary>	
        /// <dd> <p>Specifies which buffer elements can be accessed (see <strong><see cref="SharpDX.Direct3D11.RenderTargetViewDescription.BufferResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_VIEW_DESC::Buffer']/*"/>	
        /// <msdn-id>ff476201</msdn-id>	
        /// <unmanaged>D3D11_BUFFER_RTV Buffer</unmanaged>	
        /// <unmanaged-short>D3D11_BUFFER_RTV Buffer</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.RenderTargetViewDescription.BufferResource Buffer;
        
        /// <summary>	
        /// <dd> <p>Specifies the subresources in a 1D texture that can be accessed (see <strong><see cref="SharpDX.Direct3D11.RenderTargetViewDescription.Texture1DResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_VIEW_DESC::Texture1D']/*"/>	
        /// <msdn-id>ff476201</msdn-id>	
        /// <unmanaged>D3D11_TEX1D_RTV Texture1D</unmanaged>	
        /// <unmanaged-short>D3D11_TEX1D_RTV Texture1D</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.RenderTargetViewDescription.Texture1DResource Texture1D;
        
        /// <summary>	
        /// <dd> <p>Specifies the subresources in a 1D texture array that can be accessed (see <strong><see cref="SharpDX.Direct3D11.RenderTargetViewDescription.Texture1DArrayResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_VIEW_DESC::Texture1DArray']/*"/>	
        /// <msdn-id>ff476201</msdn-id>	
        /// <unmanaged>D3D11_TEX1D_ARRAY_RTV Texture1DArray</unmanaged>	
        /// <unmanaged-short>D3D11_TEX1D_ARRAY_RTV Texture1DArray</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.RenderTargetViewDescription.Texture1DArrayResource Texture1DArray;
        
        /// <summary>	
        /// <dd> <p>Specifies the subresources in a 2D texture that can be accessed (see <strong><see cref="SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_VIEW_DESC::Texture2D']/*"/>	
        /// <msdn-id>ff476201</msdn-id>	
        /// <unmanaged>D3D11_TEX2D_RTV Texture2D</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2D_RTV Texture2D</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DResource Texture2D;
        
        /// <summary>	
        /// <dd> <p>Specifies the subresources in a 2D texture array that can be accessed (see <strong><see cref="SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DArrayResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_VIEW_DESC::Texture2DArray']/*"/>	
        /// <msdn-id>ff476201</msdn-id>	
        /// <unmanaged>D3D11_TEX2D_ARRAY_RTV Texture2DArray</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2D_ARRAY_RTV Texture2DArray</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DArrayResource Texture2DArray;
        
        /// <summary>	
        /// <dd> <p>Specifies a single subresource because a multisampled 2D texture only contains one subresource (see <strong><see cref="SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DMultisampledResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_VIEW_DESC::Texture2DMS']/*"/>	
        /// <msdn-id>ff476201</msdn-id>	
        /// <unmanaged>D3D11_TEX2DMS_RTV Texture2DMS</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2DMS_RTV Texture2DMS</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DMultisampledResource Texture2DMS;
        
        /// <summary>	
        /// <dd> <p>Specifies the subresources in a multisampled 2D texture array that can be accessed (see <strong><see cref="SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DMultisampledArrayResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_VIEW_DESC::Texture2DMSArray']/*"/>	
        /// <msdn-id>ff476201</msdn-id>	
        /// <unmanaged>D3D11_TEX2DMS_ARRAY_RTV Texture2DMSArray</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2DMS_ARRAY_RTV Texture2DMSArray</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DMultisampledArrayResource Texture2DMSArray;
        
        /// <summary>	
        /// <dd> <p>Specifies subresources in a 3D texture that can be accessed (see <strong><see cref="SharpDX.Direct3D11.RenderTargetViewDescription.Texture3DResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_VIEW_DESC::Texture3D']/*"/>	
        /// <msdn-id>ff476201</msdn-id>	
        /// <unmanaged>D3D11_TEX3D_RTV Texture3D</unmanaged>	
        /// <unmanaged-short>D3D11_TEX3D_RTV Texture3D</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.RenderTargetViewDescription.Texture3DResource Texture3D;
    }
    
    /// <summary>	
    /// <p>Specifies the subresources from a resource that are accessible using a render-target view.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>A render-target-view description is passed into <strong><see cref="SharpDX.Direct3D11.Device.CreateRenderTargetView"/></strong> to create a render target.</p><p>A render-target-view cannot use the following formats:</p><ul> <li>Any typeless format.</li> <li>DXGI_FORMAT_R32G32B32 if the view will be used to bind a buffer (vertex, index, constant, or stream-output).</li> </ul><p>If the format is set to <see cref="SharpDX.DXGI.Format.Unknown"/>, then the format of the resource that the view binds to the pipeline will be used.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_VIEW_DESC1']/*"/>	
    /// <msdn-id>ff476201</msdn-id>	
    /// <unmanaged>D3D11_RENDER_TARGET_VIEW_DESC1</unmanaged>	
    /// <unmanaged-short>D3D11_RENDER_TARGET_VIEW_DESC1</unmanaged-short>	
    [StructLayout(LayoutKind.Explicit)]
    public  partial struct RenderTargetViewDescription1 {	
        
        /// <summary>	
        /// <p>Describes the subresource from a 2D texture to use in a render-target view.</p>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_RTV1']/*"/>	
        /// <msdn-id>dn899163</msdn-id>	
        /// <unmanaged>D3D11_TEX2D_RTV1</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2D_RTV1</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DResource {	
            
            /// <summary>	
            /// <dd> <p>The index of the mipmap level to use mip slice.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_RTV1::MipSlice']/*"/>	
            /// <msdn-id>dn899163</msdn-id>	
            /// <unmanaged>unsigned int MipSlice</unmanaged>	
            /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
            public int MipSlice;
            
            /// <summary>	
            /// <dd> <p>The index (plane slice number) of the plane to use in the texture.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_RTV1::PlaneSlice']/*"/>	
            /// <msdn-id>dn899163</msdn-id>	
            /// <unmanaged>unsigned int PlaneSlice</unmanaged>	
            /// <unmanaged-short>unsigned int PlaneSlice</unmanaged-short>	
            public int PlaneSlice;
        }
        
        /// <summary>	
        /// <p>Describes the subresources from an array of 2D textures to use in a render-target view.</p>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_RTV1']/*"/>	
        /// <msdn-id>dn899160</msdn-id>	
        /// <unmanaged>D3D11_TEX2D_ARRAY_RTV1</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2D_ARRAY_RTV1</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DArrayResource {	
            
            /// <summary>	
            /// <dd> <p>The index of the mipmap level to use mip slice.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_RTV1::MipSlice']/*"/>	
            /// <msdn-id>dn899160</msdn-id>	
            /// <unmanaged>unsigned int MipSlice</unmanaged>	
            /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
            public int MipSlice;
            
            /// <summary>	
            /// <dd> <p>The index of the first texture to use in an array of textures.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_RTV1::FirstArraySlice']/*"/>	
            /// <msdn-id>dn899160</msdn-id>	
            /// <unmanaged>unsigned int FirstArraySlice</unmanaged>	
            /// <unmanaged-short>unsigned int FirstArraySlice</unmanaged-short>	
            public int FirstArraySlice;
            
            /// <summary>	
            /// <dd> <p>Number of textures in the array to use in the render-target view, starting from <strong>FirstArraySlice</strong>.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_RTV1::ArraySize']/*"/>	
            /// <msdn-id>dn899160</msdn-id>	
            /// <unmanaged>unsigned int ArraySize</unmanaged>	
            /// <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
            public int ArraySize;
            
            /// <summary>	
            /// <dd> <p>The index (plane slice number) of the plane to use in an array of textures.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_RTV1::PlaneSlice']/*"/>	
            /// <msdn-id>dn899160</msdn-id>	
            /// <unmanaged>unsigned int PlaneSlice</unmanaged>	
            /// <unmanaged-short>unsigned int PlaneSlice</unmanaged-short>	
            public int PlaneSlice;
        }
        
        /// <summary>	
        /// <dd> <p>The data format (see <strong><see cref="SharpDX.DXGI.Format"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_VIEW_DESC1::Format']/*"/>	
        /// <msdn-id>ff476201</msdn-id>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        [FieldOffset(0)]
        public SharpDX.DXGI.Format Format;
        
        /// <summary>	
        /// <dd> <p>The resource type (see <strong><see cref="SharpDX.Direct3D11.RenderTargetViewDimension"/></strong>), which specifies how the render-target resource will be accessed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_VIEW_DESC1::ViewDimension']/*"/>	
        /// <msdn-id>ff476201</msdn-id>	
        /// <unmanaged>D3D11_RTV_DIMENSION ViewDimension</unmanaged>	
        /// <unmanaged-short>D3D11_RTV_DIMENSION ViewDimension</unmanaged-short>	
        [FieldOffset(4)]
        public SharpDX.Direct3D11.RenderTargetViewDimension Dimension;
        
        /// <summary>	
        /// <dd> <p>Specifies which buffer elements can be accessed (see <strong><see cref="SharpDX.Direct3D11.RenderTargetViewDescription.BufferResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_VIEW_DESC1::Buffer']/*"/>	
        /// <msdn-id>ff476201</msdn-id>	
        /// <unmanaged>D3D11_BUFFER_RTV Buffer</unmanaged>	
        /// <unmanaged-short>D3D11_BUFFER_RTV Buffer</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.RenderTargetViewDescription.BufferResource Buffer;
        
        /// <summary>	
        /// <dd> <p>Specifies the subresources in a 1D texture that can be accessed (see <strong><see cref="SharpDX.Direct3D11.RenderTargetViewDescription.Texture1DResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_VIEW_DESC1::Texture1D']/*"/>	
        /// <msdn-id>ff476201</msdn-id>	
        /// <unmanaged>D3D11_TEX1D_RTV Texture1D</unmanaged>	
        /// <unmanaged-short>D3D11_TEX1D_RTV Texture1D</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.RenderTargetViewDescription.Texture1DResource Texture1D;
        
        /// <summary>	
        /// <dd> <p>Specifies the subresources in a 1D texture array that can be accessed (see <strong><see cref="SharpDX.Direct3D11.RenderTargetViewDescription.Texture1DArrayResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_VIEW_DESC1::Texture1DArray']/*"/>	
        /// <msdn-id>ff476201</msdn-id>	
        /// <unmanaged>D3D11_TEX1D_ARRAY_RTV Texture1DArray</unmanaged>	
        /// <unmanaged-short>D3D11_TEX1D_ARRAY_RTV Texture1DArray</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.RenderTargetViewDescription.Texture1DArrayResource Texture1DArray;
        
        /// <summary>	
        /// <dd> <p>Specifies the subresources in a 2D texture that can be accessed (see <strong><see cref="SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_VIEW_DESC1::Texture2D']/*"/>	
        /// <msdn-id>ff476201</msdn-id>	
        /// <unmanaged>D3D11_TEX2D_RTV1 Texture2D</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2D_RTV1 Texture2D</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.RenderTargetViewDescription1.Texture2DResource Texture2D;
        
        /// <summary>	
        /// <dd> <p>Specifies the subresources in a 2D texture array that can be accessed (see <strong><see cref="SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DArrayResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_VIEW_DESC1::Texture2DArray']/*"/>	
        /// <msdn-id>ff476201</msdn-id>	
        /// <unmanaged>D3D11_TEX2D_ARRAY_RTV1 Texture2DArray</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2D_ARRAY_RTV1 Texture2DArray</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.RenderTargetViewDescription1.Texture2DArrayResource Texture2DArray;
        
        /// <summary>	
        /// <dd> <p>Specifies a single subresource because a multisampled 2D texture only contains one subresource (see <strong><see cref="SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DMultisampledResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_VIEW_DESC1::Texture2DMS']/*"/>	
        /// <msdn-id>ff476201</msdn-id>	
        /// <unmanaged>D3D11_TEX2DMS_RTV Texture2DMS</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2DMS_RTV Texture2DMS</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DMultisampledResource Texture2DMS;
        
        /// <summary>	
        /// <dd> <p>Specifies the subresources in a multisampled 2D texture array that can be accessed (see <strong><see cref="SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DMultisampledArrayResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_VIEW_DESC1::Texture2DMSArray']/*"/>	
        /// <msdn-id>ff476201</msdn-id>	
        /// <unmanaged>D3D11_TEX2DMS_ARRAY_RTV Texture2DMSArray</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2DMS_ARRAY_RTV Texture2DMSArray</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DMultisampledArrayResource Texture2DMSArray;
        
        /// <summary>	
        /// <dd> <p>Specifies subresources in a 3D texture that can be accessed (see <strong><see cref="SharpDX.Direct3D11.RenderTargetViewDescription.Texture3DResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_RENDER_TARGET_VIEW_DESC1::Texture3D']/*"/>	
        /// <msdn-id>ff476201</msdn-id>	
        /// <unmanaged>D3D11_TEX3D_RTV Texture3D</unmanaged>	
        /// <unmanaged-short>D3D11_TEX3D_RTV Texture3D</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.RenderTargetViewDescription.Texture3DResource Texture3D;
    }
    
    /// <summary>	
    /// <p>Defines a 3D box.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The following diagram shows a 3D box, where the origin is the left, front, top corner.</p><p></p><p>The values for <strong>right</strong>, <strong>bottom</strong>, and <strong>back</strong> are each one pixel past the end of the pixels that are included in the box region.  That is, the values for <strong>left</strong>, <strong>top</strong>, and <strong>front</strong> are included in the box region while the values for right, bottom, and back are excluded from the box region. For example, for a box that is one pixel wide, (right - left) == 1; the box region includes the left pixel but not the right pixel.</p><p>Coordinates of a box are in bytes for buffers and in texels for textures.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BOX']/*"/>	
    /// <msdn-id>ff476089</msdn-id>	
    /// <unmanaged>D3D11_BOX</unmanaged>	
    /// <unmanaged-short>D3D11_BOX</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct ResourceRegion {	
        
        /// <summary>	
        /// <dd> <p>The x position of the left hand side of the box.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BOX::left']/*"/>	
        /// <msdn-id>ff476089</msdn-id>	
        /// <unmanaged>unsigned int left</unmanaged>	
        /// <unmanaged-short>unsigned int left</unmanaged-short>	
        public int Left;
        
        /// <summary>	
        /// <dd> <p>The y position of the top of the box.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BOX::top']/*"/>	
        /// <msdn-id>ff476089</msdn-id>	
        /// <unmanaged>unsigned int top</unmanaged>	
        /// <unmanaged-short>unsigned int top</unmanaged-short>	
        public int Top;
        
        /// <summary>	
        /// <dd> <p>The z position of the front of the box.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BOX::front']/*"/>	
        /// <msdn-id>ff476089</msdn-id>	
        /// <unmanaged>unsigned int front</unmanaged>	
        /// <unmanaged-short>unsigned int front</unmanaged-short>	
        public int Front;
        
        /// <summary>	
        /// <dd> <p>The x position of the right hand side of the box.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BOX::right']/*"/>	
        /// <msdn-id>ff476089</msdn-id>	
        /// <unmanaged>unsigned int right</unmanaged>	
        /// <unmanaged-short>unsigned int right</unmanaged-short>	
        public int Right;
        
        /// <summary>	
        /// <dd> <p>The y position of the bottom of the box.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BOX::bottom']/*"/>	
        /// <msdn-id>ff476089</msdn-id>	
        /// <unmanaged>unsigned int bottom</unmanaged>	
        /// <unmanaged-short>unsigned int bottom</unmanaged-short>	
        public int Bottom;
        
        /// <summary>	
        /// <dd> <p>The z position of the back of the box.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BOX::back']/*"/>	
        /// <msdn-id>ff476089</msdn-id>	
        /// <unmanaged>unsigned int back</unmanaged>	
        /// <unmanaged-short>unsigned int back</unmanaged-short>	
        public int Back;
    }
    
    /// <summary>	
    /// <p>Describes a sampler state.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>These are the default values for sampler state.</p><table> <tr><th>State</th><th>Default Value</th></tr> <tr><td>Filter</td><td><see cref="SharpDX.Direct3D11.Filter.MinMagMipLinear"/></td></tr> <tr><td>AddressU</td><td><see cref="SharpDX.Direct3D11.TextureAddressMode.Clamp"/></td></tr> <tr><td>AddressV</td><td><see cref="SharpDX.Direct3D11.TextureAddressMode.Clamp"/></td></tr> <tr><td>AddressW</td><td><see cref="SharpDX.Direct3D11.TextureAddressMode.Clamp"/></td></tr> <tr><td>MinLOD</td><td>-3.402823466e+38F (-FLT_MAX)</td></tr> <tr><td>MaxLOD</td><td>3.402823466e+38F (FLT_MAX)</td></tr> <tr><td>MipMapLODBias</td><td>0.0f</td></tr> <tr><td>MaxAnisotropy</td><td>1</td></tr> <tr><td>ComparisonFunc</td><td><see cref="SharpDX.Direct3D11.Comparison.Never"/></td></tr> <tr><td>BorderColor</td><td>float4(1.0f,1.0f,1.0f,1.0f)</td></tr> <tr><td>Texture</td><td>N/A</td></tr> </table><p>?</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SAMPLER_DESC']/*"/>	
    /// <msdn-id>ff476207</msdn-id>	
    /// <unmanaged>D3D11_SAMPLER_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_SAMPLER_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct SamplerStateDescription {	
        
        /// <summary>	
        /// <dd> <p>Filtering method to use when sampling a texture (see <strong><see cref="SharpDX.Direct3D11.Filter"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SAMPLER_DESC::Filter']/*"/>	
        /// <msdn-id>ff476207</msdn-id>	
        /// <unmanaged>D3D11_FILTER Filter</unmanaged>	
        /// <unmanaged-short>D3D11_FILTER Filter</unmanaged-short>	
        public SharpDX.Direct3D11.Filter Filter;
        
        /// <summary>	
        /// <dd> <p>Method to use for resolving a u texture coordinate that is outside the 0 to 1 range (see <strong><see cref="SharpDX.Direct3D11.TextureAddressMode"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SAMPLER_DESC::AddressU']/*"/>	
        /// <msdn-id>ff476207</msdn-id>	
        /// <unmanaged>D3D11_TEXTURE_ADDRESS_MODE AddressU</unmanaged>	
        /// <unmanaged-short>D3D11_TEXTURE_ADDRESS_MODE AddressU</unmanaged-short>	
        public SharpDX.Direct3D11.TextureAddressMode AddressU;
        
        /// <summary>	
        /// <dd> <p>Method to use for resolving a v texture coordinate that is outside the 0 to 1 range.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SAMPLER_DESC::AddressV']/*"/>	
        /// <msdn-id>ff476207</msdn-id>	
        /// <unmanaged>D3D11_TEXTURE_ADDRESS_MODE AddressV</unmanaged>	
        /// <unmanaged-short>D3D11_TEXTURE_ADDRESS_MODE AddressV</unmanaged-short>	
        public SharpDX.Direct3D11.TextureAddressMode AddressV;
        
        /// <summary>	
        /// <dd> <p>Method to use for resolving a w texture coordinate that is outside the 0 to 1 range.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SAMPLER_DESC::AddressW']/*"/>	
        /// <msdn-id>ff476207</msdn-id>	
        /// <unmanaged>D3D11_TEXTURE_ADDRESS_MODE AddressW</unmanaged>	
        /// <unmanaged-short>D3D11_TEXTURE_ADDRESS_MODE AddressW</unmanaged-short>	
        public SharpDX.Direct3D11.TextureAddressMode AddressW;
        
        /// <summary>	
        /// <dd> <p>Offset from the calculated mipmap level. For example, if Direct3D calculates that a texture should be sampled at mipmap level 3 and MipLODBias is 2, then the texture will be sampled at mipmap level 5.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SAMPLER_DESC::MipLODBias']/*"/>	
        /// <msdn-id>ff476207</msdn-id>	
        /// <unmanaged>float MipLODBias</unmanaged>	
        /// <unmanaged-short>float MipLODBias</unmanaged-short>	
        public float MipLodBias;
        
        /// <summary>	
        /// <dd> <p>Clamping value used if <see cref="SharpDX.Direct3D11.Filter.Anisotropic"/> or <see cref="SharpDX.Direct3D11.Filter.ComparisonAnisotropic"/> is specified in Filter. Valid values are between 1 and 16.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SAMPLER_DESC::MaxAnisotropy']/*"/>	
        /// <msdn-id>ff476207</msdn-id>	
        /// <unmanaged>unsigned int MaxAnisotropy</unmanaged>	
        /// <unmanaged-short>unsigned int MaxAnisotropy</unmanaged-short>	
        public int MaximumAnisotropy;
        
        /// <summary>	
        /// <dd> <p>A function that compares sampled data against existing sampled data. The function options are listed in <strong><see cref="SharpDX.Direct3D11.Comparison"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SAMPLER_DESC::ComparisonFunc']/*"/>	
        /// <msdn-id>ff476207</msdn-id>	
        /// <unmanaged>D3D11_COMPARISON_FUNC ComparisonFunc</unmanaged>	
        /// <unmanaged-short>D3D11_COMPARISON_FUNC ComparisonFunc</unmanaged-short>	
        public SharpDX.Direct3D11.Comparison ComparisonFunction;
        
        /// <summary>	
        /// <dd> <p>Border color to use if <see cref="SharpDX.Direct3D11.TextureAddressMode.Border"/> is specified for AddressU, AddressV, or AddressW. Range must be between 0.0 and 1.0 inclusive.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SAMPLER_DESC::BorderColor']/*"/>	
        /// <msdn-id>ff476207</msdn-id>	
        /// <unmanaged>SHARPDX_COLOR4 BorderColor</unmanaged>	
        /// <unmanaged-short>SHARPDX_COLOR4 BorderColor</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawColor4 BorderColor;
        
        /// <summary>	
        /// <dd> <p>Lower end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SAMPLER_DESC::MinLOD']/*"/>	
        /// <msdn-id>ff476207</msdn-id>	
        /// <unmanaged>float MinLOD</unmanaged>	
        /// <unmanaged-short>float MinLOD</unmanaged-short>	
        public float MinimumLod;
        
        /// <summary>	
        /// <dd> <p>Upper end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed. This value must be greater than or equal to MinLOD. To have no upper limit on LOD set this to a large value such as D3D11_FLOAT32_MAX.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SAMPLER_DESC::MaxLOD']/*"/>	
        /// <msdn-id>ff476207</msdn-id>	
        /// <unmanaged>float MaxLOD</unmanaged>	
        /// <unmanaged-short>float MaxLOD</unmanaged-short>	
        public float MaximumLod;
    }
    
    /// <summary>	
    /// <p>Describes a shader-resource view.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>A view is a format-specific way to look at the data in a resource. The view determines what data to look at, and how it is cast when read.</p><p>When viewing a resource, the resource-view description must specify a typed format, that is compatible with the resource format. So that means that you cannot create a resource-view description using any format with _TYPELESS in the name. You can however view a typeless resource by specifying a typed format for the view. For example, a <see cref="SharpDX.DXGI.Format.R32G32B32_Typeless"/> resource can be viewed with one of these typed formats: <see cref="SharpDX.DXGI.Format.R32G32B32_Float"/>, <see cref="SharpDX.DXGI.Format.R32G32B32_UInt"/>, and <see cref="SharpDX.DXGI.Format.R32G32B32_SInt"/>, since these typed formats are compatible with the typeless resource.</p><p>Create a shader-resource-view description by calling <strong><see cref="SharpDX.Direct3D11.Device.CreateShaderResourceView"/></strong>. To view a shader-resource-view description, call <strong><see cref="SharpDX.Direct3D11.ShaderResourceView.GetDescription"/></strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_RESOURCE_VIEW_DESC']/*"/>	
    /// <msdn-id>ff476211</msdn-id>	
    /// <unmanaged>D3D11_SHADER_RESOURCE_VIEW_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_SHADER_RESOURCE_VIEW_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Explicit)]
    public  partial struct ShaderResourceViewDescription {	
        
        /// <summary>	
        /// <p>Specifies the elements in a buffer resource to use in a shader-resource view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>The <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.BufferResource"/></strong> structure is a member of the  <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription"/></strong> structure, which represents a shader-resource view description. You can create a shader-resource view by calling the <strong><see cref="SharpDX.Direct3D11.Device.CreateShaderResourceView"/></strong> method.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BUFFER_SRV']/*"/>	
        /// <msdn-id>ff476094</msdn-id>	
        /// <unmanaged>D3D11_BUFFER_SRV</unmanaged>	
        /// <unmanaged-short>D3D11_BUFFER_SRV</unmanaged-short>	
        [StructLayout(LayoutKind.Explicit)]
        public  partial struct BufferResource {	
            
            /// <summary>	
            /// <dd> <p>Number of bytes between the beginning of the buffer and the first element to access.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BUFFER_SRV::FirstElement']/*"/>	
            /// <msdn-id>ff476094</msdn-id>	
            /// <unmanaged>unsigned int FirstElement</unmanaged>	
            /// <unmanaged-short>unsigned int FirstElement</unmanaged-short>	
            [FieldOffset(0)]
            public int FirstElement;
            
            /// <summary>	
            /// <dd> <p>The offset of the first element in the view to access, relative to element 0.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BUFFER_SRV::ElementOffset']/*"/>	
            /// <msdn-id>ff476094</msdn-id>	
            /// <unmanaged>unsigned int ElementOffset</unmanaged>	
            /// <unmanaged-short>unsigned int ElementOffset</unmanaged-short>	
            [FieldOffset(0)]
            public int ElementOffset;
            
            /// <summary>	
            /// <dd> <p>The total number of elements in the view.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BUFFER_SRV::NumElements']/*"/>	
            /// <msdn-id>ff476094</msdn-id>	
            /// <unmanaged>unsigned int NumElements</unmanaged>	
            /// <unmanaged-short>unsigned int NumElements</unmanaged-short>	
            [FieldOffset(4)]
            public int ElementCount;
            
            /// <summary>	
            /// <dd> <p>The width of each element (in bytes). This can be determined from the format stored in the shader-resource-view description.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BUFFER_SRV::ElementWidth']/*"/>	
            /// <msdn-id>ff476094</msdn-id>	
            /// <unmanaged>unsigned int ElementWidth</unmanaged>	
            /// <unmanaged-short>unsigned int ElementWidth</unmanaged-short>	
            [FieldOffset(4)]
            public int ElementWidth;
        }
        
        /// <summary>	
        /// <p>Specifies the subresource from a cube texture to use in a shader-resource view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is one member of a shader-resource-view description (see <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription"/></strong>).</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXCUBE_SRV']/*"/>	
        /// <msdn-id>ff476251</msdn-id>	
        /// <unmanaged>D3D11_TEXCUBE_SRV</unmanaged>	
        /// <unmanaged-short>D3D11_TEXCUBE_SRV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct TextureCubeResource {	
            
            /// <summary>	
            /// <dd> <p>Index of the most detailed mipmap level to use; this number is between 0 and <strong>MipLevels</strong> (from the original TextureCube for which <strong><see cref="SharpDX.Direct3D11.Device.CreateShaderResourceView"/></strong> creates a view) -1.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXCUBE_SRV::MostDetailedMip']/*"/>	
            /// <msdn-id>ff476251</msdn-id>	
            /// <unmanaged>unsigned int MostDetailedMip</unmanaged>	
            /// <unmanaged-short>unsigned int MostDetailedMip</unmanaged-short>	
            public int MostDetailedMip;
            
            /// <summary>	
            /// <dd> <p>The maximum number of mipmap levels for the view of the texture. See the remarks in <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/></strong>.</p> <p>Set to -1 to indicate all the mipmap levels from <strong>MostDetailedMip</strong> on down to least detailed.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXCUBE_SRV::MipLevels']/*"/>	
            /// <msdn-id>ff476251</msdn-id>	
            /// <unmanaged>unsigned int MipLevels</unmanaged>	
            /// <unmanaged-short>unsigned int MipLevels</unmanaged-short>	
            public int MipLevels;
        }
        
        /// <summary>	
        /// <p>Specifies the subresource from a 1D texture to use in a shader-resource view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is one member of a shader-resource-view description (see <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription"/></strong>).</p><p>As an example, assuming <strong>MostDetailedMip</strong> = 6 and <strong>MipLevels</strong> = 2, the view will have access to 2 mipmap levels, 6 and 7, of the original texture for which <strong><see cref="SharpDX.Direct3D11.Device.CreateShaderResourceView"/></strong> creates the view. In this situation, <strong>MostDetailedMip</strong> is greater than the <strong>MipLevels</strong> in the view. However, <strong>MostDetailedMip</strong> is not greater than the <strong>MipLevels</strong> in the original resource.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX1D_SRV']/*"/>	
        /// <msdn-id>ff476231</msdn-id>	
        /// <unmanaged>D3D11_TEX1D_SRV</unmanaged>	
        /// <unmanaged-short>D3D11_TEX1D_SRV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture1DResource {	
            
            /// <summary>	
            /// <dd> <p>Index of the most detailed mipmap level to use; this number is between 0 and <strong>MipLevels</strong> (from the original Texture1D for which <strong><see cref="SharpDX.Direct3D11.Device.CreateShaderResourceView"/></strong> creates a view) -1.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX1D_SRV::MostDetailedMip']/*"/>	
            /// <msdn-id>ff476231</msdn-id>	
            /// <unmanaged>unsigned int MostDetailedMip</unmanaged>	
            /// <unmanaged-short>unsigned int MostDetailedMip</unmanaged-short>	
            public int MostDetailedMip;
            
            /// <summary>	
            /// <dd> <p>The maximum number of mipmap levels for the view  of the texture. See the remarks.</p> <p>Set to -1 to indicate all the mipmap levels from <strong>MostDetailedMip</strong> on down to least detailed.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX1D_SRV::MipLevels']/*"/>	
            /// <msdn-id>ff476231</msdn-id>	
            /// <unmanaged>unsigned int MipLevels</unmanaged>	
            /// <unmanaged-short>unsigned int MipLevels</unmanaged-short>	
            public int MipLevels;
        }
        
        /// <summary>	
        /// <p>Specifies the subresources from a multisampled 2D texture to use in a shader-resource view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>Since a multisampled 2D texture contains a single subresource, there is actually nothing to specify in <see cref="SharpDX.Direct3D11.RenderTargetViewDescription.Texture2DMultisampledResource"/>. Consequently, <strong>UnusedField_NothingToDefine</strong> is included so that this structure will compile in C.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2DMS_SRV']/*"/>	
        /// <msdn-id>ff476238</msdn-id>	
        /// <unmanaged>D3D11_TEX2DMS_SRV</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2DMS_SRV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DMultisampledResource {	
            
            /// <summary>	
            /// <dd> <p>Integer of any value. See remarks.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2DMS_SRV::UnusedField_NothingToDefine']/*"/>	
            /// <msdn-id>ff476238</msdn-id>	
            /// <unmanaged>unsigned int UnusedField_NothingToDefine</unmanaged>	
            /// <unmanaged-short>unsigned int UnusedField_NothingToDefine</unmanaged-short>	
            public int UnusedFieldNothingToDefine;
        }
        
        /// <summary>	
        /// <p>Specifies the subresources from an array of cube textures to use in a shader-resource view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is one member of a shader-resource-view description (see <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription"/></strong>).</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXCUBE_ARRAY_SRV']/*"/>	
        /// <msdn-id>ff476250</msdn-id>	
        /// <unmanaged>D3D11_TEXCUBE_ARRAY_SRV</unmanaged>	
        /// <unmanaged-short>D3D11_TEXCUBE_ARRAY_SRV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct TextureCubeArrayResource {	
            
            /// <summary>	
            /// <dd> <p>Index of the most detailed mipmap level to use; this number is between 0 and <strong>MipLevels</strong> (from the original TextureCube for which <strong><see cref="SharpDX.Direct3D11.Device.CreateShaderResourceView"/></strong> creates a view) -1.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXCUBE_ARRAY_SRV::MostDetailedMip']/*"/>	
            /// <msdn-id>ff476250</msdn-id>	
            /// <unmanaged>unsigned int MostDetailedMip</unmanaged>	
            /// <unmanaged-short>unsigned int MostDetailedMip</unmanaged-short>	
            public int MostDetailedMip;
            
            /// <summary>	
            /// <dd> <p>The maximum number of mipmap levels for the view of the texture. See the remarks in <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/></strong>.</p> <p>Set to -1 to indicate all the mipmap levels from <strong>MostDetailedMip</strong> on down to least detailed.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXCUBE_ARRAY_SRV::MipLevels']/*"/>	
            /// <msdn-id>ff476250</msdn-id>	
            /// <unmanaged>unsigned int MipLevels</unmanaged>	
            /// <unmanaged-short>unsigned int MipLevels</unmanaged-short>	
            public int MipLevels;
            
            /// <summary>	
            /// <dd> <p>Index of the first 2D texture to use.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXCUBE_ARRAY_SRV::First2DArrayFace']/*"/>	
            /// <msdn-id>ff476250</msdn-id>	
            /// <unmanaged>unsigned int First2DArrayFace</unmanaged>	
            /// <unmanaged-short>unsigned int First2DArrayFace</unmanaged-short>	
            public int First2DArrayFace;
            
            /// <summary>	
            /// <dd> <p>Number of cube textures in the array.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXCUBE_ARRAY_SRV::NumCubes']/*"/>	
            /// <msdn-id>ff476250</msdn-id>	
            /// <unmanaged>unsigned int NumCubes</unmanaged>	
            /// <unmanaged-short>unsigned int NumCubes</unmanaged-short>	
            public int CubeCount;
        }
        
        /// <summary>	
        /// <p>Specifies the subresource from a 2D texture to use in a shader-resource view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is one member of a shader-resource-view description (see <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription"/></strong>).</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_SRV']/*"/>	
        /// <msdn-id>ff476245</msdn-id>	
        /// <unmanaged>D3D11_TEX2D_SRV</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2D_SRV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DResource {	
            
            /// <summary>	
            /// <dd> <p>Index of the most detailed mipmap level to use; this number is between 0 and <strong>MipLevels</strong> (from the original Texture2D for which <strong><see cref="SharpDX.Direct3D11.Device.CreateShaderResourceView"/></strong> creates a view) -1.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_SRV::MostDetailedMip']/*"/>	
            /// <msdn-id>ff476245</msdn-id>	
            /// <unmanaged>unsigned int MostDetailedMip</unmanaged>	
            /// <unmanaged-short>unsigned int MostDetailedMip</unmanaged-short>	
            public int MostDetailedMip;
            
            /// <summary>	
            /// <dd> <p>The maximum number of mipmap levels for the view of the texture. See the remarks in <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/></strong>.</p> <p>Set to -1 to indicate all the mipmap levels from <strong>MostDetailedMip</strong> on down to least detailed.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_SRV::MipLevels']/*"/>	
            /// <msdn-id>ff476245</msdn-id>	
            /// <unmanaged>unsigned int MipLevels</unmanaged>	
            /// <unmanaged-short>unsigned int MipLevels</unmanaged-short>	
            public int MipLevels;
        }
        
        /// <summary>	
        /// <p>Specifies the subresources from an array of 1D textures to use in a shader-resource view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is one member of a shader-resource-view description (see <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription"/></strong>).</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX1D_ARRAY_SRV']/*"/>	
        /// <msdn-id>ff476227</msdn-id>	
        /// <unmanaged>D3D11_TEX1D_ARRAY_SRV</unmanaged>	
        /// <unmanaged-short>D3D11_TEX1D_ARRAY_SRV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture1DArrayResource {	
            
            /// <summary>	
            /// <dd> <p>Index of the most detailed mipmap level to use; this number is between 0 and <strong>MipLevels</strong> (from the original Texture1D for which <strong><see cref="SharpDX.Direct3D11.Device.CreateShaderResourceView"/></strong> creates a view) -1.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX1D_ARRAY_SRV::MostDetailedMip']/*"/>	
            /// <msdn-id>ff476227</msdn-id>	
            /// <unmanaged>unsigned int MostDetailedMip</unmanaged>	
            /// <unmanaged-short>unsigned int MostDetailedMip</unmanaged-short>	
            public int MostDetailedMip;
            
            /// <summary>	
            /// <dd> <p>The maximum number of mipmap levels for the view of the texture. See the remarks in <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/></strong>.</p> <p>Set to -1 to indicate all the mipmap levels from <strong>MostDetailedMip</strong> on down to least detailed.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX1D_ARRAY_SRV::MipLevels']/*"/>	
            /// <msdn-id>ff476227</msdn-id>	
            /// <unmanaged>unsigned int MipLevels</unmanaged>	
            /// <unmanaged-short>unsigned int MipLevels</unmanaged-short>	
            public int MipLevels;
            
            /// <summary>	
            /// <dd> <p>The index of the first texture to use in an array of textures.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX1D_ARRAY_SRV::FirstArraySlice']/*"/>	
            /// <msdn-id>ff476227</msdn-id>	
            /// <unmanaged>unsigned int FirstArraySlice</unmanaged>	
            /// <unmanaged-short>unsigned int FirstArraySlice</unmanaged-short>	
            public int FirstArraySlice;
            
            /// <summary>	
            /// <dd> <p>Number of textures in the array.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX1D_ARRAY_SRV::ArraySize']/*"/>	
            /// <msdn-id>ff476227</msdn-id>	
            /// <unmanaged>unsigned int ArraySize</unmanaged>	
            /// <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
            public int ArraySize;
        }
        
        /// <summary>	
        /// <p>Specifies the subresources from an array of 2D textures to use in a shader-resource view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is one member of a shader-resource-view description (see <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription"/></strong>).</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_SRV']/*"/>	
        /// <msdn-id>ff476241</msdn-id>	
        /// <unmanaged>D3D11_TEX2D_ARRAY_SRV</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2D_ARRAY_SRV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DArrayResource {	
            
            /// <summary>	
            /// <dd> <p>Index of the most detailed mipmap level to use; this number is between 0 and <strong>MipLevels</strong> (from the original Texture2D for which <strong><see cref="SharpDX.Direct3D11.Device.CreateShaderResourceView"/></strong> creates a view) -1.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_SRV::MostDetailedMip']/*"/>	
            /// <msdn-id>ff476241</msdn-id>	
            /// <unmanaged>unsigned int MostDetailedMip</unmanaged>	
            /// <unmanaged-short>unsigned int MostDetailedMip</unmanaged-short>	
            public int MostDetailedMip;
            
            /// <summary>	
            /// <dd> <p>The maximum number of mipmap levels for the view of the texture. See the remarks in <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/></strong>.</p> <p>Set to -1 to indicate all the mipmap levels from <strong>MostDetailedMip</strong> on down to least detailed.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_SRV::MipLevels']/*"/>	
            /// <msdn-id>ff476241</msdn-id>	
            /// <unmanaged>unsigned int MipLevels</unmanaged>	
            /// <unmanaged-short>unsigned int MipLevels</unmanaged-short>	
            public int MipLevels;
            
            /// <summary>	
            /// <dd> <p>The index of the first texture to use in an array of textures.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_SRV::FirstArraySlice']/*"/>	
            /// <msdn-id>ff476241</msdn-id>	
            /// <unmanaged>unsigned int FirstArraySlice</unmanaged>	
            /// <unmanaged-short>unsigned int FirstArraySlice</unmanaged-short>	
            public int FirstArraySlice;
            
            /// <summary>	
            /// <dd> <p>Number of textures in the array.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_SRV::ArraySize']/*"/>	
            /// <msdn-id>ff476241</msdn-id>	
            /// <unmanaged>unsigned int ArraySize</unmanaged>	
            /// <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
            public int ArraySize;
        }
        
        /// <summary>	
        /// <p>Specifies the subresources from an array of multisampled 2D textures to use in a shader-resource view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is one member of a shader-resource-view description (see <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription"/></strong>).</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2DMS_ARRAY_SRV']/*"/>	
        /// <msdn-id>ff476235</msdn-id>	
        /// <unmanaged>D3D11_TEX2DMS_ARRAY_SRV</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2DMS_ARRAY_SRV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DMultisampledArrayResource {	
            
            /// <summary>	
            /// <dd> <p>The index of the first texture to use in an array of textures.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2DMS_ARRAY_SRV::FirstArraySlice']/*"/>	
            /// <msdn-id>ff476235</msdn-id>	
            /// <unmanaged>unsigned int FirstArraySlice</unmanaged>	
            /// <unmanaged-short>unsigned int FirstArraySlice</unmanaged-short>	
            public int FirstArraySlice;
            
            /// <summary>	
            /// <dd> <p>Number of textures to use.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2DMS_ARRAY_SRV::ArraySize']/*"/>	
            /// <msdn-id>ff476235</msdn-id>	
            /// <unmanaged>unsigned int ArraySize</unmanaged>	
            /// <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
            public int ArraySize;
        }
        
        /// <summary>	
        /// <p>Specifies the subresources from a 3D texture to use in a shader-resource view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is one member of a shader-resource-view description (see <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription"/></strong>).</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX3D_SRV']/*"/>	
        /// <msdn-id>ff476248</msdn-id>	
        /// <unmanaged>D3D11_TEX3D_SRV</unmanaged>	
        /// <unmanaged-short>D3D11_TEX3D_SRV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture3DResource {	
            
            /// <summary>	
            /// <dd> <p>Index of the most detailed mipmap level to use; this number is between 0 and <strong>MipLevels</strong> (from the original Texture3D for which <strong><see cref="SharpDX.Direct3D11.Device.CreateShaderResourceView"/></strong> creates a view) -1.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX3D_SRV::MostDetailedMip']/*"/>	
            /// <msdn-id>ff476248</msdn-id>	
            /// <unmanaged>unsigned int MostDetailedMip</unmanaged>	
            /// <unmanaged-short>unsigned int MostDetailedMip</unmanaged-short>	
            public int MostDetailedMip;
            
            /// <summary>	
            /// <dd> <p>The maximum number of mipmap levels for the view of the texture. See the remarks in <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/></strong>.</p> <p>Set to -1 to indicate all the mipmap levels from <strong>MostDetailedMip</strong> on down to least detailed.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX3D_SRV::MipLevels']/*"/>	
            /// <msdn-id>ff476248</msdn-id>	
            /// <unmanaged>unsigned int MipLevels</unmanaged>	
            /// <unmanaged-short>unsigned int MipLevels</unmanaged-short>	
            public int MipLevels;
        }
        
        /// <summary>	
        /// <p>Describes the elements in a raw buffer resource to use in a shader-resource view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is used by <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription"/></strong> to create a raw view of a buffer.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BUFFEREX_SRV']/*"/>	
        /// <msdn-id>ff476090</msdn-id>	
        /// <unmanaged>D3D11_BUFFEREX_SRV</unmanaged>	
        /// <unmanaged-short>D3D11_BUFFEREX_SRV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct ExtendedBufferResource {	
            
            /// <summary>	
            /// <dd> <p>The index of the first element to be accessed by the view.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BUFFEREX_SRV::FirstElement']/*"/>	
            /// <msdn-id>ff476090</msdn-id>	
            /// <unmanaged>unsigned int FirstElement</unmanaged>	
            /// <unmanaged-short>unsigned int FirstElement</unmanaged-short>	
            public int FirstElement;
            
            /// <summary>	
            /// <dd> <p>The number of elements in the resource.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BUFFEREX_SRV::NumElements']/*"/>	
            /// <msdn-id>ff476090</msdn-id>	
            /// <unmanaged>unsigned int NumElements</unmanaged>	
            /// <unmanaged-short>unsigned int NumElements</unmanaged-short>	
            public int ElementCount;
            
            /// <summary>	
            /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewExtendedBufferFlags"/></strong>-typed value that identifies view options for the buffer. Currently, the only option is to identify a raw view of the buffer. For more info about raw viewing of buffers, see Raw Views of Buffers.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BUFFEREX_SRV::Flags']/*"/>	
            /// <msdn-id>ff476090</msdn-id>	
            /// <unmanaged>D3D11_BUFFEREX_SRV_FLAG Flags</unmanaged>	
            /// <unmanaged-short>D3D11_BUFFEREX_SRV_FLAG Flags</unmanaged-short>	
            public SharpDX.Direct3D11.ShaderResourceViewExtendedBufferFlags Flags;
        }
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.DXGI.Format"/></strong> specifying the viewing format. See remarks.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_RESOURCE_VIEW_DESC::Format']/*"/>	
        /// <msdn-id>ff476211</msdn-id>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        [FieldOffset(0)]
        public SharpDX.DXGI.Format Format;
        
        /// <summary>	
        /// <dd> <p>The resource type of the view. See <strong>D3D11_SRV_DIMENSION</strong>. This should be the same as the resource type of the underlying resource. This parameter also determines which _SRV to use in the union below.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_RESOURCE_VIEW_DESC::ViewDimension']/*"/>	
        /// <msdn-id>ff476211</msdn-id>	
        /// <unmanaged>D3D_SRV_DIMENSION ViewDimension</unmanaged>	
        /// <unmanaged-short>D3D_SRV_DIMENSION ViewDimension</unmanaged-short>	
        [FieldOffset(4)]
        public SharpDX.Direct3D.ShaderResourceViewDimension Dimension;
        
        /// <summary>	
        /// <dd> <p>View the resource as a buffer using information from a shader-resource view (see <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.BufferResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_RESOURCE_VIEW_DESC::Buffer']/*"/>	
        /// <msdn-id>ff476211</msdn-id>	
        /// <unmanaged>D3D11_BUFFER_SRV Buffer</unmanaged>	
        /// <unmanaged-short>D3D11_BUFFER_SRV Buffer</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.ShaderResourceViewDescription.BufferResource Buffer;
        
        /// <summary>	
        /// <dd> <p>View the resource as a 1D texture using information from a shader-resource view (see <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_RESOURCE_VIEW_DESC::Texture1D']/*"/>	
        /// <msdn-id>ff476211</msdn-id>	
        /// <unmanaged>D3D11_TEX1D_SRV Texture1D</unmanaged>	
        /// <unmanaged-short>D3D11_TEX1D_SRV Texture1D</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource Texture1D;
        
        /// <summary>	
        /// <dd> <p>View the resource as a 1D-texture array using information from a shader-resource view (see <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DArrayResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_RESOURCE_VIEW_DESC::Texture1DArray']/*"/>	
        /// <msdn-id>ff476211</msdn-id>	
        /// <unmanaged>D3D11_TEX1D_ARRAY_SRV Texture1DArray</unmanaged>	
        /// <unmanaged-short>D3D11_TEX1D_ARRAY_SRV Texture1DArray</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DArrayResource Texture1DArray;
        
        /// <summary>	
        /// <dd> <p>View the resource as a 2D-texture using information from a shader-resource view (see <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_RESOURCE_VIEW_DESC::Texture2D']/*"/>	
        /// <msdn-id>ff476211</msdn-id>	
        /// <unmanaged>D3D11_TEX2D_SRV Texture2D</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2D_SRV Texture2D</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DResource Texture2D;
        
        /// <summary>	
        /// <dd> <p>View the resource as a 2D-texture array using information from a shader-resource view (see <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DArrayResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_RESOURCE_VIEW_DESC::Texture2DArray']/*"/>	
        /// <msdn-id>ff476211</msdn-id>	
        /// <unmanaged>D3D11_TEX2D_ARRAY_SRV Texture2DArray</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2D_ARRAY_SRV Texture2DArray</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DArrayResource Texture2DArray;
        
        /// <summary>	
        /// <dd> <p>View the resource as a 2D-multisampled texture using information from a shader-resource view (see <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DMultisampledResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_RESOURCE_VIEW_DESC::Texture2DMS']/*"/>	
        /// <msdn-id>ff476211</msdn-id>	
        /// <unmanaged>D3D11_TEX2DMS_SRV Texture2DMS</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2DMS_SRV Texture2DMS</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DMultisampledResource Texture2DMS;
        
        /// <summary>	
        /// <dd> <p>View the resource as a 2D-multisampled-texture array using information from a shader-resource view (see <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DMultisampledArrayResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_RESOURCE_VIEW_DESC::Texture2DMSArray']/*"/>	
        /// <msdn-id>ff476211</msdn-id>	
        /// <unmanaged>D3D11_TEX2DMS_ARRAY_SRV Texture2DMSArray</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2DMS_ARRAY_SRV Texture2DMSArray</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DMultisampledArrayResource Texture2DMSArray;
        
        /// <summary>	
        /// <dd> <p>View the resource as a 3D texture using information from a shader-resource view (see <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.Texture3DResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_RESOURCE_VIEW_DESC::Texture3D']/*"/>	
        /// <msdn-id>ff476211</msdn-id>	
        /// <unmanaged>D3D11_TEX3D_SRV Texture3D</unmanaged>	
        /// <unmanaged-short>D3D11_TEX3D_SRV Texture3D</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.ShaderResourceViewDescription.Texture3DResource Texture3D;
        
        /// <summary>	
        /// <dd> <p>View the resource as a 3D-cube texture using information from a shader-resource view (see <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.TextureCubeResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_RESOURCE_VIEW_DESC::TextureCube']/*"/>	
        /// <msdn-id>ff476211</msdn-id>	
        /// <unmanaged>D3D11_TEXCUBE_SRV TextureCube</unmanaged>	
        /// <unmanaged-short>D3D11_TEXCUBE_SRV TextureCube</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.ShaderResourceViewDescription.TextureCubeResource TextureCube;
        
        /// <summary>	
        /// <dd> <p>View the resource as a 3D-cube-texture array using information from a shader-resource view (see <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.TextureCubeArrayResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_RESOURCE_VIEW_DESC::TextureCubeArray']/*"/>	
        /// <msdn-id>ff476211</msdn-id>	
        /// <unmanaged>D3D11_TEXCUBE_ARRAY_SRV TextureCubeArray</unmanaged>	
        /// <unmanaged-short>D3D11_TEXCUBE_ARRAY_SRV TextureCubeArray</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.ShaderResourceViewDescription.TextureCubeArrayResource TextureCubeArray;
        
        /// <summary>	
        /// <dd> <p>View the resource as a raw buffer using information from a shader-resource view (see <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.ExtendedBufferResource"/></strong>). For more info about raw viewing of buffers, see Raw Views of Buffers.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_RESOURCE_VIEW_DESC::BufferEx']/*"/>	
        /// <msdn-id>ff476211</msdn-id>	
        /// <unmanaged>D3D11_BUFFEREX_SRV BufferEx</unmanaged>	
        /// <unmanaged-short>D3D11_BUFFEREX_SRV BufferEx</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.ShaderResourceViewDescription.ExtendedBufferResource BufferEx;
    }
    
    /// <summary>	
    /// <p>Describes a shader-resource view.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>A view is a format-specific way to look at the data in a resource. The view determines what data to look at, and how it is cast when read.</p><p>When viewing a resource, the resource-view description must specify a typed format, that is compatible with the resource format. So that means that you cannot create a resource-view description using any format with _TYPELESS in the name. You can however view a typeless resource by specifying a typed format for the view. For example, a <see cref="SharpDX.DXGI.Format.R32G32B32_Typeless"/> resource can be viewed with one of these typed formats: <see cref="SharpDX.DXGI.Format.R32G32B32_Float"/>, <see cref="SharpDX.DXGI.Format.R32G32B32_UInt"/>, and <see cref="SharpDX.DXGI.Format.R32G32B32_SInt"/>, since these typed formats are compatible with the typeless resource.</p><p>Create a shader-resource-view description by calling <strong><see cref="SharpDX.Direct3D11.Device.CreateShaderResourceView"/></strong>. To view a shader-resource-view description, call <strong><see cref="SharpDX.Direct3D11.ShaderResourceView.GetDescription"/></strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_RESOURCE_VIEW_DESC1']/*"/>	
    /// <msdn-id>ff476211</msdn-id>	
    /// <unmanaged>D3D11_SHADER_RESOURCE_VIEW_DESC1</unmanaged>	
    /// <unmanaged-short>D3D11_SHADER_RESOURCE_VIEW_DESC1</unmanaged-short>	
    [StructLayout(LayoutKind.Explicit)]
    public  partial struct ShaderResourceViewDescription1 {	
        
        /// <summary>	
        /// <p>Describes the subresources from an array of 2D textures to use in a shader-resource view.</p>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_SRV1']/*"/>	
        /// <msdn-id>dn899161</msdn-id>	
        /// <unmanaged>D3D11_TEX2D_ARRAY_SRV1</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2D_ARRAY_SRV1</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DArrayResource1 {	
            
            /// <summary>	
            /// <dd> <p> Index of the most detailed mipmap level to use; this number is between 0 and ( <strong>MipLevels</strong> (from the original Texture2D for which  <strong><see cref="SharpDX.Direct3D11.Device3.CreateShaderResourceView1"/></strong> creates a view) - 1). </p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_SRV1::MostDetailedMip']/*"/>	
            /// <msdn-id>dn899161</msdn-id>	
            /// <unmanaged>unsigned int MostDetailedMip</unmanaged>	
            /// <unmanaged-short>unsigned int MostDetailedMip</unmanaged-short>	
            public int MostDetailedMip;
            
            /// <summary>	
            /// <dd> <p> The maximum number of mipmap levels for the view of the texture. See the remarks in <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/></strong>. </p> <p> Set to -1 to indicate all the mipmap levels from <strong>MostDetailedMip</strong> on down to least detailed. </p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_SRV1::MipLevels']/*"/>	
            /// <msdn-id>dn899161</msdn-id>	
            /// <unmanaged>unsigned int MipLevels</unmanaged>	
            /// <unmanaged-short>unsigned int MipLevels</unmanaged-short>	
            public int MipLevels;
            
            /// <summary>	
            /// <dd> <p>The index of the first texture to use in an array of textures.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_SRV1::FirstArraySlice']/*"/>	
            /// <msdn-id>dn899161</msdn-id>	
            /// <unmanaged>unsigned int FirstArraySlice</unmanaged>	
            /// <unmanaged-short>unsigned int FirstArraySlice</unmanaged-short>	
            public int FirstArraySlice;
            
            /// <summary>	
            /// <dd> <p>Number of textures in the array.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_SRV1::ArraySize']/*"/>	
            /// <msdn-id>dn899161</msdn-id>	
            /// <unmanaged>unsigned int ArraySize</unmanaged>	
            /// <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
            public int ArraySize;
            
            /// <summary>	
            /// <dd> <p>The index (plane slice number) of the plane to use in an array of textures.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_SRV1::PlaneSlice']/*"/>	
            /// <msdn-id>dn899161</msdn-id>	
            /// <unmanaged>unsigned int PlaneSlice</unmanaged>	
            /// <unmanaged-short>unsigned int PlaneSlice</unmanaged-short>	
            public int PlaneSlice;
        }
        
        /// <summary>	
        /// <p>Describes the subresource from a 2D texture to use in a shader-resource view.</p>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_SRV1']/*"/>	
        /// <msdn-id>dn899164</msdn-id>	
        /// <unmanaged>D3D11_TEX2D_SRV1</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2D_SRV1</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DResource1 {	
            
            /// <summary>	
            /// <dd> <p> Index of the most detailed mipmap level to use; this number is between 0 and (<strong>MipLevels</strong> (from the original Texture2D for which  <strong><see cref="SharpDX.Direct3D11.Device3.CreateShaderResourceView1"/></strong> creates a view) - 1 ). </p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_SRV1::MostDetailedMip']/*"/>	
            /// <msdn-id>dn899164</msdn-id>	
            /// <unmanaged>unsigned int MostDetailedMip</unmanaged>	
            /// <unmanaged-short>unsigned int MostDetailedMip</unmanaged-short>	
            public int MostDetailedMip;
            
            /// <summary>	
            /// <dd> <p> The maximum number of mipmap levels for the view of the texture. See the remarks in <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/></strong>. </p> <p> Set to -1 to indicate all the mipmap levels from <strong>MostDetailedMip</strong> on down to least detailed. </p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_SRV1::MipLevels']/*"/>	
            /// <msdn-id>dn899164</msdn-id>	
            /// <unmanaged>unsigned int MipLevels</unmanaged>	
            /// <unmanaged-short>unsigned int MipLevels</unmanaged-short>	
            public int MipLevels;
            
            /// <summary>	
            /// <dd> <p>The index (plane slice number) of the plane to use in the texture.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_SRV1::PlaneSlice']/*"/>	
            /// <msdn-id>dn899164</msdn-id>	
            /// <unmanaged>unsigned int PlaneSlice</unmanaged>	
            /// <unmanaged-short>unsigned int PlaneSlice</unmanaged-short>	
            public int PlaneSlice;
        }
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.DXGI.Format"/></strong> specifying the viewing format. See remarks.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_RESOURCE_VIEW_DESC1::Format']/*"/>	
        /// <msdn-id>ff476211</msdn-id>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        [FieldOffset(0)]
        public SharpDX.DXGI.Format Format;
        
        /// <summary>	
        /// <dd> <p>The resource type of the view. See <strong>D3D11_SRV_DIMENSION</strong>. This should be the same as the resource type of the underlying resource. This parameter also determines which _SRV to use in the union below.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_RESOURCE_VIEW_DESC1::ViewDimension']/*"/>	
        /// <msdn-id>ff476211</msdn-id>	
        /// <unmanaged>D3D_SRV_DIMENSION ViewDimension</unmanaged>	
        /// <unmanaged-short>D3D_SRV_DIMENSION ViewDimension</unmanaged-short>	
        [FieldOffset(4)]
        public SharpDX.Direct3D.ShaderResourceViewDimension Dimension;
        
        /// <summary>	
        /// <dd> <p>View the resource as a buffer using information from a shader-resource view (see <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.BufferResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_RESOURCE_VIEW_DESC1::Buffer']/*"/>	
        /// <msdn-id>ff476211</msdn-id>	
        /// <unmanaged>D3D11_BUFFER_SRV Buffer</unmanaged>	
        /// <unmanaged-short>D3D11_BUFFER_SRV Buffer</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.ShaderResourceViewDescription.BufferResource Buffer;
        
        /// <summary>	
        /// <dd> <p>View the resource as a 1D texture using information from a shader-resource view (see <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_RESOURCE_VIEW_DESC1::Texture1D']/*"/>	
        /// <msdn-id>ff476211</msdn-id>	
        /// <unmanaged>D3D11_TEX1D_SRV Texture1D</unmanaged>	
        /// <unmanaged-short>D3D11_TEX1D_SRV Texture1D</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource Texture1D;
        
        /// <summary>	
        /// <dd> <p>View the resource as a 1D-texture array using information from a shader-resource view (see <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DArrayResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_RESOURCE_VIEW_DESC1::Texture1DArray']/*"/>	
        /// <msdn-id>ff476211</msdn-id>	
        /// <unmanaged>D3D11_TEX1D_ARRAY_SRV Texture1DArray</unmanaged>	
        /// <unmanaged-short>D3D11_TEX1D_ARRAY_SRV Texture1DArray</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DArrayResource Texture1DArray;
        
        /// <summary>	
        /// <dd> <p>View the resource as a 2D-texture using information from a shader-resource view (see <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_RESOURCE_VIEW_DESC1::Texture2D']/*"/>	
        /// <msdn-id>ff476211</msdn-id>	
        /// <unmanaged>D3D11_TEX2D_SRV1 Texture2D</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2D_SRV1 Texture2D</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.ShaderResourceViewDescription1.Texture2DResource1 Texture2D;
        
        /// <summary>	
        /// <dd> <p>View the resource as a 2D-texture array using information from a shader-resource view (see <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DArrayResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_RESOURCE_VIEW_DESC1::Texture2DArray']/*"/>	
        /// <msdn-id>ff476211</msdn-id>	
        /// <unmanaged>D3D11_TEX2D_ARRAY_SRV1 Texture2DArray</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2D_ARRAY_SRV1 Texture2DArray</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.ShaderResourceViewDescription1.Texture2DArrayResource1 Texture2DArray;
        
        /// <summary>	
        /// <dd> <p>View the resource as a 2D-multisampled texture using information from a shader-resource view (see <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DMultisampledResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_RESOURCE_VIEW_DESC1::Texture2DMS']/*"/>	
        /// <msdn-id>ff476211</msdn-id>	
        /// <unmanaged>D3D11_TEX2DMS_SRV Texture2DMS</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2DMS_SRV Texture2DMS</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DMultisampledResource Texture2DMS;
        
        /// <summary>	
        /// <dd> <p>View the resource as a 2D-multisampled-texture array using information from a shader-resource view (see <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DMultisampledArrayResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_RESOURCE_VIEW_DESC1::Texture2DMSArray']/*"/>	
        /// <msdn-id>ff476211</msdn-id>	
        /// <unmanaged>D3D11_TEX2DMS_ARRAY_SRV Texture2DMSArray</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2DMS_ARRAY_SRV Texture2DMSArray</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.ShaderResourceViewDescription.Texture2DMultisampledArrayResource Texture2DMSArray;
        
        /// <summary>	
        /// <dd> <p>View the resource as a 3D texture using information from a shader-resource view (see <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.Texture3DResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_RESOURCE_VIEW_DESC1::Texture3D']/*"/>	
        /// <msdn-id>ff476211</msdn-id>	
        /// <unmanaged>D3D11_TEX3D_SRV Texture3D</unmanaged>	
        /// <unmanaged-short>D3D11_TEX3D_SRV Texture3D</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.ShaderResourceViewDescription.Texture3DResource Texture3D;
        
        /// <summary>	
        /// <dd> <p>View the resource as a 3D-cube texture using information from a shader-resource view (see <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.TextureCubeResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_RESOURCE_VIEW_DESC1::TextureCube']/*"/>	
        /// <msdn-id>ff476211</msdn-id>	
        /// <unmanaged>D3D11_TEXCUBE_SRV TextureCube</unmanaged>	
        /// <unmanaged-short>D3D11_TEXCUBE_SRV TextureCube</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.ShaderResourceViewDescription.TextureCubeResource TextureCube;
        
        /// <summary>	
        /// <dd> <p>View the resource as a 3D-cube-texture array using information from a shader-resource view (see <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.TextureCubeArrayResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_RESOURCE_VIEW_DESC1::TextureCubeArray']/*"/>	
        /// <msdn-id>ff476211</msdn-id>	
        /// <unmanaged>D3D11_TEXCUBE_ARRAY_SRV TextureCubeArray</unmanaged>	
        /// <unmanaged-short>D3D11_TEXCUBE_ARRAY_SRV TextureCubeArray</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.ShaderResourceViewDescription.TextureCubeArrayResource TextureCubeArray;
        
        /// <summary>	
        /// <dd> <p>View the resource as a raw buffer using information from a shader-resource view (see <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.ExtendedBufferResource"/></strong>). For more info about raw viewing of buffers, see Raw Views of Buffers.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_RESOURCE_VIEW_DESC1::BufferEx']/*"/>	
        /// <msdn-id>ff476211</msdn-id>	
        /// <unmanaged>D3D11_BUFFEREX_SRV BufferEx</unmanaged>	
        /// <unmanaged-short>D3D11_BUFFEREX_SRV BufferEx</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.ShaderResourceViewDescription.ExtendedBufferResource BufferEx;
    }
    
    /// <summary>	
    /// <p>Description of a vertex element in a vertex buffer in an output slot.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SO_DECLARATION_ENTRY']/*"/>	
    /// <msdn-id>ff476216</msdn-id>	
    /// <unmanaged>D3D11_SO_DECLARATION_ENTRY</unmanaged>	
    /// <unmanaged-short>D3D11_SO_DECLARATION_ENTRY</unmanaged-short>	
    public  partial struct StreamOutputElement {	
        
        /// <summary>	
        /// <dd> <p>Zero-based, stream number.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SO_DECLARATION_ENTRY::Stream']/*"/>	
        /// <msdn-id>ff476216</msdn-id>	
        /// <unmanaged>unsigned int Stream</unmanaged>	
        /// <unmanaged-short>unsigned int Stream</unmanaged-short>	
        public int Stream;
        
        /// <summary>	
        /// <dd> <p>Type of output element; possible values include: <strong>"POSITION"</strong>, <strong>"NORMAL"</strong>, or <strong>"TEXCOORD0"</strong>. Note that if <em>SemanticName</em> is <strong><c>null</c></strong> then  <em>ComponentCount</em> can be greater than 4 and the described entry will be a gap in the stream out where no data will be written. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SO_DECLARATION_ENTRY::SemanticName']/*"/>	
        /// <msdn-id>ff476216</msdn-id>	
        /// <unmanaged>const char* SemanticName</unmanaged>	
        /// <unmanaged-short>char SemanticName</unmanaged-short>	
        public string SemanticName;
        
        /// <summary>	
        /// <dd> <p>Output element's zero-based index. Should be used if, for example, you have more than one texture coordinate stored in each vertex.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SO_DECLARATION_ENTRY::SemanticIndex']/*"/>	
        /// <msdn-id>ff476216</msdn-id>	
        /// <unmanaged>unsigned int SemanticIndex</unmanaged>	
        /// <unmanaged-short>unsigned int SemanticIndex</unmanaged-short>	
        public int SemanticIndex;
        
        /// <summary>	
        /// <dd> <p>Which component of the entry to begin writing out to. Valid values are 0 to 3. For example, if you only wish to output to the y and z components  of a position, then StartComponent should be 1 and ComponentCount should be 2.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SO_DECLARATION_ENTRY::StartComponent']/*"/>	
        /// <msdn-id>ff476216</msdn-id>	
        /// <unmanaged>unsigned char StartComponent</unmanaged>	
        /// <unmanaged-short>unsigned char StartComponent</unmanaged-short>	
        public byte StartComponent;
        
        /// <summary>	
        /// <dd> <p>The number of components of the entry to write out to. Valid values are 1 to 4. For example, if you only wish to output to the y and z components  of a position, then StartComponent should be 1 and ComponentCount should be 2.  Note that if <em>SemanticName</em> is <strong><c>null</c></strong> then  <em>ComponentCount</em> can be greater than 4 and the described entry will be a gap in the stream out where no data will be written.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SO_DECLARATION_ENTRY::ComponentCount']/*"/>	
        /// <msdn-id>ff476216</msdn-id>	
        /// <unmanaged>unsigned char ComponentCount</unmanaged>	
        /// <unmanaged-short>unsigned char ComponentCount</unmanaged-short>	
        public byte ComponentCount;
        
        /// <summary>	
        /// <dd> <p>The associated stream output buffer that is bound to the pipeline  (see <strong><see cref="SharpDX.Direct3D11.StreamOutputStage.SetTargets"/></strong>).  The valid range for <em>OutputSlot</em> is 0 to 3.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SO_DECLARATION_ENTRY::OutputSlot']/*"/>	
        /// <msdn-id>ff476216</msdn-id>	
        /// <unmanaged>unsigned char OutputSlot</unmanaged>	
        /// <unmanaged-short>unsigned char OutputSlot</unmanaged-short>	
        public byte OutputSlot;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public int Stream;
            public System.IntPtr SemanticName;
            public int SemanticIndex;
            public byte StartComponent;
            public byte ComponentCount;
            public byte OutputSlot;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                if (this.SemanticName != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.SemanticName);		
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Stream = @ref.Stream;
            this.SemanticName = ( @ref.SemanticName == IntPtr.Zero )?null:Marshal.PtrToStringAnsi(@ref.SemanticName);
            this.SemanticIndex = @ref.SemanticIndex;
            this.StartComponent = @ref.StartComponent;
            this.ComponentCount = @ref.ComponentCount;
            this.OutputSlot = @ref.OutputSlot;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Stream = this.Stream;
            @ref.SemanticName = ( this.SemanticName == null )?IntPtr.Zero : Utilities.StringToHGlobalAnsi(this.SemanticName);
            @ref.SemanticIndex = this.SemanticIndex;
            @ref.StartComponent = this.StartComponent;
            @ref.ComponentCount = this.ComponentCount;
            @ref.OutputSlot = this.OutputSlot;
		
		}
    }
    
    /// <summary>	
    /// <p>Query information about the amount of data streamed out to the stream-output buffers in between <strong><see cref="SharpDX.Direct3D11.DeviceContext.Begin"/></strong> and <strong><see cref="SharpDX.Direct3D11.DeviceContext.End"/></strong>.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_QUERY_DATA_SO_STATISTICS']/*"/>	
    /// <msdn-id>ff476193</msdn-id>	
    /// <unmanaged>D3D11_QUERY_DATA_SO_STATISTICS</unmanaged>	
    /// <unmanaged-short>D3D11_QUERY_DATA_SO_STATISTICS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct StreamOutputStatistics {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_QUERY_DATA_SO_STATISTICS::NumPrimitivesWritten']/*"/>	
        /// <msdn-id>ff476193</msdn-id>	
        /// <unmanaged>unsigned longlong NumPrimitivesWritten</unmanaged>	
        /// <unmanaged-short>unsigned longlong NumPrimitivesWritten</unmanaged-short>	
        public long NumPrimitivesWritten;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_QUERY_DATA_SO_STATISTICS::PrimitivesStorageNeeded']/*"/>	
        /// <msdn-id>ff476193</msdn-id>	
        /// <unmanaged>unsigned longlong PrimitivesStorageNeeded</unmanaged>	
        /// <unmanaged-short>unsigned longlong PrimitivesStorageNeeded</unmanaged-short>	
        public long PrimitivesStorageNeeded;
    }
    
    /// <summary>	
    /// <p>Describes a tiled subresource volume.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Each packed mipmap is individually reported as 0 for <strong>WidthInTiles</strong>, <strong>HeightInTiles</strong> and <strong>DepthInTiles</strong>.	
    /// </p><p>The total number of tiles in subresources is <strong>WidthInTiles</strong>*<strong>HeightInTiles</strong>*<strong>DepthInTiles</strong>. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SUBRESOURCE_TILING']/*"/>	
    /// <msdn-id>dn280434</msdn-id>	
    /// <unmanaged>D3D11_SUBRESOURCE_TILING</unmanaged>	
    /// <unmanaged-short>D3D11_SUBRESOURCE_TILING</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct SubResourceTiling {	
        
        /// <summary>	
        /// <dd> <p>The width in tiles of the subresource.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SUBRESOURCE_TILING::WidthInTiles']/*"/>	
        /// <msdn-id>dn280434</msdn-id>	
        /// <unmanaged>unsigned int WidthInTiles</unmanaged>	
        /// <unmanaged-short>unsigned int WidthInTiles</unmanaged-short>	
        public int WidthInTiles;
        
        /// <summary>	
        /// <dd> <p>The height in tiles of the subresource.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SUBRESOURCE_TILING::HeightInTiles']/*"/>	
        /// <msdn-id>dn280434</msdn-id>	
        /// <unmanaged>unsigned short HeightInTiles</unmanaged>	
        /// <unmanaged-short>unsigned short HeightInTiles</unmanaged-short>	
        public short HeightInTiles;
        
        /// <summary>	
        /// <dd> <p>The depth in tiles of the subresource.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SUBRESOURCE_TILING::DepthInTiles']/*"/>	
        /// <msdn-id>dn280434</msdn-id>	
        /// <unmanaged>unsigned short DepthInTiles</unmanaged>	
        /// <unmanaged-short>unsigned short DepthInTiles</unmanaged-short>	
        public short DepthInTiles;
        
        /// <summary>	
        /// <dd> <p>The index of the tile in the overall tiled subresource to start with. </p> <p> <strong>GetResourceTiling</strong> sets <strong>StartTileIndexInOverallResource</strong> to <strong>D3D11_PACKED_TILE</strong> (0xffffffff) to indicate that the whole 	
        /// <strong><see cref="SharpDX.Direct3D11.SubResourceTiling"/></strong> structure is meaningless, and the info to which the <em>pPackedMipDesc</em> parameter of <strong>GetResourceTiling</strong> points applies. For packed tiles, the description of the packed mipmaps comes from a <strong><see cref="SharpDX.Direct3D11.PackedMipDescription"/></strong> structure instead.	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SUBRESOURCE_TILING::StartTileIndexInOverallResource']/*"/>	
        /// <msdn-id>dn280434</msdn-id>	
        /// <unmanaged>unsigned int StartTileIndexInOverallResource</unmanaged>	
        /// <unmanaged-short>unsigned int StartTileIndexInOverallResource</unmanaged-short>	
        public int StartTileIndexInOverallResource;
    }
    
    /// <summary>	
    /// <p>Describes a 1D texture.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This structure is used in a call to <strong><see cref="SharpDX.Direct3D11.Device.CreateTexture1D"/></strong>.</p><p>In addition to this structure, you can also use the <strong>CD3D11_TEXTURE1D_DESC</strong> derived structure, which is defined  in D3D11.h and behaves like an inherited class, to help create a texture description.</p><p>The texture size range is determined by the feature level at which you create the device and not the Microsoft Direct3D interface version. For example, if you use Microsoft Direct3D?10 hardware at feature level 10 (<strong><see cref="SharpDX.Direct3D.FeatureLevel.Level_10_0"/></strong>) and call <strong><see cref="SharpDX.Direct3D11.D3D11.CreateDevice"/></strong> to create an <strong><see cref="SharpDX.Direct3D11.Device"/></strong>, you must constrain the maximum texture size to D3D10_REQ_TEXTURE1D_U_DIMENSION (8192) when you create your 1D texture.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE1D_DESC']/*"/>	
    /// <msdn-id>ff476252</msdn-id>	
    /// <unmanaged>D3D11_TEXTURE1D_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_TEXTURE1D_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct Texture1DDescription {	
        
        /// <summary>	
        /// <dd> <p>Texture width (in texels). The  range is from 1 to <see cref="SharpDX.Direct3D11.Resource.MaximumTexture1DSize"/> (16384). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE1D_DESC::Width']/*"/>	
        /// <msdn-id>ff476252</msdn-id>	
        /// <unmanaged>unsigned int Width</unmanaged>	
        /// <unmanaged-short>unsigned int Width</unmanaged-short>	
        public int Width;
        
        /// <summary>	
        /// <dd> <p>The maximum number of mipmap levels in the texture. See the remarks in <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/></strong>. Use 1 for a multisampled texture; or 0 to generate a full set of subtextures.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE1D_DESC::MipLevels']/*"/>	
        /// <msdn-id>ff476252</msdn-id>	
        /// <unmanaged>unsigned int MipLevels</unmanaged>	
        /// <unmanaged-short>unsigned int MipLevels</unmanaged-short>	
        public int MipLevels;
        
        /// <summary>	
        /// <dd> <p>Number of textures in the array. The  range is from 1 to <see cref="SharpDX.Direct3D11.Resource.MaximumTexture1DArraySize"/> (2048). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE1D_DESC::ArraySize']/*"/>	
        /// <msdn-id>ff476252</msdn-id>	
        /// <unmanaged>unsigned int ArraySize</unmanaged>	
        /// <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
        public int ArraySize;
        
        /// <summary>	
        /// <dd> <p>Texture format (see <strong><see cref="SharpDX.DXGI.Format"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE1D_DESC::Format']/*"/>	
        /// <msdn-id>ff476252</msdn-id>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        public SharpDX.DXGI.Format Format;
        
        /// <summary>	
        /// <dd> <p>Value that identifies how the texture is to be read from and written to. The most common value is <see cref="SharpDX.Direct3D11.ResourceUsage.Default"/>; see <strong><see cref="SharpDX.Direct3D11.ResourceUsage"/></strong> for all possible values.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE1D_DESC::Usage']/*"/>	
        /// <msdn-id>ff476252</msdn-id>	
        /// <unmanaged>D3D11_USAGE Usage</unmanaged>	
        /// <unmanaged-short>D3D11_USAGE Usage</unmanaged-short>	
        public SharpDX.Direct3D11.ResourceUsage Usage;
        
        /// <summary>	
        /// <dd> <p>Flags (see <strong><see cref="SharpDX.Direct3D11.BindFlags"/></strong>) for binding to pipeline stages. The flags can be combined by a logical OR. For a 1D texture, the allowable values are: <see cref="SharpDX.Direct3D11.BindFlags.ShaderResource"/>, <see cref="SharpDX.Direct3D11.BindFlags.RenderTarget"/> and <see cref="SharpDX.Direct3D11.BindFlags.DepthStencil"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE1D_DESC::BindFlags']/*"/>	
        /// <msdn-id>ff476252</msdn-id>	
        /// <unmanaged>D3D11_BIND_FLAG BindFlags</unmanaged>	
        /// <unmanaged-short>D3D11_BIND_FLAG BindFlags</unmanaged-short>	
        public SharpDX.Direct3D11.BindFlags BindFlags;
        
        /// <summary>	
        /// <dd> <p>Flags (see <strong><see cref="SharpDX.Direct3D11.CpuAccessFlags"/></strong>) to specify the types of CPU access allowed. Use 0 if CPU access is not required. These flags can be combined with a logical OR.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE1D_DESC::CPUAccessFlags']/*"/>	
        /// <msdn-id>ff476252</msdn-id>	
        /// <unmanaged>D3D11_CPU_ACCESS_FLAG CPUAccessFlags</unmanaged>	
        /// <unmanaged-short>D3D11_CPU_ACCESS_FLAG CPUAccessFlags</unmanaged-short>	
        public SharpDX.Direct3D11.CpuAccessFlags CpuAccessFlags;
        
        /// <summary>	
        /// <dd> <p>Flags (see <strong><see cref="SharpDX.Direct3D11.ResourceOptionFlags"/></strong>) that identify other, less common resource options. Use 0 if none of these flags apply. These flags can be combined with a logical OR.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE1D_DESC::MiscFlags']/*"/>	
        /// <msdn-id>ff476252</msdn-id>	
        /// <unmanaged>D3D11_RESOURCE_MISC_FLAG MiscFlags</unmanaged>	
        /// <unmanaged-short>D3D11_RESOURCE_MISC_FLAG MiscFlags</unmanaged-short>	
        public SharpDX.Direct3D11.ResourceOptionFlags OptionFlags;
    }
    
    /// <summary>	
    /// <p>Identifies a texture resource for a video  processor output view.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_VPOV']/*"/>	
    /// <msdn-id>hh447632</msdn-id>	
    /// <unmanaged>D3D11_TEX2D_ARRAY_VPOV</unmanaged>	
    /// <unmanaged-short>D3D11_TEX2D_ARRAY_VPOV</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct Texture2DArrayVpov {	
        
        /// <summary>	
        /// <dd> <p>The zero-based index into the array of subtextures.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_VPOV::MipSlice']/*"/>	
        /// <msdn-id>hh447632</msdn-id>	
        /// <unmanaged>unsigned int MipSlice</unmanaged>	
        /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
        public int MipSlice;
        
        /// <summary>	
        /// <dd> <p>The index of the first texture to use.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_VPOV::FirstArraySlice']/*"/>	
        /// <msdn-id>hh447632</msdn-id>	
        /// <unmanaged>unsigned int FirstArraySlice</unmanaged>	
        /// <unmanaged-short>unsigned int FirstArraySlice</unmanaged-short>	
        public int FirstArraySlice;
        
        /// <summary>	
        /// <dd> <p>The number of textures in the array.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_VPOV::ArraySize']/*"/>	
        /// <msdn-id>hh447632</msdn-id>	
        /// <unmanaged>unsigned int ArraySize</unmanaged>	
        /// <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
        public int ArraySize;
    }
    
    /// <summary>	
    /// <p>Describes a 2D texture.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This structure is used in a call to <strong><see cref="SharpDX.Direct3D11.Device.CreateTexture2D"/></strong>.</p><p>In addition to this structure, you can also use the <strong>CD3D11_TEXTURE2D_DESC</strong> derived structure, which is defined  in D3D11.h and behaves like an inherited class, to help create a texture description.</p><p>The device places some size restrictions (must be multiples of a minimum size) for a subsampled, block compressed, or bit-format resource.</p><p>The texture size range is determined by the feature level at which you create the device and not the Microsoft Direct3D interface version. For example, if you use Microsoft Direct3D?10 hardware at feature level 10 (<strong><see cref="SharpDX.Direct3D.FeatureLevel.Level_10_0"/></strong>) and call <strong><see cref="SharpDX.Direct3D11.D3D11.CreateDevice"/></strong> to create an <strong><see cref="SharpDX.Direct3D11.Device"/></strong>, you must constrain the maximum texture size to D3D10_REQ_TEXTURE2D_U_OR_V_DIMENSION (8192) when you create your 2D texture.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE2D_DESC']/*"/>	
    /// <msdn-id>ff476253</msdn-id>	
    /// <unmanaged>D3D11_TEXTURE2D_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_TEXTURE2D_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct Texture2DDescription {	
        
        /// <summary>	
        /// <dd> <p>Texture width (in texels). The  range is from 1 to <see cref="SharpDX.Direct3D11.Resource.MaximumTexture2DSize"/> (16384). For a texture cube-map, the  range is from 1 to <see cref="SharpDX.Direct3D11.Resource.MaximumTextureCubeSize"/> (16384). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE2D_DESC::Width']/*"/>	
        /// <msdn-id>ff476253</msdn-id>	
        /// <unmanaged>unsigned int Width</unmanaged>	
        /// <unmanaged-short>unsigned int Width</unmanaged-short>	
        public int Width;
        
        /// <summary>	
        /// <dd> <p>Texture height (in texels). The  range is from 1 to <see cref="SharpDX.Direct3D11.Resource.MaximumTexture2DSize"/> (16384). For a texture cube-map, the  range is from 1 to <see cref="SharpDX.Direct3D11.Resource.MaximumTextureCubeSize"/> (16384). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE2D_DESC::Height']/*"/>	
        /// <msdn-id>ff476253</msdn-id>	
        /// <unmanaged>unsigned int Height</unmanaged>	
        /// <unmanaged-short>unsigned int Height</unmanaged-short>	
        public int Height;
        
        /// <summary>	
        /// <dd> <p>The maximum number of mipmap levels in the texture. See the remarks in <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/></strong>. Use 1 for a multisampled texture; or 0 to generate a full set of subtextures.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE2D_DESC::MipLevels']/*"/>	
        /// <msdn-id>ff476253</msdn-id>	
        /// <unmanaged>unsigned int MipLevels</unmanaged>	
        /// <unmanaged-short>unsigned int MipLevels</unmanaged-short>	
        public int MipLevels;
        
        /// <summary>	
        /// <dd> <p>Number of textures in the texture array. The  range is from 1 to <see cref="SharpDX.Direct3D11.Resource.MaximumTexture2DArraySize"/> (2048). For a texture cube-map, this value is a multiple of 6 (that is, 6 times the value in the <strong>NumCubes</strong> member of <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.TextureCubeArrayResource"/></strong>), and the  range is from 6 to 2046. The range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE2D_DESC::ArraySize']/*"/>	
        /// <msdn-id>ff476253</msdn-id>	
        /// <unmanaged>unsigned int ArraySize</unmanaged>	
        /// <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
        public int ArraySize;
        
        /// <summary>	
        /// <dd> <p>Texture format (see <strong><see cref="SharpDX.DXGI.Format"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE2D_DESC::Format']/*"/>	
        /// <msdn-id>ff476253</msdn-id>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        public SharpDX.DXGI.Format Format;
        
        /// <summary>	
        /// <dd> <p>Structure that specifies multisampling parameters for the texture. See <strong><see cref="SharpDX.DXGI.SampleDescription"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE2D_DESC::SampleDesc']/*"/>	
        /// <msdn-id>ff476253</msdn-id>	
        /// <unmanaged>DXGI_SAMPLE_DESC SampleDesc</unmanaged>	
        /// <unmanaged-short>DXGI_SAMPLE_DESC SampleDesc</unmanaged-short>	
        public SharpDX.DXGI.SampleDescription SampleDescription;
        
        /// <summary>	
        /// <dd> <p>Value that identifies how the texture is to be read from and written to. The most common value is <see cref="SharpDX.Direct3D11.ResourceUsage.Default"/>; see <strong><see cref="SharpDX.Direct3D11.ResourceUsage"/></strong> for all possible values.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE2D_DESC::Usage']/*"/>	
        /// <msdn-id>ff476253</msdn-id>	
        /// <unmanaged>D3D11_USAGE Usage</unmanaged>	
        /// <unmanaged-short>D3D11_USAGE Usage</unmanaged-short>	
        public SharpDX.Direct3D11.ResourceUsage Usage;
        
        /// <summary>	
        /// <dd> <p>Flags (see <strong><see cref="SharpDX.Direct3D11.BindFlags"/></strong>) for binding to pipeline stages. The flags can be combined by a logical OR.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE2D_DESC::BindFlags']/*"/>	
        /// <msdn-id>ff476253</msdn-id>	
        /// <unmanaged>D3D11_BIND_FLAG BindFlags</unmanaged>	
        /// <unmanaged-short>D3D11_BIND_FLAG BindFlags</unmanaged-short>	
        public SharpDX.Direct3D11.BindFlags BindFlags;
        
        /// <summary>	
        /// <dd> <p>Flags (see <strong><see cref="SharpDX.Direct3D11.CpuAccessFlags"/></strong>) to specify the types of CPU access allowed. Use 0 if CPU access is not required. These flags can be combined with a logical OR.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE2D_DESC::CPUAccessFlags']/*"/>	
        /// <msdn-id>ff476253</msdn-id>	
        /// <unmanaged>D3D11_CPU_ACCESS_FLAG CPUAccessFlags</unmanaged>	
        /// <unmanaged-short>D3D11_CPU_ACCESS_FLAG CPUAccessFlags</unmanaged-short>	
        public SharpDX.Direct3D11.CpuAccessFlags CpuAccessFlags;
        
        /// <summary>	
        /// <dd> <p>Flags (see <strong><see cref="SharpDX.Direct3D11.ResourceOptionFlags"/></strong>) that identify other, less common resource options. Use 0 if none of these flags apply. These flags can be combined by using a logical OR. For a texture cube-map, set the <strong><see cref="SharpDX.Direct3D11.ResourceOptionFlags.TextureCube"/></strong> flag. Cube-map arrays (that is, <strong>ArraySize</strong> &gt; 6) require feature level <strong><see cref="SharpDX.Direct3D.FeatureLevel.Level_10_1"/></strong> or higher.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE2D_DESC::MiscFlags']/*"/>	
        /// <msdn-id>ff476253</msdn-id>	
        /// <unmanaged>D3D11_RESOURCE_MISC_FLAG MiscFlags</unmanaged>	
        /// <unmanaged-short>D3D11_RESOURCE_MISC_FLAG MiscFlags</unmanaged-short>	
        public SharpDX.Direct3D11.ResourceOptionFlags OptionFlags;
    }
    
    /// <summary>	
    /// <p>Describes a 2D texture.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This structure is used in a call to <strong><see cref="SharpDX.Direct3D11.Device.CreateTexture2D"/></strong>.</p><p>In addition to this structure, you can also use the <strong>CD3D11_TEXTURE2D_DESC</strong> derived structure, which is defined  in D3D11.h and behaves like an inherited class, to help create a texture description.</p><p>The device places some size restrictions (must be multiples of a minimum size) for a subsampled, block compressed, or bit-format resource.</p><p>The texture size range is determined by the feature level at which you create the device and not the Microsoft Direct3D interface version. For example, if you use Microsoft Direct3D?10 hardware at feature level 10 (<strong><see cref="SharpDX.Direct3D.FeatureLevel.Level_10_0"/></strong>) and call <strong><see cref="SharpDX.Direct3D11.D3D11.CreateDevice"/></strong> to create an <strong><see cref="SharpDX.Direct3D11.Device"/></strong>, you must constrain the maximum texture size to D3D10_REQ_TEXTURE2D_U_OR_V_DIMENSION (8192) when you create your 2D texture.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE2D_DESC1']/*"/>	
    /// <msdn-id>ff476253</msdn-id>	
    /// <unmanaged>D3D11_TEXTURE2D_DESC1</unmanaged>	
    /// <unmanaged-short>D3D11_TEXTURE2D_DESC1</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct Texture2DDescription1 {	
        
        /// <summary>	
        /// <dd> <p>Texture width (in texels). The  range is from 1 to <see cref="SharpDX.Direct3D11.Resource.MaximumTexture2DSize"/> (16384). For a texture cube-map, the  range is from 1 to <see cref="SharpDX.Direct3D11.Resource.MaximumTextureCubeSize"/> (16384). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE2D_DESC1::Width']/*"/>	
        /// <msdn-id>ff476253</msdn-id>	
        /// <unmanaged>unsigned int Width</unmanaged>	
        /// <unmanaged-short>unsigned int Width</unmanaged-short>	
        public int Width;
        
        /// <summary>	
        /// <dd> <p>Texture height (in texels). The  range is from 1 to <see cref="SharpDX.Direct3D11.Resource.MaximumTexture2DSize"/> (16384). For a texture cube-map, the  range is from 1 to <see cref="SharpDX.Direct3D11.Resource.MaximumTextureCubeSize"/> (16384). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE2D_DESC1::Height']/*"/>	
        /// <msdn-id>ff476253</msdn-id>	
        /// <unmanaged>unsigned int Height</unmanaged>	
        /// <unmanaged-short>unsigned int Height</unmanaged-short>	
        public int Height;
        
        /// <summary>	
        /// <dd> <p>The maximum number of mipmap levels in the texture. See the remarks in <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/></strong>. Use 1 for a multisampled texture; or 0 to generate a full set of subtextures.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE2D_DESC1::MipLevels']/*"/>	
        /// <msdn-id>ff476253</msdn-id>	
        /// <unmanaged>unsigned int MipLevels</unmanaged>	
        /// <unmanaged-short>unsigned int MipLevels</unmanaged-short>	
        public int MipLevels;
        
        /// <summary>	
        /// <dd> <p>Number of textures in the texture array. The  range is from 1 to <see cref="SharpDX.Direct3D11.Resource.MaximumTexture2DArraySize"/> (2048). For a texture cube-map, this value is a multiple of 6 (that is, 6 times the value in the <strong>NumCubes</strong> member of <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.TextureCubeArrayResource"/></strong>), and the  range is from 6 to 2046. The range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE2D_DESC1::ArraySize']/*"/>	
        /// <msdn-id>ff476253</msdn-id>	
        /// <unmanaged>unsigned int ArraySize</unmanaged>	
        /// <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
        public int ArraySize;
        
        /// <summary>	
        /// <dd> <p>Texture format (see <strong><see cref="SharpDX.DXGI.Format"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE2D_DESC1::Format']/*"/>	
        /// <msdn-id>ff476253</msdn-id>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        public SharpDX.DXGI.Format Format;
        
        /// <summary>	
        /// <dd> <p>Structure that specifies multisampling parameters for the texture. See <strong><see cref="SharpDX.DXGI.SampleDescription"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE2D_DESC1::SampleDesc']/*"/>	
        /// <msdn-id>ff476253</msdn-id>	
        /// <unmanaged>DXGI_SAMPLE_DESC SampleDesc</unmanaged>	
        /// <unmanaged-short>DXGI_SAMPLE_DESC SampleDesc</unmanaged-short>	
        public SharpDX.DXGI.SampleDescription SampleDescription;
        
        /// <summary>	
        /// <dd> <p>Value that identifies how the texture is to be read from and written to. The most common value is <see cref="SharpDX.Direct3D11.ResourceUsage.Default"/>; see <strong><see cref="SharpDX.Direct3D11.ResourceUsage"/></strong> for all possible values.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE2D_DESC1::Usage']/*"/>	
        /// <msdn-id>ff476253</msdn-id>	
        /// <unmanaged>D3D11_USAGE Usage</unmanaged>	
        /// <unmanaged-short>D3D11_USAGE Usage</unmanaged-short>	
        public SharpDX.Direct3D11.ResourceUsage Usage;
        
        /// <summary>	
        /// <dd> <p>Flags (see <strong><see cref="SharpDX.Direct3D11.BindFlags"/></strong>) for binding to pipeline stages. The flags can be combined by a logical OR.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE2D_DESC1::BindFlags']/*"/>	
        /// <msdn-id>ff476253</msdn-id>	
        /// <unmanaged>D3D11_BIND_FLAG BindFlags</unmanaged>	
        /// <unmanaged-short>D3D11_BIND_FLAG BindFlags</unmanaged-short>	
        public SharpDX.Direct3D11.BindFlags BindFlags;
        
        /// <summary>	
        /// <dd> <p>Flags (see <strong><see cref="SharpDX.Direct3D11.CpuAccessFlags"/></strong>) to specify the types of CPU access allowed. Use 0 if CPU access is not required. These flags can be combined with a logical OR.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE2D_DESC1::CPUAccessFlags']/*"/>	
        /// <msdn-id>ff476253</msdn-id>	
        /// <unmanaged>D3D11_CPU_ACCESS_FLAG CPUAccessFlags</unmanaged>	
        /// <unmanaged-short>D3D11_CPU_ACCESS_FLAG CPUAccessFlags</unmanaged-short>	
        public SharpDX.Direct3D11.CpuAccessFlags CpuAccessFlags;
        
        /// <summary>	
        /// <dd> <p>Flags (see <strong><see cref="SharpDX.Direct3D11.ResourceOptionFlags"/></strong>) that identify other, less common resource options. Use 0 if none of these flags apply. These flags can be combined by using a logical OR. For a texture cube-map, set the <strong><see cref="SharpDX.Direct3D11.ResourceOptionFlags.TextureCube"/></strong> flag. Cube-map arrays (that is, <strong>ArraySize</strong> &gt; 6) require feature level <strong><see cref="SharpDX.Direct3D.FeatureLevel.Level_10_1"/></strong> or higher.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE2D_DESC1::MiscFlags']/*"/>	
        /// <msdn-id>ff476253</msdn-id>	
        /// <unmanaged>D3D11_RESOURCE_MISC_FLAG MiscFlags</unmanaged>	
        /// <unmanaged-short>D3D11_RESOURCE_MISC_FLAG MiscFlags</unmanaged-short>	
        public SharpDX.Direct3D11.ResourceOptionFlags OptionFlags;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE2D_DESC1::TextureLayout']/*"/>	
        /// <msdn-id>ff476253</msdn-id>	
        /// <unmanaged>D3D11_TEXTURE_LAYOUT TextureLayout</unmanaged>	
        /// <unmanaged-short>D3D11_TEXTURE_LAYOUT TextureLayout</unmanaged-short>	
        public SharpDX.Direct3D11.TextureLayout TextureLayout;
    }
    
    /// <summary>	
    /// <p>Identifies the texture resource for a video  decoder output view.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_VDOV']/*"/>	
    /// <msdn-id>hh447633</msdn-id>	
    /// <unmanaged>D3D11_TEX2D_VDOV</unmanaged>	
    /// <unmanaged-short>D3D11_TEX2D_VDOV</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct Texture2DVdov {	
        
        /// <summary>	
        /// <dd> <p>The zero-based index of the texture.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_VDOV::ArraySlice']/*"/>	
        /// <msdn-id>hh447633</msdn-id>	
        /// <unmanaged>unsigned int ArraySlice</unmanaged>	
        /// <unmanaged-short>unsigned int ArraySlice</unmanaged-short>	
        public int ArraySlice;
    }
    
    /// <summary>	
    /// <p>Identifies the texture resource for a video  processor input view.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_VPIV']/*"/>	
    /// <msdn-id>hh447634</msdn-id>	
    /// <unmanaged>D3D11_TEX2D_VPIV</unmanaged>	
    /// <unmanaged-short>D3D11_TEX2D_VPIV</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct Texture2DVpiv {	
        
        /// <summary>	
        /// <dd> <p>The zero-based index into the array of subtextures.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_VPIV::MipSlice']/*"/>	
        /// <msdn-id>hh447634</msdn-id>	
        /// <unmanaged>unsigned int MipSlice</unmanaged>	
        /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
        public int MipSlice;
        
        /// <summary>	
        /// <dd> <p>The zero-based index of the texture.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_VPIV::ArraySlice']/*"/>	
        /// <msdn-id>hh447634</msdn-id>	
        /// <unmanaged>unsigned int ArraySlice</unmanaged>	
        /// <unmanaged-short>unsigned int ArraySlice</unmanaged-short>	
        public int ArraySlice;
    }
    
    /// <summary>	
    /// <p>Identifies a texture resource for a video  processor output view.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_VPOV']/*"/>	
    /// <msdn-id>hh447635</msdn-id>	
    /// <unmanaged>D3D11_TEX2D_VPOV</unmanaged>	
    /// <unmanaged-short>D3D11_TEX2D_VPOV</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct Texture2DVpov {	
        
        /// <summary>	
        /// <dd> <p>The zero-based index into the array of subtextures.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_VPOV::MipSlice']/*"/>	
        /// <msdn-id>hh447635</msdn-id>	
        /// <unmanaged>unsigned int MipSlice</unmanaged>	
        /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
        public int MipSlice;
    }
    
    /// <summary>	
    /// <p>Describes a 3D texture.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This structure is used in a call to <strong><see cref="SharpDX.Direct3D11.Device.CreateTexture3D"/></strong>.</p><p>In addition to this structure, you can also use the <strong>CD3D11_TEXTURE3D_DESC</strong> derived structure, which is defined  in D3D11.h and behaves like an inherited class, to help create a texture description.</p><p>The device restricts the size of subsampled, block compressed, and bit format resources to be multiples of sizes specific to each format.</p><p>The texture size range is determined by the feature level at which you create the device and not the Microsoft Direct3D interface version. For example, if you use Microsoft Direct3D?10 hardware at feature level 10 (<strong><see cref="SharpDX.Direct3D.FeatureLevel.Level_10_0"/></strong>) and call <strong><see cref="SharpDX.Direct3D11.D3D11.CreateDevice"/></strong> to create an <strong><see cref="SharpDX.Direct3D11.Device"/></strong>, you must constrain the maximum texture size to D3D10_REQ_TEXTURE3D_U_V_OR_W_DIMENSION (2048) when you create your 3D texture.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE3D_DESC']/*"/>	
    /// <msdn-id>ff476254</msdn-id>	
    /// <unmanaged>D3D11_TEXTURE3D_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_TEXTURE3D_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct Texture3DDescription {	
        
        /// <summary>	
        /// <dd> <p>Texture width (in texels). The  range is from 1 to <see cref="SharpDX.Direct3D11.Resource.MaximumTexture3DSize"/> (2048). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE3D_DESC::Width']/*"/>	
        /// <msdn-id>ff476254</msdn-id>	
        /// <unmanaged>unsigned int Width</unmanaged>	
        /// <unmanaged-short>unsigned int Width</unmanaged-short>	
        public int Width;
        
        /// <summary>	
        /// <dd> <p>Texture height (in texels). The  range is from 1 to <see cref="SharpDX.Direct3D11.Resource.MaximumTexture3DSize"/> (2048). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE3D_DESC::Height']/*"/>	
        /// <msdn-id>ff476254</msdn-id>	
        /// <unmanaged>unsigned int Height</unmanaged>	
        /// <unmanaged-short>unsigned int Height</unmanaged-short>	
        public int Height;
        
        /// <summary>	
        /// <dd> <p>Texture depth (in texels). The  range is from 1 to <see cref="SharpDX.Direct3D11.Resource.MaximumTexture3DSize"/> (2048). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE3D_DESC::Depth']/*"/>	
        /// <msdn-id>ff476254</msdn-id>	
        /// <unmanaged>unsigned int Depth</unmanaged>	
        /// <unmanaged-short>unsigned int Depth</unmanaged-short>	
        public int Depth;
        
        /// <summary>	
        /// <dd> <p>The maximum number of mipmap levels in the texture. See the remarks in <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/></strong>. Use 1 for a multisampled texture; or 0 to generate a full set of subtextures.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE3D_DESC::MipLevels']/*"/>	
        /// <msdn-id>ff476254</msdn-id>	
        /// <unmanaged>unsigned int MipLevels</unmanaged>	
        /// <unmanaged-short>unsigned int MipLevels</unmanaged-short>	
        public int MipLevels;
        
        /// <summary>	
        /// <dd> <p>Texture format (see <strong><see cref="SharpDX.DXGI.Format"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE3D_DESC::Format']/*"/>	
        /// <msdn-id>ff476254</msdn-id>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        public SharpDX.DXGI.Format Format;
        
        /// <summary>	
        /// <dd> <p>Value that identifies how the texture is to be read from and written to. The most common value is <see cref="SharpDX.Direct3D11.ResourceUsage.Default"/>; see <strong><see cref="SharpDX.Direct3D11.ResourceUsage"/></strong> for all possible values.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE3D_DESC::Usage']/*"/>	
        /// <msdn-id>ff476254</msdn-id>	
        /// <unmanaged>D3D11_USAGE Usage</unmanaged>	
        /// <unmanaged-short>D3D11_USAGE Usage</unmanaged-short>	
        public SharpDX.Direct3D11.ResourceUsage Usage;
        
        /// <summary>	
        /// <dd> <p>Flags (see <strong><see cref="SharpDX.Direct3D11.BindFlags"/></strong>) for binding to pipeline stages. The flags can be combined by a logical OR.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE3D_DESC::BindFlags']/*"/>	
        /// <msdn-id>ff476254</msdn-id>	
        /// <unmanaged>D3D11_BIND_FLAG BindFlags</unmanaged>	
        /// <unmanaged-short>D3D11_BIND_FLAG BindFlags</unmanaged-short>	
        public SharpDX.Direct3D11.BindFlags BindFlags;
        
        /// <summary>	
        /// <dd> <p>Flags (see <strong><see cref="SharpDX.Direct3D11.CpuAccessFlags"/></strong>) to specify the types of CPU access allowed. Use 0 if CPU access is not required. These flags can be combined with a logical OR.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE3D_DESC::CPUAccessFlags']/*"/>	
        /// <msdn-id>ff476254</msdn-id>	
        /// <unmanaged>D3D11_CPU_ACCESS_FLAG CPUAccessFlags</unmanaged>	
        /// <unmanaged-short>D3D11_CPU_ACCESS_FLAG CPUAccessFlags</unmanaged-short>	
        public SharpDX.Direct3D11.CpuAccessFlags CpuAccessFlags;
        
        /// <summary>	
        /// <dd> <p>Flags (see <strong><see cref="SharpDX.Direct3D11.ResourceOptionFlags"/></strong>) that identify other, less common resource options. Use 0 if none of these flags apply. These flags can be combined with a logical OR.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE3D_DESC::MiscFlags']/*"/>	
        /// <msdn-id>ff476254</msdn-id>	
        /// <unmanaged>D3D11_RESOURCE_MISC_FLAG MiscFlags</unmanaged>	
        /// <unmanaged-short>D3D11_RESOURCE_MISC_FLAG MiscFlags</unmanaged-short>	
        public SharpDX.Direct3D11.ResourceOptionFlags OptionFlags;
    }
    
    /// <summary>	
    /// <p>Describes a 2D texture.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This structure is used in a call to <strong><see cref="SharpDX.Direct3D11.Device.CreateTexture2D"/></strong>.</p><p>In addition to this structure, you can also use the <strong>CD3D11_TEXTURE2D_DESC</strong> derived structure, which is defined  in D3D11.h and behaves like an inherited class, to help create a texture description.</p><p>The device places some size restrictions (must be multiples of a minimum size) for a subsampled, block compressed, or bit-format resource.</p><p>The texture size range is determined by the feature level at which you create the device and not the Microsoft Direct3D interface version. For example, if you use Microsoft Direct3D?10 hardware at feature level 10 (<strong><see cref="SharpDX.Direct3D.FeatureLevel.Level_10_0"/></strong>) and call <strong><see cref="SharpDX.Direct3D11.D3D11.CreateDevice"/></strong> to create an <strong><see cref="SharpDX.Direct3D11.Device"/></strong>, you must constrain the maximum texture size to D3D10_REQ_TEXTURE2D_U_OR_V_DIMENSION (8192) when you create your 2D texture.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE3D_DESC1']/*"/>	
    /// <msdn-id>ff476253</msdn-id>	
    /// <unmanaged>D3D11_TEXTURE3D_DESC1</unmanaged>	
    /// <unmanaged-short>D3D11_TEXTURE3D_DESC1</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct Texture3DDescription1 {	
        
        /// <summary>	
        /// <dd> <p>Texture width (in texels). The  range is from 1 to <see cref="SharpDX.Direct3D11.Resource.MaximumTexture2DSize"/> (16384). For a texture cube-map, the  range is from 1 to <see cref="SharpDX.Direct3D11.Resource.MaximumTextureCubeSize"/> (16384). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE3D_DESC1::Width']/*"/>	
        /// <msdn-id>ff476253</msdn-id>	
        /// <unmanaged>unsigned int Width</unmanaged>	
        /// <unmanaged-short>unsigned int Width</unmanaged-short>	
        public int Width;
        
        /// <summary>	
        /// <dd> <p>Texture height (in texels). The  range is from 1 to <see cref="SharpDX.Direct3D11.Resource.MaximumTexture2DSize"/> (16384). For a texture cube-map, the  range is from 1 to <see cref="SharpDX.Direct3D11.Resource.MaximumTextureCubeSize"/> (16384). However, the range is actually constrained by the feature level at which you create the rendering device. For more information about restrictions, see Remarks.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE3D_DESC1::Height']/*"/>	
        /// <msdn-id>ff476253</msdn-id>	
        /// <unmanaged>unsigned int Height</unmanaged>	
        /// <unmanaged-short>unsigned int Height</unmanaged-short>	
        public int Height;
        
        /// <summary>	
        /// <dd> <p>The maximum number of mipmap levels in the texture. See the remarks in <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/></strong>. Use 1 for a multisampled texture; or 0 to generate a full set of subtextures.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE3D_DESC1::Depth']/*"/>	
        /// <msdn-id>ff476253</msdn-id>	
        /// <unmanaged>unsigned int Depth</unmanaged>	
        /// <unmanaged-short>unsigned int Depth</unmanaged-short>	
        public int Depth;
        
        /// <summary>	
        /// <dd> <p>The maximum number of mipmap levels in the texture. See the remarks in <strong><see cref="SharpDX.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/></strong>. Use 1 for a multisampled texture; or 0 to generate a full set of subtextures.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE3D_DESC1::MipLevels']/*"/>	
        /// <msdn-id>ff476253</msdn-id>	
        /// <unmanaged>unsigned int MipLevels</unmanaged>	
        /// <unmanaged-short>unsigned int MipLevels</unmanaged-short>	
        public int MipLevels;
        
        /// <summary>	
        /// <dd> <p>Texture format (see <strong><see cref="SharpDX.DXGI.Format"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE3D_DESC1::Format']/*"/>	
        /// <msdn-id>ff476253</msdn-id>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        public SharpDX.DXGI.Format Format;
        
        /// <summary>	
        /// <dd> <p>Value that identifies how the texture is to be read from and written to. The most common value is <see cref="SharpDX.Direct3D11.ResourceUsage.Default"/>; see <strong><see cref="SharpDX.Direct3D11.ResourceUsage"/></strong> for all possible values.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE3D_DESC1::Usage']/*"/>	
        /// <msdn-id>ff476253</msdn-id>	
        /// <unmanaged>D3D11_USAGE Usage</unmanaged>	
        /// <unmanaged-short>D3D11_USAGE Usage</unmanaged-short>	
        public SharpDX.Direct3D11.ResourceUsage Usage;
        
        /// <summary>	
        /// <dd> <p>Flags (see <strong><see cref="SharpDX.Direct3D11.BindFlags"/></strong>) for binding to pipeline stages. The flags can be combined by a logical OR.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE3D_DESC1::BindFlags']/*"/>	
        /// <msdn-id>ff476253</msdn-id>	
        /// <unmanaged>D3D11_BIND_FLAG BindFlags</unmanaged>	
        /// <unmanaged-short>D3D11_BIND_FLAG BindFlags</unmanaged-short>	
        public SharpDX.Direct3D11.BindFlags BindFlags;
        
        /// <summary>	
        /// <dd> <p>Flags (see <strong><see cref="SharpDX.Direct3D11.CpuAccessFlags"/></strong>) to specify the types of CPU access allowed. Use 0 if CPU access is not required. These flags can be combined with a logical OR.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE3D_DESC1::CPUAccessFlags']/*"/>	
        /// <msdn-id>ff476253</msdn-id>	
        /// <unmanaged>D3D11_CPU_ACCESS_FLAG CPUAccessFlags</unmanaged>	
        /// <unmanaged-short>D3D11_CPU_ACCESS_FLAG CPUAccessFlags</unmanaged-short>	
        public SharpDX.Direct3D11.CpuAccessFlags CpuAccessFlags;
        
        /// <summary>	
        /// <dd> <p>Flags (see <strong><see cref="SharpDX.Direct3D11.ResourceOptionFlags"/></strong>) that identify other, less common resource options. Use 0 if none of these flags apply. These flags can be combined by using a logical OR. For a texture cube-map, set the <strong><see cref="SharpDX.Direct3D11.ResourceOptionFlags.TextureCube"/></strong> flag. Cube-map arrays (that is, <strong>ArraySize</strong> &gt; 6) require feature level <strong><see cref="SharpDX.Direct3D.FeatureLevel.Level_10_1"/></strong> or higher.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE3D_DESC1::MiscFlags']/*"/>	
        /// <msdn-id>ff476253</msdn-id>	
        /// <unmanaged>D3D11_RESOURCE_MISC_FLAG MiscFlags</unmanaged>	
        /// <unmanaged-short>D3D11_RESOURCE_MISC_FLAG MiscFlags</unmanaged-short>	
        public SharpDX.Direct3D11.ResourceOptionFlags OptionFlags;
        
        /// <summary>	
        /// <dd> <p>Flags (see <strong><see cref="SharpDX.Direct3D11.ResourceOptionFlags"/></strong>) that identify other, less common resource options. Use 0 if none of these flags apply. These flags can be combined by using a logical OR. For a texture cube-map, set the <strong><see cref="SharpDX.Direct3D11.ResourceOptionFlags.TextureCube"/></strong> flag. Cube-map arrays (that is, <strong>ArraySize</strong> &gt; 6) require feature level <strong><see cref="SharpDX.Direct3D.FeatureLevel.Level_10_1"/></strong> or higher.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEXTURE3D_DESC1::TextureLayout']/*"/>	
        /// <msdn-id>ff476253</msdn-id>	
        /// <unmanaged>D3D11_TEXTURE_LAYOUT TextureLayout</unmanaged>	
        /// <unmanaged-short>D3D11_TEXTURE_LAYOUT TextureLayout</unmanaged-short>	
        public SharpDX.Direct3D11.TextureLayout TextureLayout;
    }
    
    /// <summary>	
    /// <p>Describes the coordinates of a tiled resource.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TILED_RESOURCE_COORDINATE']/*"/>	
    /// <msdn-id>dn280437</msdn-id>	
    /// <unmanaged>D3D11_TILED_RESOURCE_COORDINATE</unmanaged>	
    /// <unmanaged-short>D3D11_TILED_RESOURCE_COORDINATE</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct TiledResourceCoordinate {	
        
        /// <summary>	
        /// <dd> <p>The x position of a tiled resource. Used for buffer and 1D, 2D, and 3D textures.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TILED_RESOURCE_COORDINATE::X']/*"/>	
        /// <msdn-id>dn280437</msdn-id>	
        /// <unmanaged>unsigned int X</unmanaged>	
        /// <unmanaged-short>unsigned int X</unmanaged-short>	
        public int X;
        
        /// <summary>	
        /// <dd> <p>The y position of a tiled resource. Used for 2D and 3D textures.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TILED_RESOURCE_COORDINATE::Y']/*"/>	
        /// <msdn-id>dn280437</msdn-id>	
        /// <unmanaged>unsigned int Y</unmanaged>	
        /// <unmanaged-short>unsigned int Y</unmanaged-short>	
        public int Y;
        
        /// <summary>	
        /// <dd> <p>The z position of a tiled resource. Used for 3D textures.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TILED_RESOURCE_COORDINATE::Z']/*"/>	
        /// <msdn-id>dn280437</msdn-id>	
        /// <unmanaged>unsigned int Z</unmanaged>	
        /// <unmanaged-short>unsigned int Z</unmanaged-short>	
        public int Z;
        
        /// <summary>	
        /// <dd> <p>A subresource index value into mipmaps and arrays. Used for 1D, 2D, and 3D textures. </p> <p>For mipmaps that use nonstandard tiling, or are packed, or both use nonstandard tiling and are packed, any subresource value that indicates any of the packed mipmaps all refer to the same tile.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TILED_RESOURCE_COORDINATE::Subresource']/*"/>	
        /// <msdn-id>dn280437</msdn-id>	
        /// <unmanaged>unsigned int Subresource</unmanaged>	
        /// <unmanaged-short>unsigned int Subresource</unmanaged-short>	
        public int Subresource;
    }
    
    /// <summary>	
    /// <p>Describes the size of a tiled region.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TILE_REGION_SIZE']/*"/>	
    /// <msdn-id>dn280442</msdn-id>	
    /// <unmanaged>D3D11_TILE_REGION_SIZE</unmanaged>	
    /// <unmanaged-short>D3D11_TILE_REGION_SIZE</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct TileRegionSize {	
        
        /// <summary>	
        /// <dd> <p>The number of tiles in the tiled region.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TILE_REGION_SIZE::NumTiles']/*"/>	
        /// <msdn-id>dn280442</msdn-id>	
        /// <unmanaged>unsigned int NumTiles</unmanaged>	
        /// <unmanaged-short>unsigned int NumTiles</unmanaged-short>	
        public int TileCount;
        
        /// <summary>	
        /// <dd> <p>Specifies whether the runtime uses the <strong>Width</strong>, <strong>Height</strong>, and <strong>Depth</strong> members to define the region. </p> <p>If <strong>TRUE</strong>, the runtime uses the <strong>Width</strong>, <strong>Height</strong>, and <strong>Depth</strong> members to define the region. </p> <p>If <strong><see cref="SharpDX.Result.False"/></strong>, the runtime ignores the <strong>Width</strong>, <strong>Height</strong>, and <strong>Depth</strong> members and uses the <strong>NumTiles</strong> member to traverse tiles in the resource linearly across x, then y, then z (as applicable) and then spills over mipmaps/arrays in subresource order.  For example, use this technique to map an entire resource at once.</p> <p>Regardless of whether you specify <strong>TRUE</strong> or <strong><see cref="SharpDX.Result.False"/></strong> for <strong>bUseBox</strong>, you use a <strong><see cref="SharpDX.Direct3D11.TiledResourceCoordinate"/></strong> structure to specify the starting location for the region within the resource as a separate parameter outside of this structure by using x, y, and z coordinates. </p> <p>When the region includes mipmaps that are packed with nonstandard tiling, <strong>bUseBox</strong> must be <strong><see cref="SharpDX.Result.False"/></strong> because tile dimensions are not standard and the app only knows a count of how many tiles are consumed by the packed area, which is per array slice.  The corresponding (separate) starting location parameter uses x to offset into the flat range of tiles in this case, and y and z coordinates must each be 0.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TILE_REGION_SIZE::bUseBox']/*"/>	
        /// <msdn-id>dn280442</msdn-id>	
        /// <unmanaged>BOOL bUseBox</unmanaged>	
        /// <unmanaged-short>BOOL bUseBox</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool BUseBox;
        
        /// <summary>	
        /// <dd> <p>The width of the tiled region, in tiles. Used for buffer and 1D, 2D, and 3D textures. For more info, see Tile and toast image sizes.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TILE_REGION_SIZE::Width']/*"/>	
        /// <msdn-id>dn280442</msdn-id>	
        /// <unmanaged>unsigned int Width</unmanaged>	
        /// <unmanaged-short>unsigned int Width</unmanaged-short>	
        public int Width;
        
        /// <summary>	
        /// <dd> <p>The height of the tiled region, in tiles. Used for 2D and 3D textures. For more info, see Tile and toast image sizes.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TILE_REGION_SIZE::Height']/*"/>	
        /// <msdn-id>dn280442</msdn-id>	
        /// <unmanaged>unsigned short Height</unmanaged>	
        /// <unmanaged-short>unsigned short Height</unmanaged-short>	
        public short Height;
        
        /// <summary>	
        /// <dd> <p>The depth of the tiled region, in tiles. Used for 3D textures or arrays. For arrays, used for advancing in depth jumps to next slice of same mipmap size, which isn't contiguous in the subresource counting space if there are multiple mipmaps.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TILE_REGION_SIZE::Depth']/*"/>	
        /// <msdn-id>dn280442</msdn-id>	
        /// <unmanaged>unsigned short Depth</unmanaged>	
        /// <unmanaged-short>unsigned short Depth</unmanaged-short>	
        public short Depth;
    }
    
    /// <summary>	
    /// <p>Describes the shape of a tile by specifying its dimensions.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Texels are equivalent to pixels.  For untyped buffer resources, a texel is just a byte. For multisample antialiasing (MSAA) surfaces, the numbers are still in terms of pixels/texels.	
    /// The values here are independent of the surface dimensions.  Even if the surface is smaller than what would fit in a tile, the full tile dimensions are reported here.	
    /// </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TILE_SHAPE']/*"/>	
    /// <msdn-id>dn280443</msdn-id>	
    /// <unmanaged>D3D11_TILE_SHAPE</unmanaged>	
    /// <unmanaged-short>D3D11_TILE_SHAPE</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct TileShape {	
        
        /// <summary>	
        /// <dd> <p>The width in texels of the tile.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TILE_SHAPE::WidthInTexels']/*"/>	
        /// <msdn-id>dn280443</msdn-id>	
        /// <unmanaged>unsigned int WidthInTexels</unmanaged>	
        /// <unmanaged-short>unsigned int WidthInTexels</unmanaged-short>	
        public int WidthInTexels;
        
        /// <summary>	
        /// <dd> <p>The height in texels of the tile.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TILE_SHAPE::HeightInTexels']/*"/>	
        /// <msdn-id>dn280443</msdn-id>	
        /// <unmanaged>unsigned int HeightInTexels</unmanaged>	
        /// <unmanaged-short>unsigned int HeightInTexels</unmanaged-short>	
        public int HeightInTexels;
        
        /// <summary>	
        /// <dd> <p>The depth in texels of the tile.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TILE_SHAPE::DepthInTexels']/*"/>	
        /// <msdn-id>dn280443</msdn-id>	
        /// <unmanaged>unsigned int DepthInTexels</unmanaged>	
        /// <unmanaged-short>unsigned int DepthInTexels</unmanaged-short>	
        public int DepthInTexels;
    }
    
    /// <summary>	
    /// <p>Specifies the subresources from a resource that are accessible using an unordered-access view.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>An unordered-access-view description is passed into <strong><see cref="SharpDX.Direct3D11.Device.CreateUnorderedAccessView"/></strong> to create a view.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_UNORDERED_ACCESS_VIEW_DESC']/*"/>	
    /// <msdn-id>ff476258</msdn-id>	
    /// <unmanaged>D3D11_UNORDERED_ACCESS_VIEW_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_UNORDERED_ACCESS_VIEW_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Explicit)]
    public  partial struct UnorderedAccessViewDescription {	
        
        /// <summary>	
        /// <p>Describes a unordered-access 1D texture resource.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is used by a <strong><see cref="SharpDX.Direct3D11.UnorderedAccessViewDescription"/></strong>.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX1D_UAV']/*"/>	
        /// <msdn-id>ff476232</msdn-id>	
        /// <unmanaged>D3D11_TEX1D_UAV</unmanaged>	
        /// <unmanaged-short>D3D11_TEX1D_UAV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture1DResource {	
            
            /// <summary>	
            /// <dd> <p>The mipmap slice index.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX1D_UAV::MipSlice']/*"/>	
            /// <msdn-id>ff476232</msdn-id>	
            /// <unmanaged>unsigned int MipSlice</unmanaged>	
            /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
            public int MipSlice;
        }
        
        /// <summary>	
        /// <p>Describes the elements in a buffer to use in a unordered-access view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is used by a <strong><see cref="SharpDX.Direct3D11.UnorderedAccessViewDescription"/></strong>.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BUFFER_UAV']/*"/>	
        /// <msdn-id>ff476095</msdn-id>	
        /// <unmanaged>D3D11_BUFFER_UAV</unmanaged>	
        /// <unmanaged-short>D3D11_BUFFER_UAV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct BufferResource {	
            
            /// <summary>	
            /// <dd> <p>The zero-based index of the first element to be accessed.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BUFFER_UAV::FirstElement']/*"/>	
            /// <msdn-id>ff476095</msdn-id>	
            /// <unmanaged>unsigned int FirstElement</unmanaged>	
            /// <unmanaged-short>unsigned int FirstElement</unmanaged-short>	
            public int FirstElement;
            
            /// <summary>	
            /// <dd> <p>The number of elements in the resource. For structured buffers, this is the number of structures in the buffer.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BUFFER_UAV::NumElements']/*"/>	
            /// <msdn-id>ff476095</msdn-id>	
            /// <unmanaged>unsigned int NumElements</unmanaged>	
            /// <unmanaged-short>unsigned int NumElements</unmanaged-short>	
            public int ElementCount;
            
            /// <summary>	
            /// <dd> <p>View options for the resource (see <strong><see cref="SharpDX.Direct3D11.UnorderedAccessViewBufferFlags"/></strong>).</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_BUFFER_UAV::Flags']/*"/>	
            /// <msdn-id>ff476095</msdn-id>	
            /// <unmanaged>D3D11_BUFFER_UAV_FLAG Flags</unmanaged>	
            /// <unmanaged-short>D3D11_BUFFER_UAV_FLAG Flags</unmanaged-short>	
            public SharpDX.Direct3D11.UnorderedAccessViewBufferFlags Flags;
        }
        
        /// <summary>	
        /// <p>Describes an array of unordered-access 1D texture resources.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is used by a <strong><see cref="SharpDX.Direct3D11.UnorderedAccessViewDescription"/></strong>.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX1D_ARRAY_UAV']/*"/>	
        /// <msdn-id>ff476228</msdn-id>	
        /// <unmanaged>D3D11_TEX1D_ARRAY_UAV</unmanaged>	
        /// <unmanaged-short>D3D11_TEX1D_ARRAY_UAV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture1DArrayResource {	
            
            /// <summary>	
            /// <dd> <p>The mipmap slice index.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX1D_ARRAY_UAV::MipSlice']/*"/>	
            /// <msdn-id>ff476228</msdn-id>	
            /// <unmanaged>unsigned int MipSlice</unmanaged>	
            /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
            public int MipSlice;
            
            /// <summary>	
            /// <dd> <p>The zero-based index of the first array slice to be accessed.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX1D_ARRAY_UAV::FirstArraySlice']/*"/>	
            /// <msdn-id>ff476228</msdn-id>	
            /// <unmanaged>unsigned int FirstArraySlice</unmanaged>	
            /// <unmanaged-short>unsigned int FirstArraySlice</unmanaged-short>	
            public int FirstArraySlice;
            
            /// <summary>	
            /// <dd> <p>The number of slices in the array.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX1D_ARRAY_UAV::ArraySize']/*"/>	
            /// <msdn-id>ff476228</msdn-id>	
            /// <unmanaged>unsigned int ArraySize</unmanaged>	
            /// <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
            public int ArraySize;
        }
        
        /// <summary>	
        /// <p>Describes a unordered-access 2D texture resource.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is used by a <strong><see cref="SharpDX.Direct3D11.UnorderedAccessViewDescription"/></strong>.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_UAV']/*"/>	
        /// <msdn-id>ff476246</msdn-id>	
        /// <unmanaged>D3D11_TEX2D_UAV</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2D_UAV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DResource {	
            
            /// <summary>	
            /// <dd> <p>The mipmap slice index.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_UAV::MipSlice']/*"/>	
            /// <msdn-id>ff476246</msdn-id>	
            /// <unmanaged>unsigned int MipSlice</unmanaged>	
            /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
            public int MipSlice;
        }
        
        /// <summary>	
        /// <p>Describes a unordered-access 3D texture resource.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is used by a <strong><see cref="SharpDX.Direct3D11.UnorderedAccessViewDescription"/></strong>.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX3D_UAV']/*"/>	
        /// <msdn-id>ff476249</msdn-id>	
        /// <unmanaged>D3D11_TEX3D_UAV</unmanaged>	
        /// <unmanaged-short>D3D11_TEX3D_UAV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture3DResource {	
            
            /// <summary>	
            /// <dd> <p>The mipmap slice index.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX3D_UAV::MipSlice']/*"/>	
            /// <msdn-id>ff476249</msdn-id>	
            /// <unmanaged>unsigned int MipSlice</unmanaged>	
            /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
            public int MipSlice;
            
            /// <summary>	
            /// <dd> <p>The zero-based index of the first depth slice to be accessed.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX3D_UAV::FirstWSlice']/*"/>	
            /// <msdn-id>ff476249</msdn-id>	
            /// <unmanaged>unsigned int FirstWSlice</unmanaged>	
            /// <unmanaged-short>unsigned int FirstWSlice</unmanaged-short>	
            public int FirstWSlice;
            
            /// <summary>	
            /// <dd> <p>The number of depth slices.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX3D_UAV::WSize']/*"/>	
            /// <msdn-id>ff476249</msdn-id>	
            /// <unmanaged>unsigned int WSize</unmanaged>	
            /// <unmanaged-short>unsigned int WSize</unmanaged-short>	
            public int WSize;
        }
        
        /// <summary>	
        /// <p>Describes an array of unordered-access 2D texture resources.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is used by a <strong><see cref="SharpDX.Direct3D11.UnorderedAccessViewDescription"/></strong>.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_UAV']/*"/>	
        /// <msdn-id>ff476242</msdn-id>	
        /// <unmanaged>D3D11_TEX2D_ARRAY_UAV</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2D_ARRAY_UAV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DArrayResource {	
            
            /// <summary>	
            /// <dd> <p>The mipmap slice index.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_UAV::MipSlice']/*"/>	
            /// <msdn-id>ff476242</msdn-id>	
            /// <unmanaged>unsigned int MipSlice</unmanaged>	
            /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
            public int MipSlice;
            
            /// <summary>	
            /// <dd> <p>The zero-based index of the first array slice to be accessed.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_UAV::FirstArraySlice']/*"/>	
            /// <msdn-id>ff476242</msdn-id>	
            /// <unmanaged>unsigned int FirstArraySlice</unmanaged>	
            /// <unmanaged-short>unsigned int FirstArraySlice</unmanaged-short>	
            public int FirstArraySlice;
            
            /// <summary>	
            /// <dd> <p>The number of slices in the array.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_UAV::ArraySize']/*"/>	
            /// <msdn-id>ff476242</msdn-id>	
            /// <unmanaged>unsigned int ArraySize</unmanaged>	
            /// <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
            public int ArraySize;
        }
        
        /// <summary>	
        /// <dd> <p>The data format (see <strong><see cref="SharpDX.DXGI.Format"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_UNORDERED_ACCESS_VIEW_DESC::Format']/*"/>	
        /// <msdn-id>ff476258</msdn-id>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        [FieldOffset(0)]
        public SharpDX.DXGI.Format Format;
        
        /// <summary>	
        /// <dd> <p>The resource type (see <strong><see cref="SharpDX.Direct3D11.UnorderedAccessViewDimension"/></strong>), which specifies how the resource will be accessed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_UNORDERED_ACCESS_VIEW_DESC::ViewDimension']/*"/>	
        /// <msdn-id>ff476258</msdn-id>	
        /// <unmanaged>D3D11_UAV_DIMENSION ViewDimension</unmanaged>	
        /// <unmanaged-short>D3D11_UAV_DIMENSION ViewDimension</unmanaged-short>	
        [FieldOffset(4)]
        public SharpDX.Direct3D11.UnorderedAccessViewDimension Dimension;
        
        /// <summary>	
        /// <dd> <p>Specifies which buffer elements can be accessed (see <strong><see cref="SharpDX.Direct3D11.UnorderedAccessViewDescription.BufferResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_UNORDERED_ACCESS_VIEW_DESC::Buffer']/*"/>	
        /// <msdn-id>ff476258</msdn-id>	
        /// <unmanaged>D3D11_BUFFER_UAV Buffer</unmanaged>	
        /// <unmanaged-short>D3D11_BUFFER_UAV Buffer</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.UnorderedAccessViewDescription.BufferResource Buffer;
        
        /// <summary>	
        /// <dd> <p>Specifies the subresources in a 1D texture that can be accessed (see <strong><see cref="SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture1DResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_UNORDERED_ACCESS_VIEW_DESC::Texture1D']/*"/>	
        /// <msdn-id>ff476258</msdn-id>	
        /// <unmanaged>D3D11_TEX1D_UAV Texture1D</unmanaged>	
        /// <unmanaged-short>D3D11_TEX1D_UAV Texture1D</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture1DResource Texture1D;
        
        /// <summary>	
        /// <dd> <p>Specifies the subresources in a 1D texture array that can be accessed (see <strong><see cref="SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture1DArrayResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_UNORDERED_ACCESS_VIEW_DESC::Texture1DArray']/*"/>	
        /// <msdn-id>ff476258</msdn-id>	
        /// <unmanaged>D3D11_TEX1D_ARRAY_UAV Texture1DArray</unmanaged>	
        /// <unmanaged-short>D3D11_TEX1D_ARRAY_UAV Texture1DArray</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture1DArrayResource Texture1DArray;
        
        /// <summary>	
        /// <dd> <p>Specifies the subresources in a 2D texture that can be accessed (see <strong><see cref="SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture2DResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_UNORDERED_ACCESS_VIEW_DESC::Texture2D']/*"/>	
        /// <msdn-id>ff476258</msdn-id>	
        /// <unmanaged>D3D11_TEX2D_UAV Texture2D</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2D_UAV Texture2D</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture2DResource Texture2D;
        
        /// <summary>	
        /// <dd> <p>Specifies the subresources in a 2D texture array that can be accessed (see <strong><see cref="SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture2DArrayResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_UNORDERED_ACCESS_VIEW_DESC::Texture2DArray']/*"/>	
        /// <msdn-id>ff476258</msdn-id>	
        /// <unmanaged>D3D11_TEX2D_ARRAY_UAV Texture2DArray</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2D_ARRAY_UAV Texture2DArray</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture2DArrayResource Texture2DArray;
        
        /// <summary>	
        /// <dd> <p>Specifies subresources in a 3D texture that can be accessed (see <strong><see cref="SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture3DResource"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_UNORDERED_ACCESS_VIEW_DESC::Texture3D']/*"/>	
        /// <msdn-id>ff476258</msdn-id>	
        /// <unmanaged>D3D11_TEX3D_UAV Texture3D</unmanaged>	
        /// <unmanaged-short>D3D11_TEX3D_UAV Texture3D</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture3DResource Texture3D;
    }
    
    /// <summary>	
    /// <p>Describes the subresources from a resource that are accessible using an unordered-access view.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>An unordered-access-view description is passed into <strong><see cref="SharpDX.Direct3D11.Device3.CreateUnorderedAccessView1"/></strong> to create a view.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_UNORDERED_ACCESS_VIEW_DESC1']/*"/>	
    /// <msdn-id>dn899203</msdn-id>	
    /// <unmanaged>D3D11_UNORDERED_ACCESS_VIEW_DESC1</unmanaged>	
    /// <unmanaged-short>D3D11_UNORDERED_ACCESS_VIEW_DESC1</unmanaged-short>	
    [StructLayout(LayoutKind.Explicit)]
    public  partial struct UnorderedAccessViewDescription1 {	
        
        /// <summary>	
        /// <p>Describes a unordered-access 2D texture resource.</p>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_UAV1']/*"/>	
        /// <msdn-id>dn899165</msdn-id>	
        /// <unmanaged>D3D11_TEX2D_UAV1</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2D_UAV1</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DResource {	
            
            /// <summary>	
            /// <dd> <p>The mipmap slice index.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_UAV1::MipSlice']/*"/>	
            /// <msdn-id>dn899165</msdn-id>	
            /// <unmanaged>unsigned int MipSlice</unmanaged>	
            /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
            public int MipSlice;
            
            /// <summary>	
            /// <dd> <p>The index (plane slice number) of the plane to use in the texture.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_UAV1::PlaneSlice']/*"/>	
            /// <msdn-id>dn899165</msdn-id>	
            /// <unmanaged>unsigned int PlaneSlice</unmanaged>	
            /// <unmanaged-short>unsigned int PlaneSlice</unmanaged-short>	
            public int PlaneSlice;
        }
        
        /// <summary>	
        /// <p>Describes an array of unordered-access 2D texture resources.</p>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_UAV1']/*"/>	
        /// <msdn-id>dn899162</msdn-id>	
        /// <unmanaged>D3D11_TEX2D_ARRAY_UAV1</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2D_ARRAY_UAV1</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DArrayResource {	
            
            /// <summary>	
            /// <dd> <p>The mipmap slice index.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_UAV1::MipSlice']/*"/>	
            /// <msdn-id>dn899162</msdn-id>	
            /// <unmanaged>unsigned int MipSlice</unmanaged>	
            /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
            public int MipSlice;
            
            /// <summary>	
            /// <dd> <p>The zero-based index of the first array slice to be accessed.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_UAV1::FirstArraySlice']/*"/>	
            /// <msdn-id>dn899162</msdn-id>	
            /// <unmanaged>unsigned int FirstArraySlice</unmanaged>	
            /// <unmanaged-short>unsigned int FirstArraySlice</unmanaged-short>	
            public int FirstArraySlice;
            
            /// <summary>	
            /// <dd> <p>The number of slices in the array.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_UAV1::ArraySize']/*"/>	
            /// <msdn-id>dn899162</msdn-id>	
            /// <unmanaged>unsigned int ArraySize</unmanaged>	
            /// <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
            public int ArraySize;
            
            /// <summary>	
            /// <dd> <p>The index (plane slice number) of the plane to use in an array of textures.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_TEX2D_ARRAY_UAV1::PlaneSlice']/*"/>	
            /// <msdn-id>dn899162</msdn-id>	
            /// <unmanaged>unsigned int PlaneSlice</unmanaged>	
            /// <unmanaged-short>unsigned int PlaneSlice</unmanaged-short>	
            public int PlaneSlice;
        }
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.DXGI.Format"/></strong>-typed value that specifies the data format.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_UNORDERED_ACCESS_VIEW_DESC1::Format']/*"/>	
        /// <msdn-id>dn899203</msdn-id>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        [FieldOffset(0)]
        public SharpDX.DXGI.Format Format;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.UnorderedAccessViewDimension"/></strong>-typed value that  specifies the resource type of the view. This type is the same as the resource type of the underlying resource. This member also determines which _UAV to use in the union below.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_UNORDERED_ACCESS_VIEW_DESC1::ViewDimension']/*"/>	
        /// <msdn-id>dn899203</msdn-id>	
        /// <unmanaged>D3D11_UAV_DIMENSION ViewDimension</unmanaged>	
        /// <unmanaged-short>D3D11_UAV_DIMENSION ViewDimension</unmanaged-short>	
        [FieldOffset(4)]
        public SharpDX.Direct3D11.UnorderedAccessViewDimension Dimension;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.UnorderedAccessViewDescription.BufferResource"/></strong> structure that specifies which buffer elements can be accessed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_UNORDERED_ACCESS_VIEW_DESC1::Buffer']/*"/>	
        /// <msdn-id>dn899203</msdn-id>	
        /// <unmanaged>D3D11_BUFFER_UAV Buffer</unmanaged>	
        /// <unmanaged-short>D3D11_BUFFER_UAV Buffer</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.UnorderedAccessViewDescription.BufferResource Buffer;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture1DResource"/></strong> structure that specifies the subresources in a 1D texture that can be accessed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_UNORDERED_ACCESS_VIEW_DESC1::Texture1D']/*"/>	
        /// <msdn-id>dn899203</msdn-id>	
        /// <unmanaged>D3D11_TEX1D_UAV Texture1D</unmanaged>	
        /// <unmanaged-short>D3D11_TEX1D_UAV Texture1D</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture1DResource Texture1D;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture1DArrayResource"/></strong> structure that specifies the subresources in a 1D texture array that can be accessed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_UNORDERED_ACCESS_VIEW_DESC1::Texture1DArray']/*"/>	
        /// <msdn-id>dn899203</msdn-id>	
        /// <unmanaged>D3D11_TEX1D_ARRAY_UAV Texture1DArray</unmanaged>	
        /// <unmanaged-short>D3D11_TEX1D_ARRAY_UAV Texture1DArray</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture1DArrayResource Texture1DArray;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.UnorderedAccessViewDescription1.Texture2DResource"/></strong> structure that specifies the subresources in a 2D texture that can be accessed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_UNORDERED_ACCESS_VIEW_DESC1::Texture2D']/*"/>	
        /// <msdn-id>dn899203</msdn-id>	
        /// <unmanaged>D3D11_TEX2D_UAV1 Texture2D</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2D_UAV1 Texture2D</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.UnorderedAccessViewDescription1.Texture2DResource Texture2D;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.UnorderedAccessViewDescription1.Texture2DArrayResource"/></strong> structure that specifies the subresources in a 2D texture array that can be accessed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_UNORDERED_ACCESS_VIEW_DESC1::Texture2DArray']/*"/>	
        /// <msdn-id>dn899203</msdn-id>	
        /// <unmanaged>D3D11_TEX2D_ARRAY_UAV1 Texture2DArray</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2D_ARRAY_UAV1 Texture2DArray</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.UnorderedAccessViewDescription1.Texture2DArrayResource Texture2DArray;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture3DResource"/></strong> structure that specifies subresources in a 3D texture that can be accessed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_UNORDERED_ACCESS_VIEW_DESC1::Texture3D']/*"/>	
        /// <msdn-id>dn899203</msdn-id>	
        /// <unmanaged>D3D11_TEX3D_UAV Texture3D</unmanaged>	
        /// <unmanaged-short>D3D11_TEX3D_UAV Texture3D</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D11.UnorderedAccessViewDescription.Texture3DResource Texture3D;
    }
    
    /// <summary>	
    /// <p>Specifies an RGB color value. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The RGB values have a nominal range of [0...1]. For an RGB format with  <em>n</em> bits per channel, the value of each color component is calculated as follows:</p><p><code>val = f * ((1 &lt;&lt; n)-1)</code></p><p>For example, for RGB-32 (8 bits per channel), <code>val = BYTE(f * 255.0)</code>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_COLOR']/*"/>	
    /// <msdn-id>hh447638</msdn-id>	
    /// <unmanaged>D3D11_VIDEO_COLOR</unmanaged>	
    /// <unmanaged-short>D3D11_VIDEO_COLOR</unmanaged-short>	
    [StructLayout(LayoutKind.Explicit)]
    public  partial struct VideoColor {	
        
        /// <summary>	
        /// <dd> <p>The red value.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_COLOR::YCbCr']/*"/>	
        /// <msdn-id>hh447638</msdn-id>	
        /// <unmanaged>D3D11_VIDEO_COLOR_YCbCrA YCbCr</unmanaged>	
        /// <unmanaged-short>D3D11_VIDEO_COLOR_YCbCrA YCbCr</unmanaged-short>	
        [FieldOffset(0)]
        public SharpDX.Direct3D11.VideoColorYCbCrA YCbCr;
        
        /// <summary>	
        /// <dd> <p>The green value.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_COLOR::RGBA']/*"/>	
        /// <msdn-id>hh447638</msdn-id>	
        /// <unmanaged>D3D11_VIDEO_COLOR_RGBA RGBA</unmanaged>	
        /// <unmanaged-short>D3D11_VIDEO_COLOR_RGBA RGBA</unmanaged-short>	
        [FieldOffset(0)]
        public SharpDX.Direct3D11.VideoColorRgba Rgba;
    }
    
    /// <summary>	
    /// <p>Specifies an RGB color value. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The RGB values have a nominal range of [0...1]. For an RGB format with  <em>n</em> bits per channel, the value of each color component is calculated as follows:</p><p><code>val = f * ((1 &lt;&lt; n)-1)</code></p><p>For example, for RGB-32 (8 bits per channel), <code>val = BYTE(f * 255.0)</code>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_COLOR_RGBA']/*"/>	
    /// <msdn-id>hh447638</msdn-id>	
    /// <unmanaged>D3D11_VIDEO_COLOR_RGBA</unmanaged>	
    /// <unmanaged-short>D3D11_VIDEO_COLOR_RGBA</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct VideoColorRgba {	
        
        /// <summary>	
        /// <dd> <p>The red value.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_COLOR_RGBA::R']/*"/>	
        /// <msdn-id>hh447638</msdn-id>	
        /// <unmanaged>float R</unmanaged>	
        /// <unmanaged-short>float R</unmanaged-short>	
        public float R;
        
        /// <summary>	
        /// <dd> <p>The green value.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_COLOR_RGBA::G']/*"/>	
        /// <msdn-id>hh447638</msdn-id>	
        /// <unmanaged>float G</unmanaged>	
        /// <unmanaged-short>float G</unmanaged-short>	
        public float G;
        
        /// <summary>	
        /// <dd> <p>The blue value.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_COLOR_RGBA::B']/*"/>	
        /// <msdn-id>hh447638</msdn-id>	
        /// <unmanaged>float B</unmanaged>	
        /// <unmanaged-short>float B</unmanaged-short>	
        public float B;
        
        /// <summary>	
        /// <dd> <p>The alpha value. Values range from 0 (transparent) to 1 (opaque).	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_COLOR_RGBA::A']/*"/>	
        /// <msdn-id>hh447638</msdn-id>	
        /// <unmanaged>float A</unmanaged>	
        /// <unmanaged-short>float A</unmanaged-short>	
        public float A;
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_COLOR_YCbCrA']/*"/>	
    /// <unmanaged>D3D11_VIDEO_COLOR_YCbCrA</unmanaged>	
    /// <unmanaged-short>D3D11_VIDEO_COLOR_YCbCrA</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct VideoColorYCbCrA {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_COLOR_YCbCrA::Y']/*"/>	
        /// <unmanaged>float Y</unmanaged>	
        /// <unmanaged-short>float Y</unmanaged-short>	
        public float Y;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_COLOR_YCbCrA::Cb']/*"/>	
        /// <unmanaged>float Cb</unmanaged>	
        /// <unmanaged-short>float Cb</unmanaged-short>	
        public float Cb;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_COLOR_YCbCrA::Cr']/*"/>	
        /// <unmanaged>float Cr</unmanaged>	
        /// <unmanaged-short>float Cr</unmanaged-short>	
        public float Cr;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_COLOR_YCbCrA::A']/*"/>	
        /// <unmanaged>float A</unmanaged>	
        /// <unmanaged-short>float A</unmanaged-short>	
        public float A;
    }
    
    /// <summary>	
    /// <p>Describes the content-protection capabilities of a graphics driver.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_CONTENT_PROTECTION_CAPS']/*"/>	
    /// <msdn-id>hh447640</msdn-id>	
    /// <unmanaged>D3D11_VIDEO_CONTENT_PROTECTION_CAPS</unmanaged>	
    /// <unmanaged-short>D3D11_VIDEO_CONTENT_PROTECTION_CAPS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct VideoContentProtectionCaps {	
        
        /// <summary>	
        /// <dd> <p>A bitwise <strong>OR</strong> of zero or more flags from the <strong><see cref="SharpDX.Direct3D11.ContentProtectionCaps"/></strong> enumeration.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_CONTENT_PROTECTION_CAPS::Caps']/*"/>	
        /// <msdn-id>hh447640</msdn-id>	
        /// <unmanaged>unsigned int Caps</unmanaged>	
        /// <unmanaged-short>unsigned int Caps</unmanaged-short>	
        public int Caps;
        
        /// <summary>	
        /// <dd> <p>The number of cryptographic key-exchange types that are supported by the driver. To get the list of key-exchange types, call the <strong><see cref="SharpDX.Direct3D11.VideoDevice.CheckCryptoKeyExchange"/></strong> method.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_CONTENT_PROTECTION_CAPS::KeyExchangeTypeCount']/*"/>	
        /// <msdn-id>hh447640</msdn-id>	
        /// <unmanaged>unsigned int KeyExchangeTypeCount</unmanaged>	
        /// <unmanaged-short>unsigned int KeyExchangeTypeCount</unmanaged-short>	
        public int KeyExchangeTypeCount;
        
        /// <summary>	
        /// <dd> <p>The encyrption block size, in bytes. The size of data to be encrypted must be a multiple of this value. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_CONTENT_PROTECTION_CAPS::BlockAlignmentSize']/*"/>	
        /// <msdn-id>hh447640</msdn-id>	
        /// <unmanaged>unsigned int BlockAlignmentSize</unmanaged>	
        /// <unmanaged-short>unsigned int BlockAlignmentSize</unmanaged-short>	
        public int BlockAlignmentSize;
        
        /// <summary>	
        /// <dd> <p>The total amount of memory, in bytes, that can be used to hold protected surfaces.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_CONTENT_PROTECTION_CAPS::ProtectedMemorySize']/*"/>	
        /// <msdn-id>hh447640</msdn-id>	
        /// <unmanaged>unsigned longlong ProtectedMemorySize</unmanaged>	
        /// <unmanaged-short>unsigned longlong ProtectedMemorySize</unmanaged-short>	
        public long ProtectedMemorySize;
    }
    
    /// <summary>	
    /// <p><strong><see cref="SharpDX.Direct3D11.VideoDecoderBeginFrameCryptoSession"/></strong> is used along with <strong>CreateCryptoSession</strong> to   perform crypto operations into and out of protected memory.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>A reference to this structure is passed in the <strong>pContentKey</strong> member of the <strong>D3D11_1DDIARG_VIDEODECODERBEGINFRAME</strong> structure when <strong>D3DWDDM2_0DDI_DECODER_ENCRYPTION_HW_CENC</strong> is specified in the <strong>guidConfigBitstreamEncryption</strong> member of the <strong>D3D11_1DDI_VIDEO_DECODER_CONFIG</strong> structure when creating the video decoder object. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_BEGIN_FRAME_CRYPTO_SESSION']/*"/>	
    /// <msdn-id>dn894599</msdn-id>	
    /// <unmanaged>D3D11_VIDEO_DECODER_BEGIN_FRAME_CRYPTO_SESSION</unmanaged>	
    /// <unmanaged-short>D3D11_VIDEO_DECODER_BEGIN_FRAME_CRYPTO_SESSION</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct VideoDecoderBeginFrameCryptoSession {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_BEGIN_FRAME_CRYPTO_SESSION::pCryptoSession']/*"/>	
        /// <msdn-id>dn894599</msdn-id>	
        /// <unmanaged>ID3D11CryptoSession* pCryptoSession</unmanaged>	
        /// <unmanaged-short>ID3D11CryptoSession pCryptoSession</unmanaged-short>	
        public System.IntPtr PCryptoSession;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_BEGIN_FRAME_CRYPTO_SESSION::BlobSize']/*"/>	
        /// <msdn-id>dn894599</msdn-id>	
        /// <unmanaged>unsigned int BlobSize</unmanaged>	
        /// <unmanaged-short>unsigned int BlobSize</unmanaged-short>	
        public int BlobSize;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_BEGIN_FRAME_CRYPTO_SESSION::pBlob']/*"/>	
        /// <msdn-id>dn894599</msdn-id>	
        /// <unmanaged>void* pBlob</unmanaged>	
        /// <unmanaged-short>void pBlob</unmanaged-short>	
        public System.IntPtr PBlob;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_BEGIN_FRAME_CRYPTO_SESSION::pKeyInfoId']/*"/>	
        /// <msdn-id>dn894599</msdn-id>	
        /// <unmanaged>GUID* pKeyInfoId</unmanaged>	
        /// <unmanaged-short>GUID pKeyInfoId</unmanaged-short>	
        public System.IntPtr PKeyInfoId;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_BEGIN_FRAME_CRYPTO_SESSION::PrivateDataSize']/*"/>	
        /// <msdn-id>dn894599</msdn-id>	
        /// <unmanaged>unsigned int PrivateDataSize</unmanaged>	
        /// <unmanaged-short>unsigned int PrivateDataSize</unmanaged-short>	
        public int PrivateDataSize;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_BEGIN_FRAME_CRYPTO_SESSION::pPrivateData']/*"/>	
        /// <msdn-id>dn894599</msdn-id>	
        /// <unmanaged>void* pPrivateData</unmanaged>	
        /// <unmanaged-short>void pPrivateData</unmanaged-short>	
        public System.IntPtr PPrivateData;
    }
    
    /// <summary>	
    /// <p>Describes a compressed buffer for decoding.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_BUFFER_DESC']/*"/>	
    /// <msdn-id>hh447641</msdn-id>	
    /// <unmanaged>D3D11_VIDEO_DECODER_BUFFER_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_VIDEO_DECODER_BUFFER_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct VideoDecoderBufferDescription {	
        
        /// <summary>	
        /// <dd> <p>The type of buffer, specified as a member of the <strong><see cref="SharpDX.Direct3D11.VideoDecoderBufferType"/></strong> enumeration.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_BUFFER_DESC::BufferType']/*"/>	
        /// <msdn-id>hh447641</msdn-id>	
        /// <unmanaged>D3D11_VIDEO_DECODER_BUFFER_TYPE BufferType</unmanaged>	
        /// <unmanaged-short>D3D11_VIDEO_DECODER_BUFFER_TYPE BufferType</unmanaged-short>	
        public SharpDX.Direct3D11.VideoDecoderBufferType BufferType;
        
        /// <summary>	
        /// <dd> <p>Reserved.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_BUFFER_DESC::BufferIndex']/*"/>	
        /// <msdn-id>hh447641</msdn-id>	
        /// <unmanaged>unsigned int BufferIndex</unmanaged>	
        /// <unmanaged-short>unsigned int BufferIndex</unmanaged-short>	
        public int BufferIndex;
        
        /// <summary>	
        /// <dd> <p>The offset of the relevant data from the beginning of the buffer, in bytes. This value must be zero. 	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_BUFFER_DESC::DataOffset']/*"/>	
        /// <msdn-id>hh447641</msdn-id>	
        /// <unmanaged>unsigned int DataOffset</unmanaged>	
        /// <unmanaged-short>unsigned int DataOffset</unmanaged-short>	
        public int DataOffset;
        
        /// <summary>	
        /// <dd> <p>The macroblock address of the first macroblock in the buffer. The macroblock address is given in raster scan order.	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_BUFFER_DESC::DataSize']/*"/>	
        /// <msdn-id>hh447641</msdn-id>	
        /// <unmanaged>unsigned int DataSize</unmanaged>	
        /// <unmanaged-short>unsigned int DataSize</unmanaged-short>	
        public int DataSize;
        
        /// <summary>	
        /// <dd> <p>The macroblock address of the first macroblock in the buffer. The macroblock address is given in raster scan order.	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_BUFFER_DESC::FirstMBaddress']/*"/>	
        /// <msdn-id>hh447641</msdn-id>	
        /// <unmanaged>unsigned int FirstMBaddress</unmanaged>	
        /// <unmanaged-short>unsigned int FirstMBaddress</unmanaged-short>	
        public int FirstMBaddress;
        
        /// <summary>	
        /// <dd> <p>The number of macroblocks of data in the buffer. This count includes skipped macroblocks. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_BUFFER_DESC::NumMBsInBuffer']/*"/>	
        /// <msdn-id>hh447641</msdn-id>	
        /// <unmanaged>unsigned int NumMBsInBuffer</unmanaged>	
        /// <unmanaged-short>unsigned int NumMBsInBuffer</unmanaged-short>	
        public int NumMBsInBuffer;
        
        /// <summary>	
        /// <dd> <p>Reserved. Set to zero.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_BUFFER_DESC::Width']/*"/>	
        /// <msdn-id>hh447641</msdn-id>	
        /// <unmanaged>unsigned int Width</unmanaged>	
        /// <unmanaged-short>unsigned int Width</unmanaged-short>	
        public int Width;
        
        /// <summary>	
        /// <dd> <p>Reserved. Set to zero.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_BUFFER_DESC::Height']/*"/>	
        /// <msdn-id>hh447641</msdn-id>	
        /// <unmanaged>unsigned int Height</unmanaged>	
        /// <unmanaged-short>unsigned int Height</unmanaged-short>	
        public int Height;
        
        /// <summary>	
        /// <dd> <p>Reserved. Set to zero.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_BUFFER_DESC::Stride']/*"/>	
        /// <msdn-id>hh447641</msdn-id>	
        /// <unmanaged>unsigned int Stride</unmanaged>	
        /// <unmanaged-short>unsigned int Stride</unmanaged-short>	
        public int Stride;
        
        /// <summary>	
        /// <dd> <p>Reserved. Set to zero.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_BUFFER_DESC::ReservedBits']/*"/>	
        /// <msdn-id>hh447641</msdn-id>	
        /// <unmanaged>unsigned int ReservedBits</unmanaged>	
        /// <unmanaged-short>unsigned int ReservedBits</unmanaged-short>	
        public int ReservedBits;
        
        /// <summary>	
        /// <dd> <p>A reference to a buffer that contains an initialization vector (IV) for encrypted data. If the decode buffer does not contain encrypted data, set this member to <strong><c>null</c></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_BUFFER_DESC::pIV']/*"/>	
        /// <msdn-id>hh447641</msdn-id>	
        /// <unmanaged>void* pIV</unmanaged>	
        /// <unmanaged-short>void pIV</unmanaged-short>	
        public System.IntPtr PIV;
        
        /// <summary>	
        /// <dd> <p>The size of the buffer specified in the <strong>pIV</strong> parameter. If <strong>pIV</strong> is <strong><c>null</c></strong>, set this member to zero.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_BUFFER_DESC::IVSize']/*"/>	
        /// <msdn-id>hh447641</msdn-id>	
        /// <unmanaged>unsigned int IVSize</unmanaged>	
        /// <unmanaged-short>unsigned int IVSize</unmanaged-short>	
        public int IVSize;
        
        /// <summary>	
        /// <dd> <p>If <strong>TRUE</strong>, the video surfaces are partially encrypted.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_BUFFER_DESC::PartialEncryption']/*"/>	
        /// <msdn-id>hh447641</msdn-id>	
        /// <unmanaged>BOOL PartialEncryption</unmanaged>	
        /// <unmanaged-short>BOOL PartialEncryption</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool PartialEncryption;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.EncryptedBlockInformation"/></strong> structure that specifies which bytes of the surface are encrypted.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_BUFFER_DESC::EncryptedBlockInfo']/*"/>	
        /// <msdn-id>hh447641</msdn-id>	
        /// <unmanaged>D3D11_ENCRYPTED_BLOCK_INFO EncryptedBlockInfo</unmanaged>	
        /// <unmanaged-short>D3D11_ENCRYPTED_BLOCK_INFO EncryptedBlockInfo</unmanaged-short>	
        public SharpDX.Direct3D11.EncryptedBlockInformation EncryptedBlockInfo;
    }
    
    /// <summary>	
    /// <p>Describes a compressed buffer for decoding.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_BUFFER_DESC1']/*"/>	
    /// <msdn-id>hh447641</msdn-id>	
    /// <unmanaged>D3D11_VIDEO_DECODER_BUFFER_DESC1</unmanaged>	
    /// <unmanaged-short>D3D11_VIDEO_DECODER_BUFFER_DESC1</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct VideoDecoderBufferDescription1 {	
        
        /// <summary>	
        /// <dd> <p>The type of buffer, specified as a member of the <strong><see cref="SharpDX.Direct3D11.VideoDecoderBufferType"/></strong> enumeration.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_BUFFER_DESC1::BufferType']/*"/>	
        /// <msdn-id>hh447641</msdn-id>	
        /// <unmanaged>D3D11_VIDEO_DECODER_BUFFER_TYPE BufferType</unmanaged>	
        /// <unmanaged-short>D3D11_VIDEO_DECODER_BUFFER_TYPE BufferType</unmanaged-short>	
        public SharpDX.Direct3D11.VideoDecoderBufferType BufferType;
        
        /// <summary>	
        /// <dd> <p>The offset of the relevant data from the beginning of the buffer, in bytes. This value must be zero. 	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_BUFFER_DESC1::DataOffset']/*"/>	
        /// <msdn-id>hh447641</msdn-id>	
        /// <unmanaged>unsigned int DataOffset</unmanaged>	
        /// <unmanaged-short>unsigned int DataOffset</unmanaged-short>	
        public int DataOffset;
        
        /// <summary>	
        /// <dd> <p>The offset of the relevant data from the beginning of the buffer, in bytes. This value must be zero. 	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_BUFFER_DESC1::DataSize']/*"/>	
        /// <msdn-id>hh447641</msdn-id>	
        /// <unmanaged>unsigned int DataSize</unmanaged>	
        /// <unmanaged-short>unsigned int DataSize</unmanaged-short>	
        public int DataSize;
        
        /// <summary>	
        /// <dd> <p>A reference to a buffer that contains an initialization vector (IV) for encrypted data. If the decode buffer does not contain encrypted data, set this member to <strong><c>null</c></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_BUFFER_DESC1::pIV']/*"/>	
        /// <msdn-id>hh447641</msdn-id>	
        /// <unmanaged>void* pIV</unmanaged>	
        /// <unmanaged-short>void pIV</unmanaged-short>	
        public System.IntPtr PIV;
        
        /// <summary>	
        /// <dd> <p>The size of the buffer specified in the <strong>pIV</strong> parameter. If <strong>pIV</strong> is <strong><c>null</c></strong>, set this member to zero.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_BUFFER_DESC1::IVSize']/*"/>	
        /// <msdn-id>hh447641</msdn-id>	
        /// <unmanaged>unsigned int IVSize</unmanaged>	
        /// <unmanaged-short>unsigned int IVSize</unmanaged-short>	
        public int IVSize;
        
        /// <summary>	
        /// <dd> <p>Reserved. Set to zero.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_BUFFER_DESC1::pSubSampleMappingBlock']/*"/>	
        /// <msdn-id>hh447641</msdn-id>	
        /// <unmanaged>D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK* pSubSampleMappingBlock</unmanaged>	
        /// <unmanaged-short>D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK pSubSampleMappingBlock</unmanaged-short>	
        public System.IntPtr PSubSampleMappingBlock;
        
        /// <summary>	
        /// <dd> <p>Reserved. Set to zero.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_BUFFER_DESC1::SubSampleMappingCount']/*"/>	
        /// <msdn-id>hh447641</msdn-id>	
        /// <unmanaged>unsigned int SubSampleMappingCount</unmanaged>	
        /// <unmanaged-short>unsigned int SubSampleMappingCount</unmanaged-short>	
        public int SubSampleMappingCount;
    }
    
    /// <summary>	
    /// <p>Describes the configuration of a Microsoft Direct3D?11 decoder device for DirectX Video Acceleration (DXVA). </p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_CONFIG']/*"/>	
    /// <msdn-id>hh447643</msdn-id>	
    /// <unmanaged>D3D11_VIDEO_DECODER_CONFIG</unmanaged>	
    /// <unmanaged-short>D3D11_VIDEO_DECODER_CONFIG</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct VideoDecoderConfig {	
        
        /// <summary>	
        /// <dd> <p>If the bitstream data buffers are encrypted using the D3D11CryptoSession mechanism, this <see cref="System.Guid"/> should be set to zero. If no encryption is applied, the value is <strong>DXVA_NoEncrypt</strong>. If <strong>ConfigBitstreamRaw</strong> is 0, the value must be <strong>DXVA_NoEncrypt</strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_CONFIG::guidConfigBitstreamEncryption']/*"/>	
        /// <msdn-id>hh447643</msdn-id>	
        /// <unmanaged>GUID guidConfigBitstreamEncryption</unmanaged>	
        /// <unmanaged-short>GUID guidConfigBitstreamEncryption</unmanaged-short>	
        public System.Guid GuidConfigBitstreamEncryption;
        
        /// <summary>	
        /// <dd> <p>If the macroblock control data buffers are  encrypted using the D3D11CryptoSession mechanism, this <see cref="System.Guid"/> should be set to zero.  If no encryption is applied, the value is <strong>DXVA_NoEncrypt</strong>. If <strong>ConfigBitstreamRaw</strong> is 1, the value must be <strong>DXVA_NoEncrypt</strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_CONFIG::guidConfigMBcontrolEncryption']/*"/>	
        /// <msdn-id>hh447643</msdn-id>	
        /// <unmanaged>GUID guidConfigMBcontrolEncryption</unmanaged>	
        /// <unmanaged-short>GUID guidConfigMBcontrolEncryption</unmanaged-short>	
        public System.Guid GuidConfigMBcontrolEncryption;
        
        /// <summary>	
        /// <dd> <p>If the residual difference decoding data buffers are  encrypted using the D3D11CryptoSession mechanism, this <see cref="System.Guid"/> should be set to zero.   If no encryption is applied, the value is <strong>DXVA_NoEncrypt</strong>. If <strong>ConfigBitstreamRaw</strong> is 1, the value must be <strong>DXVA_NoEncrypt</strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_CONFIG::guidConfigResidDiffEncryption']/*"/>	
        /// <msdn-id>hh447643</msdn-id>	
        /// <unmanaged>GUID guidConfigResidDiffEncryption</unmanaged>	
        /// <unmanaged-short>GUID guidConfigResidDiffEncryption</unmanaged-short>	
        public System.Guid GuidConfigResidDiffEncryption;
        
        /// <summary>	
        /// <dd> <p>Indicates whether the host-decoder sends raw bit-stream data. If the value is 1, the data for the pictures will be sent in bit-stream buffers as raw bit-stream content. If the value is 0, picture data will be sent using macroblock control command buffers. If either <strong>ConfigResidDiffHost</strong> or <strong>ConfigResidDiffAccelerator</strong> is 1, the value must be 0. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_CONFIG::ConfigBitstreamRaw']/*"/>	
        /// <msdn-id>hh447643</msdn-id>	
        /// <unmanaged>unsigned int ConfigBitstreamRaw</unmanaged>	
        /// <unmanaged-short>unsigned int ConfigBitstreamRaw</unmanaged-short>	
        public int ConfigBitstreamRaw;
        
        /// <summary>	
        /// <dd> <p>Specifies whether macroblock control commands are in raster scan order or in arbitrary order. If the value is 1, the macroblock control commands within each macroblock control command buffer are in raster-scan order. If the value is 0, the order is arbitrary. For some types of bit streams, forcing raster order either greatly increases the number of required macroblock control buffers that must be processed, or requires host reordering of the control information. Therefore, supporting arbitrary order can be more efficient. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_CONFIG::ConfigMBcontrolRasterOrder']/*"/>	
        /// <msdn-id>hh447643</msdn-id>	
        /// <unmanaged>unsigned int ConfigMBcontrolRasterOrder</unmanaged>	
        /// <unmanaged-short>unsigned int ConfigMBcontrolRasterOrder</unmanaged-short>	
        public int ConfigMBcontrolRasterOrder;
        
        /// <summary>	
        /// <dd> <p>Contains the host residual difference configuration. If the value is 1, some residual difference decoding data may be sent as blocks in the spatial domain from the host. If the value is 0, spatial domain data will not be sent. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_CONFIG::ConfigResidDiffHost']/*"/>	
        /// <msdn-id>hh447643</msdn-id>	
        /// <unmanaged>unsigned int ConfigResidDiffHost</unmanaged>	
        /// <unmanaged-short>unsigned int ConfigResidDiffHost</unmanaged-short>	
        public int ConfigResidDiffHost;
        
        /// <summary>	
        /// <dd> <p>Indicates the word size used to represent residual difference spatial-domain blocks for predicted (non-intra) pictures when using host-based residual difference decoding. </p> <p>If <strong>ConfigResidDiffHost</strong> is 1 and <strong>ConfigSpatialResid8</strong> is 1, the host will send residual difference spatial-domain blocks for non-intra macroblocks using 8-bit signed samples and for intra macroblocks in predicted (non-intra) pictures in a format that depends on the value of <strong>ConfigIntraResidUnsigned</strong>: </p> <ul> <li> If <strong>ConfigIntraResidUnsigned</strong> is 0, spatial-domain blocks for intra macroblocks are sent as 8-bit signed integer values relative to a constant reference value of 2^(BPP?1). </li> <li> If <strong>ConfigIntraResidUnsigned</strong> is 1, spatial-domain blocks for intra macroblocks are sent as 8-bit unsigned integer values relative to a constant reference value of 0. </li> </ul> <p> If <strong>ConfigResidDiffHost</strong> is 1 and <strong>ConfigSpatialResid8</strong> is 0, the host will send residual difference spatial-domain blocks of data for non-intra macroblocks using 16-bit signed samples and for intra macroblocks in predicted (non-intra) pictures in a format that depends on the value of <strong>ConfigIntraResidUnsigned</strong>: </p> <ul> <li> If <strong>ConfigIntraResidUnsigned</strong> is 0, spatial domain blocks for intra macroblocks are sent as 16-bit signed integer values relative to a constant reference value of 2^(BPP?1). </li> <li> If <strong>ConfigIntraResidUnsigned</strong> is 1, spatial domain blocks for intra macroblocks are sent as 16-bit unsigned integer values relative to a constant reference value of 0. </li> </ul> <p> If <strong>ConfigResidDiffHost</strong> is 0, <strong>ConfigSpatialResid8</strong> must be 0. </p> <p> For intra pictures, spatial-domain blocks must be sent using 8-bit samples if bits-per-pixel (BPP) is 8, and using 16-bit samples if BPP &gt; 8. If <strong>ConfigIntraResidUnsigned</strong> is 0, these samples are sent as signed integer values relative to a constant reference value of 2^(BPP?1), and if <strong>ConfigIntraResidUnsigned</strong> is 1, these samples are sent as unsigned integer values relative to a constant reference value of 0. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_CONFIG::ConfigSpatialResid8']/*"/>	
        /// <msdn-id>hh447643</msdn-id>	
        /// <unmanaged>unsigned int ConfigSpatialResid8</unmanaged>	
        /// <unmanaged-short>unsigned int ConfigSpatialResid8</unmanaged-short>	
        public int ConfigSpatialResid8;
        
        /// <summary>	
        /// <dd> <p> If the value is 1, 8-bit difference overflow blocks are subtracted rather than added. The value must be 0 unless <strong>ConfigSpatialResid8</strong> is 1. </p> <p> The ability to subtract differences rather than add them enables 8-bit difference decoding to be fully compliant with the full ?255 range of values required in video decoder specifications, because +255 cannot be represented as the addition of two signed 8-bit numbers, but any number in the range ?255 can be represented as the difference between two signed 8-bit numbers (+255 = +127 minus ?128).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_CONFIG::ConfigResid8Subtraction']/*"/>	
        /// <msdn-id>hh447643</msdn-id>	
        /// <unmanaged>unsigned int ConfigResid8Subtraction</unmanaged>	
        /// <unmanaged-short>unsigned int ConfigResid8Subtraction</unmanaged-short>	
        public int ConfigResid8Subtraction;
        
        /// <summary>	
        /// <dd> <p> If the value is 1, spatial-domain blocks for intra macroblocks must be clipped to an 8-bit range on the host and spatial-domain blocks for non-intra macroblocks must be clipped to a 9-bit range on the host. If the value is 0, no such clipping is necessary by the host. </p> <p> The value must be 0 unless <strong>ConfigSpatialResid8</strong> is 0 and <strong>ConfigResidDiffHost</strong> is 1. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_CONFIG::ConfigSpatialHost8or9Clipping']/*"/>	
        /// <msdn-id>hh447643</msdn-id>	
        /// <unmanaged>unsigned int ConfigSpatialHost8or9Clipping</unmanaged>	
        /// <unmanaged-short>unsigned int ConfigSpatialHost8or9Clipping</unmanaged-short>	
        public int ConfigSpatialHost8or9Clipping;
        
        /// <summary>	
        /// <dd> <p> If the value is 1, any spatial-domain residual difference data must be sent in a chrominance-interleaved form matching the YUV format chrominance interleaving pattern. The value must be 0 unless <strong>ConfigResidDiffHost</strong> is 1 and the YUV format is NV12 or NV21. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_CONFIG::ConfigSpatialResidInterleaved']/*"/>	
        /// <msdn-id>hh447643</msdn-id>	
        /// <unmanaged>unsigned int ConfigSpatialResidInterleaved</unmanaged>	
        /// <unmanaged-short>unsigned int ConfigSpatialResidInterleaved</unmanaged-short>	
        public int ConfigSpatialResidInterleaved;
        
        /// <summary>	
        /// <dd> <p> Indicates the method of representation of spatial-domain blocks of residual difference data for intra blocks when using host-based difference decoding. </p> <p> If <strong>ConfigResidDiffHost</strong> is 1 and <strong>ConfigIntraResidUnsigned</strong> is 0, spatial-domain residual difference data blocks for intra macroblocks must be sent as follows: </p> <ul> <li> In a non-intra picture, if <strong>ConfigSpatialResid8</strong> is 0, the spatial-domain residual difference data blocks for intra macroblocks are sent as 16-bit signed integer values relative to a constant reference value of 2^(BPP?1). </li> <li> In a non-intra picture, if <strong>ConfigSpatialResid8</strong> is 1, the spatial-domain residual difference data blocks for intra macroblocks are sent as 8-bit signed integer values relative to a constant reference value of 2^(BPP?1). </li> <li> In an intra picture, if BPP is 8, the spatial-domain residual difference data blocks for intra macroblocks are sent as 8-bit signed integer values relative to a constant reference value of 2^(BPP?1), regardless of the value of <strong>ConfigSpatialResid8</strong>. </li> </ul> <p> If <strong>ConfigResidDiffHost</strong> is 1 and <strong>ConfigIntraResidUnsigned</strong> is 1, spatial-domain residual difference data blocks for intra macroblocks must be sent as follows: </p> <ul> <li> In a non-intra picture, if <strong>ConfigSpatialResid8</strong> is 0, the spatial-domain residual difference data blocks for intra macroblocks must be sent as 16-bit unsigned integer values relative to a constant reference value of 0. </li> <li> In a non-intra picture, if <strong>ConfigSpatialResid8</strong> is 1, the spatial-domain residual difference data blocks for intra macroblocks are sent as 8-bit unsigned integer values relative to a constant reference value of 0. </li> <li> In an intra picture, if BPP is 8, the spatial-domain residual difference data blocks for intra macroblocks are sent as 8-bit unsigned integer values relative to a constant reference value of 0, regardless of the value of <strong>ConfigSpatialResid8</strong>. </li> </ul> <p> The value of the member must be 0 unless <strong>ConfigResidDiffHost</strong> is 1. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_CONFIG::ConfigIntraResidUnsigned']/*"/>	
        /// <msdn-id>hh447643</msdn-id>	
        /// <unmanaged>unsigned int ConfigIntraResidUnsigned</unmanaged>	
        /// <unmanaged-short>unsigned int ConfigIntraResidUnsigned</unmanaged-short>	
        public int ConfigIntraResidUnsigned;
        
        /// <summary>	
        /// <dd> <p> If the value is 1, transform-domain blocks of coefficient data may be sent from the host for accelerator-based IDCT. If the value is 0, accelerator-based IDCT will not be used. If both <strong>ConfigResidDiffHost</strong> and <strong>ConfigResidDiffAccelerator</strong> are 1, this indicates that some residual difference decoding will be done on the host and some on the accelerator, as indicated by macroblock-level control commands. </p> <p> The value must be 0 if <strong>ConfigBitstreamRaw</strong> is 1. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_CONFIG::ConfigResidDiffAccelerator']/*"/>	
        /// <msdn-id>hh447643</msdn-id>	
        /// <unmanaged>unsigned int ConfigResidDiffAccelerator</unmanaged>	
        /// <unmanaged-short>unsigned int ConfigResidDiffAccelerator</unmanaged-short>	
        public int ConfigResidDiffAccelerator;
        
        /// <summary>	
        /// <dd> <p> If the value is 1, the inverse scan for transform-domain block processing will be performed on the host, and absolute indices will be sent instead for any transform coefficients. If the value is 0, the inverse scan will be performed on the accelerator. </p> <p> The value must be 0 if <strong>ConfigResidDiffAccelerator</strong> is 0 or if <strong>Config4GroupedCoefs</strong> is 1. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_CONFIG::ConfigHostInverseScan']/*"/>	
        /// <msdn-id>hh447643</msdn-id>	
        /// <unmanaged>unsigned int ConfigHostInverseScan</unmanaged>	
        /// <unmanaged-short>unsigned int ConfigHostInverseScan</unmanaged-short>	
        public int ConfigHostInverseScan;
        
        /// <summary>	
        /// <dd> <p> If the value is 1, the IDCT specified in Annex W of ITU-T Recommendation H.263 is used. If the value is 0, any compliant IDCT can be used for off-host IDCT. </p> <p> The H.263 annex does not comply with the IDCT requirements of MPEG-2 corrigendum 2, so the value must not be 1 for use with MPEG-2 video. </p> <p> The value must be 0 if <strong>ConfigResidDiffAccelerator</strong> is 0, indicating purely host-based residual difference decoding. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_CONFIG::ConfigSpecificIDCT']/*"/>	
        /// <msdn-id>hh447643</msdn-id>	
        /// <unmanaged>unsigned int ConfigSpecificIDCT</unmanaged>	
        /// <unmanaged-short>unsigned int ConfigSpecificIDCT</unmanaged-short>	
        public int ConfigSpecificIDCT;
        
        /// <summary>	
        /// <dd> <p> If the value is 1, transform coefficients for off-host IDCT will be sent using the <strong>DXVA_TCoef4Group</strong> structure. If the value is 0, the <strong>DXVA_TCoefSingle</strong> structure is used. The value must be 0 if <strong>ConfigResidDiffAccelerator</strong> is 0 or if <strong>ConfigHostInverseScan</strong> is 1. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_CONFIG::Config4GroupedCoefs']/*"/>	
        /// <msdn-id>hh447643</msdn-id>	
        /// <unmanaged>unsigned int Config4GroupedCoefs</unmanaged>	
        /// <unmanaged-short>unsigned int Config4GroupedCoefs</unmanaged-short>	
        public int Config4GroupedCoefs;
        
        /// <summary>	
        /// <dd> <p> Specifies how many frames the decoder device processes at any one time. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_CONFIG::ConfigMinRenderTargetBuffCount']/*"/>	
        /// <msdn-id>hh447643</msdn-id>	
        /// <unmanaged>unsigned short ConfigMinRenderTargetBuffCount</unmanaged>	
        /// <unmanaged-short>unsigned short ConfigMinRenderTargetBuffCount</unmanaged-short>	
        public short ConfigMinRenderTargetBuffCount;
        
        /// <summary>	
        /// <dd> <p> Contains decoder-specific configuration information. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_CONFIG::ConfigDecoderSpecific']/*"/>	
        /// <msdn-id>hh447643</msdn-id>	
        /// <unmanaged>unsigned short ConfigDecoderSpecific</unmanaged>	
        /// <unmanaged-short>unsigned short ConfigDecoderSpecific</unmanaged-short>	
        public short ConfigDecoderSpecific;
    }
    
    /// <summary>	
    /// <p>Describes a video stream for a Microsoft Direct3D?11 video decoder or video processor.  </p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_DESC']/*"/>	
    /// <msdn-id>hh447644</msdn-id>	
    /// <unmanaged>D3D11_VIDEO_DECODER_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_VIDEO_DECODER_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct VideoDecoderDescription {	
        
        /// <summary>	
        /// <dd> <p>The decoding profile. To get the list of profiles supported by the device, call the <strong><see cref="SharpDX.Direct3D11.VideoDevice.GetVideoDecoderProfile"/></strong> method.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_DESC::Guid']/*"/>	
        /// <msdn-id>hh447644</msdn-id>	
        /// <unmanaged>GUID Guid</unmanaged>	
        /// <unmanaged-short>GUID Guid</unmanaged-short>	
        public System.Guid Guid;
        
        /// <summary>	
        /// <dd> <p>The width of the video frame, in pixels.  </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_DESC::SampleWidth']/*"/>	
        /// <msdn-id>hh447644</msdn-id>	
        /// <unmanaged>unsigned int SampleWidth</unmanaged>	
        /// <unmanaged-short>unsigned int SampleWidth</unmanaged-short>	
        public int SampleWidth;
        
        /// <summary>	
        /// <dd> <p>The height of the video frame, in pixels.  </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_DESC::SampleHeight']/*"/>	
        /// <msdn-id>hh447644</msdn-id>	
        /// <unmanaged>unsigned int SampleHeight</unmanaged>	
        /// <unmanaged-short>unsigned int SampleHeight</unmanaged-short>	
        public int SampleHeight;
        
        /// <summary>	
        /// <dd> <p>The output surface format, specified as a <strong><see cref="SharpDX.DXGI.Format"/></strong> value.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_DESC::OutputFormat']/*"/>	
        /// <msdn-id>hh447644</msdn-id>	
        /// <unmanaged>DXGI_FORMAT OutputFormat</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT OutputFormat</unmanaged-short>	
        public SharpDX.DXGI.Format OutputFormat;
    }
    
    /// <summary>	
    /// <p>Contains driver-specific data for the <strong><see cref="SharpDX.Direct3D11.VideoContext.DecoderExtension"/></strong> method.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The exact meaning of each structure member depends on the value of <strong>Function</strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_EXTENSION']/*"/>	
    /// <msdn-id>hh447645</msdn-id>	
    /// <unmanaged>D3D11_VIDEO_DECODER_EXTENSION</unmanaged>	
    /// <unmanaged-short>D3D11_VIDEO_DECODER_EXTENSION</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct VideoDecoderExtension {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_EXTENSION::Function']/*"/>	
        /// <msdn-id>hh447645</msdn-id>	
        /// <unmanaged>unsigned int Function</unmanaged>	
        /// <unmanaged-short>unsigned int Function</unmanaged-short>	
        public int Function;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_EXTENSION::pPrivateInputData']/*"/>	
        /// <msdn-id>hh447645</msdn-id>	
        /// <unmanaged>void* pPrivateInputData</unmanaged>	
        /// <unmanaged-short>void pPrivateInputData</unmanaged-short>	
        public System.IntPtr PPrivateInputData;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_EXTENSION::PrivateInputDataSize']/*"/>	
        /// <msdn-id>hh447645</msdn-id>	
        /// <unmanaged>unsigned int PrivateInputDataSize</unmanaged>	
        /// <unmanaged-short>unsigned int PrivateInputDataSize</unmanaged-short>	
        public int PrivateInputDataSize;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_EXTENSION::pPrivateOutputData']/*"/>	
        /// <msdn-id>hh447645</msdn-id>	
        /// <unmanaged>void* pPrivateOutputData</unmanaged>	
        /// <unmanaged-short>void pPrivateOutputData</unmanaged-short>	
        public System.IntPtr PPrivateOutputData;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_EXTENSION::PrivateOutputDataSize']/*"/>	
        /// <msdn-id>hh447645</msdn-id>	
        /// <unmanaged>unsigned int PrivateOutputDataSize</unmanaged>	
        /// <unmanaged-short>unsigned int PrivateOutputDataSize</unmanaged-short>	
        public int PrivateOutputDataSize;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_EXTENSION::ResourceCount']/*"/>	
        /// <msdn-id>hh447645</msdn-id>	
        /// <unmanaged>unsigned int ResourceCount</unmanaged>	
        /// <unmanaged-short>unsigned int ResourceCount</unmanaged-short>	
        public int ResourceCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_EXTENSION::ppResourceList']/*"/>	
        /// <msdn-id>hh447645</msdn-id>	
        /// <unmanaged>ID3D11Resource** ppResourceList</unmanaged>	
        /// <unmanaged-short>ID3D11Resource ppResourceList</unmanaged-short>	
        public System.IntPtr PpResourceList;
    }
    
    /// <summary>	
    /// <p>Describes a video decoder output view.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC']/*"/>	
    /// <msdn-id>hh447646</msdn-id>	
    /// <unmanaged>D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct VideoDecoderOutputViewDescription {	
        
        /// <summary>	
        /// <dd> <p>The decoding profile. To get the list of profiles supported by the device, call the <strong><see cref="SharpDX.Direct3D11.VideoDevice.GetVideoDecoderProfile"/></strong> method.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC::DecodeProfile']/*"/>	
        /// <msdn-id>hh447646</msdn-id>	
        /// <unmanaged>GUID DecodeProfile</unmanaged>	
        /// <unmanaged-short>GUID DecodeProfile</unmanaged-short>	
        public System.Guid DecodeProfile;
        
        /// <summary>	
        /// <dd> <p>The resource type of the view, specified as a member of the <strong><see cref="SharpDX.Direct3D11.VdovDimension"/></strong> enumeration.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC::ViewDimension']/*"/>	
        /// <msdn-id>hh447646</msdn-id>	
        /// <unmanaged>D3D11_VDOV_DIMENSION ViewDimension</unmanaged>	
        /// <unmanaged-short>D3D11_VDOV_DIMENSION ViewDimension</unmanaged-short>	
        public SharpDX.Direct3D11.VdovDimension Dimension;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.Texture2DVdov"/></strong> structure that identifies the texture resource for the output view.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC::Texture2D']/*"/>	
        /// <msdn-id>hh447646</msdn-id>	
        /// <unmanaged>D3D11_TEX2D_VDOV Texture2D</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2D_VDOV Texture2D</unmanaged-short>	
        public SharpDX.Direct3D11.Texture2DVdov Texture2D;
    }
    
    /// <summary>	
    /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Describes a sub sample mapping block.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Values in the sub sample mapping blocks are relative to the start of the decode buffer.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK']/*"/>	
    /// <msdn-id>dn894121</msdn-id>	
    /// <unmanaged>D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK</unmanaged>	
    /// <unmanaged-short>D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct VideoDecoderSubSampleMappingBlock {	
        
        /// <summary>	
        /// <dd> <p>The number of clear (non-encrypted) bytes at the start of the block.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK::ClearSize']/*"/>	
        /// <msdn-id>dn894121</msdn-id>	
        /// <unmanaged>unsigned int ClearSize</unmanaged>	
        /// <unmanaged-short>unsigned int ClearSize</unmanaged-short>	
        public int ClearSize;
        
        /// <summary>	
        /// <dd> <p>The number of encrypted bytes following the clear bytes.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK::EncryptedSize']/*"/>	
        /// <msdn-id>dn894121</msdn-id>	
        /// <unmanaged>unsigned int EncryptedSize</unmanaged>	
        /// <unmanaged-short>unsigned int EncryptedSize</unmanaged-short>	
        public int EncryptedSize;
    }
    
    /// <summary>	
    /// <p>Describes the capabilities of a Microsoft Direct3D?11 video processor.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The video processor stores state information for each input stream. These states persist between blits. With each blit, the application selects which streams to enable or disable. Disabling a stream does not affect the state information for that stream.</p><p>The <strong>MaxStreamStates</strong> member gives the maximum number of stream states that can be saved. The <strong>MaxInputStreams</strong> member gives the maximum number of streams that can be enabled during a blit. These two values can differ. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_CAPS']/*"/>	
    /// <msdn-id>hh447650</msdn-id>	
    /// <unmanaged>D3D11_VIDEO_PROCESSOR_CAPS</unmanaged>	
    /// <unmanaged-short>D3D11_VIDEO_PROCESSOR_CAPS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct VideoProcessorCaps {	
        
        /// <summary>	
        /// <dd> <p>A bitwise <strong>OR</strong> of zero or more flags from the <strong><see cref="SharpDX.Direct3D11.VideoProcessorDeviceCaps"/></strong> enumeration.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_CAPS::DeviceCaps']/*"/>	
        /// <msdn-id>hh447650</msdn-id>	
        /// <unmanaged>unsigned int DeviceCaps</unmanaged>	
        /// <unmanaged-short>unsigned int DeviceCaps</unmanaged-short>	
        public int DeviceCaps;
        
        /// <summary>	
        /// <dd> <p>A bitwise <strong>OR</strong> of zero or more flags from the   <strong><see cref="SharpDX.Direct3D11.VideoProcessorFeatureCaps"/></strong> enumeration.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_CAPS::FeatureCaps']/*"/>	
        /// <msdn-id>hh447650</msdn-id>	
        /// <unmanaged>unsigned int FeatureCaps</unmanaged>	
        /// <unmanaged-short>unsigned int FeatureCaps</unmanaged-short>	
        public int FeatureCaps;
        
        /// <summary>	
        /// <dd> <p>A bitwise <strong>OR</strong> of zero or more flags from the  <strong>D3D11_VIDEO_PROCESSPR_FILTER_CAPS</strong> enumeration.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_CAPS::FilterCaps']/*"/>	
        /// <msdn-id>hh447650</msdn-id>	
        /// <unmanaged>unsigned int FilterCaps</unmanaged>	
        /// <unmanaged-short>unsigned int FilterCaps</unmanaged-short>	
        public int FilterCaps;
        
        /// <summary>	
        /// <dd> <p>A bitwise <strong>OR</strong> of zero or more flags from the  <strong><see cref="SharpDX.Direct3D11.VideoProcessorFormatCaps"/></strong> enumeration.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_CAPS::InputFormatCaps']/*"/>	
        /// <msdn-id>hh447650</msdn-id>	
        /// <unmanaged>unsigned int InputFormatCaps</unmanaged>	
        /// <unmanaged-short>unsigned int InputFormatCaps</unmanaged-short>	
        public int InputFormatCaps;
        
        /// <summary>	
        /// <dd> <p>A bitwise <strong>OR</strong> of zero or more flags from the  <strong><see cref="SharpDX.Direct3D11.VideoProcessorAutoStreamCaps"/></strong> enumeration.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_CAPS::AutoStreamCaps']/*"/>	
        /// <msdn-id>hh447650</msdn-id>	
        /// <unmanaged>unsigned int AutoStreamCaps</unmanaged>	
        /// <unmanaged-short>unsigned int AutoStreamCaps</unmanaged-short>	
        public int AutoStreamCaps;
        
        /// <summary>	
        /// <dd> <p>A bitwise <strong>OR</strong> of zero or more flags from the   <strong><see cref="SharpDX.Direct3D11.VideoProcessorStereoCaps"/></strong> enumeration.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_CAPS::StereoCaps']/*"/>	
        /// <msdn-id>hh447650</msdn-id>	
        /// <unmanaged>unsigned int StereoCaps</unmanaged>	
        /// <unmanaged-short>unsigned int StereoCaps</unmanaged-short>	
        public int StereoCaps;
        
        /// <summary>	
        /// <dd> <p>The number of frame-rate conversion capabilities. To enumerate the frame-rate conversion capabilities, call the <strong><see cref="SharpDX.Direct3D11.VideoProcessorEnumerator.GetVideoProcessorRateConversionCaps"/></strong> method.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_CAPS::RateConversionCapsCount']/*"/>	
        /// <msdn-id>hh447650</msdn-id>	
        /// <unmanaged>unsigned int RateConversionCapsCount</unmanaged>	
        /// <unmanaged-short>unsigned int RateConversionCapsCount</unmanaged-short>	
        public int RateConversionCapsCount;
        
        /// <summary>	
        /// <dd> <p>The maximum number of input streams that can be enabled at the same time. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_CAPS::MaxInputStreams']/*"/>	
        /// <msdn-id>hh447650</msdn-id>	
        /// <unmanaged>unsigned int MaxInputStreams</unmanaged>	
        /// <unmanaged-short>unsigned int MaxInputStreams</unmanaged-short>	
        public int MaxInputStreams;
        
        /// <summary>	
        /// <dd> <p>The maximum number of input streams for which the device can store state data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_CAPS::MaxStreamStates']/*"/>	
        /// <msdn-id>hh447650</msdn-id>	
        /// <unmanaged>unsigned int MaxStreamStates</unmanaged>	
        /// <unmanaged-short>unsigned int MaxStreamStates</unmanaged-short>	
        public int MaxStreamStates;
    }
    
    /// <summary>	
    /// <p>Specifies the color space for video processing.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <strong>RGB_Range</strong> member applies to RGB output, while the <strong>YCbCr_Matrix</strong> and <strong>YCbCr_xvYCC</strong> members apply to YCbCr output. If the driver performs color-space conversion on the background color, it uses the values that apply to both color spaces. </p><p>If the driver supports extended YCbCr (xvYCC), it returns the <strong><see cref="SharpDX.Direct3D11.VideoProcessorDeviceCaps.XvYCC"/></strong> capabilities flag in the <strong><see cref="SharpDX.Direct3D11.VideoProcessorEnumerator.GetVideoProcessorCaps"/></strong> method. Otherwise, the driver ignores the value of <strong>YCbCr_xvYCC</strong> and treats all YCbCr output as conventional YCbCr. </p><p>If extended YCbCr is supported, it can be used with either transfer matrix. Extended YCbCr does not change the black point or white point?the black point is still 16 and the white point is still 235. However, extended YCbCr explicitly allows blacker-than-black values in the range 1?15, and whiter-than-white values in the range 236?254. When extended YCbCr is used, the driver should not clip the luma values to the nominal 16?235 range.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_COLOR_SPACE']/*"/>	
    /// <msdn-id>hh447651</msdn-id>	
    /// <unmanaged>D3D11_VIDEO_PROCESSOR_COLOR_SPACE</unmanaged>	
    /// <unmanaged-short>D3D11_VIDEO_PROCESSOR_COLOR_SPACE</unmanaged-short>	
    [StructLayout(LayoutKind.Explicit)]
    public  partial struct VideoProcessorColorSpace {	
        
        /// <summary>	
        /// <dd> <p>Specifies whether the output is intended for playback or video processing (such as editing or authoring). The device can optimize the processing based on the type. The default state value is 0 (playback).  </p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td> <dl> <dt>0</dt> </dl> </td><td> <p>Playback</p> </td></tr> <tr><td> <dl> <dt>1</dt> </dl> </td><td> <p>Video processing</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_COLOR_SPACE::Usage']/*"/>	
        /// <msdn-id>hh447651</msdn-id>	
        /// <unmanaged>unsigned int Usage</unmanaged>	
        /// <unmanaged-short>unsigned int Usage</unmanaged-short>	
        public bool  Usage { 
            get { 
                return 0 != ((_Usage >> 0)  &  1);
            }
            set { 
                _Usage = (int)((_Usage & ~( 1 << 0)) | ( ( (value?1:0) & 1) << 0));
            }
        }
        [FieldOffset(0)]
        internal int _Usage;
		
        
        /// <summary>	
        /// <dd> <p>Specifies the RGB color range. The default state value is 0 (full range). </p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td> <dl> <dt>0</dt> </dl> </td><td> <p>Full range (0-255)</p> </td></tr> <tr><td> <dl> <dt>1</dt> </dl> </td><td> <p>Limited range (16-235)</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_COLOR_SPACE::RGB_Range']/*"/>	
        /// <msdn-id>hh447651</msdn-id>	
        /// <unmanaged>unsigned int RGB_Range</unmanaged>	
        /// <unmanaged-short>unsigned int RGB_Range</unmanaged-short>	
        public bool  RgbRange { 
            get { 
                return 0 != ((_RgbRange >> 1)  &  1);
            }
            set { 
                _RgbRange = (int)((_RgbRange & ~( 1 << 1)) | ( ( (value?1:0) & 1) << 1));
            }
        }
        [FieldOffset(0)]
        internal int _RgbRange;
		
        
        /// <summary>	
        /// <dd> <p>Specifies the YCbCr transfer matrix. The default state value is 0 (BT.601). </p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td> <dl> <dt>0</dt> </dl> </td><td> <p>ITU-R BT.601</p> </td></tr> <tr><td> <dl> <dt>1</dt> </dl> </td><td> <p>ITU-R BT.709</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_COLOR_SPACE::YCbCr_Matrix']/*"/>	
        /// <msdn-id>hh447651</msdn-id>	
        /// <unmanaged>unsigned int YCbCr_Matrix</unmanaged>	
        /// <unmanaged-short>unsigned int YCbCr_Matrix</unmanaged-short>	
        public bool  YCbCrMatrix { 
            get { 
                return 0 != ((_YCbCrMatrix >> 2)  &  1);
            }
            set { 
                _YCbCrMatrix = (int)((_YCbCrMatrix & ~( 1 << 2)) | ( ( (value?1:0) & 1) << 2));
            }
        }
        [FieldOffset(0)]
        internal int _YCbCrMatrix;
		
        
        /// <summary>	
        /// <dd> <p>Specifies whether the output uses conventional YCbCr or extended YCbCr (xvYCC). The default state value is zero (conventional YCbCr). </p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td> <dl> <dt>0</dt> </dl> </td><td> <p>Conventional YCbCr</p> </td></tr> <tr><td> <dl> <dt>1</dt> </dl> </td><td> <p>Extended YCbCr (xvYCC)</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_COLOR_SPACE::YCbCr_xvYCC']/*"/>	
        /// <msdn-id>hh447651</msdn-id>	
        /// <unmanaged>unsigned int YCbCr_xvYCC</unmanaged>	
        /// <unmanaged-short>unsigned int YCbCr_xvYCC</unmanaged-short>	
        public bool  YCbCrXvYCC { 
            get { 
                return 0 != ((_YCbCrXvYCC >> 3)  &  1);
            }
            set { 
                _YCbCrXvYCC = (int)((_YCbCrXvYCC & ~( 1 << 3)) | ( ( (value?1:0) & 1) << 3));
            }
        }
        [FieldOffset(0)]
        internal int _YCbCrXvYCC;
		
        
        /// <summary>	
        /// <dd> <p>Specifies the <strong><see cref="SharpDX.Direct3D11.VideoProcessorNominalRange"/></strong>. </p> <p>Introduced in Windows?8.1.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_COLOR_SPACE::Nominal_Range']/*"/>	
        /// <msdn-id>hh447651</msdn-id>	
        /// <unmanaged>unsigned int Nominal_Range</unmanaged>	
        /// <unmanaged-short>unsigned int Nominal_Range</unmanaged-short>	
        public int  NominalRange { 
            get { 
                return (int)((_NominalRange >> 4)  &  3);
            }
            set { 
                _NominalRange = (int)((_NominalRange & ~( 3 << 4)) | ( (value & 3) << 4));
            }
        }
        [FieldOffset(0)]
        internal int _NominalRange;
		
        
        /// <summary>	
        /// <dd> <p>Reserved. Set to zero.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_COLOR_SPACE::Reserved']/*"/>	
        /// <msdn-id>hh447651</msdn-id>	
        /// <unmanaged>unsigned int Reserved</unmanaged>	
        /// <unmanaged-short>unsigned int Reserved</unmanaged-short>	
        public int  Reserved { 
            get { 
                return (int)((_Reserved >> 6)  &  67108863);
            }
            set { 
                _Reserved = (int)((_Reserved & ~( 67108863 << 6)) | ( (value & 67108863) << 6));
            }
        }
        [FieldOffset(0)]
        internal int _Reserved;
		
    }
    
    /// <summary>	
    /// <p>Describes a video stream for a video processor.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_CONTENT_DESC']/*"/>	
    /// <msdn-id>hh447652</msdn-id>	
    /// <unmanaged>D3D11_VIDEO_PROCESSOR_CONTENT_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_VIDEO_PROCESSOR_CONTENT_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct VideoProcessorContentDescription {	
        
        /// <summary>	
        /// <dd> <p>A member of the <strong><see cref="SharpDX.Direct3D11.VideoFrameFormat"/></strong> enumeration that describes how the video stream is interlaced.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_CONTENT_DESC::InputFrameFormat']/*"/>	
        /// <msdn-id>hh447652</msdn-id>	
        /// <unmanaged>D3D11_VIDEO_FRAME_FORMAT InputFrameFormat</unmanaged>	
        /// <unmanaged-short>D3D11_VIDEO_FRAME_FORMAT InputFrameFormat</unmanaged-short>	
        public SharpDX.Direct3D11.VideoFrameFormat InputFrameFormat;
        
        /// <summary>	
        /// <dd> <p>The frame rate of the input video stream, specified as a <strong><see cref="SharpDX.DXGI.Rational"/></strong> structure. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_CONTENT_DESC::InputFrameRate']/*"/>	
        /// <msdn-id>hh447652</msdn-id>	
        /// <unmanaged>DXGI_RATIONAL InputFrameRate</unmanaged>	
        /// <unmanaged-short>DXGI_RATIONAL InputFrameRate</unmanaged-short>	
        public SharpDX.DXGI.Rational InputFrameRate;
        
        /// <summary>	
        /// <dd> <p>The width of the input frames, in pixels.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_CONTENT_DESC::InputWidth']/*"/>	
        /// <msdn-id>hh447652</msdn-id>	
        /// <unmanaged>unsigned int InputWidth</unmanaged>	
        /// <unmanaged-short>unsigned int InputWidth</unmanaged-short>	
        public int InputWidth;
        
        /// <summary>	
        /// <dd> <p>The height of the input frames, in pixels.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_CONTENT_DESC::InputHeight']/*"/>	
        /// <msdn-id>hh447652</msdn-id>	
        /// <unmanaged>unsigned int InputHeight</unmanaged>	
        /// <unmanaged-short>unsigned int InputHeight</unmanaged-short>	
        public int InputHeight;
        
        /// <summary>	
        /// <dd> <p>The frame rate of the output video stream, specified as a <strong><see cref="SharpDX.DXGI.Rational"/></strong> structure. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_CONTENT_DESC::OutputFrameRate']/*"/>	
        /// <msdn-id>hh447652</msdn-id>	
        /// <unmanaged>DXGI_RATIONAL OutputFrameRate</unmanaged>	
        /// <unmanaged-short>DXGI_RATIONAL OutputFrameRate</unmanaged-short>	
        public SharpDX.DXGI.Rational OutputFrameRate;
        
        /// <summary>	
        /// <dd> <p>The width of the output frames, in pixels. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_CONTENT_DESC::OutputWidth']/*"/>	
        /// <msdn-id>hh447652</msdn-id>	
        /// <unmanaged>unsigned int OutputWidth</unmanaged>	
        /// <unmanaged-short>unsigned int OutputWidth</unmanaged-short>	
        public int OutputWidth;
        
        /// <summary>	
        /// <dd> <p>The height of the output frames, in pixels.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_CONTENT_DESC::OutputHeight']/*"/>	
        /// <msdn-id>hh447652</msdn-id>	
        /// <unmanaged>unsigned int OutputHeight</unmanaged>	
        /// <unmanaged-short>unsigned int OutputHeight</unmanaged-short>	
        public int OutputHeight;
        
        /// <summary>	
        /// <dd> <p>A member of the <strong><see cref="SharpDX.Direct3D11.VideoUsage"/></strong> enumeration that describes how the video processor will be used. The value indicates the desired trade-off between speed and video quality. The driver uses this flag as a hint when it creates the video processor.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_CONTENT_DESC::Usage']/*"/>	
        /// <msdn-id>hh447652</msdn-id>	
        /// <unmanaged>D3D11_VIDEO_USAGE Usage</unmanaged>	
        /// <unmanaged-short>D3D11_VIDEO_USAGE Usage</unmanaged-short>	
        public SharpDX.Direct3D11.VideoUsage Usage;
    }
    
    /// <summary>	
    /// <p>Specifies a custom rate for frame-rate conversion or inverse telecine (IVTC). </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <strong>CustomRate</strong> member gives the rate conversion factor, while the remaining members define the pattern of input and output samples.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_CUSTOM_RATE']/*"/>	
    /// <msdn-id>hh447653</msdn-id>	
    /// <unmanaged>D3D11_VIDEO_PROCESSOR_CUSTOM_RATE</unmanaged>	
    /// <unmanaged-short>D3D11_VIDEO_PROCESSOR_CUSTOM_RATE</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct VideoProcessorCustomRate {	
        
        /// <summary>	
        /// <dd> <p>The ratio of the output frame rate to the input frame rate, expressed as a <strong><see cref="SharpDX.DXGI.Rational"/></strong> structure that holds a rational number. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_CUSTOM_RATE::CustomRate']/*"/>	
        /// <msdn-id>hh447653</msdn-id>	
        /// <unmanaged>DXGI_RATIONAL CustomRate</unmanaged>	
        /// <unmanaged-short>DXGI_RATIONAL CustomRate</unmanaged-short>	
        public SharpDX.DXGI.Rational CustomRate;
        
        /// <summary>	
        /// <dd> <p>The number of output frames that will be generated for every <em>N</em> input samples, where <em>N</em> = <strong>InputFramesOrFields</strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_CUSTOM_RATE::OutputFrames']/*"/>	
        /// <msdn-id>hh447653</msdn-id>	
        /// <unmanaged>unsigned int OutputFrames</unmanaged>	
        /// <unmanaged-short>unsigned int OutputFrames</unmanaged-short>	
        public int OutputFrames;
        
        /// <summary>	
        /// <dd> <p>If <strong>TRUE</strong>, the input stream must be interlaced. Otherwise, the input stream must be progressive. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_CUSTOM_RATE::InputInterlaced']/*"/>	
        /// <msdn-id>hh447653</msdn-id>	
        /// <unmanaged>BOOL InputInterlaced</unmanaged>	
        /// <unmanaged-short>BOOL InputInterlaced</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool InputInterlaced;
        
        /// <summary>	
        /// <dd> <p>The number of input fields or frames for every <em>N</em> output frames that will be generated, where <em>N</em> = <strong>OutputFrames</strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_CUSTOM_RATE::InputFramesOrFields']/*"/>	
        /// <msdn-id>hh447653</msdn-id>	
        /// <unmanaged>unsigned int InputFramesOrFields</unmanaged>	
        /// <unmanaged-short>unsigned int InputFramesOrFields</unmanaged-short>	
        public int InputFramesOrFields;
    }
    
    /// <summary>	
    /// <p>Defines the range of supported values for an image filter. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The multiplier enables the filter range to have a fractional step value.</p><p>For example, a hue filter might have an actual range of [?180.0 ... +180.0] with a step size of 0.25. The device would report the following range and multiplier:</p><ul> <li>Minimum: ?720</li> <li>Maximum: +720</li> <li>Multiplier: 0.25</li> </ul><p>In this case,  a filter value of 2 would be interpreted by the device as 0.50 (or 2 ? 0.25).</p><p>The device should use  a multiplier that can be represented exactly as a base-2 fraction.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_FILTER_RANGE']/*"/>	
    /// <msdn-id>hh447657</msdn-id>	
    /// <unmanaged>D3D11_VIDEO_PROCESSOR_FILTER_RANGE</unmanaged>	
    /// <unmanaged-short>D3D11_VIDEO_PROCESSOR_FILTER_RANGE</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct VideoProcessorFilterRange {	
        
        /// <summary>	
        /// <dd> <p>The minimum value of the filter. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_FILTER_RANGE::Minimum']/*"/>	
        /// <msdn-id>hh447657</msdn-id>	
        /// <unmanaged>int Minimum</unmanaged>	
        /// <unmanaged-short>int Minimum</unmanaged-short>	
        public int Minimum;
        
        /// <summary>	
        /// <dd> <p>The maximum value of the filter. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_FILTER_RANGE::Maximum']/*"/>	
        /// <msdn-id>hh447657</msdn-id>	
        /// <unmanaged>int Maximum</unmanaged>	
        /// <unmanaged-short>int Maximum</unmanaged-short>	
        public int Maximum;
        
        /// <summary>	
        /// <dd> <p>The default value of the filter. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_FILTER_RANGE::Default']/*"/>	
        /// <msdn-id>hh447657</msdn-id>	
        /// <unmanaged>int Default</unmanaged>	
        /// <unmanaged-short>int Default</unmanaged-short>	
        public int Default;
        
        /// <summary>	
        /// <dd> <p>A multiplier. Use the following formula to translate the filter setting into the actual filter value: <em>Actual Value</em> = <em>Set Value</em>???<em>Multiplier</em>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_FILTER_RANGE::Multiplier']/*"/>	
        /// <msdn-id>hh447657</msdn-id>	
        /// <unmanaged>float Multiplier</unmanaged>	
        /// <unmanaged-short>float Multiplier</unmanaged-short>	
        public float Multiplier;
    }
    
    /// <summary>	
    /// <p>Describes a video processor input view.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC']/*"/>	
    /// <msdn-id>hh447660</msdn-id>	
    /// <unmanaged>D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct VideoProcessorInputViewDescription {	
        
        /// <summary>	
        /// <dd> <p>The surface format. If zero, the driver uses the DXGI format that was used to create the resource. If you are using feature level 9, the value must be zero.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC::FourCC']/*"/>	
        /// <msdn-id>hh447660</msdn-id>	
        /// <unmanaged>unsigned int FourCC</unmanaged>	
        /// <unmanaged-short>unsigned int FourCC</unmanaged-short>	
        public int FourCC;
        
        /// <summary>	
        /// <dd> <p>The resource type of the view, specified as a member of the <strong><see cref="SharpDX.Direct3D11.VpivDimension"/></strong> enumeration.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC::ViewDimension']/*"/>	
        /// <msdn-id>hh447660</msdn-id>	
        /// <unmanaged>D3D11_VPIV_DIMENSION ViewDimension</unmanaged>	
        /// <unmanaged-short>D3D11_VPIV_DIMENSION ViewDimension</unmanaged-short>	
        public SharpDX.Direct3D11.VpivDimension Dimension;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.Texture2DVpiv"/></strong> structure that identifies the texture resource.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC::Texture2D']/*"/>	
        /// <msdn-id>hh447660</msdn-id>	
        /// <unmanaged>D3D11_TEX2D_VPIV Texture2D</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2D_VPIV Texture2D</unmanaged-short>	
        public SharpDX.Direct3D11.Texture2DVpiv Texture2D;
    }
    
    /// <summary>	
    /// <p>Describes a video processor output view.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC']/*"/>	
    /// <msdn-id>hh447663</msdn-id>	
    /// <unmanaged>D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Explicit)]
    public  partial struct VideoProcessorOutputViewDescription {	
        
        /// <summary>	
        /// <dd> <p>The resource type of the view, specified as a member of the <strong><see cref="SharpDX.Direct3D11.VpovDimension"/></strong> enumeration.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC::ViewDimension']/*"/>	
        /// <msdn-id>hh447663</msdn-id>	
        /// <unmanaged>D3D11_VPOV_DIMENSION ViewDimension</unmanaged>	
        /// <unmanaged-short>D3D11_VPOV_DIMENSION ViewDimension</unmanaged-short>	
        [FieldOffset(0)]
        public SharpDX.Direct3D11.VpovDimension Dimension;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.Texture2DVpov"/></strong> structure that identifies the texture resource for the output view. </p> <p>Use this member of the union when <strong>ViewDimension</strong> equals <strong><see cref="SharpDX.Direct3D11.VpovDimension.Texture2D"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC::Texture2D']/*"/>	
        /// <msdn-id>hh447663</msdn-id>	
        /// <unmanaged>D3D11_TEX2D_VPOV Texture2D</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2D_VPOV Texture2D</unmanaged-short>	
        [FieldOffset(4)]
        public SharpDX.Direct3D11.Texture2DVpov Texture2D;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D11.Texture2DArrayVpov"/></strong> structure that identifies the texture array for the output view. </p> <p>Use this member of the union when <strong>ViewDimension</strong> equals <strong><see cref="SharpDX.Direct3D11.VpovDimension.Texture2DArray"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC::Texture2DArray']/*"/>	
        /// <msdn-id>hh447663</msdn-id>	
        /// <unmanaged>D3D11_TEX2D_ARRAY_VPOV Texture2DArray</unmanaged>	
        /// <unmanaged-short>D3D11_TEX2D_ARRAY_VPOV Texture2DArray</unmanaged-short>	
        [FieldOffset(4)]
        public SharpDX.Direct3D11.Texture2DArrayVpov Texture2DArray;
    }
    
    /// <summary>	
    /// <p>Defines a group of video processor capabilities that are associated with frame-rate conversion, including deinterlacing and inverse telecine.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS']/*"/>	
    /// <msdn-id>hh447665</msdn-id>	
    /// <unmanaged>D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS</unmanaged>	
    /// <unmanaged-short>D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct VideoProcessorRateConversionCaps {	
        
        /// <summary>	
        /// <dd> <p>The number of past reference frames required to perform the optimal video processing. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS::PastFrames']/*"/>	
        /// <msdn-id>hh447665</msdn-id>	
        /// <unmanaged>unsigned int PastFrames</unmanaged>	
        /// <unmanaged-short>unsigned int PastFrames</unmanaged-short>	
        public int PastFrames;
        
        /// <summary>	
        /// <dd> <p>The number of future reference frames required to perform the optimal video processing. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS::FutureFrames']/*"/>	
        /// <msdn-id>hh447665</msdn-id>	
        /// <unmanaged>unsigned int FutureFrames</unmanaged>	
        /// <unmanaged-short>unsigned int FutureFrames</unmanaged-short>	
        public int FutureFrames;
        
        /// <summary>	
        /// <dd> <p>A bitwise <strong>OR</strong> of zero or more flags from the <strong><see cref="SharpDX.Direct3D11.VideoProcessorProcessorCaps"/></strong> enumeration. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS::ProcessorCaps']/*"/>	
        /// <msdn-id>hh447665</msdn-id>	
        /// <unmanaged>unsigned int ProcessorCaps</unmanaged>	
        /// <unmanaged-short>unsigned int ProcessorCaps</unmanaged-short>	
        public int ProcessorCaps;
        
        /// <summary>	
        /// <dd> <p>A bitwise <strong>OR</strong> of zero or more flags from the <strong><see cref="SharpDX.Direct3D11.VideoProcessorItelecineCaps"/></strong> enumeration. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS::ITelecineCaps']/*"/>	
        /// <msdn-id>hh447665</msdn-id>	
        /// <unmanaged>unsigned int ITelecineCaps</unmanaged>	
        /// <unmanaged-short>unsigned int ITelecineCaps</unmanaged-short>	
        public int ITelecineCaps;
        
        /// <summary>	
        /// <dd> <p>The number of custom frame rates that the driver supports. To get the list of custom frame rates, call the <strong><see cref="SharpDX.Direct3D11.VideoProcessorEnumerator.GetVideoProcessorCustomRate"/></strong> method.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS::CustomRateCount']/*"/>	
        /// <msdn-id>hh447665</msdn-id>	
        /// <unmanaged>unsigned int CustomRateCount</unmanaged>	
        /// <unmanaged-short>unsigned int CustomRateCount</unmanaged-short>	
        public int CustomRateCount;
    }
    
    /// <summary>	
    /// <p>Contains stream-level data for the <strong><see cref="SharpDX.Direct3D11.VideoContext.VideoProcessorBlt"/></strong> method. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>If the stereo 3D format is <strong><see cref="SharpDX.Direct3D11.VideoProcessorStereoFormat.Separate"/></strong>, the <strong>ppPastSurfaces</strong>, <strong>pInputSurface</strong>, and <strong>ppFutureSurfaces</strong> members contain the left view.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_STREAM']/*"/>	
    /// <msdn-id>hh447670</msdn-id>	
    /// <unmanaged>D3D11_VIDEO_PROCESSOR_STREAM</unmanaged>	
    /// <unmanaged-short>D3D11_VIDEO_PROCESSOR_STREAM</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct VideoProcessorStream {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_STREAM::Enable']/*"/>	
        /// <msdn-id>hh447670</msdn-id>	
        /// <unmanaged>BOOL Enable</unmanaged>	
        /// <unmanaged-short>BOOL Enable</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool Enable;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_STREAM::OutputIndex']/*"/>	
        /// <msdn-id>hh447670</msdn-id>	
        /// <unmanaged>unsigned int OutputIndex</unmanaged>	
        /// <unmanaged-short>unsigned int OutputIndex</unmanaged-short>	
        public int OutputIndex;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_STREAM::InputFrameOrField']/*"/>	
        /// <msdn-id>hh447670</msdn-id>	
        /// <unmanaged>unsigned int InputFrameOrField</unmanaged>	
        /// <unmanaged-short>unsigned int InputFrameOrField</unmanaged-short>	
        public int InputFrameOrField;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_STREAM::PastFrames']/*"/>	
        /// <msdn-id>hh447670</msdn-id>	
        /// <unmanaged>unsigned int PastFrames</unmanaged>	
        /// <unmanaged-short>unsigned int PastFrames</unmanaged-short>	
        public int PastFrames;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_STREAM::FutureFrames']/*"/>	
        /// <msdn-id>hh447670</msdn-id>	
        /// <unmanaged>unsigned int FutureFrames</unmanaged>	
        /// <unmanaged-short>unsigned int FutureFrames</unmanaged-short>	
        public int FutureFrames;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_STREAM::ppPastSurfaces']/*"/>	
        /// <msdn-id>hh447670</msdn-id>	
        /// <unmanaged>ID3D11VideoProcessorInputView** ppPastSurfaces</unmanaged>	
        /// <unmanaged-short>ID3D11VideoProcessorInputView ppPastSurfaces</unmanaged-short>	
        public System.IntPtr PpPastSurfaces;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_STREAM::pInputSurface']/*"/>	
        /// <msdn-id>hh447670</msdn-id>	
        /// <unmanaged>ID3D11VideoProcessorInputView* pInputSurface</unmanaged>	
        /// <unmanaged-short>ID3D11VideoProcessorInputView pInputSurface</unmanaged-short>	
        public System.IntPtr PInputSurface;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_STREAM::ppFutureSurfaces']/*"/>	
        /// <msdn-id>hh447670</msdn-id>	
        /// <unmanaged>ID3D11VideoProcessorInputView** ppFutureSurfaces</unmanaged>	
        /// <unmanaged-short>ID3D11VideoProcessorInputView ppFutureSurfaces</unmanaged-short>	
        public System.IntPtr PpFutureSurfaces;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_STREAM::ppPastSurfacesRight']/*"/>	
        /// <msdn-id>hh447670</msdn-id>	
        /// <unmanaged>ID3D11VideoProcessorInputView** ppPastSurfacesRight</unmanaged>	
        /// <unmanaged-short>ID3D11VideoProcessorInputView ppPastSurfacesRight</unmanaged-short>	
        public System.IntPtr PpPastSurfacesRight;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_STREAM::pInputSurfaceRight']/*"/>	
        /// <msdn-id>hh447670</msdn-id>	
        /// <unmanaged>ID3D11VideoProcessorInputView* pInputSurfaceRight</unmanaged>	
        /// <unmanaged-short>ID3D11VideoProcessorInputView pInputSurfaceRight</unmanaged-short>	
        public System.IntPtr PInputSurfaceRight;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_STREAM::ppFutureSurfacesRight']/*"/>	
        /// <msdn-id>hh447670</msdn-id>	
        /// <unmanaged>ID3D11VideoProcessorInputView** ppFutureSurfacesRight</unmanaged>	
        /// <unmanaged-short>ID3D11VideoProcessorInputView ppFutureSurfacesRight</unmanaged-short>	
        public System.IntPtr PpFutureSurfacesRight;
    }
    
    /// <summary>	
    /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Provides information about the input streams passed into the <strong>ID3DVideoContext1::VideoProcessorGetBehaviorHints</strong> method.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT']/*"/>	
    /// <msdn-id>dn894123</msdn-id>	
    /// <unmanaged>D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT</unmanaged>	
    /// <unmanaged-short>D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct VideoProcessorStreamBehaviorHint {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT::Enable']/*"/>	
        /// <msdn-id>dn894123</msdn-id>	
        /// <unmanaged>BOOL Enable</unmanaged>	
        /// <unmanaged-short>BOOL Enable</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool Enable;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT::Width']/*"/>	
        /// <msdn-id>dn894123</msdn-id>	
        /// <unmanaged>unsigned int Width</unmanaged>	
        /// <unmanaged-short>unsigned int Width</unmanaged-short>	
        public int Width;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT::Height']/*"/>	
        /// <msdn-id>dn894123</msdn-id>	
        /// <unmanaged>unsigned int Height</unmanaged>	
        /// <unmanaged-short>unsigned int Height</unmanaged-short>	
        public int Height;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT::Format']/*"/>	
        /// <msdn-id>dn894123</msdn-id>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        public SharpDX.DXGI.Format Format;
    }
    
    /// <summary>	
    /// <p>[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]</p><p>Describes a video sample.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_SAMPLE_DESC']/*"/>	
    /// <msdn-id>dn894124</msdn-id>	
    /// <unmanaged>D3D11_VIDEO_SAMPLE_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_VIDEO_SAMPLE_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct VideoSampleDescription {	
        
        /// <summary>	
        /// <dd> <p>The width of the video sample.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_SAMPLE_DESC::Width']/*"/>	
        /// <msdn-id>dn894124</msdn-id>	
        /// <unmanaged>unsigned int Width</unmanaged>	
        /// <unmanaged-short>unsigned int Width</unmanaged-short>	
        public int Width;
        
        /// <summary>	
        /// <dd> <p>The height of the video sample.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_SAMPLE_DESC::Height']/*"/>	
        /// <msdn-id>dn894124</msdn-id>	
        /// <unmanaged>unsigned int Height</unmanaged>	
        /// <unmanaged-short>unsigned int Height</unmanaged-short>	
        public int Height;
        
        /// <summary>	
        /// <dd> <p>The format of the video sample.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_SAMPLE_DESC::Format']/*"/>	
        /// <msdn-id>dn894124</msdn-id>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        public SharpDX.DXGI.Format Format;
        
        /// <summary>	
        /// <dd> <p>The colorspace of the sample.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_VIDEO_SAMPLE_DESC::ColorSpace']/*"/>	
        /// <msdn-id>dn894124</msdn-id>	
        /// <unmanaged>DXGI_COLOR_SPACE_TYPE ColorSpace</unmanaged>	
        /// <unmanaged-short>DXGI_COLOR_SPACE_TYPE ColorSpace</unmanaged-short>	
        public SharpDX.DXGI.ColorSpaceType ColorSpace;
    }
}
