// Copyright (c) 2010-2014 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Types declaration for SharpDX.XInput namespace.
//     This code was generated by a tool.
//     Date : 6/25/2016 10:38:10 PM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
namespace SharpDX.XInput {

#pragma warning disable 282
#pragma warning disable 649
#pragma warning disable 419
#pragma warning disable 1587
#pragma warning disable 1574
    
    /// <summary>	
    /// <p>Contains information on battery type and charge state.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XINPUT_BATTERY_INFORMATION']/*"/>	
    /// <msdn-id>microsoft.directx_sdk.reference.xinput_battery_information</msdn-id>	
    /// <unmanaged>XINPUT_BATTERY_INFORMATION</unmanaged>	
    /// <unmanaged-short>XINPUT_BATTERY_INFORMATION</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct BatteryInformation {	
        
        /// <summary>	
        /// <dd> <p>The type of battery. <em>BatteryType</em> will be one of the following values. </p> <table> <tr><th>Value</th><th>Description</th></tr> <tr><td><see cref="SharpDX.XInput.BatteryType.Disconnected"/></td><td>The device is not connected.?</td></tr> <tr><td><see cref="SharpDX.XInput.BatteryType.Wired"/></td><td>The device is a wired device and does not have a battery.?</td></tr> <tr><td><see cref="SharpDX.XInput.BatteryType.Alkaline"/></td><td>The device has an alkaline battery.?</td></tr> <tr><td><see cref="SharpDX.XInput.BatteryType.Nimh"/></td><td>The device has a nickel metal hydride battery.?</td></tr> <tr><td><see cref="SharpDX.XInput.BatteryType.Unknown"/></td><td>The device has an unknown  battery type.?</td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XINPUT_BATTERY_INFORMATION::BatteryType']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.reference.xinput_battery_information</msdn-id>	
        /// <unmanaged>BATTERY_TYPE BatteryType</unmanaged>	
        /// <unmanaged-short>BATTERY_TYPE BatteryType</unmanaged-short>	
        public SharpDX.XInput.BatteryType BatteryType;
        
        /// <summary>	
        /// <dd> <p>The charge state of the battery. This value is only valid for wireless devices with a known battery type. <em>BatteryLevel</em> will be one of the following values. </p> <table> <tr><th>Value</th></tr> <tr><td><see cref="SharpDX.XInput.BatteryLevel.Empty"/></td></tr> <tr><td><see cref="SharpDX.XInput.BatteryLevel.Low"/></td></tr> <tr><td><see cref="SharpDX.XInput.BatteryLevel.Medium"/></td></tr> <tr><td><see cref="SharpDX.XInput.BatteryLevel.Full"/></td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XINPUT_BATTERY_INFORMATION::BatteryLevel']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.reference.xinput_battery_information</msdn-id>	
        /// <unmanaged>BATTERY_LEVEL BatteryLevel</unmanaged>	
        /// <unmanaged-short>BATTERY_LEVEL BatteryLevel</unmanaged-short>	
        public SharpDX.XInput.BatteryLevel BatteryLevel;
    }
    
    /// <summary>	
    /// <p>Describes the capabilities of a connected controller. The <strong><see cref="SharpDX.XInput.XInput.XInputGetCapabilities"/></strong> function returns <strong><see cref="SharpDX.XInput.Capabilities"/></strong>. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> <strong><see cref="SharpDX.XInput.XInput.XInputGetCapabilities"/></strong> returns <strong><see cref="SharpDX.XInput.Capabilities"/></strong> to indicate the characteristics and available functionality of a specified controller. </p><p> <strong><see cref="SharpDX.XInput.XInput.XInputGetCapabilities"/></strong> sets the structure members to indicate which inputs the device supports. For binary state controls, such as digital buttons, the corresponding bit reflects whether or not the control is supported by the device. For proportional controls, such as thumbsticks, the value indicates the resolution for that control. Some number of the least significant bits may not be set, indicating that the control does not provide resolution to that level. </p><p>The <em>SubType</em> member indicates the specific subtype of controller present. Games may detect the controller subtype and tune their handling of controller input or output based on subtypes that are well suited to their game genre. For example, a car racing game might check for the presence of a wheel controller to provide finer control of the car being driven. However, titles must not disable or ignore a device based on its subtype. Subtypes not recognized by the game or for which the game is not specifically tuned should be treated as a standard Xbox 360 Controller (<see cref="SharpDX.XInput.DeviceSubType.Gamepad"/>). </p><p>Older XUSB Windows drivers report incomplete capabilities information, particularly for wireless devices. The latest XUSB Windows driver provides full support for wired and wireless devices, and more complete and accurate capabilties flags. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XINPUT_CAPABILITIES']/*"/>	
    /// <msdn-id>microsoft.directx_sdk.reference.xinput_capabilities</msdn-id>	
    /// <unmanaged>XINPUT_CAPABILITIES</unmanaged>	
    /// <unmanaged-short>XINPUT_CAPABILITIES</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct Capabilities {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XINPUT_CAPABILITIES::Type']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.reference.xinput_capabilities</msdn-id>	
        /// <unmanaged>XINPUT_DEVTYPE Type</unmanaged>	
        /// <unmanaged-short>XINPUT_DEVTYPE Type</unmanaged-short>	
        public SharpDX.XInput.DeviceType Type;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XINPUT_CAPABILITIES::SubType']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.reference.xinput_capabilities</msdn-id>	
        /// <unmanaged>XINPUT_DEVSUBTYPE SubType</unmanaged>	
        /// <unmanaged-short>XINPUT_DEVSUBTYPE SubType</unmanaged-short>	
        public SharpDX.XInput.DeviceSubType SubType;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XINPUT_CAPABILITIES::Flags']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.reference.xinput_capabilities</msdn-id>	
        /// <unmanaged>XINPUT_CAPS_FLAGS Flags</unmanaged>	
        /// <unmanaged-short>XINPUT_CAPS_FLAGS Flags</unmanaged-short>	
        public SharpDX.XInput.CapabilityFlags Flags;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XINPUT_CAPABILITIES::Gamepad']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.reference.xinput_capabilities</msdn-id>	
        /// <unmanaged>XINPUT_GAMEPAD Gamepad</unmanaged>	
        /// <unmanaged-short>XINPUT_GAMEPAD Gamepad</unmanaged-short>	
        public SharpDX.XInput.Gamepad Gamepad;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XINPUT_CAPABILITIES::Vibration']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.reference.xinput_capabilities</msdn-id>	
        /// <unmanaged>XINPUT_VIBRATION Vibration</unmanaged>	
        /// <unmanaged-short>XINPUT_VIBRATION Vibration</unmanaged-short>	
        public SharpDX.XInput.Vibration Vibration;
    }
    
    /// <summary>	
    /// <p>Describes the current state of the Xbox 360 Controller.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This structure is used by the <strong><see cref="SharpDX.XInput.State"/></strong> structure when polling for changes in the state of the controller. </p><p>The specific mapping of button to game function varies depending on the game type. </p><p>The constant XINPUT_GAMEPAD_TRIGGER_THRESHOLD may be used as the value which <em>bLeftTrigger</em> and <em>bRightTrigger</em> must be greater than to register as pressed. This is optional, but often desirable. Xbox 360 Controller buttons do not manifest crosstalk.	
    /// </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XINPUT_GAMEPAD']/*"/>	
    /// <msdn-id>microsoft.directx_sdk.reference.xinput_gamepad</msdn-id>	
    /// <unmanaged>XINPUT_GAMEPAD</unmanaged>	
    /// <unmanaged-short>XINPUT_GAMEPAD</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct Gamepad {	
        
        /// <summary>Constant LeftThumbDeadZone.</summary>
        /// <unmanaged>XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE</unmanaged>
        public const short LeftThumbDeadZone = 7849;
        
        /// <summary>Constant RightThumbDeadZone.</summary>
        /// <unmanaged>XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE</unmanaged>
        public const short RightThumbDeadZone = 8689;
        
        /// <summary>	
        /// <dd> <p>Bitmask of the device digital buttons, as follows. A set bit indicates that the corresponding button is pressed.  </p> <table> <tr><th>Device button</th><th>Bitmask</th></tr> <tr><td><see cref="SharpDX.XInput.GamepadButtonFlags.DPadUp"/></td><td> 0x0001</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadButtonFlags.DPadDown"/></td><td> 0x0002</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadButtonFlags.DPadLeft"/></td><td> 0x0004</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadButtonFlags.DPadRight"/></td><td> 0x0008</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadButtonFlags.Start"/></td><td> 0x0010</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadButtonFlags.Back"/></td><td> 0x0020</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadButtonFlags.LeftThumb"/></td><td> 0x0040</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadButtonFlags.RightThumb"/></td><td> 0x0080</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadButtonFlags.LeftShoulder"/></td><td> 0x0100</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadButtonFlags.RightShoulder"/></td><td> 0x0200</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadButtonFlags.A"/></td><td> 0x1000</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadButtonFlags.B"/></td><td> 0x2000</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadButtonFlags.X"/></td><td> 0x4000</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadButtonFlags.Y"/></td><td> 0x8000</td></tr> </table> <p>?</p> <p>Bits that are set but not defined above are reserved, and their state is undefined. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XINPUT_GAMEPAD::wButtons']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.reference.xinput_gamepad</msdn-id>	
        /// <unmanaged>XINPUT_GAMEPAD_BUTTON_FLAGS wButtons</unmanaged>	
        /// <unmanaged-short>XINPUT_GAMEPAD_BUTTON_FLAGS wButtons</unmanaged-short>	
        public SharpDX.XInput.GamepadButtonFlags Buttons;
        
        /// <summary>	
        /// <dd> <p>The current value of the left trigger analog control. The value is between 0 and 255.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XINPUT_GAMEPAD::bLeftTrigger']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.reference.xinput_gamepad</msdn-id>	
        /// <unmanaged>unsigned char bLeftTrigger</unmanaged>	
        /// <unmanaged-short>unsigned char bLeftTrigger</unmanaged-short>	
        public byte LeftTrigger;
        
        /// <summary>	
        /// <dd> <p>The current value of the right trigger analog control. The value is between 0 and 255.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XINPUT_GAMEPAD::bRightTrigger']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.reference.xinput_gamepad</msdn-id>	
        /// <unmanaged>unsigned char bRightTrigger</unmanaged>	
        /// <unmanaged-short>unsigned char bRightTrigger</unmanaged-short>	
        public byte RightTrigger;
        
        /// <summary>	
        /// <dd> <p>Left thumbstick x-axis value. Each of the thumbstick axis members is a signed value between -32768 and 32767 describing the position of the thumbstick. A value of 0 is centered. Negative values signify down or to the left. Positive values signify up or to the right. The constants <see cref="SharpDX.XInput.Gamepad.LeftThumbDeadZone"/> or <see cref="SharpDX.XInput.Gamepad.RightThumbDeadZone"/> can be used as a positive and negative value to filter a thumbstick input. 	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XINPUT_GAMEPAD::sThumbLX']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.reference.xinput_gamepad</msdn-id>	
        /// <unmanaged>short sThumbLX</unmanaged>	
        /// <unmanaged-short>short sThumbLX</unmanaged-short>	
        public short LeftThumbX;
        
        /// <summary>	
        /// <dd> <p>Left thumbstick y-axis value. The value is between -32768 and 32767.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XINPUT_GAMEPAD::sThumbLY']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.reference.xinput_gamepad</msdn-id>	
        /// <unmanaged>short sThumbLY</unmanaged>	
        /// <unmanaged-short>short sThumbLY</unmanaged-short>	
        public short LeftThumbY;
        
        /// <summary>	
        /// <dd> <p>Right thumbstick x-axis value. The value is between -32768 and 32767.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XINPUT_GAMEPAD::sThumbRX']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.reference.xinput_gamepad</msdn-id>	
        /// <unmanaged>short sThumbRX</unmanaged>	
        /// <unmanaged-short>short sThumbRX</unmanaged-short>	
        public short RightThumbX;
        
        /// <summary>	
        /// <dd> <p>Right thumbstick y-axis value. The value is between -32768 and 32767.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XINPUT_GAMEPAD::sThumbRY']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.reference.xinput_gamepad</msdn-id>	
        /// <unmanaged>short sThumbRY</unmanaged>	
        /// <unmanaged-short>short sThumbRY</unmanaged-short>	
        public short RightThumbY;
    }
    
    /// <summary>	
    /// <p>Specifies keystroke data returned by <strong><see cref="SharpDX.XInput.XInput.XInputGetKeystroke"/></strong>.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Future devices may return HID codes and virtual key values that are not supported on current devices, and are currently undefined. Applications should ignore these unexpected values. </p><p>A <em>virtual-key</em> code is a byte value that represents a particular physical key on the keyboard, not the character or characters (possibly none) that the key can be mapped to based on keyboard state. The keyboard state at the time a virtual key is pressed modifies the character reported. For example, VK_4 might represent a "4" or a "$", depending on the state of the SHIFT key. </p><p>A reported keyboard event includes the virtual key that caused the event, whether the key was pressed or released (or is repeating), and the state of the keyboard at the time of the event. The keyboard state includes information about whether any CTRL, ALT, or SHIFT keys are down. </p><p>If the keyboard event represents an Unicode character (for example, pressing the "A" key), the <em>Unicode</em> member will contain that character. Otherwise, <em>Unicode</em> will contain the value zero. </p><p>The valid virtual-key (VK_xxx) codes are defined in XInput.h. In addition to codes that indicate key presses, the following codes indicate controller input. </p><table> <tr><th>Value</th><th>Description</th></tr> <tr><td><see cref="SharpDX.XInput.GamepadKeyCode.A"/></td><td><strong>A</strong> button?</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadKeyCode.B"/></td><td><strong>B</strong> button?</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadKeyCode.X"/></td><td><strong>X</strong> button?</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadKeyCode.Y"/></td><td><strong>Y</strong> button?</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadKeyCode.RightShoulder"/></td><td>Right shoulder button?</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadKeyCode.LeftShoulder"/></td><td>Left shoulder button?</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadKeyCode.LeftTrigger"/></td><td>Left trigger?</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadKeyCode.RightTrigger"/></td><td>Right trigger?</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadKeyCode.DPadUp"/></td><td>Directional pad up?</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadKeyCode.DPadDown"/></td><td>Directional pad down?</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadKeyCode.DPadLeft"/></td><td>Directional pad left?</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadKeyCode.DPadRight"/></td><td>Directional pad right?</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadKeyCode.Start"/></td><td><strong>START</strong> button?</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadKeyCode.Back"/></td><td><strong>BACK</strong> button?</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadKeyCode.LeftThumbPress"/></td><td>Left thumbstick click?</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadKeyCode.RightThumbPress"/></td><td>Right thumbstick click?</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadKeyCode.LeftThumbUp"/></td><td>Left thumbstick up?</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadKeyCode.LeftThumbDown"/></td><td>Left thumbstick down?</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadKeyCode.LeftThumbRight"/></td><td>Left thumbstick right?</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadKeyCode.LeftThumbLeft"/></td><td>Left thumbstick left?</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadKeyCode.RightThumbUpLeft"/></td><td>Left thumbstick up and left?</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadKeyCode.LeftThumbUpright"/></td><td>Left thumbstick up and right?</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadKeyCode.LeftThumbDownright"/></td><td>Left thumbstick down and right?</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadKeyCode.RightThumbDownLeft"/></td><td>Left thumbstick down and left?</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadKeyCode.RightThumbUp"/></td><td>Right thumbstick up?</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadKeyCode.RightThumbDown"/></td><td>Right thumbstick down?</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadKeyCode.RightThumbRight"/></td><td>Right thumbstick right?</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadKeyCode.RightThumbLeft"/></td><td>Right thumbstick left?</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadKeyCode.RightThumbUpleft"/></td><td>Right thumbstick up and left?</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadKeyCode.RightThumbUpRight"/></td><td>Right thumbstick up and right?</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadKeyCode.RightThumbDownRight"/></td><td>Right thumbstick down and right?</td></tr> <tr><td><see cref="SharpDX.XInput.GamepadKeyCode.RightThumbDownleft"/></td><td>Right thumbstick down and left?</td></tr> </table><p>?</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XINPUT_KEYSTROKE']/*"/>	
    /// <msdn-id>microsoft.directx_sdk.reference.xinput_keystroke</msdn-id>	
    /// <unmanaged>XINPUT_KEYSTROKE</unmanaged>	
    /// <unmanaged-short>XINPUT_KEYSTROKE</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct Keystroke {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XINPUT_KEYSTROKE::VirtualKey']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.reference.xinput_keystroke</msdn-id>	
        /// <unmanaged>XINPUT_GAMEPAD_KEY_CODE VirtualKey</unmanaged>	
        /// <unmanaged-short>XINPUT_GAMEPAD_KEY_CODE VirtualKey</unmanaged-short>	
        public SharpDX.XInput.GamepadKeyCode VirtualKey;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XINPUT_KEYSTROKE::Unicode']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.reference.xinput_keystroke</msdn-id>	
        /// <unmanaged>wchar_t Unicode</unmanaged>	
        /// <unmanaged-short>wchar_t Unicode</unmanaged-short>	
        public char Unicode;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XINPUT_KEYSTROKE::Flags']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.reference.xinput_keystroke</msdn-id>	
        /// <unmanaged>XINPUT_KEYSTROKE_FLAGS Flags</unmanaged>	
        /// <unmanaged-short>XINPUT_KEYSTROKE_FLAGS Flags</unmanaged-short>	
        public SharpDX.XInput.KeyStrokeFlags Flags;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XINPUT_KEYSTROKE::UserIndex']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.reference.xinput_keystroke</msdn-id>	
        /// <unmanaged>XUSER_INDEX UserIndex</unmanaged>	
        /// <unmanaged-short>XUSER_INDEX UserIndex</unmanaged-short>	
        public SharpDX.XInput.UserIndex UserIndex;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XINPUT_KEYSTROKE::HidCode']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.reference.xinput_keystroke</msdn-id>	
        /// <unmanaged>unsigned char HidCode</unmanaged>	
        /// <unmanaged-short>unsigned char HidCode</unmanaged-short>	
        public byte HidCode;
    }
    
    /// <summary>	
    /// <p>Represents the state of a controller.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <em>dwPacketNumber</em> member is incremented only if the status of the controller has changed since the controller was last polled. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XINPUT_STATE']/*"/>	
    /// <msdn-id>microsoft.directx_sdk.reference.xinput_state</msdn-id>	
    /// <unmanaged>XINPUT_STATE</unmanaged>	
    /// <unmanaged-short>XINPUT_STATE</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct State {	
        
        /// <summary>	
        /// <dd> <p>State packet number. The packet number indicates whether there have been any changes in the state of the controller. If the <em>dwPacketNumber</em> member is the same in sequentially returned <strong><see cref="SharpDX.XInput.State"/></strong> structures, the controller state has not changed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XINPUT_STATE::dwPacketNumber']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.reference.xinput_state</msdn-id>	
        /// <unmanaged>unsigned int dwPacketNumber</unmanaged>	
        /// <unmanaged-short>unsigned int dwPacketNumber</unmanaged-short>	
        public int PacketNumber;
        
        /// <summary>	
        /// <dd> <p> <strong><see cref="SharpDX.XInput.Gamepad"/></strong> structure containing the current state of an Xbox 360 Controller.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XINPUT_STATE::Gamepad']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.reference.xinput_state</msdn-id>	
        /// <unmanaged>XINPUT_GAMEPAD Gamepad</unmanaged>	
        /// <unmanaged-short>XINPUT_GAMEPAD Gamepad</unmanaged-short>	
        public SharpDX.XInput.Gamepad Gamepad;
    }
    
    /// <summary>	
    /// <p>Specifies motor speed levels for the vibration function of a controller.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The left motor is the low-frequency rumble motor. The right motor is the high-frequency rumble motor. The two motors are not the same, and they create different vibration effects.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XINPUT_VIBRATION']/*"/>	
    /// <msdn-id>microsoft.directx_sdk.reference.xinput_vibration</msdn-id>	
    /// <unmanaged>XINPUT_VIBRATION</unmanaged>	
    /// <unmanaged-short>XINPUT_VIBRATION</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct Vibration {	
        
        /// <summary>	
        /// <dd> <p>Speed of the left motor. Valid values are in the range 0 to 65,535. Zero signifies no motor use; 65,535 signifies 100 percent motor use.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XINPUT_VIBRATION::wLeftMotorSpeed']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.reference.xinput_vibration</msdn-id>	
        /// <unmanaged>SHARPDX_USHORT wLeftMotorSpeed</unmanaged>	
        /// <unmanaged-short>SHARPDX_USHORT wLeftMotorSpeed</unmanaged-short>	
        public ushort LeftMotorSpeed;
        
        /// <summary>	
        /// <dd> <p>Speed of the right motor. Valid values are in the range 0 to 65,535. Zero signifies no motor use; 65,535 signifies 100 percent motor use.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XINPUT_VIBRATION::wRightMotorSpeed']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.reference.xinput_vibration</msdn-id>	
        /// <unmanaged>SHARPDX_USHORT wRightMotorSpeed</unmanaged>	
        /// <unmanaged-short>SHARPDX_USHORT wRightMotorSpeed</unmanaged-short>	
        public ushort RightMotorSpeed;
    }
}
