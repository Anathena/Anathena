// Copyright (c) 2010-2014 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Types declaration for SharpDX.DXGI namespace.
//     This code was generated by a tool.
//     Date : 6/25/2016 10:38:10 PM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
namespace SharpDX.DXGI {

// Disable warning : XML comment is not placed on a valid language element
#pragma warning disable 419
#pragma warning disable 1587
#pragma warning disable 1574
    /// <summary>	
    /// <p>The  <strong><see cref="SharpDX.DXGI.Adapter"/></strong> interface represents a display sub-system (including one or more GPU's, DACs and video memory).</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>A display sub-system is often referred to as a video card, however, on some machines the display sub-system is part of the mother board.</p><p>To enumerate the display sub-systems, use <strong><see cref="SharpDX.DXGI.Factory.GetAdapter"/></strong>. To get an interface to the adapter for a particular device, use <strong><see cref="SharpDX.DXGI.Device.GetAdapter"/></strong>. To create a software adapter, use <strong><see cref="SharpDX.DXGI.Factory.CreateSoftwareAdapter"/></strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIAdapter']/*"/>	
    /// <msdn-id>bb174523</msdn-id>	
    /// <unmanaged>IDXGIAdapter</unmanaged>	
    /// <unmanaged-short>IDXGIAdapter</unmanaged-short>	
    [Guid("2411e7e1-12ac-4ccf-bd14-9798e8534dc0")]
    public partial class Adapter : SharpDX.DXGI.DXGIObject {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.Adapter"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Adapter(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.Adapter"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.Adapter(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.Adapter(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Gets a DXGI 1.0 description of an adapter (or video card).</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>Graphics apps can use the DXGI API to retrieve an accurate set of graphics memory  values on systems that have Windows Display Driver Model (WDDM) drivers. The following are the critical steps involved.</p><ul> <li> Graphics driver model determination ? Because DXGI is only available on systems with WDDM drivers, the app must first confirm the driver model by using the following API.  <pre> HasWDDMDriver()	
        /// { LPDIRECT3DCREATE9EX pD3D9Create9Ex = <c>null</c>; HMODULE             hD3D9          = <c>null</c>; hD3D9 = LoadLibrary( L"d3d9.dll" ); if ( <c>null</c> == hD3D9 ) { return false; } // /*  Try to create IDirect3D9Ex interface (also known as a DX9L interface). This interface can only be created if the driver is a WDDM driver. */ // pD3D9Create9Ex = (LPDIRECT3DCREATE9EX) GetProcAddress( hD3D9, "Direct3DCreate9Ex" ); return pD3D9Create9Ex != <c>null</c>;	
        /// } </pre>  </li> <li> Retrieval of graphics memory values.? After the app determines the driver model to be WDDM, the app can use the Direct3D 10 or later API and DXGI to get the amount of graphics memory.  After you create a Direct3D device, use this code to obtain  a <strong><see cref="SharpDX.DXGI.AdapterDescription"/></strong> structure that contains the amount of available graphics memory.  <pre> <see cref="SharpDX.DXGI.Device"/> * pDXGIDevice;	
        /// hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(<see cref="SharpDX.DXGI.Device"/>), (void **)&amp;pDXGIDevice);	
        /// <see cref="SharpDX.DXGI.Adapter"/> * pDXGIAdapter;	
        /// pDXGIDevice-&gt;GetAdapter(&amp;pDXGIAdapter);	
        /// <see cref="SharpDX.DXGI.AdapterDescription"/> adapterDesc;	
        /// pDXGIAdapter-&gt;GetDesc(&amp;adapterDesc); </pre>  </li> </ul><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIAdapter::GetDesc']/*"/>	
        /// <msdn-id>bb174526</msdn-id>	
        /// <unmanaged>GetDesc</unmanaged>	
        /// <unmanaged-short>GetDesc</unmanaged-short>	
        /// <unmanaged>HRESULT IDXGIAdapter::GetDesc([Out] DXGI_ADAPTER_DESC* pDesc)</unmanaged>
        public SharpDX.DXGI.AdapterDescription Description {
                get { SharpDX.DXGI.AdapterDescription __output__; GetDescription(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// <p>Enumerate adapter (video card) outputs.</p>	
        /// </summary>	
        /// <param name="output"><dd>  <p>The index of the output.</p> </dd></param>	
        /// <param name="outputOut"><dd>  <p>The address of a reference to an <strong><see cref="SharpDX.DXGI.Output"/></strong> interface at the position specified by the <em>Output</em> parameter.</p> </dd></param>	
        /// <returns><p>A code that indicates success or failure (see DXGI_ERROR). Will return <see cref="SharpDX.DXGI.ResultCode.NotFound"/> if the index is greater than the number of outputs.</p></returns>	
        /// <remarks>	
        /// <p><strong>Note</strong>??If you call this API in a Session 0 process, it returns <strong><see cref="SharpDX.DXGI.ResultCode.NotCurrentlyAvailable"/></strong>.</p><p>When the <strong>EnumOutputs</strong> method succeeds and fills the <em>ppOutput</em> parameter with the address of the reference to the output interface, <strong>EnumOutputs</strong> increments the output interface's reference count. To avoid a memory leak, when you finish using the  output interface, call the <strong>Release</strong> method to decrement the reference count.</p><p><strong>EnumOutputs</strong> first returns the output on which the desktop primary is displayed. This output corresponds with an index of zero. <strong>EnumOutputs</strong> then returns other outputs.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIAdapter::EnumOutputs']/*"/>	
        /// <msdn-id>bb174525</msdn-id>	
        /// <unmanaged>HRESULT IDXGIAdapter::EnumOutputs([In] unsigned int Output,[Out] IDXGIOutput** ppOutput)</unmanaged>	
        /// <unmanaged-short>IDXGIAdapter::EnumOutputs</unmanaged-short>	
        internal SharpDX.Result GetOutput(int output, out SharpDX.DXGI.Output outputOut) {
            unsafe {
                IntPtr outputOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, output, &outputOut_,((void**)(*(void**)_nativePointer))[7]);		
                outputOut= (outputOut_ == IntPtr.Zero)?null:new SharpDX.DXGI.Output(outputOut_);	
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Gets a DXGI 1.0 description of an adapter (or video card).</p>	
        /// </summary>	
        /// <param name="descRef"><dd>  <p>A reference to a <strong><see cref="SharpDX.DXGI.AdapterDescription"/></strong> structure that describes the adapter. This parameter must not be <strong><c>null</c></strong>. On feature level 9 graphics hardware, <strong>GetDesc</strong> returns zeros for the PCI ID in the <strong>VendorId</strong>, <strong>DeviceId</strong>, <strong>SubSysId</strong>, and <strong>Revision</strong> members of <strong><see cref="SharpDX.DXGI.AdapterDescription"/></strong> and ?Software Adapter? for the description string in the <strong>Description</strong> member.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; otherwise returns E_INVALIDARG if the <em>pDesc</em> parameter is <strong><c>null</c></strong>.   </p></returns>	
        /// <remarks>	
        /// <p>Graphics apps can use the DXGI API to retrieve an accurate set of graphics memory  values on systems that have Windows Display Driver Model (WDDM) drivers. The following are the critical steps involved.</p><ul> <li> Graphics driver model determination ? Because DXGI is only available on systems with WDDM drivers, the app must first confirm the driver model by using the following API.  <pre> HasWDDMDriver()	
        /// { LPDIRECT3DCREATE9EX pD3D9Create9Ex = <c>null</c>; HMODULE             hD3D9          = <c>null</c>; hD3D9 = LoadLibrary( L"d3d9.dll" ); if ( <c>null</c> == hD3D9 ) { return false; } // /*  Try to create IDirect3D9Ex interface (also known as a DX9L interface). This interface can only be created if the driver is a WDDM driver. */ // pD3D9Create9Ex = (LPDIRECT3DCREATE9EX) GetProcAddress( hD3D9, "Direct3DCreate9Ex" ); return pD3D9Create9Ex != <c>null</c>;	
        /// } </pre>  </li> <li> Retrieval of graphics memory values.? After the app determines the driver model to be WDDM, the app can use the Direct3D 10 or later API and DXGI to get the amount of graphics memory.  After you create a Direct3D device, use this code to obtain  a <strong><see cref="SharpDX.DXGI.AdapterDescription"/></strong> structure that contains the amount of available graphics memory.  <pre> <see cref="SharpDX.DXGI.Device"/> * pDXGIDevice;	
        /// hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(<see cref="SharpDX.DXGI.Device"/>), (void **)&amp;pDXGIDevice);	
        /// <see cref="SharpDX.DXGI.Adapter"/> * pDXGIAdapter;	
        /// pDXGIDevice-&gt;GetAdapter(&amp;pDXGIAdapter);	
        /// <see cref="SharpDX.DXGI.AdapterDescription"/> adapterDesc;	
        /// pDXGIAdapter-&gt;GetDesc(&amp;adapterDesc); </pre>  </li> </ul><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIAdapter::GetDesc']/*"/>	
        /// <msdn-id>bb174526</msdn-id>	
        /// <unmanaged>HRESULT IDXGIAdapter::GetDesc([Out] DXGI_ADAPTER_DESC* pDesc)</unmanaged>	
        /// <unmanaged-short>IDXGIAdapter::GetDesc</unmanaged-short>	
        internal void GetDescription(out SharpDX.DXGI.AdapterDescription descRef) {
            unsafe {
                var descRef_ = new SharpDX.DXGI.AdapterDescription.__Native();
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, &descRef_,((void**)(*(void**)_nativePointer))[8]);		
                descRef = new SharpDX.DXGI.AdapterDescription();
                descRef.__MarshalFrom(ref descRef_);
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Checks whether the system supports a device interface for a graphics component.</p>	
        /// </summary>	
        /// <param name="interfaceName"><dd>  <p>The <see cref="System.Guid"/> of the interface of the device version for which support is being checked. For example, __uuidof(ID3D10Device).</p> </dd></param>	
        /// <param name="uMDVersionRef"><dd>  <p>The user mode driver version of InterfaceName. This is  returned only if the interface is supported. This parameter can be <strong><c>null</c></strong>.</p> </dd></param>	
        /// <returns><p><see cref="SharpDX.Result.Ok"/> indicates that the interface is supported, otherwise <see cref="SharpDX.DXGI.ResultCode.Unsupported"/> is returned (For more information, see DXGI_ERROR).</p></returns>	
        /// <remarks>	
        /// <p><strong>Note</strong>??You can  use <strong>CheckInterfaceSupport</strong> only to  check whether a Direct3D 10.x interface is supported, and only on Windows Vista SP1 and later versions of the operating system. If you try to use <strong>CheckInterfaceSupport</strong> to check whether a Direct3D 11.x and later version interface is supported, <strong>CheckInterfaceSupport</strong> returns <see cref="SharpDX.DXGI.ResultCode.Unsupported"/>. Therefore, do not use <strong>CheckInterfaceSupport</strong>. Instead, to verify whether the operating system supports a particular interface, try to create the interface. For example, if you call the <strong><see cref="SharpDX.Direct3D11.Device.CreateBlendState"/></strong> method and it fails, the operating system does not support the <strong><see cref="SharpDX.Direct3D11.BlendState"/></strong> interface.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIAdapter::CheckInterfaceSupport']/*"/>	
        /// <msdn-id>bb174524</msdn-id>	
        /// <unmanaged>HRESULT IDXGIAdapter::CheckInterfaceSupport([In] const GUID&amp; InterfaceName,[Out] LARGE_INTEGER* pUMDVersion)</unmanaged>	
        /// <unmanaged-short>IDXGIAdapter::CheckInterfaceSupport</unmanaged-short>	
        internal SharpDX.Result CheckInterfaceSupport(System.Guid interfaceName, out long uMDVersionRef) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* uMDVersionRef_ = &uMDVersionRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, &interfaceName, uMDVersionRef_,((void**)(*(void**)_nativePointer))[9]);		
                return __result__;
            }
        }
    }
    /// <summary>	
    /// <p>The <strong><see cref="SharpDX.DXGI.Adapter1"/></strong> interface represents a display sub-system (including one or more GPU's, DACs and video memory).</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This interface is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>A display sub-system is often referred to as a video card, however, on some machines the display sub-system is part of the mother board.</p><p>To enumerate the display sub-systems, use <strong><see cref="SharpDX.DXGI.Factory1.GetAdapter1"/></strong>. To get an interface to the adapter for a  particular device, use <strong><see cref="SharpDX.DXGI.Device.GetAdapter"/></strong>. To create a software adapter, use <strong><see cref="SharpDX.DXGI.Factory.CreateSoftwareAdapter"/></strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIAdapter1']/*"/>	
    /// <msdn-id>ff471329</msdn-id>	
    /// <unmanaged>IDXGIAdapter1</unmanaged>	
    /// <unmanaged-short>IDXGIAdapter1</unmanaged-short>	
    [Guid("29038f61-3839-4626-91fd-086879011a05")]
    public partial class Adapter1 : SharpDX.DXGI.Adapter {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.Adapter1"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Adapter1(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.Adapter1"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.Adapter1(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.Adapter1(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Gets a DXGI 1.1 description of an adapter (or video card).</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>Use the <strong>GetDesc1</strong> method to get a DXGI 1.1 description of an adapter.  To get a DXGI 1.0 description, use the <strong><see cref="SharpDX.DXGI.Adapter"/></strong> method.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIAdapter1::GetDesc1']/*"/>	
        /// <msdn-id>ff471330</msdn-id>	
        /// <unmanaged>GetDesc1</unmanaged>	
        /// <unmanaged-short>GetDesc1</unmanaged-short>	
        /// <unmanaged>HRESULT IDXGIAdapter1::GetDesc1([Out] DXGI_ADAPTER_DESC1* pDesc)</unmanaged>
        public SharpDX.DXGI.AdapterDescription1 Description1 {
                get { SharpDX.DXGI.AdapterDescription1 __output__; GetDescription1(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// <p>Gets a DXGI 1.1 description of an adapter (or video card).</p>	
        /// </summary>	
        /// <param name="descRef"><dd>  <p>A reference to a <strong><see cref="SharpDX.DXGI.AdapterDescription1"/></strong> structure that describes the adapter.   This parameter must not be <strong><c>null</c></strong>. On feature level 9 graphics hardware, <strong>GetDesc1</strong> returns zeros for the PCI ID in the <strong>VendorId</strong>, <strong>DeviceId</strong>, <strong>SubSysId</strong>, and <strong>Revision</strong> members of <strong><see cref="SharpDX.DXGI.AdapterDescription1"/></strong> and ?Software Adapter? for the description string in the <strong>Description</strong> member.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; otherwise, returns E_INVALIDARG if the <em>pDesc</em> parameter is <strong><c>null</c></strong>.   </p></returns>	
        /// <remarks>	
        /// <p>This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>Use the <strong>GetDesc1</strong> method to get a DXGI 1.1 description of an adapter.  To get a DXGI 1.0 description, use the <strong><see cref="SharpDX.DXGI.Adapter"/></strong> method.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIAdapter1::GetDesc1']/*"/>	
        /// <msdn-id>ff471330</msdn-id>	
        /// <unmanaged>HRESULT IDXGIAdapter1::GetDesc1([Out] DXGI_ADAPTER_DESC1* pDesc)</unmanaged>	
        /// <unmanaged-short>IDXGIAdapter1::GetDesc1</unmanaged-short>	
        internal void GetDescription1(out SharpDX.DXGI.AdapterDescription1 descRef) {
            unsafe {
                var descRef_ = new SharpDX.DXGI.AdapterDescription1.__Native();
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, &descRef_,((void**)(*(void**)_nativePointer))[10]);		
                descRef = new SharpDX.DXGI.AdapterDescription1();
                descRef.__MarshalFrom(ref descRef_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>Gets a Microsoft DirectX Graphics Infrastructure (DXGI) 1.2 description of an adapter or video card. This description includes information about the granularity at which the graphics processing unit (GPU) can be preempted from performing its current task.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Use the <strong>GetDesc2</strong> method to get a DXGI 1.2 description of an adapter.  To get a DXGI 1.1 description, use the <strong><see cref="SharpDX.DXGI.Adapter1.GetDescription1"/></strong> method. To get a DXGI 1.0 description, use the <strong><see cref="SharpDX.DXGI.Adapter.GetDescription"/></strong> method.</p><p>The Windows Display Driver Model (WDDM) scheduler can preempt the GPU's execution of application tasks. The granularity at which the GPU can be preempted from performing its current task in the WDDM 1.1 or earlier driver model is a direct memory access (DMA) buffer for graphics tasks or a compute packet for compute tasks. The GPU can switch between tasks only after it completes the currently executing unit of work, a DMA buffer or a compute packet. </p><p>A DMA buffer is the largest independent unit of graphics work that the WDDM scheduler can submit to the GPU. This buffer contains a set of GPU instructions that the WDDM driver and GPU use. A compute packet is the largest independent unit of compute work that the WDDM scheduler can submit to the GPU. A compute packet contains dispatches (for example, calls to the <strong><see cref="SharpDX.Direct3D11.DeviceContext.Dispatch"/></strong> method), which contain thread groups. The WDDM 1.2 or later driver model allows the GPU to be preempted at finer granularity levels than a DMA buffer or compute packet. You can use the <strong>GetDesc2</strong> method to retrieve the granularity levels for graphics and compute tasks.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIAdapter2']/*"/>	
    /// <msdn-id>hh404540</msdn-id>	
    /// <unmanaged>IDXGIAdapter2</unmanaged>	
    /// <unmanaged-short>IDXGIAdapter2</unmanaged-short>	
    [Guid("0AA1AE0A-FA0E-4B84-8644-E05FF8E5ACB5")]
    public partial class Adapter2 : SharpDX.DXGI.Adapter1 {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.Adapter2"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Adapter2(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.Adapter2"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.Adapter2(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.Adapter2(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Gets a Microsoft DirectX Graphics Infrastructure (DXGI) 1.2 description of an adapter or video card. This description includes information about the granularity at which the graphics processing unit (GPU) can be preempted from performing its current task.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>Use the <strong>GetDesc2</strong> method to get a DXGI 1.2 description of an adapter.  To get a DXGI 1.1 description, use the <strong><see cref="SharpDX.DXGI.Adapter1.GetDescription1"/></strong> method. To get a DXGI 1.0 description, use the <strong><see cref="SharpDX.DXGI.Adapter.GetDescription"/></strong> method.</p><p>The Windows Display Driver Model (WDDM) scheduler can preempt the GPU's execution of application tasks. The granularity at which the GPU can be preempted from performing its current task in the WDDM 1.1 or earlier driver model is a direct memory access (DMA) buffer for graphics tasks or a compute packet for compute tasks. The GPU can switch between tasks only after it completes the currently executing unit of work, a DMA buffer or a compute packet. </p><p>A DMA buffer is the largest independent unit of graphics work that the WDDM scheduler can submit to the GPU. This buffer contains a set of GPU instructions that the WDDM driver and GPU use. A compute packet is the largest independent unit of compute work that the WDDM scheduler can submit to the GPU. A compute packet contains dispatches (for example, calls to the <strong><see cref="SharpDX.Direct3D11.DeviceContext.Dispatch"/></strong> method), which contain thread groups. The WDDM 1.2 or later driver model allows the GPU to be preempted at finer granularity levels than a DMA buffer or compute packet. You can use the <strong>GetDesc2</strong> method to retrieve the granularity levels for graphics and compute tasks.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIAdapter2::GetDesc2']/*"/>	
        /// <msdn-id>hh404540</msdn-id>	
        /// <unmanaged>GetDesc2</unmanaged>	
        /// <unmanaged-short>GetDesc2</unmanaged-short>	
        /// <unmanaged>HRESULT IDXGIAdapter2::GetDesc2([Out] DXGI_ADAPTER_DESC2* pDesc)</unmanaged>
        public SharpDX.DXGI.AdapterDescription2 Description2 {
                get { SharpDX.DXGI.AdapterDescription2 __output__; GetDescription2(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// <p>Gets a Microsoft DirectX Graphics Infrastructure (DXGI) 1.2 description of an adapter or video card. This description includes information about the granularity at which the graphics processing unit (GPU) can be preempted from performing its current task.</p>	
        /// </summary>	
        /// <param name="descRef"><dd> <p>A reference to a <strong><see cref="SharpDX.DXGI.AdapterDescription2"/></strong> structure that describes the adapter.   This parameter must not be <strong><c>null</c></strong>. On feature level 9 graphics hardware, earlier versions of  <strong>GetDesc2</strong> (<strong>GetDesc</strong> and <strong>GetDesc1</strong>) return zeros for the PCI ID in the <strong>VendorId</strong>, <strong>DeviceId</strong>, <strong>SubSysId</strong>, and <strong>Revision</strong> members of the adapter description structure and ?Software Adapter? for the description string in the <strong>Description</strong> member. <strong>GetDesc2</strong> returns the actual feature level 9 hardware values in these members.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; otherwise, returns E_INVALIDARG if the <em>pDesc</em> parameter is <strong><c>null</c></strong>.   </p></returns>	
        /// <remarks>	
        /// <p>Use the <strong>GetDesc2</strong> method to get a DXGI 1.2 description of an adapter.  To get a DXGI 1.1 description, use the <strong><see cref="SharpDX.DXGI.Adapter1.GetDescription1"/></strong> method. To get a DXGI 1.0 description, use the <strong><see cref="SharpDX.DXGI.Adapter.GetDescription"/></strong> method.</p><p>The Windows Display Driver Model (WDDM) scheduler can preempt the GPU's execution of application tasks. The granularity at which the GPU can be preempted from performing its current task in the WDDM 1.1 or earlier driver model is a direct memory access (DMA) buffer for graphics tasks or a compute packet for compute tasks. The GPU can switch between tasks only after it completes the currently executing unit of work, a DMA buffer or a compute packet. </p><p>A DMA buffer is the largest independent unit of graphics work that the WDDM scheduler can submit to the GPU. This buffer contains a set of GPU instructions that the WDDM driver and GPU use. A compute packet is the largest independent unit of compute work that the WDDM scheduler can submit to the GPU. A compute packet contains dispatches (for example, calls to the <strong><see cref="SharpDX.Direct3D11.DeviceContext.Dispatch"/></strong> method), which contain thread groups. The WDDM 1.2 or later driver model allows the GPU to be preempted at finer granularity levels than a DMA buffer or compute packet. You can use the <strong>GetDesc2</strong> method to retrieve the granularity levels for graphics and compute tasks.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIAdapter2::GetDesc2']/*"/>	
        /// <msdn-id>hh404540</msdn-id>	
        /// <unmanaged>HRESULT IDXGIAdapter2::GetDesc2([Out] DXGI_ADAPTER_DESC2* pDesc)</unmanaged>	
        /// <unmanaged-short>IDXGIAdapter2::GetDesc2</unmanaged-short>	
        internal void GetDescription2(out SharpDX.DXGI.AdapterDescription2 descRef) {
            unsafe {
                var descRef_ = new SharpDX.DXGI.AdapterDescription2.__Native();
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, &descRef_,((void**)(*(void**)_nativePointer))[11]);		
                descRef = new SharpDX.DXGI.AdapterDescription2();
                descRef.__MarshalFrom(ref descRef_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p> The <strong><see cref="SharpDX.DXGI.Adapter"/></strong> interface represents a display subsystem (including one or more GPUs, DACs and video memory). </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> A display subsystem is often referred to as a video card, however, on some machines the display subsystem is part of the motherboard. </p><p> To enumerate the display subsystems, use <strong><see cref="SharpDX.DXGI.Factory.GetAdapter"/></strong>. </p><p> To get an interface to the adapter for a particular device, use <strong><see cref="SharpDX.DXGI.Device.GetAdapter"/></strong>. </p><p> To create a software adapter, use <strong><see cref="SharpDX.DXGI.Factory.CreateSoftwareAdapter"/></strong>. </p><p><strong>Windows?Phone?8: </strong> This API is supported. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIAdapter3']/*"/>	
    /// <msdn-id>bb174523</msdn-id>	
    /// <unmanaged>IDXGIAdapter3</unmanaged>	
    /// <unmanaged-short>IDXGIAdapter3</unmanaged-short>	
    [Guid("645967A4-1392-4310-A798-8053CE3E93FD")]
    public partial class Adapter3 : SharpDX.DXGI.Adapter2 {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.Adapter3"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Adapter3(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.Adapter3"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.Adapter3(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.Adapter3(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Registers to receive notification of hardware content protection teardown events.</p>	
        /// </summary>	
        /// <param name="hEvent"><dd>  <p>A handle to the event object that the operating system sets when hardware content protection teardown occurs. The <strong>CreateEvent</strong> or <strong>OpenEvent</strong> function returns this handle. </p> </dd></param>	
        /// <param name="dwCookieRef"><dd>  <p>A reference to a key value that an application can pass to the <strong><see cref="SharpDX.DXGI.Adapter3.UnregisterHardwareContentProtectionTeardownStatus"/></strong> method to unregister the notification event that <em>hEvent</em> specifies.</p> </dd></param>	
        /// <returns><p>If this method succeeds, it returns <strong><see cref="SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="SharpDX.Result"/></strong> error code.</p></returns>	
        /// <remarks>	
        /// <p>Call <strong><see cref="SharpDX.Direct3D11.VideoDevice.GetContentProtectionCaps"/></strong>() to check for the presence of the <strong><see cref="SharpDX.Direct3D11.ContentProtectionCaps.HardwareTeardown"/></strong> capability to know whether the hardware contains an automatic teardown mechanism. After the event is signaled, the application can call <strong><see cref="SharpDX.Direct3D11.VideoContext1.CheckCryptoSessionStatus"/></strong> to determine the impact of the hardware teardown for a specific <strong><see cref="SharpDX.Direct3D11.CryptoSession"/></strong> interface.	
        /// </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIAdapter3::RegisterHardwareContentProtectionTeardownStatusEvent']/*"/>	
        /// <msdn-id>dn933230</msdn-id>	
        /// <unmanaged>HRESULT IDXGIAdapter3::RegisterHardwareContentProtectionTeardownStatusEvent([In] void* hEvent,[Out] unsigned int* pdwCookie)</unmanaged>	
        /// <unmanaged-short>IDXGIAdapter3::RegisterHardwareContentProtectionTeardownStatusEvent</unmanaged-short>	
        public void RegisterHardwareContentProtectionTeardownStatusEvent(System.IntPtr hEvent, out int dwCookieRef) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* dwCookieRef_ = &dwCookieRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, (void*)hEvent, dwCookieRef_,((void**)(*(void**)_nativePointer))[12]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Registers to receive notification of hardware content protection teardown events.</p>	
        /// </summary>	
        /// <param name="dwCookie"><dd>  <p>A handle to the event object that the operating system sets when hardware content protection teardown occurs. The <strong>CreateEvent</strong> or <strong>OpenEvent</strong> function returns this handle. </p> </dd></param>	
        /// <remarks>	
        /// <p>Call <strong><see cref="SharpDX.Direct3D11.VideoDevice.GetContentProtectionCaps"/></strong>() to check for the presence of the <strong><see cref="SharpDX.Direct3D11.ContentProtectionCaps.HardwareTeardown"/></strong> capability to know whether the hardware contains an automatic teardown mechanism. After the event is signaled, the application can call <strong><see cref="SharpDX.Direct3D11.VideoContext1.CheckCryptoSessionStatus"/></strong> to determine the impact of the hardware teardown for a specific <strong><see cref="SharpDX.Direct3D11.CryptoSession"/></strong> interface.	
        /// </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIAdapter3::UnregisterHardwareContentProtectionTeardownStatus']/*"/>	
        /// <msdn-id>dn933230</msdn-id>	
        /// <unmanaged>void IDXGIAdapter3::UnregisterHardwareContentProtectionTeardownStatus([In] unsigned int dwCookie)</unmanaged>	
        /// <unmanaged-short>IDXGIAdapter3::UnregisterHardwareContentProtectionTeardownStatus</unmanaged-short>	
        public void UnregisterHardwareContentProtectionTeardownStatus(int dwCookie) {
            unsafe {
                SharpDX.DXGI.LocalInterop.Callivoid(_nativePointer, dwCookie,((void**)(*(void**)_nativePointer))[13]);		
            }
        }
        
        /// <summary>	
        /// <p> This method informs the process of the current budget and process usage. </p>	
        /// </summary>	
        /// <param name="nodeIndex"><dd>  <p> Specifies the device's physical adapter for which the video memory information is queried. For single-GPU operation, set this to zero. If there are multiple GPU nodes, set this to the index of the node (the device's physical adapter) for which the video memory information is queried. See Multi-Adapter. </p> </dd></param>	
        /// <param name="memorySegmentGroup"><dd>  <p> Specifies a <see cref="SharpDX.DXGI.MemorySegmentGroup"/> that identifies the group as local or non-local. </p> </dd></param>	
        /// <param name="videoMemoryInfoRef"><dd>  <p> Fills in a <see cref="SharpDX.DXGI.QueryVideoMemoryInformation"/> structure with the current values. </p> </dd></param>	
        /// <returns><p> Returns <see cref="SharpDX.Result.Ok"/> if successful; an error code otherwise. For a list of error codes, see DXGI_ERROR. </p></returns>	
        /// <remarks>	
        /// <p> Applications must explicitly manage their usage of physical memory explicitly and keep usage within the budget assigned to the application process. Processes that cannot kept their usage within their assigned budgets will likely experience stuttering, as they are intermittently frozen and paged-out to allow other processes to run. </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIAdapter3::QueryVideoMemoryInfo']/*"/>	
        /// <msdn-id>dn933223</msdn-id>	
        /// <unmanaged>HRESULT IDXGIAdapter3::QueryVideoMemoryInfo([In] unsigned int NodeIndex,[In] DXGI_MEMORY_SEGMENT_GROUP MemorySegmentGroup,[Out] DXGI_QUERY_VIDEO_MEMORY_INFO* pVideoMemoryInfo)</unmanaged>	
        /// <unmanaged-short>IDXGIAdapter3::QueryVideoMemoryInfo</unmanaged-short>	
        public void QueryVideoMemoryInfo(int nodeIndex, SharpDX.DXGI.MemorySegmentGroup memorySegmentGroup, out SharpDX.DXGI.QueryVideoMemoryInformation videoMemoryInfoRef) {
            unsafe {
                videoMemoryInfoRef = new SharpDX.DXGI.QueryVideoMemoryInformation();
                SharpDX.Result __result__;
                fixed (void* videoMemoryInfoRef_ = &videoMemoryInfoRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, nodeIndex, unchecked((int)memorySegmentGroup), videoMemoryInfoRef_,((void**)(*(void**)_nativePointer))[14]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p> This method sends the minimum required physical memory for an application, to the OS. </p>	
        /// </summary>	
        /// <param name="nodeIndex"><dd>  <p> Specifies the device's physical adapter for which the video memory information is being set. For single-GPU operation, set this to zero. If there are multiple GPU nodes, set this to the index of the node (the device's physical adapter) for which the video memory information is being set. See Multi-Adapter. </p> </dd></param>	
        /// <param name="memorySegmentGroup"><dd>  <p> Specifies a <see cref="SharpDX.DXGI.MemorySegmentGroup"/> that identifies the group as local or non-local. </p> </dd></param>	
        /// <param name="reservation"><dd>  <p> Specifies a UINT64 that sets the minimum required physical memory, in bytes. </p> </dd></param>	
        /// <returns><p> Returns <see cref="SharpDX.Result.Ok"/> if successful; an error code otherwise. For a list of error codes, see DXGI_ERROR. </p></returns>	
        /// <remarks>	
        /// <p> Applications are encouraged to set a video reservation to denote the amount of physical memory they cannot go without. This value helps the OS quickly minimize the impact of large memory pressure situations. </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIAdapter3::SetVideoMemoryReservation']/*"/>	
        /// <msdn-id>dn933232</msdn-id>	
        /// <unmanaged>HRESULT IDXGIAdapter3::SetVideoMemoryReservation([In] unsigned int NodeIndex,[In] DXGI_MEMORY_SEGMENT_GROUP MemorySegmentGroup,[In] unsigned longlong Reservation)</unmanaged>	
        /// <unmanaged-short>IDXGIAdapter3::SetVideoMemoryReservation</unmanaged-short>	
        public void SetVideoMemoryReservation(int nodeIndex, SharpDX.DXGI.MemorySegmentGroup memorySegmentGroup, long reservation) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, nodeIndex, unchecked((int)memorySegmentGroup), reservation,((void**)(*(void**)_nativePointer))[15]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>This method establishes a correlation between a CPU synchronization object and the budget change event.</p>	
        /// </summary>	
        /// <param name="hEvent"><dd>  <p>Specifies a HANDLE for the event.</p> </dd></param>	
        /// <param name="dwCookieRef"><dd>  <p>A key value for the window or event to unregister. The  <strong><see cref="SharpDX.DXGI.Adapter3.RegisterHardwareContentProtectionTeardownStatusEvent"/></strong> method returns this value. </p> </dd></param>	
        /// <returns><p>This method returns an <see cref="SharpDX.Result"/> success or error code.</p></returns>	
        /// <remarks>	
        /// <p>Instead of calling <strong>QueryVideoMemoryInfo</strong> regularly, applications can use CPU synchronization objects to efficiently wake threads when budget changes occur. </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIAdapter3::RegisterVideoMemoryBudgetChangeNotificationEvent']/*"/>	
        /// <msdn-id>dn933231</msdn-id>	
        /// <unmanaged>HRESULT IDXGIAdapter3::RegisterVideoMemoryBudgetChangeNotificationEvent([In] void* hEvent,[Out] unsigned int* pdwCookie)</unmanaged>	
        /// <unmanaged-short>IDXGIAdapter3::RegisterVideoMemoryBudgetChangeNotificationEvent</unmanaged-short>	
        public void RegisterVideoMemoryBudgetChangeNotificationEvent(System.IntPtr hEvent, out int dwCookieRef) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* dwCookieRef_ = &dwCookieRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, (void*)hEvent, dwCookieRef_,((void**)(*(void**)_nativePointer))[16]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>This method stops notifying a CPU synchronization object whenever a budget change occurs. An application may switch back to polling the information regularly.</p>	
        /// </summary>	
        /// <param name="dwCookie"><dd>  <p>A key value for the window or event to unregister. The  <strong><see cref="SharpDX.DXGI.Adapter3.RegisterHardwareContentProtectionTeardownStatusEvent"/></strong> method returns this value. </p> </dd></param>	
        /// <remarks>	
        /// <p>An application may switch back to polling for the information regularly.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIAdapter3::UnregisterVideoMemoryBudgetChangeNotification']/*"/>	
        /// <msdn-id>dn933234</msdn-id>	
        /// <unmanaged>void IDXGIAdapter3::UnregisterVideoMemoryBudgetChangeNotification([In] unsigned int dwCookie)</unmanaged>	
        /// <unmanaged-short>IDXGIAdapter3::UnregisterVideoMemoryBudgetChangeNotification</unmanaged-short>	
        public void UnregisterVideoMemoryBudgetChangeNotification(int dwCookie) {
            unsafe {
                SharpDX.DXGI.LocalInterop.Callivoid(_nativePointer, dwCookie,((void**)(*(void**)_nativePointer))[17]);		
            }
        }
    }
    /// <summary>	
    /// <p>Represents a swap chain that is used by desktop media apps to decode video data and show it on a DirectComposition surface.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Decode swap chains are intended for use primarily with YUV surface formats. When using decode buffers created with an RGB surface format, the <em>TargetRect</em> and <em>DestSize</em> must be set equal to the buffer dimensions. <em>SourceRect</em> cannot exceed the buffer dimensions.</p><p>In clone mode, the decode swap chain is only guaranteed to be shown on the primary output.</p><p>Decode swap chains cannot be used with dirty rects.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDecodeSwapChain']/*"/>	
    /// <msdn-id>dn384109</msdn-id>	
    /// <unmanaged>IDXGIDecodeSwapChain</unmanaged>	
    /// <unmanaged-short>IDXGIDecodeSwapChain</unmanaged-short>	
    [Guid("2633066b-4514-4c7a-8fd8-12ea98059d18")]
    public partial class DecodeSwapChain : SharpDX.ComObject {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.DecodeSwapChain"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public DecodeSwapChain(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.DecodeSwapChain"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.DecodeSwapChain(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.DecodeSwapChain(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Gets or sets the source region that is used for the swap chain.</p>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDecodeSwapChain::GetSourceRect']/*"/>	
        /// <msdn-id>dn384121</msdn-id>	
        /// <unmanaged>GetSourceRect / SetSourceRect</unmanaged>	
        /// <unmanaged-short>GetSourceRect</unmanaged-short>	
        /// <unmanaged>HRESULT IDXGIDecodeSwapChain::GetSourceRect([Out] RECT* pRect)</unmanaged>
        public SharpDX.Mathematics.Interop.RawRectangle SourceRect {
                get { SharpDX.Mathematics.Interop.RawRectangle __output__; GetSourceRect(out __output__); return __output__; }
                set { SetSourceRect(value); }
        }
        
        /// <summary>	
        /// <p>Gets or sets the rectangle that defines the target region for the video processing blit operation.</p>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDecodeSwapChain::GetTargetRect']/*"/>	
        /// <msdn-id>dn384122</msdn-id>	
        /// <unmanaged>GetTargetRect / SetTargetRect</unmanaged>	
        /// <unmanaged-short>GetTargetRect</unmanaged-short>	
        /// <unmanaged>HRESULT IDXGIDecodeSwapChain::GetTargetRect([Out] RECT* pRect)</unmanaged>
        public SharpDX.Mathematics.Interop.RawRectangle TargetRect {
                get { SharpDX.Mathematics.Interop.RawRectangle __output__; GetTargetRect(out __output__); return __output__; }
                set { SetTargetRect(value); }
        }
        
        /// <summary>	
        /// <p>Gets or sets the color space used by the swap chain.</p>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDecodeSwapChain::GetColorSpace']/*"/>	
        /// <msdn-id>dn384119</msdn-id>	
        /// <unmanaged>GetColorSpace / SetColorSpace</unmanaged>	
        /// <unmanaged-short>GetColorSpace</unmanaged-short>	
        /// <unmanaged>DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS IDXGIDecodeSwapChain::GetColorSpace()</unmanaged>
        public SharpDX.DXGI.MultiplaneOverlayYCbCrFlags ColorSpace {
                get { return GetColorSpace(); }
                set { SetColorSpace(value); }
        }
        
        /// <summary>	
        /// <p>Presents a frame on the output adapter. The frame is a subresource of the <strong><see cref="SharpDX.DXGI.Resource"/></strong> object that was used to create the decode swap chain.</p>	
        /// </summary>	
        /// <param name="bufferToPresent">No documentation.</param>	
        /// <param name="syncInterval">No documentation.</param>	
        /// <param name="flags">No documentation.</param>	
        /// <returns><p>This method returns <strong><see cref="SharpDX.Result.Ok"/></strong> on success, or it returns one of the following error codes:</p><ul> <li><see cref="SharpDX.DXGI.ResultCode.DeviceRemoved"/></li> <li><see cref="SharpDX.DXGI.DXGIStatus.Occluded"/></li> <li><see cref="SharpDX.DXGI.ResultCode.InvalidCall"/></li> <li><strong>E_OUTOFMEMORY</strong></li> </ul></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDecodeSwapChain::PresentBuffer']/*"/>	
        /// <msdn-id>dn384123</msdn-id>	
        /// <unmanaged>HRESULT IDXGIDecodeSwapChain::PresentBuffer([In] unsigned int BufferToPresent,[In] unsigned int SyncInterval,[In] unsigned int Flags)</unmanaged>	
        /// <unmanaged-short>IDXGIDecodeSwapChain::PresentBuffer</unmanaged-short>	
        public void PresentBuffer(int bufferToPresent, int syncInterval, int flags) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, bufferToPresent, syncInterval, flags,((void**)(*(void**)_nativePointer))[3]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Sets the rectangle that defines the source region for the video processing blit operation.</p><p>The source rectangle is the portion of the input surface that is blitted to the destination surface. The source rectangle is given in pixel coordinates, relative to the input surface.</p>	
        /// </summary>	
        /// <param name="rectRef"><dd> <p>A reference to a <strong><see cref="SharpDX.Mathematics.Interop.RawRectangle"/></strong> structure  that contains the source region to set for the swap chain.</p> </dd></param>	
        /// <returns><p>This method returns <see cref="SharpDX.Result.Ok"/> on success, or it returns one of the error codes that are described in the DXGI_ERROR topic.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDecodeSwapChain::SetSourceRect']/*"/>	
        /// <msdn-id>dn384126</msdn-id>	
        /// <unmanaged>HRESULT IDXGIDecodeSwapChain::SetSourceRect([In] const RECT* pRect)</unmanaged>	
        /// <unmanaged-short>IDXGIDecodeSwapChain::SetSourceRect</unmanaged-short>	
        internal void SetSourceRect(SharpDX.Mathematics.Interop.RawRectangle rectRef) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, &rectRef,((void**)(*(void**)_nativePointer))[4]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Sets the rectangle that defines the target region for the video processing blit operation.</p><p>The target rectangle is the area within the destination surface where the output will be drawn. The target rectangle is given in pixel coordinates, relative to the destination surface.</p>	
        /// </summary>	
        /// <param name="rectRef"><dd> <p>A reference to a <strong><see cref="SharpDX.Mathematics.Interop.RawRectangle"/></strong> structure  that contains the target region to set for the swap chain.</p> </dd></param>	
        /// <returns><p>This method returns <see cref="SharpDX.Result.Ok"/> on success, or it returns one of the error codes that are described in the DXGI_ERROR topic.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDecodeSwapChain::SetTargetRect']/*"/>	
        /// <msdn-id>dn384127</msdn-id>	
        /// <unmanaged>HRESULT IDXGIDecodeSwapChain::SetTargetRect([In] const RECT* pRect)</unmanaged>	
        /// <unmanaged-short>IDXGIDecodeSwapChain::SetTargetRect</unmanaged-short>	
        internal void SetTargetRect(SharpDX.Mathematics.Interop.RawRectangle rectRef) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, &rectRef,((void**)(*(void**)_nativePointer))[5]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Sets the size of the destination surface to use for the video processing blit operation.</p><p>The destination rectangle is the portion of the output surface that receives the blit for this stream. The destination rectangle is given in pixel coordinates, relative to the output surface.</p>	
        /// </summary>	
        /// <param name="width"><dd> <p>The width of the destination size, in pixels.</p> </dd></param>	
        /// <param name="height"><dd> <p>The height of the destination size, in pixels.</p> </dd></param>	
        /// <returns><p>This method returns <see cref="SharpDX.Result.Ok"/> on success, or it returns one of the error codes that are described in the DXGI_ERROR topic.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDecodeSwapChain::SetDestSize']/*"/>	
        /// <msdn-id>dn384125</msdn-id>	
        /// <unmanaged>HRESULT IDXGIDecodeSwapChain::SetDestSize([In] unsigned int Width,[In] unsigned int Height)</unmanaged>	
        /// <unmanaged-short>IDXGIDecodeSwapChain::SetDestSize</unmanaged-short>	
        public void SetDestSize(int width, int height) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, width, height,((void**)(*(void**)_nativePointer))[6]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Gets the source region that is used for the swap chain.</p>	
        /// </summary>	
        /// <param name="rectRef"><dd> <p>A reference to a <strong><see cref="SharpDX.Mathematics.Interop.RawRectangle"/></strong> structure  that receives the source region for the swap chain.</p> </dd></param>	
        /// <returns><p>This method returns <see cref="SharpDX.Result.Ok"/> on success, or it returns one of the error codes that are described in the DXGI_ERROR topic.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDecodeSwapChain::GetSourceRect']/*"/>	
        /// <msdn-id>dn384121</msdn-id>	
        /// <unmanaged>HRESULT IDXGIDecodeSwapChain::GetSourceRect([Out] RECT* pRect)</unmanaged>	
        /// <unmanaged-short>IDXGIDecodeSwapChain::GetSourceRect</unmanaged-short>	
        internal void GetSourceRect(out SharpDX.Mathematics.Interop.RawRectangle rectRef) {
            unsafe {
                rectRef = new SharpDX.Mathematics.Interop.RawRectangle();
                SharpDX.Result __result__;
                fixed (void* rectRef_ = &rectRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, rectRef_,((void**)(*(void**)_nativePointer))[7]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Gets the rectangle that defines the target region for the video processing blit operation.</p>	
        /// </summary>	
        /// <param name="rectRef"><dd> <p>A reference to a <strong><see cref="SharpDX.Mathematics.Interop.RawRectangle"/></strong> structure  that receives the target region for the swap chain.</p> </dd></param>	
        /// <returns><p>This method returns <see cref="SharpDX.Result.Ok"/> on success, or it returns one of the error codes that are described in the DXGI_ERROR topic.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDecodeSwapChain::GetTargetRect']/*"/>	
        /// <msdn-id>dn384122</msdn-id>	
        /// <unmanaged>HRESULT IDXGIDecodeSwapChain::GetTargetRect([Out] RECT* pRect)</unmanaged>	
        /// <unmanaged-short>IDXGIDecodeSwapChain::GetTargetRect</unmanaged-short>	
        internal void GetTargetRect(out SharpDX.Mathematics.Interop.RawRectangle rectRef) {
            unsafe {
                rectRef = new SharpDX.Mathematics.Interop.RawRectangle();
                SharpDX.Result __result__;
                fixed (void* rectRef_ = &rectRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, rectRef_,((void**)(*(void**)_nativePointer))[8]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Gets the size of the destination surface to use for the video processing blit operation.</p>	
        /// </summary>	
        /// <param name="widthRef"><dd> <p>A reference to a variable that receives the width in pixels.</p> </dd></param>	
        /// <param name="heightRef"><dd> <p>A reference to a variable that receives the height in pixels.</p> </dd></param>	
        /// <returns><p>This method returns <see cref="SharpDX.Result.Ok"/> on success, or it returns one of the error codes that are described in the DXGI_ERROR topic.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDecodeSwapChain::GetDestSize']/*"/>	
        /// <msdn-id>dn384120</msdn-id>	
        /// <unmanaged>HRESULT IDXGIDecodeSwapChain::GetDestSize([Out] unsigned int* pWidth,[Out] unsigned int* pHeight)</unmanaged>	
        /// <unmanaged-short>IDXGIDecodeSwapChain::GetDestSize</unmanaged-short>	
        public void GetDestSize(out int widthRef, out int heightRef) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* widthRef_ = &widthRef)
                    fixed (void* heightRef_ = &heightRef)
                        __result__= 
        				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, widthRef_, heightRef_,((void**)(*(void**)_nativePointer))[9]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Sets the color space used by the swap chain.</p>	
        /// </summary>	
        /// <param name="colorSpace"><dd> <p>A reference to a combination of <strong><see cref="SharpDX.DXGI.MultiplaneOverlayYCbCrFlags"/></strong>-typed values that are combined by using a bitwise OR operation. The resulting value specifies the color space to set for the swap chain.</p> </dd></param>	
        /// <returns><p>This method returns <see cref="SharpDX.Result.Ok"/> on success, or it returns one of the error codes that are described in the DXGI_ERROR topic.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDecodeSwapChain::SetColorSpace']/*"/>	
        /// <msdn-id>dn384124</msdn-id>	
        /// <unmanaged>HRESULT IDXGIDecodeSwapChain::SetColorSpace([In] DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS ColorSpace)</unmanaged>	
        /// <unmanaged-short>IDXGIDecodeSwapChain::SetColorSpace</unmanaged-short>	
        internal void SetColorSpace(SharpDX.DXGI.MultiplaneOverlayYCbCrFlags colorSpace) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, unchecked((int)colorSpace),((void**)(*(void**)_nativePointer))[10]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Gets the color space used by the swap chain.</p>	
        /// </summary>	
        /// <returns><p>A combination of <strong><see cref="SharpDX.DXGI.MultiplaneOverlayYCbCrFlags"/></strong>-typed values that are combined by using a bitwise OR operation. The resulting value specifies the color space for the swap chain.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDecodeSwapChain::GetColorSpace']/*"/>	
        /// <msdn-id>dn384119</msdn-id>	
        /// <unmanaged>DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS IDXGIDecodeSwapChain::GetColorSpace()</unmanaged>	
        /// <unmanaged-short>IDXGIDecodeSwapChain::GetColorSpace</unmanaged-short>	
        internal SharpDX.DXGI.MultiplaneOverlayYCbCrFlags GetColorSpace() {
            unsafe {
                SharpDX.DXGI.MultiplaneOverlayYCbCrFlags __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.CalliSharpDXDXGIMultiplaneOverlayYCbCrFlags(_nativePointer,((void**)(*(void**)_nativePointer))[11]);		
                return __result__;
            }
        }
    }
    /// <summary>	
    /// <p>An <strong><see cref="SharpDX.DXGI.Device"/></strong> interface implements a derived class for DXGI objects that produce image data.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <strong><see cref="SharpDX.DXGI.Device"/></strong> interface is designed for use by DXGI objects that need access to other DXGI objects. This interface is useful to  applications that do not use Direct3D to communicate with DXGI.</p><p>The Direct3D create device functions return a Direct3D device object. This Direct3D device object implements the <strong><see cref="SharpDX.ComObject"/></strong> interface. You can query this Direct3D device object for the device's corresponding <strong><see cref="SharpDX.DXGI.Device"/></strong> interface. To retrieve the <strong><see cref="SharpDX.DXGI.Device"/></strong> interface of a Direct3D device, use the following code:</p><pre><see cref="SharpDX.DXGI.Device"/> * pDXGIDevice;	
    /// hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(<see cref="SharpDX.DXGI.Device"/>), (void **)&amp;pDXGIDevice);	
    /// </pre><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDevice']/*"/>	
    /// <msdn-id>bb174527</msdn-id>	
    /// <unmanaged>IDXGIDevice</unmanaged>	
    /// <unmanaged-short>IDXGIDevice</unmanaged-short>	
    [Guid("54ec77fa-1377-44e6-8c32-88fd5f44c84c")]
    public partial class Device : SharpDX.DXGI.DXGIObject {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.Device"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Device(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.Device"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.Device(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.Device(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Returns the adapter for the specified device.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>If the <strong>GetAdapter</strong> method succeeds, the reference count on the adapter interface will be incremented. To avoid a memory leak, be sure to release the interface when you are finished using it.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDevice::GetAdapter']/*"/>	
        /// <msdn-id>bb174531</msdn-id>	
        /// <unmanaged>GetAdapter</unmanaged>	
        /// <unmanaged-short>GetAdapter</unmanaged-short>	
        /// <unmanaged>HRESULT IDXGIDevice::GetAdapter([Out] IDXGIAdapter** pAdapter)</unmanaged>
        public SharpDX.DXGI.Adapter Adapter {
                get { SharpDX.DXGI.Adapter __output__; GetAdapter(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// <p>Gets or sets the GPU thread priority.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDevice::GetGPUThreadPriority']/*"/>	
        /// <msdn-id>bb174532</msdn-id>	
        /// <unmanaged>GetGPUThreadPriority / SetGPUThreadPriority</unmanaged>	
        /// <unmanaged-short>GetGPUThreadPriority</unmanaged-short>	
        /// <unmanaged>HRESULT IDXGIDevice::GetGPUThreadPriority([Out] int* pPriority)</unmanaged>
        public int GPUThreadPriority {
                get { int __output__; GetGPUThreadPriority(out __output__); return __output__; }
                set { SetGPUThreadPriority(value); }
        }
        
        /// <summary>	
        /// <p>Returns the adapter for the specified device.</p>	
        /// </summary>	
        /// <param name="adapterRef"><dd>  <p>The address of an <strong><see cref="SharpDX.DXGI.Adapter"/></strong> interface reference to the adapter.  This parameter must not be <strong><c>null</c></strong>.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; otherwise, returns one of the DXGI_ERROR that indicates failure. If the <em>pAdapter</em> parameter is <strong><c>null</c></strong> this method returns E_INVALIDARG.</p></returns>	
        /// <remarks>	
        /// <p>If the <strong>GetAdapter</strong> method succeeds, the reference count on the adapter interface will be incremented. To avoid a memory leak, be sure to release the interface when you are finished using it.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDevice::GetAdapter']/*"/>	
        /// <msdn-id>bb174531</msdn-id>	
        /// <unmanaged>HRESULT IDXGIDevice::GetAdapter([Out] IDXGIAdapter** pAdapter)</unmanaged>	
        /// <unmanaged-short>IDXGIDevice::GetAdapter</unmanaged-short>	
        internal void GetAdapter(out SharpDX.DXGI.Adapter adapterRef) {
            unsafe {
                IntPtr adapterRef_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, &adapterRef_,((void**)(*(void**)_nativePointer))[7]);		
                adapterRef= (adapterRef_ == IntPtr.Zero)?null:new SharpDX.DXGI.Adapter(adapterRef_);	
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Returns a surface. This method is used internally and you should not call it directly in your application.</p>	
        /// </summary>	
        /// <param name="descRef"><dd>  <p>A reference to a <strong><see cref="SharpDX.DXGI.SurfaceDescription"/></strong> structure that describes the surface.</p> </dd></param>	
        /// <param name="numSurfaces"><dd>  <p>The number of surfaces to create.</p> </dd></param>	
        /// <param name="usage"><dd>  <p>A DXGI_USAGE flag that specifies how the surface is expected to be used.</p> </dd></param>	
        /// <param name="sharedResourceRef"><dd>  <p>An optional reference to a <strong><see cref="SharpDX.DXGI.SharedResource"/></strong> structure that contains shared resource information for opening views of such resources.</p> </dd></param>	
        /// <param name="surfaceOut"><dd>  <p>The address of an <strong><see cref="SharpDX.DXGI.Surface"/></strong> interface reference to the first created surface.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; an error code otherwise.  For a list of error codes, see DXGI_ERROR.</p></returns>	
        /// <remarks>	
        /// <p>The <strong>CreateSurface</strong> method creates a buffer to exchange data between one or more devices. It is used internally, and you should not directly call it.</p><p>The runtime automatically creates an <strong><see cref="SharpDX.DXGI.Surface"/></strong> interface when it creates a Direct3D resource object that represents a surface. For example, the runtime creates an <strong><see cref="SharpDX.DXGI.Surface"/></strong> interface when it calls <strong><see cref="SharpDX.Direct3D11.Device.CreateTexture2D"/></strong> or <strong>ID3D10Device::CreateTexture2D</strong> to create a 2D texture. To retrieve the <strong><see cref="SharpDX.DXGI.Surface"/></strong> interface that represents the 2D texture surface, call <strong>ID3D11Texture2D::QueryInterface</strong> or <strong>ID3D10Texture2D::QueryInterface</strong>. In this call, you must pass the identifier of <strong><see cref="SharpDX.DXGI.Surface"/></strong>. If the 2D texture has only a single MIP-map level and does not consist of an array of textures, <strong>QueryInterface</strong> succeeds and returns a reference to the <strong><see cref="SharpDX.DXGI.Surface"/></strong> interface reference. Otherwise, <strong>QueryInterface</strong> fails and does not return the reference to <strong><see cref="SharpDX.DXGI.Surface"/></strong>. 	
        /// </p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDevice::CreateSurface']/*"/>	
        /// <msdn-id>bb174530</msdn-id>	
        /// <unmanaged>HRESULT IDXGIDevice::CreateSurface([In] const DXGI_SURFACE_DESC* pDesc,[In] unsigned int NumSurfaces,[In] unsigned int Usage,[In, Optional] const DXGI_SHARED_RESOURCE* pSharedResource,[Out] IDXGISurface** ppSurface)</unmanaged>	
        /// <unmanaged-short>IDXGIDevice::CreateSurface</unmanaged-short>	
        internal void CreateSurface(ref SharpDX.DXGI.SurfaceDescription descRef, int numSurfaces, int usage, SharpDX.DXGI.SharedResource? sharedResourceRef, out SharpDX.DXGI.Surface surfaceOut) {
            unsafe {
                SharpDX.DXGI.SharedResource sharedResourceRef_;
                if (sharedResourceRef.HasValue)
                    sharedResourceRef_ = sharedResourceRef.Value;				
                IntPtr surfaceOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                fixed (void* descRef_ = &descRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, descRef_, numSurfaces, usage, (sharedResourceRef.HasValue)?&sharedResourceRef_:(void*)IntPtr.Zero, &surfaceOut_,((void**)(*(void**)_nativePointer))[8]);		
                surfaceOut= (surfaceOut_ == IntPtr.Zero)?null:new SharpDX.DXGI.Surface(surfaceOut_);	
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Gets the residency status of an array of resources.</p>	
        /// </summary>	
        /// <param name="resourcesOut"><dd>  <p>An array of <strong><see cref="SharpDX.DXGI.Resource"/></strong> interfaces.</p> </dd></param>	
        /// <param name="residencyStatusRef"><dd>  <p>An array of <strong><see cref="SharpDX.DXGI.Residency"/></strong> flags. Each element describes the residency status for corresponding element in  the <em>ppResources</em> argument array.</p> </dd></param>	
        /// <param name="numResources"><dd>  <p>The number of resources in the <em>ppResources</em> argument array and <em>pResidencyStatus</em> argument array.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; otherwise, returns <see cref="SharpDX.DXGI.ResultCode.DeviceRemoved"/>, E_INVALIDARG, or  E_POINTER (see WinError.h for more information).</p></returns>	
        /// <remarks>	
        /// <p>The information returned by the <em>pResidencyStatus</em> argument array describes the residency status at the time that the <strong>QueryResourceResidency</strong> method was called.   </p><p><strong>Note</strong>??The residency status will constantly change.</p><p>If you call the <strong>QueryResourceResidency</strong> method during a device removed state, the <em>pResidencyStatus</em> argument will return the <strong><see cref="SharpDX.DXGI.Residency.ResidentInSharedMemory"/></strong> flag.</p><p><strong>Note</strong>??This method should not be called every frame as it incurs a non-trivial amount of overhead.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDevice::QueryResourceResidency']/*"/>	
        /// <msdn-id>bb174533</msdn-id>	
        /// <unmanaged>HRESULT IDXGIDevice::QueryResourceResidency([In, Buffer] const IUnknown** ppResources,[Out, Buffer] DXGI_RESIDENCY* pResidencyStatus,[In] unsigned int NumResources)</unmanaged>	
        /// <unmanaged-short>IDXGIDevice::QueryResourceResidency</unmanaged-short>	
        internal void QueryResourceResidency(SharpDX.ComObject[] resourcesOut, SharpDX.DXGI.Residency[] residencyStatusRef, int numResources) {
            unsafe {
                IntPtr* resourcesOut_ = (IntPtr*)0;
                if ( resourcesOut != null ) {
                    IntPtr* resourcesOut__ = stackalloc IntPtr[resourcesOut.Length];
                    resourcesOut_ = resourcesOut__;
                    for (int i = 0; i < resourcesOut.Length; i++)                        
                        resourcesOut_[i] =  (resourcesOut[i] == null)? IntPtr.Zero : resourcesOut[i].NativePointer;
                }
                SharpDX.Result __result__;
                fixed (void* residencyStatusRef_ = residencyStatusRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, resourcesOut_, residencyStatusRef_, numResources,((void**)(*(void**)_nativePointer))[9]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Gets the residency status of an array of resources.</p>	
        /// </summary>	
        /// <param name="resourcesOut"><dd>  <p>An array of <strong><see cref="SharpDX.DXGI.Resource"/></strong> interfaces.</p> </dd></param>	
        /// <param name="residencyStatusRef"><dd>  <p>An array of <strong><see cref="SharpDX.DXGI.Residency"/></strong> flags. Each element describes the residency status for corresponding element in  the <em>ppResources</em> argument array.</p> </dd></param>	
        /// <param name="numResources"><dd>  <p>The number of resources in the <em>ppResources</em> argument array and <em>pResidencyStatus</em> argument array.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; otherwise, returns <see cref="SharpDX.DXGI.ResultCode.DeviceRemoved"/>, E_INVALIDARG, or  E_POINTER (see WinError.h for more information).</p></returns>	
        /// <remarks>	
        /// <p>The information returned by the <em>pResidencyStatus</em> argument array describes the residency status at the time that the <strong>QueryResourceResidency</strong> method was called.   </p><p><strong>Note</strong>??The residency status will constantly change.</p><p>If you call the <strong>QueryResourceResidency</strong> method during a device removed state, the <em>pResidencyStatus</em> argument will return the <strong><see cref="SharpDX.DXGI.Residency.ResidentInSharedMemory"/></strong> flag.</p><p><strong>Note</strong>??This method should not be called every frame as it incurs a non-trivial amount of overhead.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDevice::QueryResourceResidency']/*"/>	
        /// <msdn-id>bb174533</msdn-id>	
        /// <unmanaged>HRESULT IDXGIDevice::QueryResourceResidency([In, Buffer] const IUnknown** ppResources,[Out, Buffer] DXGI_RESIDENCY* pResidencyStatus,[In] unsigned int NumResources)</unmanaged>	
        /// <unmanaged-short>IDXGIDevice::QueryResourceResidency</unmanaged-short>	
        internal void QueryResourceResidency(SharpDX.ComArray<SharpDX.ComObject> resourcesOut, SharpDX.DXGI.Residency[] residencyStatusRef, int numResources) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* residencyStatusRef_ = residencyStatusRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, (void*)((resourcesOut == null)?IntPtr.Zero:resourcesOut.NativePointer), residencyStatusRef_, numResources,((void**)(*(void**)_nativePointer))[9]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Gets the residency status of an array of resources.</p>	
        /// </summary>	
        /// <param name="resourcesOut"><dd>  <p>An array of <strong><see cref="SharpDX.DXGI.Resource"/></strong> interfaces.</p> </dd></param>	
        /// <param name="residencyStatusRef"><dd>  <p>An array of <strong><see cref="SharpDX.DXGI.Residency"/></strong> flags. Each element describes the residency status for corresponding element in  the <em>ppResources</em> argument array.</p> </dd></param>	
        /// <param name="numResources"><dd>  <p>The number of resources in the <em>ppResources</em> argument array and <em>pResidencyStatus</em> argument array.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; otherwise, returns <see cref="SharpDX.DXGI.ResultCode.DeviceRemoved"/>, E_INVALIDARG, or  E_POINTER (see WinError.h for more information).</p></returns>	
        /// <remarks>	
        /// <p>The information returned by the <em>pResidencyStatus</em> argument array describes the residency status at the time that the <strong>QueryResourceResidency</strong> method was called.   </p><p><strong>Note</strong>??The residency status will constantly change.</p><p>If you call the <strong>QueryResourceResidency</strong> method during a device removed state, the <em>pResidencyStatus</em> argument will return the <strong><see cref="SharpDX.DXGI.Residency.ResidentInSharedMemory"/></strong> flag.</p><p><strong>Note</strong>??This method should not be called every frame as it incurs a non-trivial amount of overhead.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDevice::QueryResourceResidency']/*"/>	
        /// <msdn-id>bb174533</msdn-id>	
        /// <unmanaged>HRESULT IDXGIDevice::QueryResourceResidency([In, Buffer] const IUnknown** ppResources,[Out, Buffer] DXGI_RESIDENCY* pResidencyStatus,[In] unsigned int NumResources)</unmanaged>	
        /// <unmanaged-short>IDXGIDevice::QueryResourceResidency</unmanaged-short>	
        private void QueryResourceResidency(System.IntPtr resourcesOut, System.IntPtr residencyStatusRef, int numResources) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, (void*)resourcesOut, (void*)residencyStatusRef, numResources,((void**)(*(void**)_nativePointer))[9]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Sets the GPU thread priority.</p>	
        /// </summary>	
        /// <param name="priority"><dd>  <p>A value that specifies the required GPU thread priority. This value must be between -7 and 7, inclusive, where 0 represents normal priority.</p> </dd></param>	
        /// <returns><p>Return <see cref="SharpDX.Result.Ok"/> if successful; otherwise, returns E_INVALIDARG if the <em>Priority</em> parameter is invalid.</p></returns>	
        /// <remarks>	
        /// <p>The values for the <em>Priority</em> parameter function as follows:</p><ul> <li>Positive values increase the likelihood that the GPU scheduler will grant GPU execution cycles to the device when rendering.</li> <li>Negative values lessen the likelihood that the device will receive GPU execution cycles when devices compete for them.</li> <li>The device is guaranteed to receive some GPU execution cycles at all settings.</li> </ul><p>To use the <strong>SetGPUThreadPriority</strong> method, you should have a comprehensive understanding of GPU scheduling. You should profile your application to ensure that it behaves as intended. If used inappropriately, the <strong>SetGPUThreadPriority</strong> method can impede rendering speed and result in a poor user experience.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDevice::SetGPUThreadPriority']/*"/>	
        /// <msdn-id>bb174534</msdn-id>	
        /// <unmanaged>HRESULT IDXGIDevice::SetGPUThreadPriority([In] int Priority)</unmanaged>	
        /// <unmanaged-short>IDXGIDevice::SetGPUThreadPriority</unmanaged-short>	
        internal void SetGPUThreadPriority(int priority) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, priority,((void**)(*(void**)_nativePointer))[10]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Gets the GPU thread priority.</p>	
        /// </summary>	
        /// <param name="priorityRef"><dd>  <p>A reference to a variable that receives a value that indicates the current GPU thread priority. The value will be between -7 and 7, inclusive, where 0 represents normal priority.</p> </dd></param>	
        /// <returns><p>Return <see cref="SharpDX.Result.Ok"/> if successful; otherwise, returns E_POINTER if the <em>pPriority</em> parameter is <strong><c>null</c></strong>.</p></returns>	
        /// <remarks>	
        /// <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDevice::GetGPUThreadPriority']/*"/>	
        /// <msdn-id>bb174532</msdn-id>	
        /// <unmanaged>HRESULT IDXGIDevice::GetGPUThreadPriority([Out] int* pPriority)</unmanaged>	
        /// <unmanaged-short>IDXGIDevice::GetGPUThreadPriority</unmanaged-short>	
        internal void GetGPUThreadPriority(out int priorityRef) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* priorityRef_ = &priorityRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, priorityRef_,((void**)(*(void**)_nativePointer))[11]);		
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>An <strong><see cref="SharpDX.DXGI.Device1"/></strong> interface implements a derived class for DXGI objects that produce image data.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This interface is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>The <strong><see cref="SharpDX.DXGI.Device1"/></strong> interface is designed for use by DXGI objects that need access to other DXGI objects. This interface is useful to  applications that do not use Direct3D to communicate with DXGI.</p><p>The Direct3D create device functions return a Direct3D device object. This Direct3D device object implements the <strong><see cref="SharpDX.ComObject"/></strong> interface. You can query this Direct3D device object for the device's corresponding <strong><see cref="SharpDX.DXGI.Device1"/></strong> interface. To retrieve the <strong><see cref="SharpDX.DXGI.Device1"/></strong> interface of a Direct3D device, use the following code:</p><pre><see cref="SharpDX.DXGI.Device1"/> * pDXGIDevice;	
    /// hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(<see cref="SharpDX.DXGI.Device1"/>), (void **)&amp;pDXGIDevice);	
    /// </pre><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDevice1']/*"/>	
    /// <msdn-id>ff471331</msdn-id>	
    /// <unmanaged>IDXGIDevice1</unmanaged>	
    /// <unmanaged-short>IDXGIDevice1</unmanaged-short>	
    [Guid("77db970f-6276-48ba-ba28-070143b4392c")]
    public partial class Device1 : SharpDX.DXGI.Device {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.Device1"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Device1(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.Device1"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.Device1(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.Device1(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Gets or sets the number of frames that the system is allowed to queue for rendering.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>Frame latency is the number of frames that are allowed to be stored in a queue before submission for rendering.  Latency is often  used to control how the CPU chooses between responding to user input and frames that are in the render queue.  It is often beneficial for applications  that have no user input (for example, video playback) to queue more than 3 frames of data.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDevice1::GetMaximumFrameLatency']/*"/>	
        /// <msdn-id>ff471332</msdn-id>	
        /// <unmanaged>GetMaximumFrameLatency / SetMaximumFrameLatency</unmanaged>	
        /// <unmanaged-short>GetMaximumFrameLatency</unmanaged-short>	
        /// <unmanaged>HRESULT IDXGIDevice1::GetMaximumFrameLatency([Out] unsigned int* pMaxLatency)</unmanaged>
        public int MaximumFrameLatency {
                get { int __output__; GetMaximumFrameLatency(out __output__); return __output__; }
                set { SetMaximumFrameLatency(value); }
        }
        
        /// <summary>	
        /// <p>Sets the number of frames that the system is allowed to queue for rendering.</p>	
        /// </summary>	
        /// <param name="maxLatency"><dd>  <p>The maximum number of back buffer frames that a driver can queue. The value defaults to 3, but  can range from 1 to 16. A value of 0 will reset latency to the default.  For multi-head devices, this value is specified per-head.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; otherwise, <see cref="SharpDX.DXGI.ResultCode.DeviceRemoved"/> if the device was removed.</p></returns>	
        /// <remarks>	
        /// <p>This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>Frame latency is the number of frames that are allowed to be stored in a queue before submission for rendering.  Latency is often used to  control how the CPU chooses between responding to user input and frames that are in the render queue.  It is often beneficial for applications that  have no user input (for example, video playback) to queue more than 3 frames of data.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDevice1::SetMaximumFrameLatency']/*"/>	
        /// <msdn-id>ff471334</msdn-id>	
        /// <unmanaged>HRESULT IDXGIDevice1::SetMaximumFrameLatency([In] unsigned int MaxLatency)</unmanaged>	
        /// <unmanaged-short>IDXGIDevice1::SetMaximumFrameLatency</unmanaged-short>	
        internal void SetMaximumFrameLatency(int maxLatency) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, maxLatency,((void**)(*(void**)_nativePointer))[12]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Gets the number of frames that the system is allowed to queue for rendering.</p>	
        /// </summary>	
        /// <param name="maxLatencyRef"><dd>  <p>This value is set to the number of frames that can be queued for render.   This value defaults to 3, but can range from 1 to 16.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; otherwise, returns one of the following members of the D3DERR enumerated type:</p><ul> <li><strong>D3DERR_DEVICELOST</strong></li> <li><strong>D3DERR_DEVICEREMOVED</strong></li> <li><strong>D3DERR_DRIVERINTERNALERROR</strong></li> <li><strong>D3DERR_INVALIDCALL</strong></li> <li><strong>D3DERR_OUTOFVIDEOMEMORY</strong></li> </ul></returns>	
        /// <remarks>	
        /// <p>This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>Frame latency is the number of frames that are allowed to be stored in a queue before submission for rendering.  Latency is often  used to control how the CPU chooses between responding to user input and frames that are in the render queue.  It is often beneficial for applications  that have no user input (for example, video playback) to queue more than 3 frames of data.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDevice1::GetMaximumFrameLatency']/*"/>	
        /// <msdn-id>ff471332</msdn-id>	
        /// <unmanaged>HRESULT IDXGIDevice1::GetMaximumFrameLatency([Out] unsigned int* pMaxLatency)</unmanaged>	
        /// <unmanaged-short>IDXGIDevice1::GetMaximumFrameLatency</unmanaged-short>	
        internal void GetMaximumFrameLatency(out int maxLatencyRef) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* maxLatencyRef_ = &maxLatencyRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, maxLatencyRef_,((void**)(*(void**)_nativePointer))[13]);		
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>An <strong><see cref="SharpDX.DXGI.Device"/></strong> interface implements a derived class for DXGI objects that produce image data.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <strong><see cref="SharpDX.DXGI.Device"/></strong> interface is designed for use by DXGI objects that need access to other DXGI objects. This interface is useful to  applications that do not use Direct3D to communicate with DXGI.</p><p>The Direct3D create device functions return a Direct3D device object. This Direct3D device object implements the <strong><see cref="SharpDX.ComObject"/></strong> interface. You can query this Direct3D device object for the device's corresponding <strong><see cref="SharpDX.DXGI.Device"/></strong> interface. To retrieve the <strong><see cref="SharpDX.DXGI.Device"/></strong> interface of a Direct3D device, use the following code:</p><pre><see cref="SharpDX.DXGI.Device"/> * pDXGIDevice;	
    /// hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(<see cref="SharpDX.DXGI.Device"/>), (void **)&amp;pDXGIDevice);	
    /// </pre><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDevice2']/*"/>	
    /// <msdn-id>bb174527</msdn-id>	
    /// <unmanaged>IDXGIDevice2</unmanaged>	
    /// <unmanaged-short>IDXGIDevice2</unmanaged-short>	
    [Guid("05008617-fbfd-4051-a790-144884b4f6a9")]
    public partial class Device2 : SharpDX.DXGI.Device1 {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.Device2"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Device2(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.Device2"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.Device2(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.Device2(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Allows the operating system to free the video memory of resources by discarding their content.</p>	
        /// </summary>	
        /// <param name="numResources"><dd> <p>The number of resources in the <em>ppResources</em> argument array.</p> </dd></param>	
        /// <param name="resourcesOut"><dd> <p>An array of references to <strong><see cref="SharpDX.DXGI.Resource"/></strong> interfaces for the resources to offer.</p> </dd></param>	
        /// <param name="priority"><dd> <p>A <strong><see cref="SharpDX.DXGI.OfferResourcePriority"/></strong>-typed value that indicates how valuable data is.</p> </dd></param>	
        /// <returns><p><strong>OfferResources</strong> returns: </p><ul> <li><see cref="SharpDX.Result.Ok"/> if resources were successfully offered</li> <li>E_INVALIDARG if a resource in the array or the priority is invalid</li> </ul></returns>	
        /// <remarks>	
        /// <p>The priority value that the  <em>Priority</em> parameter specifies describes how valuable the caller considers the content to be.  The operating system uses the priority value to discard resources in order of priority. The operating system discards a resource that is offered with low priority before it discards a resource that is  offered with a higher priority.</p><p>If you call <strong>OfferResources</strong> to offer a resource while the resource is bound to the pipeline, the resource is unbound.  You cannot call <strong>OfferResources</strong> on a resource that is mapped.  After you offer a resource, the resource cannot be mapped or bound to the pipeline until you call the <strong>IDXGIDevice2::ReclaimResource</strong> method to reclaim the resource. You cannot call <strong>OfferResources</strong> to offer immutable resources.</p><p>To offer shared resources, call <strong>OfferResources</strong> on only one of the sharing devices.  To ensure exclusive access to the resources, you must use an <strong><see cref="SharpDX.DXGI.KeyedMutex"/></strong> object and then call <strong>OfferResources</strong> only while you hold the mutex. In fact, you can't offer shared resources unless you use <strong><see cref="SharpDX.DXGI.KeyedMutex"/></strong> because offering shared resources without using <strong><see cref="SharpDX.DXGI.KeyedMutex"/></strong> isn't supported.</p><p><strong>Note</strong>??The user mode display driver might not immediately offer the resources that you specified in a call to <strong>OfferResources</strong>. The driver can postpone offering them until the next call to <strong><see cref="SharpDX.DXGI.SwapChain.Present"/></strong>, <strong><see cref="SharpDX.DXGI.SwapChain1.Present1"/></strong>, or <strong><see cref="SharpDX.Direct3D11.DeviceContext.Flush"/></strong>. </p><p><strong>Platform Update for Windows?7:??</strong>The runtime validates that <strong>OfferResources</strong> is used correctly on non-shared resources but doesn't perform the intended functionality. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDevice2::OfferResources']/*"/>	
        /// <msdn-id>hh404549</msdn-id>	
        /// <unmanaged>HRESULT IDXGIDevice2::OfferResources([In] unsigned int NumResources,[In, Buffer] const IDXGIResource** ppResources,[In] DXGI_OFFER_RESOURCE_PRIORITY Priority)</unmanaged>	
        /// <unmanaged-short>IDXGIDevice2::OfferResources</unmanaged-short>	
        public void OfferResources(int numResources, SharpDX.DXGI.Resource[] resourcesOut, SharpDX.DXGI.OfferResourcePriority priority) {
            unsafe {
                IntPtr* resourcesOut_ = (IntPtr*)0;
                if ( resourcesOut != null ) {
                    IntPtr* resourcesOut__ = stackalloc IntPtr[resourcesOut.Length];
                    resourcesOut_ = resourcesOut__;
                    for (int i = 0; i < resourcesOut.Length; i++)                        
                        resourcesOut_[i] =  (resourcesOut[i] == null)? IntPtr.Zero : resourcesOut[i].NativePointer;
                }
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, numResources, resourcesOut_, unchecked((int)priority),((void**)(*(void**)_nativePointer))[14]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Allows the operating system to free the video memory of resources by discarding their content.</p>	
        /// </summary>	
        /// <param name="numResources"><dd> <p>The number of resources in the <em>ppResources</em> argument array.</p> </dd></param>	
        /// <param name="resourcesOut"><dd> <p>An array of references to <strong><see cref="SharpDX.DXGI.Resource"/></strong> interfaces for the resources to offer.</p> </dd></param>	
        /// <param name="priority"><dd> <p>A <strong><see cref="SharpDX.DXGI.OfferResourcePriority"/></strong>-typed value that indicates how valuable data is.</p> </dd></param>	
        /// <returns><p><strong>OfferResources</strong> returns: </p><ul> <li><see cref="SharpDX.Result.Ok"/> if resources were successfully offered</li> <li>E_INVALIDARG if a resource in the array or the priority is invalid</li> </ul></returns>	
        /// <remarks>	
        /// <p>The priority value that the  <em>Priority</em> parameter specifies describes how valuable the caller considers the content to be.  The operating system uses the priority value to discard resources in order of priority. The operating system discards a resource that is offered with low priority before it discards a resource that is  offered with a higher priority.</p><p>If you call <strong>OfferResources</strong> to offer a resource while the resource is bound to the pipeline, the resource is unbound.  You cannot call <strong>OfferResources</strong> on a resource that is mapped.  After you offer a resource, the resource cannot be mapped or bound to the pipeline until you call the <strong>IDXGIDevice2::ReclaimResource</strong> method to reclaim the resource. You cannot call <strong>OfferResources</strong> to offer immutable resources.</p><p>To offer shared resources, call <strong>OfferResources</strong> on only one of the sharing devices.  To ensure exclusive access to the resources, you must use an <strong><see cref="SharpDX.DXGI.KeyedMutex"/></strong> object and then call <strong>OfferResources</strong> only while you hold the mutex. In fact, you can't offer shared resources unless you use <strong><see cref="SharpDX.DXGI.KeyedMutex"/></strong> because offering shared resources without using <strong><see cref="SharpDX.DXGI.KeyedMutex"/></strong> isn't supported.</p><p><strong>Note</strong>??The user mode display driver might not immediately offer the resources that you specified in a call to <strong>OfferResources</strong>. The driver can postpone offering them until the next call to <strong><see cref="SharpDX.DXGI.SwapChain.Present"/></strong>, <strong><see cref="SharpDX.DXGI.SwapChain1.Present1"/></strong>, or <strong><see cref="SharpDX.Direct3D11.DeviceContext.Flush"/></strong>. </p><p><strong>Platform Update for Windows?7:??</strong>The runtime validates that <strong>OfferResources</strong> is used correctly on non-shared resources but doesn't perform the intended functionality. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDevice2::OfferResources']/*"/>	
        /// <msdn-id>hh404549</msdn-id>	
        /// <unmanaged>HRESULT IDXGIDevice2::OfferResources([In] unsigned int NumResources,[In, Buffer] const IDXGIResource** ppResources,[In] DXGI_OFFER_RESOURCE_PRIORITY Priority)</unmanaged>	
        /// <unmanaged-short>IDXGIDevice2::OfferResources</unmanaged-short>	
        public void OfferResources(int numResources, SharpDX.ComArray<SharpDX.DXGI.Resource> resourcesOut, SharpDX.DXGI.OfferResourcePriority priority) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, numResources, (void*)((resourcesOut == null)?IntPtr.Zero:resourcesOut.NativePointer), unchecked((int)priority),((void**)(*(void**)_nativePointer))[14]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Allows the operating system to free the video memory of resources by discarding their content.</p>	
        /// </summary>	
        /// <param name="numResources"><dd> <p>The number of resources in the <em>ppResources</em> argument array.</p> </dd></param>	
        /// <param name="resourcesOut"><dd> <p>An array of references to <strong><see cref="SharpDX.DXGI.Resource"/></strong> interfaces for the resources to offer.</p> </dd></param>	
        /// <param name="priority"><dd> <p>A <strong><see cref="SharpDX.DXGI.OfferResourcePriority"/></strong>-typed value that indicates how valuable data is.</p> </dd></param>	
        /// <returns><p><strong>OfferResources</strong> returns: </p><ul> <li><see cref="SharpDX.Result.Ok"/> if resources were successfully offered</li> <li>E_INVALIDARG if a resource in the array or the priority is invalid</li> </ul></returns>	
        /// <remarks>	
        /// <p>The priority value that the  <em>Priority</em> parameter specifies describes how valuable the caller considers the content to be.  The operating system uses the priority value to discard resources in order of priority. The operating system discards a resource that is offered with low priority before it discards a resource that is  offered with a higher priority.</p><p>If you call <strong>OfferResources</strong> to offer a resource while the resource is bound to the pipeline, the resource is unbound.  You cannot call <strong>OfferResources</strong> on a resource that is mapped.  After you offer a resource, the resource cannot be mapped or bound to the pipeline until you call the <strong>IDXGIDevice2::ReclaimResource</strong> method to reclaim the resource. You cannot call <strong>OfferResources</strong> to offer immutable resources.</p><p>To offer shared resources, call <strong>OfferResources</strong> on only one of the sharing devices.  To ensure exclusive access to the resources, you must use an <strong><see cref="SharpDX.DXGI.KeyedMutex"/></strong> object and then call <strong>OfferResources</strong> only while you hold the mutex. In fact, you can't offer shared resources unless you use <strong><see cref="SharpDX.DXGI.KeyedMutex"/></strong> because offering shared resources without using <strong><see cref="SharpDX.DXGI.KeyedMutex"/></strong> isn't supported.</p><p><strong>Note</strong>??The user mode display driver might not immediately offer the resources that you specified in a call to <strong>OfferResources</strong>. The driver can postpone offering them until the next call to <strong><see cref="SharpDX.DXGI.SwapChain.Present"/></strong>, <strong><see cref="SharpDX.DXGI.SwapChain1.Present1"/></strong>, or <strong><see cref="SharpDX.Direct3D11.DeviceContext.Flush"/></strong>. </p><p><strong>Platform Update for Windows?7:??</strong>The runtime validates that <strong>OfferResources</strong> is used correctly on non-shared resources but doesn't perform the intended functionality. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDevice2::OfferResources']/*"/>	
        /// <msdn-id>hh404549</msdn-id>	
        /// <unmanaged>HRESULT IDXGIDevice2::OfferResources([In] unsigned int NumResources,[In, Buffer] const IDXGIResource** ppResources,[In] DXGI_OFFER_RESOURCE_PRIORITY Priority)</unmanaged>	
        /// <unmanaged-short>IDXGIDevice2::OfferResources</unmanaged-short>	
        private void OfferResources(int numResources, System.IntPtr resourcesOut, SharpDX.DXGI.OfferResourcePriority priority) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, numResources, (void*)resourcesOut, unchecked((int)priority),((void**)(*(void**)_nativePointer))[14]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Restores access to resources that were previously offered by calling <strong><see cref="SharpDX.DXGI.Device2.OfferResources"/></strong>.</p>	
        /// </summary>	
        /// <param name="numResources">No documentation.</param>	
        /// <param name="resourcesOut">No documentation.</param>	
        /// <param name="discardedRef">No documentation.</param>	
        /// <returns><p><strong>ReclaimResources</strong> returns: </p><ul> <li><see cref="SharpDX.Result.Ok"/> if resources were successfully reclaimed</li> <li>E_INVALIDARG if the resources are invalid</li> </ul></returns>	
        /// <remarks>	
        /// <p>After you call <strong><see cref="SharpDX.DXGI.Device2.OfferResources"/></strong> to offer one or more resources, you must call <strong>ReclaimResources</strong> before you can use those resources again.  You must check the values in the array at <em>pDiscarded</em> to determine whether each resource?s content was discarded. If a resource?s content was discarded while it was offered, its current content is undefined. Therefore, you must overwrite the resource?s content before you use the resource.</p><p>To reclaim shared resources, call <strong>ReclaimResources</strong> only on one of the sharing devices.  To ensure exclusive access to the resources, you must use an <strong><see cref="SharpDX.DXGI.KeyedMutex"/></strong> object and then call <strong>ReclaimResources</strong> only while you hold the mutex.</p><p><strong>Platform Update for Windows?7:??</strong>The runtime validates that <strong>ReclaimResources</strong> is used correctly on non-shared resources but doesn't perform the intended functionality. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDevice2::ReclaimResources']/*"/>	
        /// <msdn-id>hh404551</msdn-id>	
        /// <unmanaged>HRESULT IDXGIDevice2::ReclaimResources([In] unsigned int NumResources,[In, Buffer] const IDXGIResource** ppResources,[Out, Buffer, Optional] BOOL* pDiscarded)</unmanaged>	
        /// <unmanaged-short>IDXGIDevice2::ReclaimResources</unmanaged-short>	
        public void ReclaimResources(int numResources, SharpDX.DXGI.Resource[] resourcesOut, SharpDX.Mathematics.Interop.RawBool[] discardedRef) {
            unsafe {
                IntPtr* resourcesOut_ = (IntPtr*)0;
                if ( resourcesOut != null ) {
                    IntPtr* resourcesOut__ = stackalloc IntPtr[resourcesOut.Length];
                    resourcesOut_ = resourcesOut__;
                    for (int i = 0; i < resourcesOut.Length; i++)                        
                        resourcesOut_[i] =  (resourcesOut[i] == null)? IntPtr.Zero : resourcesOut[i].NativePointer;
                }
                SharpDX.Mathematics.Interop.RawBool[] discardedRef__ = discardedRef;
                SharpDX.Result __result__;
                fixed (void* discardedRef_ = discardedRef__)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, numResources, resourcesOut_, discardedRef_,((void**)(*(void**)_nativePointer))[15]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Restores access to resources that were previously offered by calling <strong><see cref="SharpDX.DXGI.Device2.OfferResources"/></strong>.</p>	
        /// </summary>	
        /// <param name="numResources">No documentation.</param>	
        /// <param name="resourcesOut">No documentation.</param>	
        /// <param name="discardedRef">No documentation.</param>	
        /// <returns><p><strong>ReclaimResources</strong> returns: </p><ul> <li><see cref="SharpDX.Result.Ok"/> if resources were successfully reclaimed</li> <li>E_INVALIDARG if the resources are invalid</li> </ul></returns>	
        /// <remarks>	
        /// <p>After you call <strong><see cref="SharpDX.DXGI.Device2.OfferResources"/></strong> to offer one or more resources, you must call <strong>ReclaimResources</strong> before you can use those resources again.  You must check the values in the array at <em>pDiscarded</em> to determine whether each resource?s content was discarded. If a resource?s content was discarded while it was offered, its current content is undefined. Therefore, you must overwrite the resource?s content before you use the resource.</p><p>To reclaim shared resources, call <strong>ReclaimResources</strong> only on one of the sharing devices.  To ensure exclusive access to the resources, you must use an <strong><see cref="SharpDX.DXGI.KeyedMutex"/></strong> object and then call <strong>ReclaimResources</strong> only while you hold the mutex.</p><p><strong>Platform Update for Windows?7:??</strong>The runtime validates that <strong>ReclaimResources</strong> is used correctly on non-shared resources but doesn't perform the intended functionality. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDevice2::ReclaimResources']/*"/>	
        /// <msdn-id>hh404551</msdn-id>	
        /// <unmanaged>HRESULT IDXGIDevice2::ReclaimResources([In] unsigned int NumResources,[In, Buffer] const IDXGIResource** ppResources,[Out, Buffer, Optional] BOOL* pDiscarded)</unmanaged>	
        /// <unmanaged-short>IDXGIDevice2::ReclaimResources</unmanaged-short>	
        public void ReclaimResources(int numResources, SharpDX.ComArray<SharpDX.DXGI.Resource> resourcesOut, SharpDX.Mathematics.Interop.RawBool[] discardedRef) {
            unsafe {
                SharpDX.Mathematics.Interop.RawBool[] discardedRef__ = discardedRef;
                SharpDX.Result __result__;
                fixed (void* discardedRef_ = discardedRef__)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, numResources, (void*)((resourcesOut == null)?IntPtr.Zero:resourcesOut.NativePointer), discardedRef_,((void**)(*(void**)_nativePointer))[15]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Restores access to resources that were previously offered by calling <strong><see cref="SharpDX.DXGI.Device2.OfferResources"/></strong>.</p>	
        /// </summary>	
        /// <param name="numResources">No documentation.</param>	
        /// <param name="resourcesOut">No documentation.</param>	
        /// <param name="discardedRef">No documentation.</param>	
        /// <returns><p><strong>ReclaimResources</strong> returns: </p><ul> <li><see cref="SharpDX.Result.Ok"/> if resources were successfully reclaimed</li> <li>E_INVALIDARG if the resources are invalid</li> </ul></returns>	
        /// <remarks>	
        /// <p>After you call <strong><see cref="SharpDX.DXGI.Device2.OfferResources"/></strong> to offer one or more resources, you must call <strong>ReclaimResources</strong> before you can use those resources again.  You must check the values in the array at <em>pDiscarded</em> to determine whether each resource?s content was discarded. If a resource?s content was discarded while it was offered, its current content is undefined. Therefore, you must overwrite the resource?s content before you use the resource.</p><p>To reclaim shared resources, call <strong>ReclaimResources</strong> only on one of the sharing devices.  To ensure exclusive access to the resources, you must use an <strong><see cref="SharpDX.DXGI.KeyedMutex"/></strong> object and then call <strong>ReclaimResources</strong> only while you hold the mutex.</p><p><strong>Platform Update for Windows?7:??</strong>The runtime validates that <strong>ReclaimResources</strong> is used correctly on non-shared resources but doesn't perform the intended functionality. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDevice2::ReclaimResources']/*"/>	
        /// <msdn-id>hh404551</msdn-id>	
        /// <unmanaged>HRESULT IDXGIDevice2::ReclaimResources([In] unsigned int NumResources,[In, Buffer] const IDXGIResource** ppResources,[Out, Buffer, Optional] BOOL* pDiscarded)</unmanaged>	
        /// <unmanaged-short>IDXGIDevice2::ReclaimResources</unmanaged-short>	
        private void ReclaimResources(int numResources, System.IntPtr resourcesOut, System.IntPtr discardedRef) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, numResources, (void*)resourcesOut, (void*)discardedRef,((void**)(*(void**)_nativePointer))[15]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Flushes any outstanding rendering commands and sets the specified event object to the signaled state after all previously submitted rendering commands complete.</p>	
        /// </summary>	
        /// <param name="hEvent"><dd> <p>A handle to the event object. The <strong>CreateEvent</strong> or <strong>OpenEvent</strong> function returns this handle. All types of event objects (manual-reset, auto-reset, and so on) are supported.</p> <p>The handle must have the EVENT_MODIFY_STATE access right. For more information about access rights, see Synchronization Object Security and Access Rights.</p> </dd></param>	
        /// <returns><p>Returns <strong><see cref="SharpDX.Result.Ok"/></strong> if successful; otherwise, returns one of the following values:</p><ul> <li><strong>E_OUTOFMEMORY</strong> if insufficient memory is available to complete the operation.</li> <li><strong>E_INVALIDARG</strong> if the parameter was validated and determined to be incorrect.</li> </ul><p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>EnqueueSetEvent</strong> fails with E_NOTIMPL. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p></returns>	
        /// <remarks>	
        /// <p><strong>EnqueueSetEvent</strong> calls the <strong>SetEvent</strong> function on the event object after all previously submitted rendering commands complete or the device is removed.</p><p>After an application calls <strong>EnqueueSetEvent</strong>, it  can immediately call the <strong>WaitForSingleObject</strong> function to put itself to sleep until rendering commands complete.</p><p>You cannot use <strong>EnqueueSetEvent</strong> to determine work completion that is associated with presentation (<strong><see cref="SharpDX.DXGI.SwapChain.Present"/></strong>); instead, we recommend that you use <strong><see cref="SharpDX.DXGI.SwapChain.GetFrameStatistics"/></strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDevice2::EnqueueSetEvent']/*"/>	
        /// <msdn-id>hh404546</msdn-id>	
        /// <unmanaged>HRESULT IDXGIDevice2::EnqueueSetEvent([In] void* hEvent)</unmanaged>	
        /// <unmanaged-short>IDXGIDevice2::EnqueueSetEvent</unmanaged-short>	
        public void EnqueueSetEvent(System.IntPtr hEvent) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, (void*)hEvent,((void**)(*(void**)_nativePointer))[16]);		
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>An <strong><see cref="SharpDX.DXGI.Device"/></strong> interface implements a derived class for DXGI objects that produce image data.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <strong><see cref="SharpDX.DXGI.Device"/></strong> interface is designed for use by DXGI objects that need access to other DXGI objects. This interface is useful to  applications that do not use Direct3D to communicate with DXGI.</p><p>The Direct3D create device functions return a Direct3D device object. This Direct3D device object implements the <strong><see cref="SharpDX.ComObject"/></strong> interface. You can query this Direct3D device object for the device's corresponding <strong><see cref="SharpDX.DXGI.Device"/></strong> interface. To retrieve the <strong><see cref="SharpDX.DXGI.Device"/></strong> interface of a Direct3D device, use the following code:</p><pre><see cref="SharpDX.DXGI.Device"/> * pDXGIDevice;	
    /// hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(<see cref="SharpDX.DXGI.Device"/>), (void **)&amp;pDXGIDevice);	
    /// </pre><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDevice3']/*"/>	
    /// <msdn-id>bb174527</msdn-id>	
    /// <unmanaged>IDXGIDevice3</unmanaged>	
    /// <unmanaged-short>IDXGIDevice3</unmanaged-short>	
    [Guid("6007896c-3244-4afd-bf18-a6d3beda5023")]
    public partial class Device3 : SharpDX.DXGI.Device2 {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.Device3"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Device3(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.Device3"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.Device3(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.Device3(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Trims the graphics memory allocated by the <strong><see cref="SharpDX.DXGI.Device3"/></strong> DXGI device on the app's behalf.</p><p>For apps that render with DirectX, graphics drivers periodically allocate internal memory buffers in order to speed up subsequent rendering requests. These memory allocations count against the app's memory usage for PLM  and in general lead to increased memory usage by the overall system.</p><p>Starting in Windows?8.1, apps that render with Direct2D and/or Direct3D (including <strong>CoreWindow</strong> and XAML interop) must call <strong>Trim</strong> in response to the PLM suspend callback. The Direct3D runtime and the graphics driver will discard internal memory buffers allocated for the app, reducing its memory footprint.</p><p>Calling this method does not change the rendering state of the graphics device and it has no effect on rendering operations. There is a brief performance hit when internal buffers are reallocated during the first rendering operations after the <strong>Trim</strong> call, therefore apps should only call <strong>Trim</strong> when going idle for a period of time (in response to PLM suspend, for example).</p><p>Apps should ensure that they call <strong>Trim</strong> as one of the last D3D operations done before going idle. Direct3D will normally defer the destruction of D3D objects. Calling <strong>Trim</strong>, however, forces Direct3D to destroy objects immediately. For this reason, it is not guaranteed that releasing the final reference on Direct3D objects after calling <strong>Trim</strong> will cause the object to be destroyed and memory to be deallocated  before the app suspends.</p><p>Similar to <strong><see cref="SharpDX.Direct3D11.DeviceContext.Flush"/></strong>, apps should call <strong><see cref="SharpDX.Direct3D11.DeviceContext.ClearState"/></strong> before calling <strong>Trim</strong>. <strong>ClearState</strong> clears the Direct3D pipeline bindings, ensuring that Direct3D does not hold any references to the Direct3D objects you are trying to release.</p><p>It is also prudent to release references on middleware before calling <strong>Trim</strong>, as that middleware may also need to release references	
        /// to Direct3D objects.</p>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDevice3::Trim']/*"/>	
        /// <msdn-id>dn280346</msdn-id>	
        /// <unmanaged>void IDXGIDevice3::Trim()</unmanaged>	
        /// <unmanaged-short>IDXGIDevice3::Trim</unmanaged-short>	
        public void Trim() {
            unsafe {
                SharpDX.DXGI.LocalInterop.Callivoid(_nativePointer,((void**)(*(void**)_nativePointer))[17]);		
            }
        }
    }
    /// <summary>	
    /// <p>Inherited from objects that are tied to the device so that they can retrieve a reference to it.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDeviceSubObject']/*"/>	
    /// <msdn-id>bb174528</msdn-id>	
    /// <unmanaged>IDXGIDeviceSubObject</unmanaged>	
    /// <unmanaged-short>IDXGIDeviceSubObject</unmanaged-short>	
    [Guid("3d3e0379-f9de-4d58-bb6c-18d62992f1a6")]
    public partial class DeviceChild : SharpDX.DXGI.DXGIObject {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.DeviceChild"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public DeviceChild(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.DeviceChild"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.DeviceChild(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.DeviceChild(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Retrieves the device.</p>	
        /// </summary>	
        /// <param name="riid"><dd>  <p>The reference id for the device.</p> </dd></param>	
        /// <param name="deviceOut"><dd>  <p>The address of a reference to the device.</p> </dd></param>	
        /// <returns><p>A code that indicates success or failure (see DXGI_ERROR).</p></returns>	
        /// <remarks>	
        /// <p>The type of interface that is returned can be any interface published by the device. For example, it could be an <see cref="SharpDX.DXGI.Device"/> * called pDevice, and therefore the REFIID would be obtained by calling __uuidof(pDevice).</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDeviceSubObject::GetDevice']/*"/>	
        /// <msdn-id>bb174529</msdn-id>	
        /// <unmanaged>HRESULT IDXGIDeviceSubObject::GetDevice([In] const GUID&amp; riid,[Out] void** ppDevice)</unmanaged>	
        /// <unmanaged-short>IDXGIDeviceSubObject::GetDevice</unmanaged-short>	
        public void GetDevice(System.Guid riid, out System.IntPtr deviceOut) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* deviceOut_ = &deviceOut)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, &riid, deviceOut_,((void**)(*(void**)_nativePointer))[7]);		
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p> </p><p>The <strong><see cref="SharpDX.DXGI.DisplayControl"/></strong> interface exposes methods to indicate user preference for the operating system's stereoscopic 3D display behavior and to set stereoscopic 3D display status to enable or disable.</p><p>We recommend that you not use <strong><see cref="SharpDX.DXGI.DisplayControl"/></strong> to query or set system-wide stereoscopic 3D settings in your stereoscopic 3D apps. Instead, for your windowed apps, call the <strong><see cref="SharpDX.DXGI.Factory2.IsWindowedStereoEnabled_"/></strong> method to determine whether to render in stereo; for your full-screen apps, call the <strong><see cref="SharpDX.DXGI.Output1.GetDisplayModeList1"/></strong> method and then determine whether any of the returned display modes support rendering in stereo.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p><strong>Note</strong>??The <strong><see cref="SharpDX.DXGI.DisplayControl"/></strong> interface is only used by the <strong>Display</strong> app of the operating system's Control Panel or by control applets from third party graphics vendors. This interface is not meant for developers of end-user apps.</p><p><strong>Note</strong>??The <strong><see cref="SharpDX.DXGI.DisplayControl"/></strong> interface does not exist for Windows Store apps.</p><p>Call <strong>QueryInterface</strong> from a factory object (<strong><see cref="SharpDX.DXGI.Factory"/></strong>, <strong><see cref="SharpDX.DXGI.Factory1"/></strong> or <strong><see cref="SharpDX.DXGI.Factory2"/></strong>) to retrieve the <strong><see cref="SharpDX.DXGI.DisplayControl"/></strong> interface. The following code shows how.</p><pre><see cref="SharpDX.DXGI.DisplayControl"/> * pDXGIDisplayControl;	
    /// hr = g_pDXGIFactory-&gt;QueryInterface(__uuidof(<see cref="SharpDX.DXGI.DisplayControl"/>), (void **)&amp;pDXGIDisplayControl);	
    /// </pre><p> The operating system processes changes to stereo-enabled configuration asynchronously. Therefore, these changes might not be immediately visible in every process that calls <strong><see cref="SharpDX.DXGI.DisplayControl.IsStereoEnabled_"/></strong> to query for stereo configuration.  Control applets can use the <strong><see cref="SharpDX.DXGI.Factory2.RegisterStereoStatusEvent"/></strong> or <strong><see cref="SharpDX.DXGI.Factory2.RegisterStereoStatusWindow"/></strong> method to register for notifications of all stereo configuration changes.</p><p><strong>Platform Update for Windows?7:??</strong>Stereoscopic 3D display behavior isn?t available with the Platform Update for Windows?7. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDisplayControl']/*"/>	
    /// <msdn-id>hh404552</msdn-id>	
    /// <unmanaged>IDXGIDisplayControl</unmanaged>	
    /// <unmanaged-short>IDXGIDisplayControl</unmanaged-short>	
    [Guid("ea9dbf1a-c88e-4486-854a-98aa0138f30c")]
    public partial class DisplayControl : SharpDX.ComObject {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.DisplayControl"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public DisplayControl(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.DisplayControl"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.DisplayControl(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.DisplayControl(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Retrieves a Boolean value that indicates whether the operating system's stereoscopic 3D display behavior is enabled.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>You pass a Boolean value to the  <strong><see cref="SharpDX.DXGI.DisplayControl.SetStereoEnabled"/></strong> method to either enable or disable the operating system's stereoscopic 3D display behavior. TRUE enables the operating system's stereoscopic 3D display behavior and <see cref="SharpDX.Result.False"/> disables it.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDisplayControl::IsStereoEnabled']/*"/>	
        /// <msdn-id>hh404553</msdn-id>	
        /// <unmanaged>IsStereoEnabled</unmanaged>	
        /// <unmanaged-short>IsStereoEnabled</unmanaged-short>	
        /// <unmanaged>BOOL IDXGIDisplayControl::IsStereoEnabled()</unmanaged>
        public SharpDX.Mathematics.Interop.RawBool IsStereoEnabled {
                get { return IsStereoEnabled_(); }
        }
        
        /// <summary>	
        /// <p>Set a Boolean value to either enable or disable the operating system's stereoscopic 3D display behavior.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>SetStereoEnabled</strong> doesn't change stereoscopic 3D display behavior because stereoscopic 3D display behavior isn?t available with the Platform Update for Windows?7. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDisplayControl::SetStereoEnabled']/*"/>	
        /// <msdn-id>hh404554</msdn-id>	
        /// <unmanaged>SetStereoEnabled</unmanaged>	
        /// <unmanaged-short>SetStereoEnabled</unmanaged-short>	
        /// <unmanaged>void IDXGIDisplayControl::SetStereoEnabled([In] BOOL enabled)</unmanaged>
        public SharpDX.Mathematics.Interop.RawBool StereoEnabled {
                set { SetStereoEnabled(value); }
        }
        
        /// <summary>	
        /// <p>Retrieves a Boolean value that indicates whether the operating system's stereoscopic 3D display behavior is enabled.</p>	
        /// </summary>	
        /// <returns><p><strong>IsStereoEnabled</strong> returns TRUE when the operating system's stereoscopic 3D display behavior is enabled and <see cref="SharpDX.Result.False"/> when this behavior is disabled.</p><p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>IsStereoEnabled</strong> always returns <see cref="SharpDX.Result.False"/> because stereoscopic 3D display behavior isn?t available with the Platform Update for Windows?7. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p></returns>	
        /// <remarks>	
        /// <p>You pass a Boolean value to the  <strong><see cref="SharpDX.DXGI.DisplayControl.SetStereoEnabled"/></strong> method to either enable or disable the operating system's stereoscopic 3D display behavior. TRUE enables the operating system's stereoscopic 3D display behavior and <see cref="SharpDX.Result.False"/> disables it.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDisplayControl::IsStereoEnabled']/*"/>	
        /// <msdn-id>hh404553</msdn-id>	
        /// <unmanaged>BOOL IDXGIDisplayControl::IsStereoEnabled()</unmanaged>	
        /// <unmanaged-short>IDXGIDisplayControl::IsStereoEnabled</unmanaged-short>	
        internal SharpDX.Mathematics.Interop.RawBool IsStereoEnabled_() {
            unsafe {
                SharpDX.Mathematics.Interop.RawBool __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.CalliSharpDXMathematicsInteropRawBool(_nativePointer,((void**)(*(void**)_nativePointer))[3]);		
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Set a Boolean value to either enable or disable the operating system's stereoscopic 3D display behavior.</p>	
        /// </summary>	
        /// <param name="enabled"><dd> <p>A Boolean value that either enables or disables the operating system's stereoscopic 3D display behavior. TRUE enables the operating system's stereoscopic 3D display behavior and <see cref="SharpDX.Result.False"/> disables it.</p> </dd></param>	
        /// <remarks>	
        /// <p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>SetStereoEnabled</strong> doesn't change stereoscopic 3D display behavior because stereoscopic 3D display behavior isn?t available with the Platform Update for Windows?7. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIDisplayControl::SetStereoEnabled']/*"/>	
        /// <msdn-id>hh404554</msdn-id>	
        /// <unmanaged>void IDXGIDisplayControl::SetStereoEnabled([In] BOOL enabled)</unmanaged>	
        /// <unmanaged-short>IDXGIDisplayControl::SetStereoEnabled</unmanaged-short>	
        internal void SetStereoEnabled(SharpDX.Mathematics.Interop.RawBool enabled) {
            unsafe {
                SharpDX.DXGI.LocalInterop.Callivoid26(_nativePointer, enabled,((void**)(*(void**)_nativePointer))[4]);		
            }
        }
    }
    /// <summary>	
    /// <p>An <strong><see cref="SharpDX.DXGI.DXGIObject"/></strong> interface is a base interface for all DXGI objects; <strong><see cref="SharpDX.DXGI.DXGIObject"/></strong> supports associating caller-defined (private data) with an object and retrieval of an interface to the parent object.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p><strong><see cref="SharpDX.DXGI.DXGIObject"/></strong> implements base class functionality for several other interfaces: <strong><see cref="SharpDX.DXGI.Adapter"/></strong>, <strong><see cref="SharpDX.DXGI.Device"/></strong>, <strong><see cref="SharpDX.DXGI.Factory"/></strong>, <strong><see cref="SharpDX.DXGI.Output"/></strong> </p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIObject']/*"/>	
    /// <msdn-id>bb174541</msdn-id>	
    /// <unmanaged>IDXGIObject</unmanaged>	
    /// <unmanaged-short>IDXGIObject</unmanaged-short>	
    [Guid("aec22fb8-76f3-4639-9be0-28eb43a67a2e")]
    public partial class DXGIObject : SharpDX.ComObject {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.DXGIObject"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public DXGIObject(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.DXGIObject"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.DXGIObject(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.DXGIObject(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Sets application-defined data to the object and associates that data with a <see cref="System.Guid"/>.</p>	
        /// </summary>	
        /// <param name="name"><dd>  <p>A <see cref="System.Guid"/> that identifies the data. Use this <see cref="System.Guid"/> in a call to <strong>GetPrivateData</strong> to get the data.</p> </dd></param>	
        /// <param name="dataSize"><dd>  <p>The size of the object's data.</p> </dd></param>	
        /// <param name="dataRef"><dd>  <p>A reference to the object's data.</p> </dd></param>	
        /// <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
        /// <remarks>	
        /// <p><strong>SetPrivateData</strong> makes a copy of the specified data and stores it with the object.</p><p>Private data that <strong>SetPrivateData</strong> stores in the object occupies the same storage space as private data that is stored by associated Direct3D objects (for example, by a Microsoft Direct3D?11 device through <strong><see cref="SharpDX.Direct3D11.Device.SetPrivateData"/></strong> or by a Direct3D?11 child device through <strong><see cref="SharpDX.Direct3D11.DeviceChild.SetPrivateData"/></strong>).</p><p>The debug layer reports memory leaks by outputting a list of object interface references along with their friendly names. The default friendly name is "&lt;unnamed&gt;". You can set the friendly name so that you can determine if the corresponding object interface reference caused the leak. To set the friendly name, use the <strong>SetPrivateData</strong> method and the well-known private data <see cref="System.Guid"/> (<strong><see cref="SharpDX.Direct3D.CommonGuid.DebugObjectName"/></strong>) that is in D3Dcommon.h. For example, to give pContext a friendly name of <em>My name</em>, use the following code:</p><pre> static const char c_szName[] = "My name";	
        /// hr = pContext-&gt;SetPrivateData( <see cref="SharpDX.Direct3D.CommonGuid.DebugObjectName"/>, sizeof( c_szName ) - 1, c_szName );	
        /// </pre><p>You can use <strong><see cref="SharpDX.Direct3D.CommonGuid.DebugObjectName"/></strong> to track down memory leaks and understand performance characteristics of your applications. This information is reflected in the output of the debug layer that is related to memory leaks (<strong><see cref="SharpDX.Direct3D11.DeviceDebug.ReportLiveDeviceObjects"/></strong>) and with the event tracing for Windows events that we've added to Windows?8.	
        /// </p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIObject::SetPrivateData']/*"/>	
        /// <msdn-id>bb174544</msdn-id>	
        /// <unmanaged>HRESULT IDXGIObject::SetPrivateData([In] const GUID&amp; Name,[In] unsigned int DataSize,[In, Buffer] const void* pData)</unmanaged>	
        /// <unmanaged-short>IDXGIObject::SetPrivateData</unmanaged-short>	
        public void SetPrivateData(System.Guid name, int dataSize, System.IntPtr dataRef) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, &name, dataSize, (void*)dataRef,((void**)(*(void**)_nativePointer))[3]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Set an interface in the object's private data.</p>	
        /// </summary>	
        /// <param name="name"><dd>  <p>A <see cref="System.Guid"/> identifying the interface.</p> </dd></param>	
        /// <param name="unknownRef"><dd>  <p>The interface to set.</p> </dd></param>	
        /// <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
        /// <remarks>	
        /// <p>This API associates an interface reference with the object.</p><p>When the interface is set its reference count is incremented. When the data are overwritten (by calling SPD or SPDI with the same <see cref="System.Guid"/>) or the object is destroyed, ::Release() is called and the interface's reference count is decremented.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIObject::SetPrivateDataInterface']/*"/>	
        /// <msdn-id>bb174545</msdn-id>	
        /// <unmanaged>HRESULT IDXGIObject::SetPrivateDataInterface([In] const GUID&amp; Name,[In] const IUnknown* pUnknown)</unmanaged>	
        /// <unmanaged-short>IDXGIObject::SetPrivateDataInterface</unmanaged-short>	
        public void SetPrivateDataInterface(System.Guid name, SharpDX.ComObject unknownRef) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, &name, (void*)((unknownRef == null)?IntPtr.Zero:unknownRef.NativePointer),((void**)(*(void**)_nativePointer))[4]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Get a reference to the object's data.</p>	
        /// </summary>	
        /// <param name="name"><dd>  <p>A <see cref="System.Guid"/> identifying the data.</p> </dd></param>	
        /// <param name="dataSizeRef"><dd>  <p>The size of the data.</p> </dd></param>	
        /// <param name="dataRef"><dd>  <p>Pointer to the data.</p> </dd></param>	
        /// <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
        /// <remarks>	
        /// <p>If the data returned is a reference to an <strong><see cref="SharpDX.ComObject"/></strong>, or one of its derivative classes, previously set by <strong><see cref="SharpDX.DXGI.DXGIObject.SetPrivateDataInterface"/></strong>, you must call <strong>::Release()</strong> on the reference before the reference is freed to decrement the reference count.</p><p>You can pass <strong>GUID_DeviceType</strong> in the <em>Name</em> parameter of <strong>GetPrivateData</strong> to retrieve the device type from the display adapter object (<strong><see cref="SharpDX.DXGI.Adapter"/></strong>, <strong><see cref="SharpDX.DXGI.Adapter1"/></strong>, <strong><see cref="SharpDX.DXGI.Adapter2"/></strong>). </p><p><strong>To get the type of device on which the display adapter was created</strong></p><ol> <li>Call <strong>IUnknown::QueryInterface</strong> on the <strong><see cref="SharpDX.Direct3D11.Device"/></strong> or <strong>ID3D10Device</strong> object to retrieve the <strong><see cref="SharpDX.DXGI.Device"/></strong> object.</li> <li>Call <strong>GetParent</strong> on the <strong><see cref="SharpDX.DXGI.Device"/></strong> object to retrieve the <strong><see cref="SharpDX.DXGI.Adapter"/></strong> object.</li> <li>Call <strong>GetPrivateData</strong> on the <strong><see cref="SharpDX.DXGI.Adapter"/></strong> object with <strong>GUID_DeviceType</strong> to retrieve the type of device on which the display adapter was created. <em>pData</em> will point to a value from the driver-type enumeration (for example, a value from <strong><see cref="SharpDX.Direct3D.DriverType"/></strong>).</li> </ol><p>On Windows?7 or earlier, this type is either a value from <strong>D3D10_DRIVER_TYPE</strong> or <strong><see cref="SharpDX.Direct3D.DriverType"/></strong> depending on which kind of device was created. On Windows?8, this type is always a value from <strong><see cref="SharpDX.Direct3D.DriverType"/></strong>. Don't use <strong><see cref="SharpDX.DXGI.DXGIObject.SetPrivateData"/></strong> with <strong>GUID_DeviceType</strong> because the behavior when doing so is undefined.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIObject::GetPrivateData']/*"/>	
        /// <msdn-id>bb174543</msdn-id>	
        /// <unmanaged>HRESULT IDXGIObject::GetPrivateData([In] const GUID&amp; Name,[InOut] unsigned int* pDataSize,[Out, Buffer] void* pData)</unmanaged>	
        /// <unmanaged-short>IDXGIObject::GetPrivateData</unmanaged-short>	
        public SharpDX.Result GetPrivateData(System.Guid name, ref int dataSizeRef, System.IntPtr dataRef) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* dataSizeRef_ = &dataSizeRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, &name, dataSizeRef_, (void*)dataRef,((void**)(*(void**)_nativePointer))[5]);		
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Gets the parent of the object.</p>	
        /// </summary>	
        /// <param name="riid"><dd>  <p>The ID of the requested interface.</p> </dd></param>	
        /// <param name="parentOut"><dd>  <p>The address of a reference to the parent object.</p> </dd></param>	
        /// <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
        /// <remarks>	
        /// <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIObject::GetParent']/*"/>	
        /// <msdn-id>bb174542</msdn-id>	
        /// <unmanaged>HRESULT IDXGIObject::GetParent([In] const GUID&amp; riid,[Out] void** ppParent)</unmanaged>	
        /// <unmanaged-short>IDXGIObject::GetParent</unmanaged-short>	
        public void GetParent(System.Guid riid, out System.IntPtr parentOut) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* parentOut_ = &parentOut)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, &riid, parentOut_,((void**)(*(void**)_nativePointer))[6]);		
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>An <strong><see cref="SharpDX.DXGI.Factory"/></strong> interface implements methods for generating DXGI objects (which handle full screen transitions).</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Create a factory by calling <strong>CreateDXGIFactory</strong>.</p><p>Because you can create a Direct3D device without creating a swap chain, you might need to retrieve the factory that is used to create the device in order to create a swap chain.	
    /// You can request the <strong><see cref="SharpDX.DXGI.Device"/></strong> interface from the Direct3D device and then use the <strong><see cref="SharpDX.DXGI.DXGIObject.GetParent"/></strong> method to locate 	
    /// the factory.  The following code shows how.</p><pre><see cref="SharpDX.DXGI.Device"/> * pDXGIDevice;	
    /// hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(<see cref="SharpDX.DXGI.Device"/>), (void **)&amp;pDXGIDevice); <see cref="SharpDX.DXGI.Adapter"/> * pDXGIAdapter;	
    /// hr = pDXGIDevice-&gt;GetParent(__uuidof(<see cref="SharpDX.DXGI.Adapter"/>), (void **)&amp;pDXGIAdapter); <see cref="SharpDX.DXGI.Factory"/> * pIDXGIFactory;	
    /// pDXGIAdapter-&gt;GetParent(__uuidof(<see cref="SharpDX.DXGI.Factory"/>), (void **)&amp;pIDXGIFactory);	
    /// </pre><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIFactory']/*"/>	
    /// <msdn-id>bb174535</msdn-id>	
    /// <unmanaged>IDXGIFactory</unmanaged>	
    /// <unmanaged-short>IDXGIFactory</unmanaged-short>	
    [Guid("7b7166ec-21c7-44ae-b21a-c9ae321ae369")]
    public partial class Factory : SharpDX.DXGI.DXGIObject {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.Factory"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Factory(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.Factory"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.Factory(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.Factory(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Enumerates the adapters (video cards).</p>	
        /// </summary>	
        /// <param name="adapter"><dd>  <p>The index of the adapter to enumerate.</p> </dd></param>	
        /// <param name="adapterOut"><dd>  <p>The address of a reference to an <strong><see cref="SharpDX.DXGI.Adapter"/></strong> interface at the position specified by the <em>Adapter</em> parameter.  This parameter must not be <strong><c>null</c></strong>.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; otherwise, returns <see cref="SharpDX.DXGI.ResultCode.NotFound"/> if the index is greater than or equal to the number of adapters in the local system, or <see cref="SharpDX.DXGI.ResultCode.InvalidCall"/> if <em>ppAdapter</em> parameter is <strong><c>null</c></strong>.</p></returns>	
        /// <remarks>	
        /// <p>When you create a factory, the factory enumerates the set of adapters that are available in the system. Therefore, if you change the adapters in a system, you must destroy  and recreate the <strong><see cref="SharpDX.DXGI.Factory"/></strong> object. The number of adapters in a system changes when you add or remove a display card, or dock or undock a laptop. </p><p>When the <strong>EnumAdapters</strong> method succeeds and fills the <em>ppAdapter</em> parameter with the address of the reference to the adapter interface, <strong>EnumAdapters</strong> increments the adapter interface's reference count. When you finish using the  adapter interface, call the <strong>Release</strong> method to decrement the reference count before you destroy the reference.</p><p><strong>EnumAdapters</strong> first returns the adapter with the output on which the desktop primary is displayed. This adapter corresponds with an index of zero. <strong>EnumAdapters</strong> next returns other adapters with outputs. <strong>EnumAdapters</strong> finally returns adapters without outputs. </p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIFactory::EnumAdapters']/*"/>	
        /// <msdn-id>bb174538</msdn-id>	
        /// <unmanaged>HRESULT IDXGIFactory::EnumAdapters([In] unsigned int Adapter,[Out] IDXGIAdapter** ppAdapter)</unmanaged>	
        /// <unmanaged-short>IDXGIFactory::EnumAdapters</unmanaged-short>	
        internal SharpDX.Result GetAdapter(int adapter, out SharpDX.DXGI.Adapter adapterOut) {
            unsafe {
                IntPtr adapterOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, adapter, &adapterOut_,((void**)(*(void**)_nativePointer))[7]);		
                adapterOut= (adapterOut_ == IntPtr.Zero)?null:new SharpDX.DXGI.Adapter(adapterOut_);	
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Allows DXGI to monitor an application's message queue for the alt-enter key sequence (which causes the application to switch from windowed to full screen or vice versa).</p>	
        /// </summary>	
        /// <param name="windowHandle"><dd>  <p>The handle of the window that is to be monitored. This parameter can be <strong><c>null</c></strong>; but only if the flags are also 0. </p> </dd></param>	
        /// <param name="flags"><dd>  <p>One or more of the following values:</p> <ul> <li><see cref="SharpDX.DXGI.WindowAssociationFlags.IgnoreAll"/> - Prevent DXGI from monitoring an applications message queue; this makes DXGI unable to respond to mode changes.</li> <li><see cref="SharpDX.DXGI.WindowAssociationFlags.IgnoreAltEnter"/> - Prevent DXGI from responding to an alt-enter sequence.</li> <li><see cref="SharpDX.DXGI.WindowAssociationFlags.IgnorePrintScreen"/> - Prevent DXGI from responding to a print-screen key.</li> </ul> </dd></param>	
        /// <returns><p> <see cref="SharpDX.DXGI.ResultCode.InvalidCall"/> if <em>WindowHandle</em> is invalid, or E_OUTOFMEMORY.</p></returns>	
        /// <remarks>	
        /// <p><strong>Note</strong>??If you call this API in a Session 0 process, it returns <strong><see cref="SharpDX.DXGI.ResultCode.NotCurrentlyAvailable"/></strong>.</p><p>The combination of <em>WindowHandle</em> and <em>Flags</em> informs DXGI to stop monitoring window messages for the previously-associated window.</p><p>If the application switches to full-screen mode, DXGI will choose a full-screen resolution to be the smallest supported resolution that is larger or the same size as the current back buffer size.</p><p>Applications can make some changes to make the transition from windowed to full screen more efficient. For example, on a WM_SIZE message, the application should release any outstanding swap-chain back buffers, call <strong><see cref="SharpDX.DXGI.SwapChain.ResizeBuffers"/></strong>, then re-acquire the back buffers from the swap chain(s). This gives the swap chain(s) an opportunity to resize the back buffers, and/or recreate them to enable full-screen flipping operation. If the application does not perform this sequence, DXGI will still make the full-screen/windowed transition, but may be forced to use a stretch operation (since the back buffers may not be the correct size), which may be less efficient. Even if a stretch is not required, presentation may not be optimal because the back buffers might not be directly interchangeable with the front buffer. Thus, a call to <strong>ResizeBuffers</strong> on WM_SIZE is always recommended, since WM_SIZE is always sent during a fullscreen transition.</p><p>While windowed, the application can, if it chooses, restrict the size of its window's client area to sizes to which it is comfortable rendering. A fully flexible application would make no such restriction, but UI elements or other design considerations can, of course, make this flexibility untenable. If the application further chooses to restrict its window's client area to just those that match supported full-screen resolutions, the application can field WM_SIZING, then check against <strong><see cref="SharpDX.DXGI.Output.FindClosestMatchingMode"/></strong>. If a matching mode is found, allow the resize. (The <see cref="SharpDX.DXGI.Output"/> can be retrieved from <strong><see cref="SharpDX.DXGI.SwapChain.GetContainingOutput"/></strong>. Absent subsequent changes to desktop topology, this will be the same output that will be chosen when alt-enter is fielded and fullscreen mode is begun for that swap chain.)</p><p>Applications that want to handle mode changes or Alt+Enter themselves should call <strong>MakeWindowAssociation</strong> with the <see cref="SharpDX.DXGI.WindowAssociationFlags.IgnoreAll"/> flag after swap chain creation. The <em>WindowHandle</em> argument, if non-<strong><c>null</c></strong>, specifies that the application message queues will not be handled by the DXGI runtime for all swap chains of a particular target <strong><see cref="System.IntPtr"/></strong>.  Calling <strong>MakeWindowAssociation</strong> with the <see cref="SharpDX.DXGI.WindowAssociationFlags.IgnoreAll"/> flag after swapchain creation ensures that DXGI will not interfere with application's handling of window mode changes or Alt+Enter.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIFactory::MakeWindowAssociation']/*"/>	
        /// <msdn-id>bb174540</msdn-id>	
        /// <unmanaged>HRESULT IDXGIFactory::MakeWindowAssociation([In] HWND WindowHandle,[In] DXGI_MWA_FLAGS Flags)</unmanaged>	
        /// <unmanaged-short>IDXGIFactory::MakeWindowAssociation</unmanaged-short>	
        public void MakeWindowAssociation(System.IntPtr windowHandle, SharpDX.DXGI.WindowAssociationFlags flags) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, (void*)windowHandle, unchecked((int)flags),((void**)(*(void**)_nativePointer))[8]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Get the window through which the user controls the transition to and from full screen.</p>	
        /// </summary>	
        /// <returns><dd>  <p>A reference to a window handle.</p> </dd></returns>	
        /// <remarks>	
        /// <p><strong>Note</strong>??If you call this API in a Session 0 process, it returns <strong><see cref="SharpDX.DXGI.ResultCode.NotCurrentlyAvailable"/></strong>.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIFactory::GetWindowAssociation']/*"/>	
        /// <msdn-id>bb174539</msdn-id>	
        /// <unmanaged>HRESULT IDXGIFactory::GetWindowAssociation([Out] HWND* pWindowHandle)</unmanaged>	
        /// <unmanaged-short>IDXGIFactory::GetWindowAssociation</unmanaged-short>	
        public System.IntPtr GetWindowAssociation() {
            unsafe {
                System.IntPtr windowHandleRef;
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, &windowHandleRef,((void**)(*(void**)_nativePointer))[9]);		
                __result__.CheckError();
                return windowHandleRef;
            }
        }
        
        /// <summary>	
        /// <p>[Starting with Direct3D 11.1, we recommend not to use <strong>CreateSwapChain</strong> anymore to create a swap chain. Instead, use <strong>CreateSwapChainForHwnd</strong>, <strong>CreateSwapChainForCoreWindow</strong>, or <strong>CreateSwapChainForComposition</strong> depending on how you want to create the swap chain.]</p><p>Creates a swap chain.</p>	
        /// </summary>	
        /// <param name="deviceRef">No documentation.</param>	
        /// <param name="descRef">No documentation.</param>	
        /// <param name="swapChainOut">No documentation.</param>	
        /// <returns><p> <see cref="SharpDX.DXGI.ResultCode.InvalidCall"/> if <em>pDesc</em> or <em>ppSwapChain</em> is <strong><c>null</c></strong>, <see cref="SharpDX.DXGI.DXGIStatus.Occluded"/> if you request full-screen mode and it is unavailable, or E_OUTOFMEMORY. Other error codes defined by the type of device passed in may also be returned.</p></returns>	
        /// <remarks>	
        /// <p><strong>Note</strong>??If you call this API in a Session 0 process, it returns <strong><see cref="SharpDX.DXGI.ResultCode.NotCurrentlyAvailable"/></strong>.</p><p>If you attempt to create a swap chain in full-screen mode, and full-screen mode is unavailable, the swap chain will be created in windowed mode and <see cref="SharpDX.DXGI.DXGIStatus.Occluded"/> will be returned.</p><p>If the buffer width or the buffer height is zero, the sizes will be inferred from the output window size in the swap-chain description.</p><p>Because the target output can't be chosen explicitly when the swap chain is created, we recommend not to create a full-screen swap chain. This can reduce presentation performance if the swap chain size and the output window size do not match. Here are two ways to ensure that the sizes match:</p><ul> <li>Create a windowed swap chain and then set it full-screen using <strong><see cref="SharpDX.DXGI.SwapChain.SetFullscreenState"/></strong>.</li> <li>Save a reference to the swap chain immediately after creation, and use it to get the output window size during a WM_SIZE event. Then resize the swap chain buffers (with <strong><see cref="SharpDX.DXGI.SwapChain.ResizeBuffers"/></strong>) during the transition from windowed to full-screen.</li> </ul><p>If the swap chain is in full-screen mode, before you release it you must use <strong>SetFullscreenState</strong> to switch it to windowed mode. For more information about releasing a swap chain, see the "Destroying a Swap Chain" section of DXGI Overview.</p><p>After the runtime renders the initial frame in full screen, the runtime might unexpectedly exit full screen during a call to <strong><see cref="SharpDX.DXGI.SwapChain.Present"/></strong>. To work around this issue, we recommend that you execute the following code right after you call <strong>CreateSwapChain</strong> to create a full-screen swap chain (<strong>Windowed</strong> member of <strong><see cref="SharpDX.DXGI.SwapChainDescription"/></strong> set to <strong><see cref="SharpDX.Result.False"/></strong>).	
        /// </p><pre> // Detect if newly created full-screen swap chain isn't actually full screen.	
        /// <see cref="SharpDX.DXGI.Output"/>* pTarget; <see cref="SharpDX.Mathematics.Interop.RawBool"/> bFullscreen;	
        /// if (SUCCEEDED(pSwapChain-&gt;GetFullscreenState(&amp;bFullscreen, &amp;pTarget)))	
        /// { pTarget-&gt;Release();	
        /// }	
        /// else bFullscreen = <see cref="SharpDX.Result.False"/>;	
        /// // If not full screen, enable full screen again.	
        /// if (!bFullscreen)	
        /// { ShowWindow(hWnd, SW_MINIMIZE); ShowWindow(hWnd, SW_RESTORE); pSwapChain-&gt;SetFullscreenState(TRUE, <c>null</c>);	
        /// }	
        /// </pre><p>You can specify <strong><see cref="SharpDX.DXGI.SwapEffect"/></strong> and <strong><see cref="SharpDX.DXGI.SwapChainFlags"/></strong> values in the swap-chain description that <em>pDesc</em> points to. These values allow you to use features like flip-model presentation and content protection by using pre-Windows?8 APIs.</p><p>However, to use stereo presentation and to change resize behavior for the flip model, applications must use the <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForHwnd"/></strong> method. Otherwise, the back-buffer contents implicitly scale to fit the presentation target size; that is, you can't turn off scaling.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIFactory::CreateSwapChain']/*"/>	
        /// <msdn-id>bb174537</msdn-id>	
        /// <unmanaged>HRESULT IDXGIFactory::CreateSwapChain([In] IUnknown* pDevice,[In] DXGI_SWAP_CHAIN_DESC* pDesc,[Out, Fast] IDXGISwapChain** ppSwapChain)</unmanaged>	
        /// <unmanaged-short>IDXGIFactory::CreateSwapChain</unmanaged-short>	
        internal void CreateSwapChain(SharpDX.ComObject deviceRef, ref SharpDX.DXGI.SwapChainDescription descRef, SharpDX.DXGI.SwapChain swapChainOut) {
            unsafe {
                IntPtr swapChainOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                fixed (void* descRef_ = &descRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, (void*)((deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer), descRef_, &swapChainOut_,((void**)(*(void**)_nativePointer))[10]);		
                ((SharpDX.DXGI.SwapChain)swapChainOut).NativePointer = swapChainOut_;
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Create an adapter interface that represents a software adapter.</p>	
        /// </summary>	
        /// <param name="module"><dd>  <p>Handle to the software adapter's dll. HMODULE can be obtained with <strong>GetModuleHandle</strong> or <strong>LoadLibrary</strong>.</p> </dd></param>	
        /// <returns><dd>  <p>Address of a reference to an adapter (see <strong><see cref="SharpDX.DXGI.Adapter"/></strong>).</p> </dd></returns>	
        /// <remarks>	
        /// <p>A software adapter is a DLL that implements the entirety of a device driver interface, plus emulation, if necessary, of kernel-mode graphics components for Windows. Details on implementing a software adapter can be found in the Windows Vista Driver Development Kit. This is a very complex development task, and is not recommended for general readers.</p><p>Calling this method will increment the module's reference count by one. The reference count can be decremented by calling <strong>FreeLibrary</strong>.</p><p>The typical calling scenario is to call <strong>LoadLibrary</strong>, pass the handle to <strong>CreateSoftwareAdapter</strong>, then immediately call <strong>FreeLibrary</strong> on the DLL and forget the DLL's <strong>HMODULE</strong>. Since the software adapter calls <strong>FreeLibrary</strong> when it is destroyed, the lifetime of the DLL will now be owned by the adapter, and the application is free of any further consideration of its lifetime.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIFactory::CreateSoftwareAdapter']/*"/>	
        /// <msdn-id>bb174536</msdn-id>	
        /// <unmanaged>HRESULT IDXGIFactory::CreateSoftwareAdapter([In] HINSTANCE Module,[Out] IDXGIAdapter** ppAdapter)</unmanaged>	
        /// <unmanaged-short>IDXGIFactory::CreateSoftwareAdapter</unmanaged-short>	
        public SharpDX.DXGI.Adapter CreateSoftwareAdapter(System.IntPtr module) {
            unsafe {
                SharpDX.DXGI.Adapter adapterOut;
                IntPtr adapterOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, (void*)module, &adapterOut_,((void**)(*(void**)_nativePointer))[11]);		
                adapterOut= (adapterOut_ == IntPtr.Zero)?null:new SharpDX.DXGI.Adapter(adapterOut_);	
                __result__.CheckError();
                return adapterOut;
            }
        }
    }
    /// <summary>	
    /// <p>The <strong><see cref="SharpDX.DXGI.Factory1"/></strong> interface implements methods for generating DXGI objects.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This interface is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>To create a factory, call the <strong>CreateDXGIFactory1</strong> function.</p><p>Because you can create a Direct3D device without creating a swap chain, you might need to retrieve the factory that is used to create the device in order to create a swap chain.	
    /// You can request the <strong><see cref="SharpDX.DXGI.Device"/></strong> or <strong><see cref="SharpDX.DXGI.Device1"/></strong> interface from the Direct3D device and then use the <strong><see cref="SharpDX.DXGI.DXGIObject.GetParent"/></strong> method to locate 	
    /// the factory.  The following code shows how.</p><pre><see cref="SharpDX.DXGI.Device1"/> * pDXGIDevice;	
    /// hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(<see cref="SharpDX.DXGI.Device1"/>), (void **)&amp;pDXGIDevice); <see cref="SharpDX.DXGI.Adapter"/> * pDXGIAdapter;	
    /// hr = pDXGIDevice-&gt;GetParent(__uuidof(<see cref="SharpDX.DXGI.Adapter"/>), (void **)&amp;pDXGIAdapter); <see cref="SharpDX.DXGI.Factory1"/> * pIDXGIFactory;	
    /// pDXGIAdapter-&gt;GetParent(__uuidof(<see cref="SharpDX.DXGI.Factory1"/>), (void **)&amp;pIDXGIFactory);	
    /// </pre><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIFactory1']/*"/>	
    /// <msdn-id>ff471335</msdn-id>	
    /// <unmanaged>IDXGIFactory1</unmanaged>	
    /// <unmanaged-short>IDXGIFactory1</unmanaged-short>	
    [Guid("770aae78-f26f-4dba-a829-253c83d1b387")]
    public partial class Factory1 : SharpDX.DXGI.Factory {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.Factory1"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Factory1(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.Factory1"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.Factory1(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.Factory1(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Informs an application of the possible need to re-enumerate adapters.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIFactory1::IsCurrent']/*"/>	
        /// <msdn-id>ff471337</msdn-id>	
        /// <unmanaged>IsCurrent</unmanaged>	
        /// <unmanaged-short>IsCurrent</unmanaged-short>	
        /// <unmanaged>BOOL IDXGIFactory1::IsCurrent()</unmanaged>
        public SharpDX.Mathematics.Interop.RawBool IsCurrent {
                get { return IsCurrent_(); }
        }
        
        /// <summary>	
        /// <p>Enumerates both adapters (video cards) with or without outputs.</p>	
        /// </summary>	
        /// <param name="adapter"><dd>  <p>The index of the adapter to enumerate.</p> </dd></param>	
        /// <param name="adapterOut"><dd>  <p>The address of a reference to an <strong><see cref="SharpDX.DXGI.Adapter1"/></strong> interface at the position specified by the <em>Adapter</em> parameter.   This parameter must not be <strong><c>null</c></strong>.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; otherwise, returns <see cref="SharpDX.DXGI.ResultCode.NotFound"/> if the index is greater than or equal to the number of adapters in the local  system, or <see cref="SharpDX.DXGI.ResultCode.InvalidCall"/> if <em>ppAdapter</em> parameter is <strong><c>null</c></strong>.</p></returns>	
        /// <remarks>	
        /// <p>This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>When you create a factory, the factory enumerates the set of adapters that are available in the system. Therefore, if you change the adapters in a system, you must destroy  and recreate the <strong><see cref="SharpDX.DXGI.Factory1"/></strong> object. The number of adapters in a system changes when you add or remove a display card, or dock or undock a laptop. </p><p>When the <strong>EnumAdapters1</strong> method succeeds and fills the <em>ppAdapter</em> parameter with the address of the reference to the adapter interface, <strong>EnumAdapters1</strong> increments the adapter interface's reference count. When you finish using the  adapter interface, call the <strong>Release</strong> method to decrement the reference count before you destroy the reference.</p><p><strong>EnumAdapters1</strong> first returns the adapter with the output on which the desktop primary is displayed. This adapter corresponds with an index of zero. <strong>EnumAdapters1</strong> next returns other adapters with outputs. <strong>EnumAdapters1</strong> finally returns adapters without outputs.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIFactory1::EnumAdapters1']/*"/>	
        /// <msdn-id>ff471336</msdn-id>	
        /// <unmanaged>HRESULT IDXGIFactory1::EnumAdapters1([In] unsigned int Adapter,[Out] IDXGIAdapter1** ppAdapter)</unmanaged>	
        /// <unmanaged-short>IDXGIFactory1::EnumAdapters1</unmanaged-short>	
        internal SharpDX.Result GetAdapter1(int adapter, out SharpDX.DXGI.Adapter1 adapterOut) {
            unsafe {
                IntPtr adapterOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, adapter, &adapterOut_,((void**)(*(void**)_nativePointer))[12]);		
                adapterOut= (adapterOut_ == IntPtr.Zero)?null:new SharpDX.DXGI.Adapter1(adapterOut_);	
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Informs an application of the possible need to re-enumerate adapters.</p>	
        /// </summary>	
        /// <returns><p><strong><see cref="SharpDX.Result.False"/></strong>, if a new adapter is becoming available or the current adapter is going away. <strong>TRUE</strong>, no adapter changes.</p><p><strong>IsCurrent</strong> returns <strong><see cref="SharpDX.Result.False"/></strong> to inform the calling application to re-enumerate adapters.</p></returns>	
        /// <remarks>	
        /// <p>This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIFactory1::IsCurrent']/*"/>	
        /// <msdn-id>ff471337</msdn-id>	
        /// <unmanaged>BOOL IDXGIFactory1::IsCurrent()</unmanaged>	
        /// <unmanaged-short>IDXGIFactory1::IsCurrent</unmanaged-short>	
        internal SharpDX.Mathematics.Interop.RawBool IsCurrent_() {
            unsafe {
                SharpDX.Mathematics.Interop.RawBool __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.CalliSharpDXMathematicsInteropRawBool(_nativePointer,((void**)(*(void**)_nativePointer))[13]);		
                return __result__;
            }
        }
    }
    /// <summary>	
    /// <p>The <strong><see cref="SharpDX.DXGI.Factory2"/></strong> interface includes methods to create a newer version swap chain with more features than <strong><see cref="SharpDX.DXGI.SwapChain"/></strong> and to monitor stereoscopic 3D capabilities.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To create a Microsoft DirectX Graphics Infrastructure (DXGI) 1.2 factory interface, pass <strong><see cref="SharpDX.DXGI.Factory2"/></strong> into either the <strong>CreateDXGIFactory</strong> or <strong>CreateDXGIFactory1</strong> function or call <strong>QueryInterface</strong> from a factory object that either <strong>CreateDXGIFactory</strong> or <strong>CreateDXGIFactory1</strong> returns.	
    /// </p><p>Because you can create a Direct3D device without creating a swap chain, you might need to retrieve the factory that is used to create the device in order to create a swap chain.	
    /// You can request the <strong><see cref="SharpDX.DXGI.Device"/></strong>, <strong><see cref="SharpDX.DXGI.Device1"/></strong>, or  <strong><see cref="SharpDX.DXGI.Device2"/></strong> interface from the Direct3D device and then use the <strong><see cref="SharpDX.DXGI.DXGIObject.GetParent"/></strong> method to locate 	
    /// the factory.  The following code shows how.</p><pre><see cref="SharpDX.DXGI.Device2"/> * pDXGIDevice;	
    /// hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(<see cref="SharpDX.DXGI.Device2"/>), (void **)&amp;pDXGIDevice); <see cref="SharpDX.DXGI.Adapter"/> * pDXGIAdapter;	
    /// hr = pDXGIDevice-&gt;GetParent(__uuidof(<see cref="SharpDX.DXGI.Adapter"/>), (void **)&amp;pDXGIAdapter); <see cref="SharpDX.DXGI.Factory2"/> * pIDXGIFactory;	
    /// pDXGIAdapter-&gt;GetParent(__uuidof(<see cref="SharpDX.DXGI.Factory2"/>), (void **)&amp;pIDXGIFactory);	
    /// </pre><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIFactory2']/*"/>	
    /// <msdn-id>hh404556</msdn-id>	
    /// <unmanaged>IDXGIFactory2</unmanaged>	
    /// <unmanaged-short>IDXGIFactory2</unmanaged-short>	
    [Guid("50c83a1c-e072-4c48-87b0-3630fa36a6d0")]
    public partial class Factory2 : SharpDX.DXGI.Factory1 {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.Factory2"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Factory2(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.Factory2"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.Factory2(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.Factory2(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Determines whether to use stereo mode.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>We recommend that windowed applications call <strong>IsWindowedStereoEnabled</strong> before they attempt to use stereo.  <strong>IsWindowedStereoEnabled</strong> returns <strong>TRUE</strong> if both of the following items are true:</p><ul> <li>All adapters in the computer have drivers that are capable of stereo.  This only means that the driver is implemented to the Windows Display Driver Model (WDDM) for Windows?8 (WDDM 1.2).  However, the adapter does not necessarily have to be able to scan out stereo.</li> <li>The current desktop mode (desktop modes are mono) and system policy and hardware are configured so that the Desktop Window Manager (DWM) performs stereo composition on at least one adapter output.</li> </ul><p>The creation of a windowed stereo swap chain succeeds if the first requirement is met. However, if the adapter can't scan out stereo, the output on that adapter is reduced to mono.</p><p>The Direct3D 11.1 Simple Stereo 3D Sample shows how to add a stereoscopic 3D effect and how to respond to system stereo changes.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIFactory2::IsWindowedStereoEnabled']/*"/>	
        /// <msdn-id>hh404561</msdn-id>	
        /// <unmanaged>IsWindowedStereoEnabled</unmanaged>	
        /// <unmanaged-short>IsWindowedStereoEnabled</unmanaged-short>	
        /// <unmanaged>BOOL IDXGIFactory2::IsWindowedStereoEnabled()</unmanaged>
        public SharpDX.Mathematics.Interop.RawBool IsWindowedStereoEnabled {
                get { return IsWindowedStereoEnabled_(); }
        }
        
        /// <summary>	
        /// <p>Determines whether to use stereo mode.</p>	
        /// </summary>	
        /// <returns><p>Indicates whether to use stereo mode. <strong>TRUE</strong> indicates that you can use stereo mode; otherwise, <strong><see cref="SharpDX.Result.False"/></strong>.</p><p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>IsWindowedStereoEnabled</strong> always returns <see cref="SharpDX.Result.False"/> because stereoscopic 3D display behavior isn?t available with the Platform Update for Windows?7. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p></returns>	
        /// <remarks>	
        /// <p>We recommend that windowed applications call <strong>IsWindowedStereoEnabled</strong> before they attempt to use stereo.  <strong>IsWindowedStereoEnabled</strong> returns <strong>TRUE</strong> if both of the following items are true:</p><ul> <li>All adapters in the computer have drivers that are capable of stereo.  This only means that the driver is implemented to the Windows Display Driver Model (WDDM) for Windows?8 (WDDM 1.2).  However, the adapter does not necessarily have to be able to scan out stereo.</li> <li>The current desktop mode (desktop modes are mono) and system policy and hardware are configured so that the Desktop Window Manager (DWM) performs stereo composition on at least one adapter output.</li> </ul><p>The creation of a windowed stereo swap chain succeeds if the first requirement is met. However, if the adapter can't scan out stereo, the output on that adapter is reduced to mono.</p><p>The Direct3D 11.1 Simple Stereo 3D Sample shows how to add a stereoscopic 3D effect and how to respond to system stereo changes.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIFactory2::IsWindowedStereoEnabled']/*"/>	
        /// <msdn-id>hh404561</msdn-id>	
        /// <unmanaged>BOOL IDXGIFactory2::IsWindowedStereoEnabled()</unmanaged>	
        /// <unmanaged-short>IDXGIFactory2::IsWindowedStereoEnabled</unmanaged-short>	
        internal SharpDX.Mathematics.Interop.RawBool IsWindowedStereoEnabled_() {
            unsafe {
                SharpDX.Mathematics.Interop.RawBool __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.CalliSharpDXMathematicsInteropRawBool(_nativePointer,((void**)(*(void**)_nativePointer))[14]);		
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Creates a swap chain that is associated with an <strong><see cref="System.IntPtr"/></strong> handle to the output window for the swap chain.</p>	
        /// </summary>	
        /// <param name="deviceRef">No documentation.</param>	
        /// <param name="hWnd">No documentation.</param>	
        /// <param name="descRef">No documentation.</param>	
        /// <param name="fullscreenDescRef">No documentation.</param>	
        /// <param name="restrictToOutputRef">No documentation.</param>	
        /// <param name="swapChainOut">No documentation.</param>	
        /// <returns><p><strong>CreateSwapChainForHwnd</strong> returns: </p><ul> <li><see cref="SharpDX.Result.Ok"/> if it successfully created a swap chain.</li> <li>E_OUTOFMEMORY if memory is unavailable to complete the operation.</li> <li> <see cref="SharpDX.DXGI.ResultCode.InvalidCall"/> if the calling application provided invalid data, for example, if <em>pDesc</em> or <em>ppSwapChain</em> is <strong><c>null</c></strong>.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic that are defined by the type of device that you pass to <em>pDevice</em>.</li> </ul><p><strong>Platform Update for Windows?7:??</strong><strong><see cref="SharpDX.DXGI.Scaling.None"/></strong> is not supported on Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed and causes <strong>CreateSwapChainForHwnd</strong> to return <see cref="SharpDX.DXGI.ResultCode.InvalidCall"/> when called. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p></returns>	
        /// <remarks>	
        /// <p><strong>Note</strong>??Do not use this method in Windows Store apps. Instead, use <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForCoreWindow"/></strong>.</p><p>If you specify the width, height, or both (<strong>Width</strong> and <strong>Height</strong> members of <strong><see cref="SharpDX.DXGI.SwapChainDescription1"/></strong> that <em>pDesc</em> points to) of the swap chain as zero, the runtime obtains the size from the output window that the <em>hWnd</em> parameter specifies. You can subsequently call the <strong><see cref="SharpDX.DXGI.SwapChain1.GetDescription1"/></strong> method to retrieve the assigned width or height value.</p><p>Because you can associate only one flip presentation model swap chain at a time with an <strong><see cref="System.IntPtr"/></strong>, the Microsoft Direct3D?11 policy of deferring the destruction of objects can cause problems if you attempt to destroy a flip presentation model swap chain and replace it with another swap chain. For more info about this situation, see <strong>Deferred Destruction Issues with Flip Presentation Swap Chains</strong>.</p><p>For info about how to choose a format for the swap chain's back buffer, see Converting data for the color space.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIFactory2::CreateSwapChainForHwnd']/*"/>	
        /// <msdn-id>hh404557</msdn-id>	
        /// <unmanaged>HRESULT IDXGIFactory2::CreateSwapChainForHwnd([In] IUnknown* pDevice,[In] HWND hWnd,[In] const DXGI_SWAP_CHAIN_DESC1* pDesc,[In, Optional] const DXGI_SWAP_CHAIN_FULLSCREEN_DESC* pFullscreenDesc,[In, Optional] IDXGIOutput* pRestrictToOutput,[Out, Fast] IDXGISwapChain1** ppSwapChain)</unmanaged>	
        /// <unmanaged-short>IDXGIFactory2::CreateSwapChainForHwnd</unmanaged-short>	
        internal void CreateSwapChainForHwnd(SharpDX.ComObject deviceRef, System.IntPtr hWnd, ref SharpDX.DXGI.SwapChainDescription1 descRef, SharpDX.DXGI.SwapChainFullScreenDescription? fullscreenDescRef, SharpDX.DXGI.Output restrictToOutputRef, SharpDX.DXGI.SwapChain1 swapChainOut) {
            unsafe {
                SharpDX.DXGI.SwapChainFullScreenDescription fullscreenDescRef_;
                if (fullscreenDescRef.HasValue)
                    fullscreenDescRef_ = fullscreenDescRef.Value;				
                IntPtr swapChainOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                fixed (void* descRef_ = &descRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, (void*)((deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer), (void*)hWnd, descRef_, (fullscreenDescRef.HasValue)?&fullscreenDescRef_:(void*)IntPtr.Zero, (void*)((restrictToOutputRef == null)?IntPtr.Zero:restrictToOutputRef.NativePointer), &swapChainOut_,((void**)(*(void**)_nativePointer))[15]);		
                ((SharpDX.DXGI.SwapChain1)swapChainOut).NativePointer = swapChainOut_;
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Creates a swap chain that is associated with the <strong>CoreWindow</strong> object for the output window for the swap chain.</p>	
        /// </summary>	
        /// <param name="deviceRef">No documentation.</param>	
        /// <param name="windowRef">No documentation.</param>	
        /// <param name="descRef">No documentation.</param>	
        /// <param name="restrictToOutputRef">No documentation.</param>	
        /// <param name="swapChainOut">No documentation.</param>	
        /// <returns><p><strong>CreateSwapChainForCoreWindow</strong> returns: </p><ul> <li><see cref="SharpDX.Result.Ok"/> if it successfully created a swap chain.</li> <li>E_OUTOFMEMORY if memory is unavailable to complete the operation.</li> <li> <see cref="SharpDX.DXGI.ResultCode.InvalidCall"/> if the calling application provided invalid data, for example, if <em>pDesc</em> or <em>ppSwapChain</em> is <strong><c>null</c></strong>.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic that are defined by the type of device that you pass to <em>pDevice</em>.</li> </ul><p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>CreateSwapChainForCoreWindow</strong> fails with E_NOTIMPL. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p></returns>	
        /// <remarks>	
        /// <p><strong>Note</strong>??Use this method in Windows Store apps rather than <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForHwnd"/></strong>.</p><p>If you specify the width, height, or both (<strong>Width</strong> and <strong>Height</strong> members of <strong><see cref="SharpDX.DXGI.SwapChainDescription1"/></strong> that <em>pDesc</em> points to) of the swap chain as zero, the runtime obtains the size from the output window that the <em>pWindow</em> parameter specifies. You can subsequently call the <strong><see cref="SharpDX.DXGI.SwapChain1.GetDescription1"/></strong> method to retrieve the assigned width or height value.</p><p>Because you can associate only one flip presentation model swap chain (per layer) at a time with a <strong>CoreWindow</strong>, the Microsoft Direct3D?11 policy of deferring the destruction of objects can cause problems if you attempt to destroy a flip presentation model swap chain and replace it with another swap chain. For more info about this situation, see <strong>Deferred Destruction Issues with Flip Presentation Swap Chains</strong>.</p><p>For info about how to choose a format for the swap chain's back buffer, see Converting data for the color space.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIFactory2::CreateSwapChainForCoreWindow']/*"/>	
        /// <msdn-id>hh404559</msdn-id>	
        /// <unmanaged>HRESULT IDXGIFactory2::CreateSwapChainForCoreWindow([In] IUnknown* pDevice,[In] IUnknown* pWindow,[In] const DXGI_SWAP_CHAIN_DESC1* pDesc,[In, Optional] IDXGIOutput* pRestrictToOutput,[Out, Fast] IDXGISwapChain1** ppSwapChain)</unmanaged>	
        /// <unmanaged-short>IDXGIFactory2::CreateSwapChainForCoreWindow</unmanaged-short>	
        internal void CreateSwapChainForCoreWindow(SharpDX.ComObject deviceRef, SharpDX.ComObject windowRef, ref SharpDX.DXGI.SwapChainDescription1 descRef, SharpDX.DXGI.Output restrictToOutputRef, SharpDX.DXGI.SwapChain1 swapChainOut) {
            unsafe {
                IntPtr swapChainOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                fixed (void* descRef_ = &descRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, (void*)((deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer), (void*)((windowRef == null)?IntPtr.Zero:windowRef.NativePointer), descRef_, (void*)((restrictToOutputRef == null)?IntPtr.Zero:restrictToOutputRef.NativePointer), &swapChainOut_,((void**)(*(void**)_nativePointer))[16]);		
                ((SharpDX.DXGI.SwapChain1)swapChainOut).NativePointer = swapChainOut_;
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Identifies the adapter on which a shared resource object was created.</p>	
        /// </summary>	
        /// <param name="hResource"><dd> <p>A handle to a shared resource object. The <strong><see cref="SharpDX.DXGI.Resource1.CreateSharedHandle"/></strong> method returns this handle.</p> </dd></param>	
        /// <param name="luidRef"><dd> <p>A reference to a variable that receives a locally unique identifier (<strong><see cref="long"/></strong>) value that identifies the adapter. <strong><see cref="long"/></strong> is defined in Dxgi.h. An <strong><see cref="long"/></strong> is a 64-bit value that is guaranteed to be unique only on the operating system on which it was generated. The uniqueness of an <strong><see cref="long"/></strong> is guaranteed only until the operating system is restarted.</p> </dd></param>	
        /// <returns><p><strong>GetSharedResourceAdapterLuid</strong> returns: </p><ul> <li><see cref="SharpDX.Result.Ok"/> if it  identified the adapter.</li> <li><see cref="SharpDX.DXGI.ResultCode.InvalidCall"/> if <em>hResource</em> is invalid.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul><p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>GetSharedResourceAdapterLuid</strong> fails with E_NOTIMPL. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p></returns>	
        /// <remarks>	
        /// <p>You cannot share resources across adapters. Therefore, you cannot open a shared resource on an adapter other than the adapter on which the resource was created.  Call <strong>GetSharedResourceAdapterLuid</strong> before you open a shared resource to ensure that the resource was created on the appropriate adapter. To open a shared resource, call the <strong><see cref="SharpDX.Direct3D11.Device1.OpenSharedResource1"/></strong> or <strong><see cref="SharpDX.Direct3D11.Device1.OpenSharedResourceByName"/></strong> method.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIFactory2::GetSharedResourceAdapterLuid']/*"/>	
        /// <msdn-id>hh404560</msdn-id>	
        /// <unmanaged>HRESULT IDXGIFactory2::GetSharedResourceAdapterLuid([In] void* hResource,[Out] LUID* pLuid)</unmanaged>	
        /// <unmanaged-short>IDXGIFactory2::GetSharedResourceAdapterLuid</unmanaged-short>	
        public void GetSharedResourceAdapterLuid(System.IntPtr hResource, out long luidRef) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* luidRef_ = &luidRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, (void*)hResource, luidRef_,((void**)(*(void**)_nativePointer))[17]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Registers an application window to receive notification messages of changes of stereo status.</p>	
        /// </summary>	
        /// <param name="windowHandle"><dd> <p>The handle of the window to send a notification message to when stereo status change occurs.</p> </dd></param>	
        /// <param name="wMsg"><dd> <p>Identifies the notification message to send. </p> </dd></param>	
        /// <param name="dwCookieRef"><dd> <p>A reference to a key value that an application can pass to the <strong><see cref="SharpDX.DXGI.Factory2.UnregisterStereoStatus"/></strong> method  to unregister the notification message that <em>wMsg</em> specifies.</p> </dd></param>	
        /// <returns><p><strong>RegisterStereoStatusWindow</strong> returns: </p><ul> <li><see cref="SharpDX.Result.Ok"/> if it successfully registered the window.</li> <li>E_OUTOFMEMORY if memory is unavailable to complete the operation.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul><p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>RegisterStereoStatusWindow</strong> fails with E_NOTIMPL. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIFactory2::RegisterStereoStatusWindow']/*"/>	
        /// <msdn-id>hh404587</msdn-id>	
        /// <unmanaged>HRESULT IDXGIFactory2::RegisterStereoStatusWindow([In] HWND WindowHandle,[In] unsigned int wMsg,[Out] unsigned int* pdwCookie)</unmanaged>	
        /// <unmanaged-short>IDXGIFactory2::RegisterStereoStatusWindow</unmanaged-short>	
        public void RegisterStereoStatusWindow(System.IntPtr windowHandle, int wMsg, out int dwCookieRef) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* dwCookieRef_ = &dwCookieRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, (void*)windowHandle, wMsg, dwCookieRef_,((void**)(*(void**)_nativePointer))[18]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Registers to receive notification of changes in stereo status by using event signaling.</p>	
        /// </summary>	
        /// <param name="hEvent"><dd> <p>A handle to the event object that the operating system sets when notification of stereo status change occurs. The <strong>CreateEvent</strong> or <strong>OpenEvent</strong> function returns this handle. </p> </dd></param>	
        /// <param name="dwCookieRef"><dd> <p>A reference to a key value that an application can pass to the <strong><see cref="SharpDX.DXGI.Factory2.UnregisterStereoStatus"/></strong> method  to unregister the notification event that <em>hEvent</em> specifies.</p> </dd></param>	
        /// <returns><p><strong>RegisterStereoStatusEvent</strong> returns: </p><ul> <li><see cref="SharpDX.Result.Ok"/> if it successfully registered the event.</li> <li>E_OUTOFMEMORY if memory is unavailable to complete the operation.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul><p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>RegisterStereoStatusEvent</strong> fails with E_NOTIMPL. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIFactory2::RegisterStereoStatusEvent']/*"/>	
        /// <msdn-id>hh404584</msdn-id>	
        /// <unmanaged>HRESULT IDXGIFactory2::RegisterStereoStatusEvent([In] void* hEvent,[Out] unsigned int* pdwCookie)</unmanaged>	
        /// <unmanaged-short>IDXGIFactory2::RegisterStereoStatusEvent</unmanaged-short>	
        public void RegisterStereoStatusEvent(System.IntPtr hEvent, out int dwCookieRef) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* dwCookieRef_ = &dwCookieRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, (void*)hEvent, dwCookieRef_,((void**)(*(void**)_nativePointer))[19]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Unregisters a window or an event to stop it from receiving notification when stereo status changes.</p>	
        /// </summary>	
        /// <param name="dwCookie"><dd> <p>A key value for the window or event to unregister. The  <strong><see cref="SharpDX.DXGI.Factory2.RegisterStereoStatusWindow"/></strong> or  <strong><see cref="SharpDX.DXGI.Factory2.RegisterStereoStatusEvent"/></strong> method returns this value. </p> </dd></param>	
        /// <remarks>	
        /// <p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>UnregisterStereoStatus</strong> has no effect. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIFactory2::UnregisterStereoStatus']/*"/>	
        /// <msdn-id>hh404593</msdn-id>	
        /// <unmanaged>void IDXGIFactory2::UnregisterStereoStatus([In] unsigned int dwCookie)</unmanaged>	
        /// <unmanaged-short>IDXGIFactory2::UnregisterStereoStatus</unmanaged-short>	
        public void UnregisterStereoStatus(int dwCookie) {
            unsafe {
                SharpDX.DXGI.LocalInterop.Callivoid(_nativePointer, dwCookie,((void**)(*(void**)_nativePointer))[20]);		
            }
        }
        
        /// <summary>	
        /// <p>Registers an application window to receive notification messages of changes of occlusion status.</p>	
        /// </summary>	
        /// <param name="windowHandle"><dd> <p>The handle of the window to send a notification message to when occlusion status change occurs.</p> </dd></param>	
        /// <param name="wMsg"><dd> <p>Identifies the notification message to send. </p> </dd></param>	
        /// <param name="dwCookieRef"><dd> <p>A reference to a key value that an application can pass to the <strong><see cref="SharpDX.DXGI.Factory2.UnregisterOcclusionStatus"/></strong> method  to unregister the notification message that <em>wMsg</em> specifies.</p> </dd></param>	
        /// <returns><p><strong>RegisterOcclusionStatusWindow</strong> returns: </p><ul> <li><see cref="SharpDX.Result.Ok"/> if it successfully registered the window.</li> <li>E_OUTOFMEMORY if memory is unavailable to complete the operation.</li> <li> <see cref="SharpDX.DXGI.ResultCode.InvalidCall"/> if <em>WindowHandle</em> is not a valid window handle or not the window handle that the current process owns.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul><p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>RegisterOcclusionStatusWindow</strong> fails with E_NOTIMPL. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p></returns>	
        /// <remarks>	
        /// <p>Apps choose the Windows message that Windows sends when occlusion status changes.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIFactory2::RegisterOcclusionStatusWindow']/*"/>	
        /// <msdn-id>hh404581</msdn-id>	
        /// <unmanaged>HRESULT IDXGIFactory2::RegisterOcclusionStatusWindow([In] HWND WindowHandle,[In] unsigned int wMsg,[Out] unsigned int* pdwCookie)</unmanaged>	
        /// <unmanaged-short>IDXGIFactory2::RegisterOcclusionStatusWindow</unmanaged-short>	
        public void RegisterOcclusionStatusWindow(System.IntPtr windowHandle, int wMsg, out int dwCookieRef) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* dwCookieRef_ = &dwCookieRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, (void*)windowHandle, wMsg, dwCookieRef_,((void**)(*(void**)_nativePointer))[21]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Registers to receive notification of  changes in occlusion status by using event signaling.</p>	
        /// </summary>	
        /// <param name="hEvent"><dd> <p>A handle to the event object that the operating system sets when notification of occlusion status change occurs. The <strong>CreateEvent</strong> or <strong>OpenEvent</strong> function returns this handle.</p> </dd></param>	
        /// <param name="dwCookieRef"><dd> <p>A reference to a key value that an application can pass to the <strong><see cref="SharpDX.DXGI.Factory2.UnregisterOcclusionStatus"/></strong> method  to unregister the notification event that <em>hEvent</em> specifies.</p> </dd></param>	
        /// <returns><p><strong>RegisterOcclusionStatusEvent</strong> returns: </p><ul> <li><see cref="SharpDX.Result.Ok"/> if the method successfully registered the event.</li> <li>E_OUTOFMEMORY if memory is unavailable to complete the operation.</li> <li> <see cref="SharpDX.DXGI.ResultCode.InvalidCall"/> if <em>hEvent</em> is not a valid handle or not an event handle. </li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul><p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>RegisterOcclusionStatusEvent</strong> fails with E_NOTIMPL. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p></returns>	
        /// <remarks>	
        /// <p>If you call <strong>RegisterOcclusionStatusEvent</strong> multiple times with the same event handle, <strong>RegisterOcclusionStatusEvent</strong> fails with <see cref="SharpDX.DXGI.ResultCode.InvalidCall"/>.</p><p>If you call <strong>RegisterOcclusionStatusEvent</strong> multiple times with the different event handles, <strong>RegisterOcclusionStatusEvent</strong> properly registers the events.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIFactory2::RegisterOcclusionStatusEvent']/*"/>	
        /// <msdn-id>hh404578</msdn-id>	
        /// <unmanaged>HRESULT IDXGIFactory2::RegisterOcclusionStatusEvent([In] void* hEvent,[Out] unsigned int* pdwCookie)</unmanaged>	
        /// <unmanaged-short>IDXGIFactory2::RegisterOcclusionStatusEvent</unmanaged-short>	
        public void RegisterOcclusionStatusEvent(System.IntPtr hEvent, out int dwCookieRef) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* dwCookieRef_ = &dwCookieRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, (void*)hEvent, dwCookieRef_,((void**)(*(void**)_nativePointer))[22]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Unregisters a window or an event to stop it from receiving notification when occlusion status changes.</p>	
        /// </summary>	
        /// <param name="dwCookie"><dd> <p>A key value for the window or event to unregister. The  <strong><see cref="SharpDX.DXGI.Factory2.RegisterOcclusionStatusWindow"/></strong> or  <strong><see cref="SharpDX.DXGI.Factory2.RegisterOcclusionStatusEvent"/></strong> method returns this value. </p> </dd></param>	
        /// <remarks>	
        /// <p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>UnregisterOcclusionStatus</strong> has no effect. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIFactory2::UnregisterOcclusionStatus']/*"/>	
        /// <msdn-id>hh404590</msdn-id>	
        /// <unmanaged>void IDXGIFactory2::UnregisterOcclusionStatus([In] unsigned int dwCookie)</unmanaged>	
        /// <unmanaged-short>IDXGIFactory2::UnregisterOcclusionStatus</unmanaged-short>	
        public void UnregisterOcclusionStatus(int dwCookie) {
            unsafe {
                SharpDX.DXGI.LocalInterop.Callivoid(_nativePointer, dwCookie,((void**)(*(void**)_nativePointer))[23]);		
            }
        }
        
        /// <summary>	
        /// <p>Creates a swap chain that you can use to send Direct3D content into the DirectComposition API or the <strong>Windows.UI.Xaml</strong> framework to compose in a window.</p>	
        /// </summary>	
        /// <param name="deviceRef">No documentation.</param>	
        /// <param name="descRef">No documentation.</param>	
        /// <param name="restrictToOutputRef">No documentation.</param>	
        /// <param name="swapChainOut">No documentation.</param>	
        /// <returns><p><strong>CreateSwapChainForComposition</strong> returns: </p><ul> <li><see cref="SharpDX.Result.Ok"/> if it successfully created a swap chain.</li> <li>E_OUTOFMEMORY if memory is unavailable to complete the operation.</li> <li> <see cref="SharpDX.DXGI.ResultCode.InvalidCall"/> if the calling application provided invalid data, for example, if <em>pDesc</em> or <em>ppSwapChain</em> is <strong><c>null</c></strong>.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic that are defined by the type of device that you pass to <em>pDevice</em>.</li> </ul><p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>CreateSwapChainForComposition</strong> fails with E_NOTIMPL. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p></returns>	
        /// <remarks>	
        /// <p>You can use composition swap chains with either DirectComposition?s <strong><see cref="SharpDX.DirectComposition.Visual"/></strong> interface or XAML?s <strong>SwapChainBackgroundPanel</strong> class. For DirectComposition, you can call the <strong><see cref="SharpDX.DirectComposition.Visual.SetContent"/></strong> method to set the swap chain as the content of a visual object, which then allows you to bind the swap chain to the visual tree. For XAML, the <strong>SwapChainBackgroundPanel</strong> class exposes a classic COM interface <strong><see cref="SharpDX.DXGI.ISwapChainBackgroundPanelNative"/></strong>. You can use the <strong><see cref="SharpDX.DXGI.ISwapChainBackgroundPanelNative.SetSwapChain"/></strong> method to bind to the XAML UI graph. For info about how to use composition swap chains with XAML?s <strong>SwapChainBackgroundPanel</strong> class, see DirectX and XAML interop.</p><p>The <strong><see cref="SharpDX.DXGI.SwapChain.SetFullscreenState"/></strong>, <strong><see cref="SharpDX.DXGI.SwapChain.ResizeTarget"/></strong>, <strong><see cref="SharpDX.DXGI.SwapChain.GetContainingOutput"/></strong>, <strong><see cref="SharpDX.DXGI.SwapChain1.GetHwnd"/></strong>, and <strong>IDXGISwapChain::GetCoreWindow</strong> methods aren't valid on this type of swap chain. If you call any of these methods on this type of swap chain, they fail.</p><p>For info about how to choose a format for the swap chain's back buffer, see Converting data for the color space.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIFactory2::CreateSwapChainForComposition']/*"/>	
        /// <msdn-id>hh404558</msdn-id>	
        /// <unmanaged>HRESULT IDXGIFactory2::CreateSwapChainForComposition([In] IUnknown* pDevice,[In] const DXGI_SWAP_CHAIN_DESC1* pDesc,[In, Optional] IDXGIOutput* pRestrictToOutput,[Out, Fast] IDXGISwapChain1** ppSwapChain)</unmanaged>	
        /// <unmanaged-short>IDXGIFactory2::CreateSwapChainForComposition</unmanaged-short>	
        internal void CreateSwapChainForComposition(SharpDX.ComObject deviceRef, ref SharpDX.DXGI.SwapChainDescription1 descRef, SharpDX.DXGI.Output restrictToOutputRef, SharpDX.DXGI.SwapChain1 swapChainOut) {
            unsafe {
                IntPtr swapChainOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                fixed (void* descRef_ = &descRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, (void*)((deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer), descRef_, (void*)((restrictToOutputRef == null)?IntPtr.Zero:restrictToOutputRef.NativePointer), &swapChainOut_,((void**)(*(void**)_nativePointer))[24]);		
                ((SharpDX.DXGI.SwapChain1)swapChainOut).NativePointer = swapChainOut_;
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>An <strong><see cref="SharpDX.DXGI.Factory"/></strong> interface implements methods for generating DXGI objects (which handle full screen transitions).</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Create a factory by calling <strong>CreateDXGIFactory</strong>.</p><p>Because you can create a Direct3D device without creating a swap chain, you might need to retrieve the factory that is used to create the device in order to create a swap chain.	
    /// You can request the <strong><see cref="SharpDX.DXGI.Device"/></strong> interface from the Direct3D device and then use the <strong><see cref="SharpDX.DXGI.DXGIObject.GetParent"/></strong> method to locate 	
    /// the factory.  The following code shows how.</p><pre><see cref="SharpDX.DXGI.Device"/> * pDXGIDevice;	
    /// hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(<see cref="SharpDX.DXGI.Device"/>), (void **)&amp;pDXGIDevice); <see cref="SharpDX.DXGI.Adapter"/> * pDXGIAdapter;	
    /// hr = pDXGIDevice-&gt;GetParent(__uuidof(<see cref="SharpDX.DXGI.Adapter"/>), (void **)&amp;pDXGIAdapter); <see cref="SharpDX.DXGI.Factory"/> * pIDXGIFactory;	
    /// pDXGIAdapter-&gt;GetParent(__uuidof(<see cref="SharpDX.DXGI.Factory"/>), (void **)&amp;pIDXGIFactory);	
    /// </pre><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIFactory3']/*"/>	
    /// <msdn-id>bb174535</msdn-id>	
    /// <unmanaged>IDXGIFactory3</unmanaged>	
    /// <unmanaged-short>IDXGIFactory3</unmanaged-short>	
    [Guid("25483823-cd46-4c7d-86ca-47aa95b837bd")]
    public partial class Factory3 : SharpDX.DXGI.Factory2 {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.Factory3"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Factory3(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.Factory3"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.Factory3(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.Factory3(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Gets the flags that were used when a Microsoft DirectX Graphics Infrastructure (DXGI) object was created.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>The <strong>GetCreationFlags</strong> method returns flags that were passed to the  <strong>CreateDXGIFactory2</strong> function, or were implicitly constructed by <strong>CreateDXGIFactory</strong>, <strong>CreateDXGIFactory1</strong>,  <strong><see cref="SharpDX.Direct3D11.D3D11.CreateDevice"/></strong>, or <strong>D3D11CreateDeviceAndSwapChain</strong>.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIFactory3::GetCreationFlags']/*"/>	
        /// <msdn-id>dn457943</msdn-id>	
        /// <unmanaged>GetCreationFlags</unmanaged>	
        /// <unmanaged-short>GetCreationFlags</unmanaged-short>	
        /// <unmanaged>unsigned int IDXGIFactory3::GetCreationFlags()</unmanaged>
        public int CreationFlags {
                get { return GetCreationFlags(); }
        }
        
        /// <summary>	
        /// <p>Gets the flags that were used when a Microsoft DirectX Graphics Infrastructure (DXGI) object was created.</p>	
        /// </summary>	
        /// <returns><p>The creation flags.</p></returns>	
        /// <remarks>	
        /// <p>The <strong>GetCreationFlags</strong> method returns flags that were passed to the  <strong>CreateDXGIFactory2</strong> function, or were implicitly constructed by <strong>CreateDXGIFactory</strong>, <strong>CreateDXGIFactory1</strong>,  <strong><see cref="SharpDX.Direct3D11.D3D11.CreateDevice"/></strong>, or <strong>D3D11CreateDeviceAndSwapChain</strong>.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIFactory3::GetCreationFlags']/*"/>	
        /// <msdn-id>dn457943</msdn-id>	
        /// <unmanaged>unsigned int IDXGIFactory3::GetCreationFlags()</unmanaged>	
        /// <unmanaged-short>IDXGIFactory3::GetCreationFlags</unmanaged-short>	
        internal int GetCreationFlags() {
            unsafe {
                int __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer,((void**)(*(void**)_nativePointer))[25]);		
                return __result__;
            }
        }
    }
    /// <summary>	
    /// <p> An <strong><see cref="SharpDX.DXGI.Factory"/></strong> interface implements methods for generating DXGI objects (which handle full screen transitions). </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> Create a factory by calling <strong>CreateDXGIFactory</strong>. </p><p> Because you can create a Direct3D device without creating a swap chain, you might need to retrieve the factory that is used to create the device in order to create a swap chain. You can request the <strong><see cref="SharpDX.DXGI.Device"/></strong> interface from the Direct3D device and then use the <strong><see cref="SharpDX.DXGI.DXGIObject.GetParent"/></strong> method to locate the factory.  The following code shows how. </p><pre><see cref="SharpDX.DXGI.Device"/> * pDXGIDevice = nullptr;	
    /// hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(<see cref="SharpDX.DXGI.Device"/>), (void **)&amp;pDXGIDevice); <see cref="SharpDX.DXGI.Adapter"/> * pDXGIAdapter = nullptr;	
    /// hr = pDXGIDevice-&gt;GetAdapter( &amp;pDXGIAdapter ); <see cref="SharpDX.DXGI.Factory"/> * pIDXGIFactory = nullptr;	
    /// pDXGIAdapter-&gt;GetParent(__uuidof(<see cref="SharpDX.DXGI.Factory"/>), (void **)&amp;pIDXGIFactory);</pre><p><strong>Windows?Phone?8: </strong> This API is supported. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIFactory4']/*"/>	
    /// <msdn-id>bb174535</msdn-id>	
    /// <unmanaged>IDXGIFactory4</unmanaged>	
    /// <unmanaged-short>IDXGIFactory4</unmanaged-short>	
    [Guid("1bc6ea02-ef36-464f-bf0c-21ca39e5168a")]
    public partial class Factory4 : SharpDX.DXGI.Factory3 {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.Factory4"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Factory4(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.Factory4"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.Factory4(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.Factory4(nativePointer);
		}
        
        
        /// <summary>	
        /// <p> Outputs the <strong><see cref="SharpDX.DXGI.Adapter"/></strong> for the specified <see cref="long"/>. </p>	
        /// </summary>	
        /// <param name="adapterLuid">No documentation.</param>	
        /// <param name="riid">No documentation.</param>	
        /// <param name="vAdapterOut">No documentation.</param>	
        /// <returns><p> Returns <see cref="SharpDX.Result.Ok"/> if successful; an error code otherwise. For a list of error codes, see DXGI_ERROR. See also Direct3D 12 Return Codes. </p></returns>	
        /// <remarks>	
        /// <p> For Direct3D 12, it's no longer possible to backtrack from a device to the <strong><see cref="SharpDX.DXGI.Adapter"/></strong> that was used to create it. <strong><see cref="SharpDX.DXGI.Factory4.EnumAdapterByLuid"/></strong> enables an app to retrieve information about the adapter where a D3D12 device was created. <strong><see cref="SharpDX.DXGI.Factory4.EnumAdapterByLuid"/></strong> is designed to be paired with <strong><see cref="SharpDX.Direct3D12.Device.GetAdapterLuid"/></strong>. For more information, see DXGI 1.4 Improvements. </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIFactory4::EnumAdapterByLuid']/*"/>	
        /// <msdn-id>mt427786</msdn-id>	
        /// <unmanaged>HRESULT IDXGIFactory4::EnumAdapterByLuid([In] LUID AdapterLuid,[In] const GUID&amp; riid,[Out] void** ppvAdapter)</unmanaged>	
        /// <unmanaged-short>IDXGIFactory4::EnumAdapterByLuid</unmanaged-short>	
        public void EnumAdapterByLuid(long adapterLuid, System.Guid riid, out System.IntPtr vAdapterOut) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* vAdapterOut_ = &vAdapterOut)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, adapterLuid, &riid, vAdapterOut_,((void**)(*(void**)_nativePointer))[26]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p> Provides an adapter which can be provided to <see cref="SharpDX.Direct3D12.D3D12.CreateDevice"/> to use the WARP renderer. </p>	
        /// </summary>	
        /// <param name="riid"><dd>  <p> The globally unique identifier (<see cref="System.Guid"/>) of the <strong><see cref="SharpDX.DXGI.Factory4"/></strong> object referenced by the <em>ppvAdapter</em> parameter. </p> </dd></param>	
        /// <param name="vAdapterOut"><dd>  <p> The address of an <strong><see cref="SharpDX.DXGI.Adapter"/></strong> interface reference to the adapter. This parameter must not be <c>null</c>. </p> </dd></param>	
        /// <returns><p> Returns <see cref="SharpDX.Result.Ok"/> if successful; an error code otherwise. For a list of error codes, see DXGI_ERROR. See also Direct3D 12 Return Codes. </p></returns>	
        /// <remarks>	
        /// <p> For more information, see DXGI 1.4 Improvements. </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIFactory4::EnumWarpAdapter']/*"/>	
        /// <msdn-id>mt427787</msdn-id>	
        /// <unmanaged>HRESULT IDXGIFactory4::EnumWarpAdapter([In] const GUID&amp; riid,[Out] void** ppvAdapter)</unmanaged>	
        /// <unmanaged-short>IDXGIFactory4::EnumWarpAdapter</unmanaged-short>	
        private void EnumWarpAdapter(System.Guid riid, out System.IntPtr vAdapterOut) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* vAdapterOut_ = &vAdapterOut)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, &riid, vAdapterOut_,((void**)(*(void**)_nativePointer))[27]);		
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>Creates swap chains for desktop media apps that use  DirectComposition surfaces to decode and display video.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To create a Microsoft DirectX Graphics Infrastructure (DXGI) media factory interface, pass <strong><see cref="SharpDX.DXGI.FactoryMedia"/></strong> into either the <strong>CreateDXGIFactory</strong> or <strong>CreateDXGIFactory1</strong> function or call <strong>QueryInterface</strong> from a factory object returned by <strong>CreateDXGIFactory</strong>, <strong>CreateDXGIFactory1</strong>, or <strong>CreateDXGIFactory2</strong>.	
    /// </p><p>Because you can create a Direct3D device without creating a swap chain, you might need to retrieve the factory that is used to create the device in order to create a swap chain.	
    /// You can request the <strong><see cref="SharpDX.DXGI.Device"/></strong>, <strong><see cref="SharpDX.DXGI.Device1"/></strong>, <strong><see cref="SharpDX.DXGI.Device2"/></strong>,  or  <strong><see cref="SharpDX.DXGI.Device3"/></strong> interface from the Direct3D device and then use the <strong><see cref="SharpDX.DXGI.DXGIObject.GetParent"/></strong> method to locate 	
    /// the factory.  The following code shows how.</p><pre><see cref="SharpDX.DXGI.Device2"/> * pDXGIDevice;	
    /// hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(<see cref="SharpDX.DXGI.Device2"/>), (void **)&amp;pDXGIDevice); <see cref="SharpDX.DXGI.Adapter"/> * pDXGIAdapter;	
    /// hr = pDXGIDevice-&gt;GetParent(__uuidof(<see cref="SharpDX.DXGI.Adapter"/>), (void **)&amp;pDXGIAdapter); <see cref="SharpDX.DXGI.FactoryMedia"/> * pIDXGIFactory;	
    /// pDXGIAdapter-&gt;GetParent(__uuidof(<see cref="SharpDX.DXGI.FactoryMedia"/>), (void **)&amp;pIDXGIFactory);	
    /// </pre>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIFactoryMedia']/*"/>	
    /// <msdn-id>dn384128</msdn-id>	
    /// <unmanaged>IDXGIFactoryMedia</unmanaged>	
    /// <unmanaged-short>IDXGIFactoryMedia</unmanaged-short>	
    [Guid("41e7d1f2-a591-4f7b-a2e5-fa9c843e1c12")]
    public partial class FactoryMedia : SharpDX.ComObject {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.FactoryMedia"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public FactoryMedia(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.FactoryMedia"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.FactoryMedia(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.FactoryMedia(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Creates a YUV swap chain for an existing DirectComposition surface handle.</p>	
        /// </summary>	
        /// <param name="deviceRef">No documentation.</param>	
        /// <param name="hSurface">No documentation.</param>	
        /// <param name="descRef">No documentation.</param>	
        /// <param name="restrictToOutputRef">No documentation.</param>	
        /// <param name="swapChainOut">No documentation.</param>	
        /// <returns><p><strong>CreateSwapChainForCompositionSurfaceHandle</strong> returns: </p><ul> <li><see cref="SharpDX.Result.Ok"/> if it successfully created a swap chain.</li> <li>E_OUTOFMEMORY if memory is unavailable to complete the operation.</li> <li> <see cref="SharpDX.DXGI.ResultCode.InvalidCall"/> if the calling application provided invalid data, for example, if <em>pDesc</em>, <em>pYuvDecodeBuffers</em>, or <em>ppSwapChain</em> is <strong><c>null</c></strong>.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic that are defined by the type of device that you pass to <em>pDevice</em>.</li> </ul></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIFactoryMedia::CreateSwapChainForCompositionSurfaceHandle']/*"/>	
        /// <msdn-id>dn384130</msdn-id>	
        /// <unmanaged>HRESULT IDXGIFactoryMedia::CreateSwapChainForCompositionSurfaceHandle([In] IUnknown* pDevice,[In, Optional] void* hSurface,[In] const DXGI_SWAP_CHAIN_DESC1* pDesc,[In, Optional] IDXGIOutput* pRestrictToOutput,[Out] IDXGISwapChain1** ppSwapChain)</unmanaged>	
        /// <unmanaged-short>IDXGIFactoryMedia::CreateSwapChainForCompositionSurfaceHandle</unmanaged-short>	
        public void CreateSwapChainForCompositionSurfaceHandle(SharpDX.ComObject deviceRef, System.IntPtr hSurface, ref SharpDX.DXGI.SwapChainDescription1 descRef, SharpDX.DXGI.Output restrictToOutputRef, out SharpDX.DXGI.SwapChain1 swapChainOut) {
            unsafe {
                IntPtr swapChainOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                fixed (void* descRef_ = &descRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, (void*)((deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer), (void*)hSurface, descRef_, (void*)((restrictToOutputRef == null)?IntPtr.Zero:restrictToOutputRef.NativePointer), &swapChainOut_,((void**)(*(void**)_nativePointer))[3]);		
                swapChainOut= (swapChainOut_ == IntPtr.Zero)?null:new SharpDX.DXGI.SwapChain1(swapChainOut_);	
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Creates a YUV swap chain for an existing DirectComposition surface handle. The swap chain is created with pre-existing buffers and very few descriptive elements are required. Instead, this method requires a DirectComposition surface handle and an <strong><see cref="SharpDX.DXGI.Resource"/></strong> buffer to hold decoded frame data. The swap chain format is determined by the format of the subresources of the <strong><see cref="SharpDX.DXGI.Resource"/></strong>.</p>	
        /// </summary>	
        /// <param name="deviceRef">No documentation.</param>	
        /// <param name="hSurface">No documentation.</param>	
        /// <param name="descRef">No documentation.</param>	
        /// <param name="yuvDecodeBuffersRef">No documentation.</param>	
        /// <param name="restrictToOutputRef">No documentation.</param>	
        /// <param name="swapChainOut">No documentation.</param>	
        /// <returns><p><strong>CreateDecodeSwapChainForCompositionSurfaceHandle</strong> returns: </p><ul> <li><see cref="SharpDX.Result.Ok"/> if it successfully created a swap chain.</li> <li>E_OUTOFMEMORY if memory is unavailable to complete the operation.</li> <li> <see cref="SharpDX.DXGI.ResultCode.InvalidCall"/> if the calling application provided invalid data, for example, if <em>pDesc</em>, <em>pYuvDecodeBuffers</em>, or <em>ppSwapChain</em> is <strong><c>null</c></strong>.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic that are defined by the type of device that you pass to <em>pDevice</em>.</li> </ul></returns>	
        /// <remarks>	
        /// <p>The <strong><see cref="SharpDX.DXGI.Resource"/></strong> provided via the <em>pYuvDecodeBuffers</em> parameter must point to at least one subresource, and all subresources must be created with the <strong><see cref="SharpDX.Direct3D11.BindFlags.Decoder"/></strong> flag.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIFactoryMedia::CreateDecodeSwapChainForCompositionSurfaceHandle']/*"/>	
        /// <msdn-id>dn384129</msdn-id>	
        /// <unmanaged>HRESULT IDXGIFactoryMedia::CreateDecodeSwapChainForCompositionSurfaceHandle([In] IUnknown* pDevice,[In, Optional] void* hSurface,[In] DXGI_DECODE_SWAP_CHAIN_DESC* pDesc,[In] IDXGIResource* pYuvDecodeBuffers,[In, Optional] IDXGIOutput* pRestrictToOutput,[Out] IDXGIDecodeSwapChain** ppSwapChain)</unmanaged>	
        /// <unmanaged-short>IDXGIFactoryMedia::CreateDecodeSwapChainForCompositionSurfaceHandle</unmanaged-short>	
        public void CreateDecodeSwapChainForCompositionSurfaceHandle(SharpDX.ComObject deviceRef, System.IntPtr hSurface, SharpDX.DXGI.DecodeSwapChainDescription descRef, SharpDX.DXGI.Resource yuvDecodeBuffersRef, SharpDX.DXGI.Output restrictToOutputRef, out SharpDX.DXGI.DecodeSwapChain swapChainOut) {
            unsafe {
                IntPtr swapChainOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, (void*)((deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer), (void*)hSurface, &descRef, (void*)((yuvDecodeBuffersRef == null)?IntPtr.Zero:yuvDecodeBuffersRef.NativePointer), (void*)((restrictToOutputRef == null)?IntPtr.Zero:restrictToOutputRef.NativePointer), &swapChainOut_,((void**)(*(void**)_nativePointer))[4]);		
                swapChainOut= (swapChainOut_ == IntPtr.Zero)?null:new SharpDX.DXGI.DecodeSwapChain(swapChainOut_);	
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>Enables performing bulk operations across all <strong>SurfaceImageSource</strong> objects created in the same process.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ISurfaceImageSourceManagerNative']/*"/>	
    /// <msdn-id>dn448959</msdn-id>	
    /// <unmanaged>ISurfaceImageSourceManagerNative</unmanaged>	
    /// <unmanaged-short>ISurfaceImageSourceManagerNative</unmanaged-short>	
    [Guid("4C8798B7-1D88-4A0F-B59B-B93F600DE8C8")]
    public partial class ISurfaceImageSourceManagerNative : SharpDX.ComObject {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.ISurfaceImageSourceManagerNative"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ISurfaceImageSourceManagerNative(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.ISurfaceImageSourceManagerNative"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.ISurfaceImageSourceManagerNative(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.ISurfaceImageSourceManagerNative(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Associates a graphics device with a <strong>SurfaceImageSource</strong> or a <strong>VirtualSurfaceImageSource</strong>.</p>	
        /// </summary>	
        /// <param name="device">No documentation.</param>	
        /// <returns><p>If this method succeeds, it returns <strong><see cref="SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="SharpDX.Result"/></strong> error code.</p></returns>	
        /// <remarks>	
        /// <p>The <strong>FlushAllSurfacesWithDevice</strong> method flushes current GPU work for all <strong>SurfaceImageSource</strong> objects that were created with <em>device</em>.  This GPU work includes Direct2D rendering work and internal GPU work done by the framework associated with rendering.  This is useful if an application has created multiple <strong>SurfaceImageSource</strong> objects and needs to flush the GPU work for all of these surfaces from the background rendering thread.  By flushing this work from the background thread the work can be better parallelized, with work being done on the UI thread to improve performance.</p><p>You can call the <strong>FlushAllSurfacesWithDevice</strong> method from a non-UI thread.  </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ISurfaceImageSourceManagerNative::FlushAllSurfacesWithDevice']/*"/>	
        /// <msdn-id>dn448960</msdn-id>	
        /// <unmanaged>HRESULT ISurfaceImageSourceManagerNative::FlushAllSurfacesWithDevice([In] IUnknown* device)</unmanaged>	
        /// <unmanaged-short>ISurfaceImageSourceManagerNative::FlushAllSurfacesWithDevice</unmanaged-short>	
        public void FlushAllSurfacesWithDevice(SharpDX.ComObject device) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, (void*)((device == null)?IntPtr.Zero:device.NativePointer),((void**)(*(void**)_nativePointer))[3]);		
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>Provides the implementation of a shared fixed-size surface for Direct2D drawing.</p><p><strong>Note</strong>??If the surface is larger than the screen size, use <strong><see cref="SharpDX.DXGI.IVirtualSurfaceImageSourceNative"/></strong> instead.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This interface provides the native implementation of the <strong>SurfaceImageSource</strong> Windows runtime type. To obtain a reference to <strong><see cref="SharpDX.DXGI.ISurfaceImageSourceNative"/></strong>, you must cast a <strong>SurfaceImageSource</strong> instance to <strong>IInspectable</strong> or <strong><see cref="SharpDX.ComObject"/></strong>, and call <strong>QueryInterface</strong>.</p><pre> Microsoft::WRL::ComPtr&lt;<see cref="SharpDX.DXGI.ISurfaceImageSourceNative"/>&gt;	m_sisNative;	
    /// // ...	
    /// IInspectable* sisInspectable = (IInspectable*) reinterpret_cast&lt;IInspectable*&gt;(surfaceImageSource);	
    /// sisInspectable-&gt;QueryInterface(__uuidof(<see cref="SharpDX.DXGI.ISurfaceImageSourceNative"/>), (void **)&amp;m_sisNative) </pre>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ISurfaceImageSourceNative']/*"/>	
    /// <msdn-id>hh848322</msdn-id>	
    /// <unmanaged>ISurfaceImageSourceNative</unmanaged>	
    /// <unmanaged-short>ISurfaceImageSourceNative</unmanaged-short>	
    [Guid("f2e9edc1-d307-4525-9886-0fafaa44163c")]
    public partial class ISurfaceImageSourceNative : SharpDX.ComObject {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.ISurfaceImageSourceNative"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ISurfaceImageSourceNative(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.ISurfaceImageSourceNative"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.ISurfaceImageSourceNative(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.ISurfaceImageSourceNative(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Sets the DXGI device, created with <see cref="SharpDX.Direct3D11.DeviceCreationFlags.BgraSupport"/>, that will draw the surface.  This method must be called from the UI thread.</p>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ISurfaceImageSourceNative::SetDevice']/*"/>	
        /// <msdn-id>hh848325</msdn-id>	
        /// <unmanaged>SetDevice</unmanaged>	
        /// <unmanaged-short>SetDevice</unmanaged-short>	
        /// <unmanaged>HRESULT ISurfaceImageSourceNative::SetDevice([In] IDXGIDevice* device)</unmanaged>
        public SharpDX.DXGI.Device Device {
                set { SetDevice(value); }
        }
        
        /// <summary>	
        /// <p>Sets the DXGI device, created with <see cref="SharpDX.Direct3D11.DeviceCreationFlags.BgraSupport"/>, that will draw the surface.  This method must be called from the UI thread.</p>	
        /// </summary>	
        /// <param name="device"><dd> <p>Pointer to the DXGI device interface.</p> </dd></param>	
        /// <returns><p>If this method succeeds, it returns <strong><see cref="SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="SharpDX.Result"/></strong> error code.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ISurfaceImageSourceNative::SetDevice']/*"/>	
        /// <msdn-id>hh848325</msdn-id>	
        /// <unmanaged>HRESULT ISurfaceImageSourceNative::SetDevice([In] IDXGIDevice* device)</unmanaged>	
        /// <unmanaged-short>ISurfaceImageSourceNative::SetDevice</unmanaged-short>	
        internal void SetDevice(SharpDX.DXGI.Device device) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, (void*)((device == null)?IntPtr.Zero:device.NativePointer),((void**)(*(void**)_nativePointer))[3]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Opens the supplied DXGI surface for drawing.</p>	
        /// </summary>	
        /// <param name="updateRect"><dd> <p>The region of the surface that will be drawn into.</p> </dd></param>	
        /// <param name="offset"><dd> <p>Receives the point (x,y) offset of the surface that will be drawn into.</p> </dd></param>	
        /// <returns><dd> <p>Receives a reference to the surface for drawing. </p> </dd></returns>	
        /// <remarks>	
        /// <p>If the app window that contains the <strong>SurfaceImageSource</strong> isn't active, like when it's suspended, calling the <strong>BeginDraw</strong> method returns an error.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ISurfaceImageSourceNative::BeginDraw']/*"/>	
        /// <msdn-id>hh848323</msdn-id>	
        /// <unmanaged>HRESULT ISurfaceImageSourceNative::BeginDraw([In] RECT updateRect,[Out] IDXGISurface** surface,[Out] POINT* offset)</unmanaged>	
        /// <unmanaged-short>ISurfaceImageSourceNative::BeginDraw</unmanaged-short>	
        public SharpDX.DXGI.Surface BeginDraw(SharpDX.Mathematics.Interop.RawRectangle updateRect, out SharpDX.Mathematics.Interop.RawPoint offset) {
            unsafe {
                SharpDX.DXGI.Surface surface;
                IntPtr surface_ = IntPtr.Zero;
                offset = new SharpDX.Mathematics.Interop.RawPoint();
                SharpDX.Result __result__;
                fixed (void* offset_ = &offset)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint30(_nativePointer, updateRect, &surface_, offset_,((void**)(*(void**)_nativePointer))[4]);		
                surface= (surface_ == IntPtr.Zero)?null:new SharpDX.DXGI.Surface(surface_);	
                __result__.CheckError();
                return surface;
            }
        }
        
        /// <summary>	
        /// <p>Closes the surface draw operation.</p>	
        /// </summary>	
        /// <returns><p>If this method succeeds, it returns <strong><see cref="SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="SharpDX.Result"/></strong> error code.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ISurfaceImageSourceNative::EndDraw']/*"/>	
        /// <msdn-id>hh848324</msdn-id>	
        /// <unmanaged>HRESULT ISurfaceImageSourceNative::EndDraw()</unmanaged>	
        /// <unmanaged-short>ISurfaceImageSourceNative::EndDraw</unmanaged-short>	
        public void EndDraw() {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer,((void**)(*(void**)_nativePointer))[5]);		
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>Provides the implementation of a shared Microsoft DirectX surface which is displayed in a <strong>SurfaceImageSource</strong> or <strong>VirtualSurfaceImageSource</strong>.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <strong><see cref="SharpDX.DXGI.ISurfaceImageSourceNativeWithD2D"/></strong> interface provides the native implementation of the <strong>SurfaceImageSource</strong> class. To get a reference to the  <strong><see cref="SharpDX.DXGI.ISurfaceImageSourceNativeWithD2D"/></strong> interface, you must cast a <strong>SurfaceImageSource</strong> instance to <strong>IInspectable</strong> or <strong><see cref="SharpDX.ComObject"/></strong>, and call the <strong>QueryInterface</strong> method.</p><pre> Microsoft::WRL::ComPtr&lt;<see cref="SharpDX.DXGI.ISurfaceImageSourceNativeWithD2D"/>&gt;	m_sisD2DNative;	
    /// // ...	
    /// IInspectable* sisInspectable = (IInspectable*) reinterpret_cast&lt;IInspectable*&gt;(surfaceImageSource);	
    /// sisInspectable-&gt;QueryInterface(__uuidof(<see cref="SharpDX.DXGI.ISurfaceImageSourceNative"/>), (void **)&amp;m_sisD2DNative) </pre><p>The <strong><see cref="SharpDX.DXGI.ISurfaceImageSourceNativeWithD2D"/></strong> interface provides high-performance batched Direct2D drawing, which enables drawing to multiple different <strong>SurfaceImageSource</strong> or <strong>VirtualSurfaceImageSource</strong> objects in the same batch, as long as they share the same Direct2D device.  Batching can improve performance when updating multiple surfaces at the same time. </p><p>The <strong><see cref="SharpDX.DXGI.ISurfaceImageSourceNativeWithD2D"/></strong> interface enables drawing to a <strong>SurfaceImageSource</strong> or <strong>VirtualSurfaceImageSource</strong> from one or more background threads, which allows high-performance DirectX rendering off the UI thread.</p><p>Only call the <strong>SetDevice</strong>, <strong>BeginDraw</strong>, and <strong>EndDraw</strong> methods on <strong><see cref="SharpDX.DXGI.ISurfaceImageSourceNativeWithD2D"/></strong> interface, not on the <strong><see cref="SharpDX.DXGI.ISurfaceImageSourceNative"/></strong> or <strong><see cref="SharpDX.DXGI.IVirtualSurfaceImageSourceNative"/></strong> interfaces.   </p><p>In order to support batching updates to multiple surfaces to improve performance, you can pass an <strong><see cref="SharpDX.Direct2D1.Device"/></strong> to the <strong>SetDevice</strong> method, instead of an <strong><see cref="SharpDX.Direct3D11.Device"/></strong>.  The <strong>BeginDraw</strong> method can then optionally return a shared <strong><see cref="SharpDX.Direct2D1.DeviceContext"/></strong>, which the app uses to draw all content for that update.</p><p>To draw to the surface from a background thread, you must set any DirectX resources, including the Microsoft Direct3D device, Direct3D device context, Direct2D device, and Direct2D device context, to enable multithreading support.   </p><p>You can call the <strong>BeginDraw</strong>, <strong>SuspendDraw</strong>, and <strong>ResumeDraw</strong> methods from any background thread to enable high-performance multithreaded drawing.</p><p>Always call the <strong>EndDraw</strong> method on the UI thread in order to synchronize updating the DirectX content with the current XAML UI thread frame.  You can call <strong>BeginDraw</strong> on a background thread, call <strong>SuspendDraw</strong> when you're done drawing on the background thread, and call <strong>EndDraw</strong> on the UI thread.</p><p>Use <strong>SuspendDraw</strong> and <strong>ResumeDraw</strong> to suspend and resume drawing on any background or UI thread. </p><p>Handle the <strong>SurfaceContentsLost</strong> event to determine when you need to recreate content which may be lost if the system resets the GPU.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ISurfaceImageSourceNativeWithD2D']/*"/>	
    /// <msdn-id>dn302137</msdn-id>	
    /// <unmanaged>ISurfaceImageSourceNativeWithD2D</unmanaged>	
    /// <unmanaged-short>ISurfaceImageSourceNativeWithD2D</unmanaged-short>	
    [Guid("54298223-41e1-4a41-9c08-02e8256864a1")]
    public partial class ISurfaceImageSourceNativeWithD2D : SharpDX.ComObject {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.ISurfaceImageSourceNativeWithD2D"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ISurfaceImageSourceNativeWithD2D(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.ISurfaceImageSourceNativeWithD2D"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.ISurfaceImageSourceNativeWithD2D(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.ISurfaceImageSourceNativeWithD2D(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Sets the Microsoft DirectX Graphics Infrastructure (DXGI) or Direct2D device, created with <strong><see cref="SharpDX.Direct3D11.DeviceCreationFlags.BgraSupport"/></strong>, that will draw the surface.</p>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ISurfaceImageSourceNativeWithD2D::SetDevice']/*"/>	
        /// <msdn-id>dn302141</msdn-id>	
        /// <unmanaged>SetDevice</unmanaged>	
        /// <unmanaged-short>SetDevice</unmanaged-short>	
        /// <unmanaged>HRESULT ISurfaceImageSourceNativeWithD2D::SetDevice([In] IUnknown* device)</unmanaged>
        public SharpDX.ComObject Device {
                set { SetDevice(value); }
        }
        
        /// <summary>	
        /// <p>Sets the Microsoft DirectX Graphics Infrastructure (DXGI) or Direct2D device, created with <strong><see cref="SharpDX.Direct3D11.DeviceCreationFlags.BgraSupport"/></strong>, that will draw the surface.</p>	
        /// </summary>	
        /// <param name="device"><dd> <p>Pointer to the DXGI device interface. You can pass an <strong><see cref="SharpDX.Direct2D1.Device"/></strong> to signal that this surface participates in Direct2D batching to improve performance when updating Direct2D content across multiple surfaces.  The device must have multithreading supported enabled if the app draws to the surface from a background thread. </p> </dd></param>	
        /// <returns><p>This method fails when the SurfaceImageSource is larger than the maximum texture size supported by the Direct3D device. Apps should use VirtualSurfaceImageSource for surfaces larger than the maximum texture size supported by the Direct3D device.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ISurfaceImageSourceNativeWithD2D::SetDevice']/*"/>	
        /// <msdn-id>dn302141</msdn-id>	
        /// <unmanaged>HRESULT ISurfaceImageSourceNativeWithD2D::SetDevice([In] IUnknown* device)</unmanaged>	
        /// <unmanaged-short>ISurfaceImageSourceNativeWithD2D::SetDevice</unmanaged-short>	
        internal void SetDevice(SharpDX.ComObject device) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, (void*)((device == null)?IntPtr.Zero:device.NativePointer),((void**)(*(void**)_nativePointer))[3]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Initiates an update to the associated <strong>SurfaceImageSource</strong> or <strong>VirtualSurfaceImageSource</strong>.</p>	
        /// </summary>	
        /// <param name="updateRect">No documentation.</param>	
        /// <param name="iid">No documentation.</param>	
        /// <param name="updateObject">No documentation.</param>	
        /// <param name="offset">No documentation.</param>	
        /// <returns><p>If this method succeeds, it returns <strong><see cref="SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="SharpDX.Result"/></strong> error code.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ISurfaceImageSourceNativeWithD2D::BeginDraw']/*"/>	
        /// <msdn-id>dn302138</msdn-id>	
        /// <unmanaged>HRESULT ISurfaceImageSourceNativeWithD2D::BeginDraw([In] const RECT&amp; updateRect,[In] const GUID&amp; iid,[Out] void** updateObject,[Out] POINT* offset)</unmanaged>	
        /// <unmanaged-short>ISurfaceImageSourceNativeWithD2D::BeginDraw</unmanaged-short>	
        public void BeginDraw(SharpDX.Mathematics.Interop.RawRectangle updateRect, System.Guid iid, out System.IntPtr updateObject, out SharpDX.Mathematics.Interop.RawPoint offset) {
            unsafe {
                offset = new SharpDX.Mathematics.Interop.RawPoint();
                SharpDX.Result __result__;
                fixed (void* updateObject_ = &updateObject)
                    fixed (void* offset_ = &offset)
                        __result__= 
        				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, &updateRect, &iid, updateObject_, offset_,((void**)(*(void**)_nativePointer))[4]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Closes the surface draw operation.</p>	
        /// </summary>	
        /// <returns><p>If this method succeeds, it returns <strong><see cref="SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="SharpDX.Result"/></strong> error code.</p></returns>	
        /// <remarks>	
        /// <p>Always call the <strong>EndDraw</strong> method on the UI thread in order to synchronize updating the Microsoft DirectX content with the current XAML UI thread frame.  </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ISurfaceImageSourceNativeWithD2D::EndDraw']/*"/>	
        /// <msdn-id>dn302139</msdn-id>	
        /// <unmanaged>HRESULT ISurfaceImageSourceNativeWithD2D::EndDraw()</unmanaged>	
        /// <unmanaged-short>ISurfaceImageSourceNativeWithD2D::EndDraw</unmanaged-short>	
        public void EndDraw() {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer,((void**)(*(void**)_nativePointer))[5]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Suspends the drawing operation.</p>	
        /// </summary>	
        /// <returns><p>If this method succeeds, it returns <strong><see cref="SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="SharpDX.Result"/></strong> error code.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ISurfaceImageSourceNativeWithD2D::SuspendDraw']/*"/>	
        /// <msdn-id>dn302142</msdn-id>	
        /// <unmanaged>HRESULT ISurfaceImageSourceNativeWithD2D::SuspendDraw()</unmanaged>	
        /// <unmanaged-short>ISurfaceImageSourceNativeWithD2D::SuspendDraw</unmanaged-short>	
        public void SuspendDraw() {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer,((void**)(*(void**)_nativePointer))[6]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Resume the drawing operation.</p>	
        /// </summary>	
        /// <returns><p>If this method succeeds, it returns <strong><see cref="SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="SharpDX.Result"/></strong> error code.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ISurfaceImageSourceNativeWithD2D::ResumeDraw']/*"/>	
        /// <msdn-id>dn302140</msdn-id>	
        /// <unmanaged>HRESULT ISurfaceImageSourceNativeWithD2D::ResumeDraw()</unmanaged>	
        /// <unmanaged-short>ISurfaceImageSourceNativeWithD2D::ResumeDraw</unmanaged-short>	
        public void ResumeDraw() {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer,((void**)(*(void**)_nativePointer))[7]);		
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>Provides interoperation between XAML and a DirectX swap chain.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This interface provides the native implementation of the <strong>Windows::UI::XAML::Control::SwapChainBackgroundPanel</strong> Windows Runtime type. To obtain a reference to <strong><see cref="SharpDX.DXGI.ISwapChainBackgroundPanelNative"/></strong>, you must cast a <strong>SwapChainBackgroundPanel</strong> instance to <strong>IInspectable</strong> or <strong><see cref="SharpDX.ComObject"/></strong>, and call <strong>QueryInterface</strong>.</p><pre> Microsoft::WRL::ComPtr&lt;<see cref="SharpDX.DXGI.ISwapChainBackgroundPanelNative"/>&gt;	m_swapChainNative;	
    /// // ...	
    /// IInspectable* panelInspectable = (IInspectable*) reinterpret_cast&lt;IInspectable*&gt;(swapChainPanel);	
    /// panelInspectable-&gt;QueryInterface(__uuidof(<see cref="SharpDX.DXGI.ISwapChainBackgroundPanelNative"/>), (void **)&amp;m_swapChainNative); </pre>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ISwapChainBackgroundPanelNative']/*"/>	
    /// <msdn-id>hh848326</msdn-id>	
    /// <unmanaged>ISwapChainBackgroundPanelNative</unmanaged>	
    /// <unmanaged-short>ISwapChainBackgroundPanelNative</unmanaged-short>	
    [Guid("43bebd4e-add5-4035-8f85-5608d08e9dc9")]
    public partial class ISwapChainBackgroundPanelNative : SharpDX.ComObject {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.ISwapChainBackgroundPanelNative"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ISwapChainBackgroundPanelNative(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.ISwapChainBackgroundPanelNative"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.ISwapChainBackgroundPanelNative(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.ISwapChainBackgroundPanelNative(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Sets the DirectX swap chain for <strong>SwapChainBackgroundPanel</strong>.</p>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ISwapChainBackgroundPanelNative::SetSwapChain']/*"/>	
        /// <msdn-id>hh848327</msdn-id>	
        /// <unmanaged>SetSwapChain</unmanaged>	
        /// <unmanaged-short>SetSwapChain</unmanaged-short>	
        /// <unmanaged>HRESULT ISwapChainBackgroundPanelNative::SetSwapChain([In] IDXGISwapChain* swapChain)</unmanaged>
        public SharpDX.DXGI.SwapChain SwapChain {
                set { SetSwapChain(value); }
        }
        
        /// <summary>	
        /// <p>Sets the DirectX swap chain for <strong>SwapChainBackgroundPanel</strong>.</p>	
        /// </summary>	
        /// <param name="swapChain">No documentation.</param>	
        /// <returns><p>If this method succeeds, it returns <strong><see cref="SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="SharpDX.Result"/></strong> error code.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ISwapChainBackgroundPanelNative::SetSwapChain']/*"/>	
        /// <msdn-id>hh848327</msdn-id>	
        /// <unmanaged>HRESULT ISwapChainBackgroundPanelNative::SetSwapChain([In] IDXGISwapChain* swapChain)</unmanaged>	
        /// <unmanaged-short>ISwapChainBackgroundPanelNative::SetSwapChain</unmanaged-short>	
        internal void SetSwapChain(SharpDX.DXGI.SwapChain swapChain) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, (void*)((swapChain == null)?IntPtr.Zero:swapChain.NativePointer),((void**)(*(void**)_nativePointer))[3]);		
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>Provides interoperation between XAML and a DirectX swap chain. Unlike <strong>SwapChainBackgroundPanel</strong>, a <strong>SwapChainPanel</strong> can appear at any level in the XAML display tree, and more than 1 can be present in any given tree.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This interface provides the native implementation of the <strong>Windows::UI::XAML::Control::SwapChainPanel</strong> Windows Runtime type. To obtain a reference to <strong><see cref="SharpDX.DXGI.ISwapChainPanelNative"/></strong>, you must cast a <strong>SwapChainPanel</strong> instance to <strong>IInspectable</strong> or <strong><see cref="SharpDX.ComObject"/></strong>, and call <strong>QueryInterface</strong>.</p><pre> Microsoft::WRL::ComPtr&lt;<see cref="SharpDX.DXGI.ISwapChainPanelNative"/>&gt;	m_swapChainNative;	
    /// // ...	
    /// IInspectable* panelInspectable = (IInspectable*) reinterpret_cast&lt;IInspectable*&gt;(swapChainPanel);	
    /// panelInspectable-&gt;QueryInterface(__uuidof(<see cref="SharpDX.DXGI.ISwapChainPanelNative"/>), (void **)&amp;m_swapChainNative); </pre>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ISwapChainPanelNative']/*"/>	
    /// <msdn-id>dn302143</msdn-id>	
    /// <unmanaged>ISwapChainPanelNative</unmanaged>	
    /// <unmanaged-short>ISwapChainPanelNative</unmanaged-short>	
    [Guid("F92F19D2-3ADE-45A6-A20C-F6F1EA90554B")]
    public partial class ISwapChainPanelNative : SharpDX.ComObject {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.ISwapChainPanelNative"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ISwapChainPanelNative(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.ISwapChainPanelNative"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.ISwapChainPanelNative(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.ISwapChainPanelNative(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Sets the DirectX swap chain for <strong>SwapChainPanel</strong>.</p>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ISwapChainPanelNative::SetSwapChain']/*"/>	
        /// <msdn-id>dn302144</msdn-id>	
        /// <unmanaged>SetSwapChain</unmanaged>	
        /// <unmanaged-short>SetSwapChain</unmanaged-short>	
        /// <unmanaged>HRESULT ISwapChainPanelNative::SetSwapChain([In] IDXGISwapChain* swapChain)</unmanaged>
        public SharpDX.DXGI.SwapChain SwapChain {
                set { SetSwapChain(value); }
        }
        
        /// <summary>	
        /// <p>Sets the DirectX swap chain for <strong>SwapChainPanel</strong>.</p>	
        /// </summary>	
        /// <param name="swapChain">No documentation.</param>	
        /// <returns><p>If this method succeeds, it returns <strong><see cref="SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="SharpDX.Result"/></strong> error code.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ISwapChainPanelNative::SetSwapChain']/*"/>	
        /// <msdn-id>dn302144</msdn-id>	
        /// <unmanaged>HRESULT ISwapChainPanelNative::SetSwapChain([In] IDXGISwapChain* swapChain)</unmanaged>	
        /// <unmanaged-short>ISwapChainPanelNative::SetSwapChain</unmanaged-short>	
        internal void SetSwapChain(SharpDX.DXGI.SwapChain swapChain) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, (void*)((swapChain == null)?IntPtr.Zero:swapChain.NativePointer),((void**)(*(void**)_nativePointer))[3]);		
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>Provides interoperation between XAML and a DirectX swap chain.  Unlike <strong>SwapChainBackgroundPanel</strong>,  a <strong>SwapChainPanel</strong> can appear at any level in the XAML display tree,  and more than 1 can be present in any given tree.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This interface provides the native implementation of the <strong>Windows::UI::XAML::Control::SwapChainPanel</strong> Windows Runtime type. To obtain a reference to <strong><see cref="SharpDX.DXGI.ISwapChainPanelNative"/></strong>,  you must cast a <strong>SwapChainPanel</strong> instance  to <strong>IInspectable</strong> or <strong><see cref="SharpDX.ComObject"/></strong>, and call <strong>QueryInterface</strong>.</p><pre> Microsoft::WRL::ComPtr&lt;<see cref="SharpDX.DXGI.ISwapChainPanelNative2"/>&gt;	m_swapChainNative2;	
    /// // ...	
    /// IInspectable* panelInspectable = (IInspectable*) reinterpret_cast&lt;IInspectable*&gt;(swapChainPanel);	
    /// panelInspectable-&gt;QueryInterface(__uuidof(<see cref="SharpDX.DXGI.ISwapChainPanelNative2"/>), (void **)&amp;m_swapChainNative2); </pre>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ISwapChainPanelNative2']/*"/>	
    /// <msdn-id>dn858172</msdn-id>	
    /// <unmanaged>ISwapChainPanelNative2</unmanaged>	
    /// <unmanaged-short>ISwapChainPanelNative2</unmanaged-short>	
    [Guid("D5A2F60C-37B2-44A2-937B-8D8EB9726821")]
    public partial class ISwapChainPanelNative2 : SharpDX.DXGI.ISwapChainPanelNative {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.ISwapChainPanelNative2"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ISwapChainPanelNative2(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.ISwapChainPanelNative2"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.ISwapChainPanelNative2(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.ISwapChainPanelNative2(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Sets the DirectX swap chain for <strong>SwapChainPanel</strong> using a handle to the swap chain.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>SetSwapChain(HANDLE swapChainHandle) allows a swap chain to be rendered by referencing a shared handle to the swap chain.   This enables scenarios where a swap chain is created in one process and needs to be passed to another process.</p><p>XAML supports setting a DXGI swap chain as the content of a SwapChainPanel element.  Apps accomplish this by querying for  the <strong><see cref="SharpDX.DXGI.ISwapChainPanelNative"/></strong> interface from a SwapChainPanel instance and calling <strong>SetSwapChain(<see cref="SharpDX.DXGI.SwapChain"/> *swapChain)</strong>.   </p><p>This process works for references to in process swap chains.  However, this doesn?t work for VoIP apps, which use a two-process model to enable continuing calls on a background process  when a foreground process is suspended or shut down.  This two-process implementation requires the ability to pass a shared handle to a swap chain, rather than a reference, created on the  background process to the foreground process to be rendered in a XAML SwapChainPanel in the foreground app.</p><pre> &lt;!-- XAML markup --&gt; 	
        /// &lt;Page&gt;  &lt;SwapChainPanel x:Name=?captureStreamDisplayPanel? /&gt; 	
        /// &lt;/Page&gt;  // Definitions 	
        /// ComPtr&lt;<see cref="SharpDX.DXGI.SwapChain1"/>&gt; m_swapChain; 	
        /// HANDLE m_swapChainHandle; 	
        /// ComPtr&lt;<see cref="SharpDX.Direct3D11.Device"/>&gt; m_d3dDevice; 	
        /// ComPtr&lt;<see cref="SharpDX.DXGI.Adapter"/>&gt; dxgiAdapter; 	
        /// ComPtr&lt;<see cref="SharpDX.DXGI.Factory2"/>&gt; dxgiFactory; 	
        /// ComPtr&lt;<see cref="SharpDX.DXGI.FactoryMedia"/>&gt; dxgiFactoryMedia; 	
        /// ComPtr&lt;<see cref="SharpDX.DXGI.Device"/>&gt; dxgiDevice; 	
        /// <see cref="SharpDX.DXGI.SwapChainDescription1"/> swapChainDesc = {0};  // Get DXGI factory (assume standard boilerplate has created D3D11Device) 	
        /// m_d3dDevice.As(&amp;dxgiDevice); 	
        /// dxgiDevice-&gt;GetAdapter(&amp;dxgiAdapter); 	
        /// dxgiAdapter-&gt;GetParent(__uuidof(<see cref="SharpDX.DXGI.Factory2"/>), &amp;dxgiFactory);  // Create swap chain and get handle 	
        /// <see cref="SharpDX.DirectComposition.DComp.CreateSurfaceHandle"/>(GENERIC_ALL, nullptr, &amp;m_swapChainHandle); 	
        /// dxgiFactory.As(&amp;dxgiFactoryMedia); 	
        /// dxgiFactoryMedia-&gt;CreateSwapChainForCompositionSurfaceHandle(  m_d3dDevice.Get(),  m_swapChainHandle,  &amp;swapChainDesc,  nullptr,  &amp;m_swapChain 	
        /// );  // Set swap chain to display in a SwapChainPanel 	
        /// ComPtr&lt;<see cref="SharpDX.DXGI.ISwapChainPanelNative2"/>&gt; panelNative; 	
        /// reinterpret_cast&lt;<see cref="SharpDX.ComObject"/>*&gt;(captureStreamDisplayPanel)-&gt;QueryInterface(IID_PPV_ARGS(&amp;panelNative))); 	
        /// panelNative-&gt;SetSwapChainHandle(m_swapChainHandle);  </pre>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ISwapChainPanelNative2::SetSwapChainHandle']/*"/>	
        /// <msdn-id>dn858173</msdn-id>	
        /// <unmanaged>SetSwapChainHandle</unmanaged>	
        /// <unmanaged-short>SetSwapChainHandle</unmanaged-short>	
        /// <unmanaged>HRESULT ISwapChainPanelNative2::SetSwapChainHandle([In] void* swapChainHandle)</unmanaged>
        public System.IntPtr SwapChainHandle {
                set { SetSwapChainHandle(value); }
        }
        
        /// <summary>	
        /// <p>Sets the DirectX swap chain for <strong>SwapChainPanel</strong> using a handle to the swap chain.</p>	
        /// </summary>	
        /// <param name="swapChainHandle">No documentation.</param>	
        /// <returns><p>If this method succeeds, it returns <strong><see cref="SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="SharpDX.Result"/></strong> error code.</p></returns>	
        /// <remarks>	
        /// <p>SetSwapChain(HANDLE swapChainHandle) allows a swap chain to be rendered by referencing a shared handle to the swap chain.   This enables scenarios where a swap chain is created in one process and needs to be passed to another process.</p><p>XAML supports setting a DXGI swap chain as the content of a SwapChainPanel element.  Apps accomplish this by querying for  the <strong><see cref="SharpDX.DXGI.ISwapChainPanelNative"/></strong> interface from a SwapChainPanel instance and calling <strong>SetSwapChain(<see cref="SharpDX.DXGI.SwapChain"/> *swapChain)</strong>.   </p><p>This process works for references to in process swap chains.  However, this doesn?t work for VoIP apps, which use a two-process model to enable continuing calls on a background process  when a foreground process is suspended or shut down.  This two-process implementation requires the ability to pass a shared handle to a swap chain, rather than a reference, created on the  background process to the foreground process to be rendered in a XAML SwapChainPanel in the foreground app.</p><pre> &lt;!-- XAML markup --&gt; 	
        /// &lt;Page&gt;  &lt;SwapChainPanel x:Name=?captureStreamDisplayPanel? /&gt; 	
        /// &lt;/Page&gt;  // Definitions 	
        /// ComPtr&lt;<see cref="SharpDX.DXGI.SwapChain1"/>&gt; m_swapChain; 	
        /// HANDLE m_swapChainHandle; 	
        /// ComPtr&lt;<see cref="SharpDX.Direct3D11.Device"/>&gt; m_d3dDevice; 	
        /// ComPtr&lt;<see cref="SharpDX.DXGI.Adapter"/>&gt; dxgiAdapter; 	
        /// ComPtr&lt;<see cref="SharpDX.DXGI.Factory2"/>&gt; dxgiFactory; 	
        /// ComPtr&lt;<see cref="SharpDX.DXGI.FactoryMedia"/>&gt; dxgiFactoryMedia; 	
        /// ComPtr&lt;<see cref="SharpDX.DXGI.Device"/>&gt; dxgiDevice; 	
        /// <see cref="SharpDX.DXGI.SwapChainDescription1"/> swapChainDesc = {0};  // Get DXGI factory (assume standard boilerplate has created D3D11Device) 	
        /// m_d3dDevice.As(&amp;dxgiDevice); 	
        /// dxgiDevice-&gt;GetAdapter(&amp;dxgiAdapter); 	
        /// dxgiAdapter-&gt;GetParent(__uuidof(<see cref="SharpDX.DXGI.Factory2"/>), &amp;dxgiFactory);  // Create swap chain and get handle 	
        /// <see cref="SharpDX.DirectComposition.DComp.CreateSurfaceHandle"/>(GENERIC_ALL, nullptr, &amp;m_swapChainHandle); 	
        /// dxgiFactory.As(&amp;dxgiFactoryMedia); 	
        /// dxgiFactoryMedia-&gt;CreateSwapChainForCompositionSurfaceHandle(  m_d3dDevice.Get(),  m_swapChainHandle,  &amp;swapChainDesc,  nullptr,  &amp;m_swapChain 	
        /// );  // Set swap chain to display in a SwapChainPanel 	
        /// ComPtr&lt;<see cref="SharpDX.DXGI.ISwapChainPanelNative2"/>&gt; panelNative; 	
        /// reinterpret_cast&lt;<see cref="SharpDX.ComObject"/>*&gt;(captureStreamDisplayPanel)-&gt;QueryInterface(IID_PPV_ARGS(&amp;panelNative))); 	
        /// panelNative-&gt;SetSwapChainHandle(m_swapChainHandle);  </pre>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ISwapChainPanelNative2::SetSwapChainHandle']/*"/>	
        /// <msdn-id>dn858173</msdn-id>	
        /// <unmanaged>HRESULT ISwapChainPanelNative2::SetSwapChainHandle([In] void* swapChainHandle)</unmanaged>	
        /// <unmanaged-short>ISwapChainPanelNative2::SetSwapChainHandle</unmanaged-short>	
        internal void SetSwapChainHandle(System.IntPtr swapChainHandle) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, (void*)swapChainHandle,((void**)(*(void**)_nativePointer))[4]);		
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>Provides the implementation of a large (greater than the screen size) shared surface for DirectX drawing.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This interface provides the native implementation of the <strong>Windows::UI::Xaml::Media::Imaging::VirtualSurfaceImageSource</strong> Windows runtime type. To obtain a reference to <strong><see cref="SharpDX.DXGI.IVirtualSurfaceImageSourceNative"/></strong>, you must cast a <strong>VirtualSurfaceImageSource</strong> instance to <strong>IInspectable</strong> or <strong><see cref="SharpDX.ComObject"/></strong>, and call <strong>QueryInterface</strong>.</p><pre> Microsoft::WRL::ComPtr&lt;<see cref="SharpDX.DXGI.IVirtualSurfaceImageSourceNative"/>&gt;	m_vsisNative;	
    /// // ...	
    /// IInspectable* vsisInspectable = (IInspectable*) reinterpret_cast&lt;IInspectable*&gt;(virtualSurfaceImageSource);	
    /// vsisInspectable-&gt;QueryInterface(__uuidof(<see cref="SharpDX.DXGI.IVirtualSurfaceImageSourceNative"/>), (void **)&amp;m_vsisNative) </pre>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IVirtualSurfaceImageSourceNative']/*"/>	
    /// <msdn-id>hh848328</msdn-id>	
    /// <unmanaged>IVirtualSurfaceImageSourceNative</unmanaged>	
    /// <unmanaged-short>IVirtualSurfaceImageSourceNative</unmanaged-short>	
    [Guid("e9550983-360b-4f53-b391-afd695078691")]
    public partial class IVirtualSurfaceImageSourceNative : SharpDX.DXGI.ISurfaceImageSourceNative {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.IVirtualSurfaceImageSourceNative"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public IVirtualSurfaceImageSourceNative(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.IVirtualSurfaceImageSourceNative"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.IVirtualSurfaceImageSourceNative(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.IVirtualSurfaceImageSourceNative(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Provides the implementation of a large (greater than the screen size) shared surface for DirectX drawing.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This interface provides the native implementation of the <strong>Windows::UI::Xaml::Media::Imaging::VirtualSurfaceImageSource</strong> Windows runtime type. To obtain a reference to <strong><see cref="SharpDX.DXGI.IVirtualSurfaceImageSourceNative"/></strong>, you must cast a <strong>VirtualSurfaceImageSource</strong> instance to <strong>IInspectable</strong> or <strong><see cref="SharpDX.ComObject"/></strong>, and call <strong>QueryInterface</strong>.</p><pre> Microsoft::WRL::ComPtr&lt;<see cref="SharpDX.DXGI.IVirtualSurfaceImageSourceNative"/>&gt;	m_vsisNative;	
        /// // ...	
        /// IInspectable* vsisInspectable = (IInspectable*) reinterpret_cast&lt;IInspectable*&gt;(virtualSurfaceImageSource);	
        /// vsisInspectable-&gt;QueryInterface(__uuidof(<see cref="SharpDX.DXGI.IVirtualSurfaceImageSourceNative"/>), (void **)&amp;m_vsisNative) </pre>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IVirtualSurfaceImageSourceNative::GetVisibleBounds']/*"/>	
        /// <msdn-id>hh848328</msdn-id>	
        /// <unmanaged>GetVisibleBounds</unmanaged>	
        /// <unmanaged-short>GetVisibleBounds</unmanaged-short>	
        /// <unmanaged>HRESULT IVirtualSurfaceImageSourceNative::GetVisibleBounds([Out] RECT* bounds)</unmanaged>
        public SharpDX.Mathematics.Interop.RawRectangle VisibleBounds {
                get { SharpDX.Mathematics.Interop.RawRectangle __output__; GetVisibleBounds(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// <p>Invalidates a specific region of the shared surface for drawing.</p>	
        /// </summary>	
        /// <param name="updateRect"><dd> <p>The region of the surface to invalidate.</p> </dd></param>	
        /// <returns><p>If this method succeeds, it returns <strong><see cref="SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="SharpDX.Result"/></strong> error code.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IVirtualSurfaceImageSourceNative::Invalidate']/*"/>	
        /// <msdn-id>hh848332</msdn-id>	
        /// <unmanaged>HRESULT IVirtualSurfaceImageSourceNative::Invalidate([In] RECT updateRect)</unmanaged>	
        /// <unmanaged-short>IVirtualSurfaceImageSourceNative::Invalidate</unmanaged-short>	
        public void Invalidate(SharpDX.Mathematics.Interop.RawRectangle updateRect) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint31(_nativePointer, updateRect,((void**)(*(void**)_nativePointer))[6]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Gets the total number of regions of the surface that must be updated.</p>	
        /// </summary>	
        /// <returns><dd> <p>Receives the number of regions to update.</p> </dd></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IVirtualSurfaceImageSourceNative::GetUpdateRectCount']/*"/>	
        /// <msdn-id>hh848329</msdn-id>	
        /// <unmanaged>HRESULT IVirtualSurfaceImageSourceNative::GetUpdateRectCount([Out] unsigned int* count)</unmanaged>	
        /// <unmanaged-short>IVirtualSurfaceImageSourceNative::GetUpdateRectCount</unmanaged-short>	
        internal int GetUpdateRectCount() {
            unsafe {
                int count;
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, &count,((void**)(*(void**)_nativePointer))[7]);		
                __result__.CheckError();
                return count;
            }
        }
        
        /// <summary>	
        /// <p>Gets the set of regions that must be updated on the shared surface.</p>	
        /// </summary>	
        /// <param name="updates"><dd> <p>The number of regions that must be updated. You obtain this by calling <strong>GetUpdateRectCount</strong>.</p> </dd></param>	
        /// <param name="count"><dd> <p>Receives a list of regions that must be updated.</p> </dd></param>	
        /// <returns><p>If this method succeeds, it returns <strong><see cref="SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="SharpDX.Result"/></strong> error code.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IVirtualSurfaceImageSourceNative::GetUpdateRects']/*"/>	
        /// <msdn-id>hh848330</msdn-id>	
        /// <unmanaged>HRESULT IVirtualSurfaceImageSourceNative::GetUpdateRects([Out, Buffer] RECT* updates,[In] unsigned int count)</unmanaged>	
        /// <unmanaged-short>IVirtualSurfaceImageSourceNative::GetUpdateRects</unmanaged-short>	
        internal void GetUpdateRects(SharpDX.Mathematics.Interop.RawRectangle[] updates, int count) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* updates_ = updates)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, updates_, count,((void**)(*(void**)_nativePointer))[8]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Provides the implementation of a large (greater than the screen size) shared surface for DirectX drawing.</p>	
        /// </summary>	
        /// <param name="bounds">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <remarks>	
        /// <p>This interface provides the native implementation of the <strong>Windows::UI::Xaml::Media::Imaging::VirtualSurfaceImageSource</strong> Windows runtime type. To obtain a reference to <strong><see cref="SharpDX.DXGI.IVirtualSurfaceImageSourceNative"/></strong>, you must cast a <strong>VirtualSurfaceImageSource</strong> instance to <strong>IInspectable</strong> or <strong><see cref="SharpDX.ComObject"/></strong>, and call <strong>QueryInterface</strong>.</p><pre> Microsoft::WRL::ComPtr&lt;<see cref="SharpDX.DXGI.IVirtualSurfaceImageSourceNative"/>&gt;	m_vsisNative;	
        /// // ...	
        /// IInspectable* vsisInspectable = (IInspectable*) reinterpret_cast&lt;IInspectable*&gt;(virtualSurfaceImageSource);	
        /// vsisInspectable-&gt;QueryInterface(__uuidof(<see cref="SharpDX.DXGI.IVirtualSurfaceImageSourceNative"/>), (void **)&amp;m_vsisNative) </pre>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IVirtualSurfaceImageSourceNative::GetVisibleBounds']/*"/>	
        /// <msdn-id>hh848328</msdn-id>	
        /// <unmanaged>HRESULT IVirtualSurfaceImageSourceNative::GetVisibleBounds([Out] RECT* bounds)</unmanaged>	
        /// <unmanaged-short>IVirtualSurfaceImageSourceNative::GetVisibleBounds</unmanaged-short>	
        internal void GetVisibleBounds(out SharpDX.Mathematics.Interop.RawRectangle bounds) {
            unsafe {
                bounds = new SharpDX.Mathematics.Interop.RawRectangle();
                SharpDX.Result __result__;
                fixed (void* bounds_ = &bounds)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, bounds_,((void**)(*(void**)_nativePointer))[9]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Registers for the callback that will perform the drawing when an update to the shared surface is requested.</p>	
        /// </summary>	
        /// <param name="callback"><dd> <p>Pointer to an implementation of <strong><see cref="SharpDX.DXGI.IVirtualSurfaceUpdatesCallbackNative"/></strong>.</p> </dd></param>	
        /// <returns><p>If this method succeeds, it returns <strong><see cref="SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="SharpDX.Result"/></strong> error code.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IVirtualSurfaceImageSourceNative::RegisterForUpdatesNeeded']/*"/>	
        /// <msdn-id>hh848334</msdn-id>	
        /// <unmanaged>HRESULT IVirtualSurfaceImageSourceNative::RegisterForUpdatesNeeded([In, Optional] IVirtualSurfaceUpdatesCallbackNative* callback)</unmanaged>	
        /// <unmanaged-short>IVirtualSurfaceImageSourceNative::RegisterForUpdatesNeeded</unmanaged-short>	
        internal void RegisterForUpdatesNeeded_(System.IntPtr callback) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, (void*)callback,((void**)(*(void**)_nativePointer))[10]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Provides the implementation of a large (greater than the screen size) shared surface for DirectX drawing.</p>	
        /// </summary>	
        /// <param name="newWidth">No documentation.</param>	
        /// <param name="newHeight">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <remarks>	
        /// <p>This interface provides the native implementation of the <strong>Windows::UI::Xaml::Media::Imaging::VirtualSurfaceImageSource</strong> Windows runtime type. To obtain a reference to <strong><see cref="SharpDX.DXGI.IVirtualSurfaceImageSourceNative"/></strong>, you must cast a <strong>VirtualSurfaceImageSource</strong> instance to <strong>IInspectable</strong> or <strong><see cref="SharpDX.ComObject"/></strong>, and call <strong>QueryInterface</strong>.</p><pre> Microsoft::WRL::ComPtr&lt;<see cref="SharpDX.DXGI.IVirtualSurfaceImageSourceNative"/>&gt;	m_vsisNative;	
        /// // ...	
        /// IInspectable* vsisInspectable = (IInspectable*) reinterpret_cast&lt;IInspectable*&gt;(virtualSurfaceImageSource);	
        /// vsisInspectable-&gt;QueryInterface(__uuidof(<see cref="SharpDX.DXGI.IVirtualSurfaceImageSourceNative"/>), (void **)&amp;m_vsisNative) </pre>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IVirtualSurfaceImageSourceNative::Resize']/*"/>	
        /// <msdn-id>hh848328</msdn-id>	
        /// <unmanaged>HRESULT IVirtualSurfaceImageSourceNative::Resize([In] int newWidth,[In] int newHeight)</unmanaged>	
        /// <unmanaged-short>IVirtualSurfaceImageSourceNative::Resize</unmanaged-short>	
        public void Resize(int newWidth, int newHeight) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, newWidth, newHeight,((void**)(*(void**)_nativePointer))[11]);		
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>Provides an interface for the implementation of drawing behaviors when a <strong>VirtualSurfaceImageSource</strong> requests an update. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This interface is implemented by the developer to provide specific drawing behaviors for updates to a <strong>VirtualSurfaceImageSource</strong>. Classes that implement  this interface are provided to the <strong><see cref="SharpDX.DXGI.IVirtualSurfaceImageSourceNative.RegisterForUpdatesNeeded_"/></strong>, which calls the <strong>UpdatesNeeded</strong> method implementation whenever an update is requested.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IVirtualSurfaceUpdatesCallbackNative']/*"/>	
    /// <msdn-id>hh848336</msdn-id>	
    /// <unmanaged>IVirtualSurfaceUpdatesCallbackNative</unmanaged>	
    /// <unmanaged-short>IVirtualSurfaceUpdatesCallbackNative</unmanaged-short>	
    [Guid("dbf2e947-8e6c-4254-9eee-7738f71386c9")]
    internal partial interface IVirtualSurfaceUpdatesCallbackNative : SharpDX.ICallbackable {
        
        
        /// <summary>	
        /// <p>Performs the drawing behaviors when an update to <strong>VirtualSurfaceImageSource</strong> is requested.</p>	
        /// </summary>	
        /// <returns><p>If this method succeeds, it returns <strong><see cref="SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="SharpDX.Result"/></strong> error code.</p></returns>	
        /// <remarks>	
        /// <p>This method is implemented by the developer.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IVirtualSurfaceUpdatesCallbackNative::UpdatesNeeded']/*"/>	
        /// <msdn-id>hh848337</msdn-id>	
        /// <unmanaged>HRESULT IVirtualSurfaceUpdatesCallbackNative::UpdatesNeeded()</unmanaged>	
        /// <unmanaged-short>IVirtualSurfaceUpdatesCallbackNative::UpdatesNeeded</unmanaged-short>	
        /* public void UpdatesNeeded() */
    }
    /// <summary>	
    /// <p>Provides an interface for the implementation of drawing behaviors when a <strong>VirtualSurfaceImageSource</strong> requests an update. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This interface is implemented by the developer to provide specific drawing behaviors for updates to a <strong>VirtualSurfaceImageSource</strong>. Classes that implement  this interface are provided to the <strong><see cref="SharpDX.DXGI.IVirtualSurfaceImageSourceNative.RegisterForUpdatesNeeded_"/></strong>, which calls the <strong>UpdatesNeeded</strong> method implementation whenever an update is requested.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IVirtualSurfaceUpdatesCallbackNative']/*"/>	
    /// <msdn-id>hh848336</msdn-id>	
    /// <unmanaged>IVirtualSurfaceUpdatesCallbackNative</unmanaged>	
    /// <unmanaged-short>IVirtualSurfaceUpdatesCallbackNative</unmanaged-short>	
    [Guid("dbf2e947-8e6c-4254-9eee-7738f71386c9")]
    internal partial class IVirtualSurfaceUpdatesCallbackNativeNative : SharpDX.ComObjectCallback, SharpDX.DXGI.IVirtualSurfaceUpdatesCallbackNative {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.IVirtualSurfaceUpdatesCallbackNativeNative"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public IVirtualSurfaceUpdatesCallbackNativeNative(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.IVirtualSurfaceUpdatesCallbackNativeNative"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.IVirtualSurfaceUpdatesCallbackNativeNative(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.IVirtualSurfaceUpdatesCallbackNativeNative(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Performs the drawing behaviors when an update to <strong>VirtualSurfaceImageSource</strong> is requested.</p>	
        /// </summary>	
        /// <returns><p>If this method succeeds, it returns <strong><see cref="SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="SharpDX.Result"/></strong> error code.</p></returns>	
        /// <remarks>	
        /// <p>This method is implemented by the developer.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IVirtualSurfaceUpdatesCallbackNative::UpdatesNeeded']/*"/>	
        /// <msdn-id>hh848337</msdn-id>	
        /// <unmanaged>HRESULT IVirtualSurfaceUpdatesCallbackNative::UpdatesNeeded()</unmanaged>	
        /// <unmanaged-short>IVirtualSurfaceUpdatesCallbackNative::UpdatesNeeded</unmanaged-short>	
        internal void UpdatesNeeded_() {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer,((void**)(*(void**)_nativePointer))[3]);		
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>Represents a keyed mutex, which allows exclusive access to a shared resource that is used by multiple devices.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <strong><see cref="SharpDX.DXGI.Factory1"/></strong> is required to create a resource capable of supporting the <strong><see cref="SharpDX.DXGI.KeyedMutex"/></strong> interface.</p><p>An <strong><see cref="SharpDX.DXGI.KeyedMutex"/></strong> should be retrieved for each device sharing a resource. In Direct3D 10.1, such a resource that is shared between two or more devices is created with the <strong>D3D10_RESOURCE_MISC_SHARED_KEYEDMUTEX</strong> flag. In Direct3D 11, such a resource that is shared between two or more devices is created with the <strong><see cref="SharpDX.Direct3D11.ResourceOptionFlags.SharedKeyedmutex"/></strong> flag.</p><p>For information about creating a keyed mutex, see the <strong><see cref="SharpDX.DXGI.KeyedMutex.Acquire"/></strong> method.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIKeyedMutex']/*"/>	
    /// <msdn-id>ff471338</msdn-id>	
    /// <unmanaged>IDXGIKeyedMutex</unmanaged>	
    /// <unmanaged-short>IDXGIKeyedMutex</unmanaged-short>	
    [Guid("9d8e1289-d7b3-465f-8126-250e349af85d")]
    public partial class KeyedMutex : SharpDX.DXGI.DeviceChild {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.KeyedMutex"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public KeyedMutex(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.KeyedMutex"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.KeyedMutex(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.KeyedMutex(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Using a key, acquires exclusive rendering access to a shared resource.</p>	
        /// </summary>	
        /// <param name="key"><dd>  <p>A value that indicates which device to give access to. This method will succeed when the device that currently owns the surface calls  the <strong><see cref="SharpDX.DXGI.KeyedMutex.Release"/></strong> method using the same value. This value can be any UINT64 value.</p> </dd></param>	
        /// <param name="dwMilliseconds"><dd>  <p>The time-out interval, in milliseconds. This method will return if the interval elapses, and the keyed mutex has not been released  using the specified <em>Key</em>.  If this value is set to zero, the <strong>AcquireSync</strong> method will test to see if the keyed mutex has been released and returns immediately.  If this value is set to INFINITE, the time-out interval will never elapse.</p> </dd></param>	
        /// <returns><p>Return <see cref="SharpDX.Result.Ok"/> if successful.</p><p>If the owning device attempted to create another keyed mutex on the same shared resource, <strong>AcquireSync</strong> returns E_FAIL.</p><p><strong>AcquireSync</strong> can also return the following <strong>DWORD</strong> constants. Therefore, you should explicitly check for these constants. If you only use the <strong>SUCCEEDED</strong> macro on the return value to determine if  <strong>AcquireSync</strong> succeeded, you will not catch these constants.</p><ul> <li>WAIT_ABANDONED - The shared surface and keyed mutex are no longer in a consistent state.  If <strong>AcquireSync</strong> returns this value, you should release and recreate both the keyed mutex and the shared surface.</li> <li>WAIT_TIMEOUT - The time-out interval elapsed before the specified key was released.</li> </ul></returns>	
        /// <remarks>	
        /// <p>The <strong>AcquireSync</strong> method creates a lock to a surface that is shared between multiple devices, allowing only one device to render to a surface at a time.   This method uses a key to determine which device currently has exclusive access to the surface.</p><p>When a surface is created using the <strong>D3D10_RESOURCE_MISC_SHARED_KEYEDMUTEX</strong> value of the <strong>D3D10_RESOURCE_MISC_FLAG</strong> enumeration,  you must call the <strong>AcquireSync</strong> method before rendering to the surface.  You must call the <strong>ReleaseSync</strong> method when you are done  rendering to a surface.</p><p>To acquire a reference to the keyed mutex object of a shared resource, call the <strong>QueryInterface</strong> method of the resource and pass in  the <strong>UUID</strong> of the <strong><see cref="SharpDX.DXGI.KeyedMutex"/></strong> interface.  For more information about acquiring this reference, see the following code example.</p><p>The <strong>AcquireSync</strong> method uses the key as follows, depending on the state of the surface:</p><ul> <li>On initial creation, the surface is unowned and any device can call the <strong>AcquireSync</strong> method to gain access.  For an unowned device, only a key of 0 will succeed. Calling the <strong>AcquireSync</strong> method for any other key will stall the  calling CPU thread.</li> <li>If the surface is owned by a device when you call the <strong>AcquireSync</strong> method, the CPU thread that called  the <strong>AcquireSync</strong> method will stall until the owning device calls the <strong>ReleaseSync</strong> method  using the same Key.</li> <li>If the surface is unowned when you call the <strong>AcquireSync</strong> method (for example, the last owning device has already called  the <strong>ReleaseSync</strong> method), the <strong>AcquireSync</strong> method will succeed if you specify the same key  that was specified when the <strong>ReleaseSync</strong> method was last called. Calling the <strong>AcquireSync</strong> method using  any other key will cause a stall.</li> <li>When the owning device calls the <strong>ReleaseSync</strong> method with a particular key, and more than one device is waiting after  calling the  <strong>AcquireSync</strong> method using the same key, any one of the waiting devices could be woken up first.  The order in which devices are woken up is undefined.</li> <li>A keyed mutex does not support recursive calls to the <strong>AcquireSync</strong> method.</li> </ul><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIKeyedMutex::AcquireSync']/*"/>	
        /// <msdn-id>ff471339</msdn-id>	
        /// <unmanaged>HRESULT IDXGIKeyedMutex::AcquireSync([In] unsigned longlong Key,[In] unsigned int dwMilliseconds)</unmanaged>	
        /// <unmanaged-short>IDXGIKeyedMutex::AcquireSync</unmanaged-short>	
        public SharpDX.Result Acquire(long key, int dwMilliseconds) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, key, dwMilliseconds,((void**)(*(void**)_nativePointer))[8]);		
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Using a key, releases exclusive rendering access to a shared resource.</p>	
        /// </summary>	
        /// <param name="key"><dd>  <p>A value that indicates which device to give access to. This method succeeds when the device that currently owns the surface calls the <strong>ReleaseSync</strong> method using the same value. This value can be any UINT64 value.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful.</p><p>If the device attempted to release a keyed mutex that is not valid or owned by the device, <strong>ReleaseSync</strong> returns E_FAIL.</p></returns>	
        /// <remarks>	
        /// <p>The <strong>ReleaseSync</strong> method releases a lock to a surface that is shared between multiple devices.  This method uses a key to determine which device currently has exclusive access to the surface.</p><p>When a surface is created using the <strong>D3D10_RESOURCE_MISC_SHARED_KEYEDMUTEX</strong> value of the <strong>D3D10_RESOURCE_MISC_FLAG</strong> enumeration,  you must call the <strong><see cref="SharpDX.DXGI.KeyedMutex.Acquire"/></strong> method before rendering to the surface.  You must call the <strong>ReleaseSync</strong> method when you are done  rendering to a surface.</p><p>After you call the <strong>ReleaseSync</strong> method, the shared resource is unset from the rendering pipeline. </p><p>To acquire a reference to the keyed mutex object of a shared resource, call the <strong>QueryInterface</strong> method of the resource and pass in  the <strong>UUID</strong> of the <strong><see cref="SharpDX.DXGI.KeyedMutex"/></strong> interface.  For more information about acquiring this reference, see the following code example.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIKeyedMutex::ReleaseSync']/*"/>	
        /// <msdn-id>ff471340</msdn-id>	
        /// <unmanaged>HRESULT IDXGIKeyedMutex::ReleaseSync([In] unsigned longlong Key)</unmanaged>	
        /// <unmanaged-short>IDXGIKeyedMutex::ReleaseSync</unmanaged-short>	
        public void Release(long key) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, key,((void**)(*(void**)_nativePointer))[9]);		
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>An <strong><see cref="SharpDX.DXGI.Output"/></strong> interface represents an adapter output (such as a monitor).</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To see the outputs available, use <strong><see cref="SharpDX.DXGI.Adapter.GetOutput"/></strong>. To see the specific output that the swap chain will update, use <strong><see cref="SharpDX.DXGI.SwapChain.GetContainingOutput"/></strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutput']/*"/>	
    /// <msdn-id>bb174546</msdn-id>	
    /// <unmanaged>IDXGIOutput</unmanaged>	
    /// <unmanaged-short>IDXGIOutput</unmanaged-short>	
    [Guid("ae02eedb-c735-4690-8d52-5a8dc20213aa")]
    public partial class Output : SharpDX.DXGI.DXGIObject {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.Output"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Output(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.Output"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.Output(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.Output(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Get a description of the output.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p> On a high DPI desktop, <strong>GetDesc</strong> returns the visualized screen size unless the app is marked high DPI aware. For info about writing DPI-aware Win32 apps, see High DPI.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutput::GetDesc']/*"/>	
        /// <msdn-id>bb174548</msdn-id>	
        /// <unmanaged>GetDesc</unmanaged>	
        /// <unmanaged-short>GetDesc</unmanaged-short>	
        /// <unmanaged>HRESULT IDXGIOutput::GetDesc([Out] DXGI_OUTPUT_DESC* pDesc)</unmanaged>
        public SharpDX.DXGI.OutputDescription Description {
                get { SharpDX.DXGI.OutputDescription __output__; GetDescription(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// <p>Gets a description of the gamma-control capabilities.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p> </p><p><strong>Note</strong>??Calling this method is only supported while in full-screen mode.</p><p>For info about using gamma correction, see Using gamma correction. </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutput::GetGammaControlCapabilities']/*"/>	
        /// <msdn-id>bb174553</msdn-id>	
        /// <unmanaged>GetGammaControlCapabilities</unmanaged>	
        /// <unmanaged-short>GetGammaControlCapabilities</unmanaged-short>	
        /// <unmanaged>HRESULT IDXGIOutput::GetGammaControlCapabilities([Out] DXGI_GAMMA_CONTROL_CAPABILITIES* pGammaCaps)</unmanaged>
        public SharpDX.DXGI.GammaControlCapabilities GammaControlCapabilities {
                get { SharpDX.DXGI.GammaControlCapabilities __output__; GetGammaControlCapabilities(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// <p>Gets or sets the gamma control settings.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p> </p><p><strong>Note</strong>??Calling this method is only supported while in full-screen mode.</p><p>For info about using gamma correction, see Using gamma correction. </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutput::GetGammaControl']/*"/>	
        /// <msdn-id>bb174552</msdn-id>	
        /// <unmanaged>GetGammaControl / SetGammaControl</unmanaged>	
        /// <unmanaged-short>GetGammaControl</unmanaged-short>	
        /// <unmanaged>HRESULT IDXGIOutput::GetGammaControl([Out] DXGI_GAMMA_CONTROL* pArray)</unmanaged>
        public SharpDX.DXGI.GammaControl GammaControl {
                get { SharpDX.DXGI.GammaControl __output__; GetGammaControl(out __output__); return __output__; }
                set { SetGammaControl(ref value); }
        }
        
        /// <summary>	
        /// <p>Gets statistics about recently rendered frames.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This API is similar to <strong><see cref="SharpDX.DXGI.SwapChain.GetFrameStatistics"/></strong>.</p><p> </p><p><strong>Note</strong>??Calling this method is only supported while in full-screen mode.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutput::GetFrameStatistics']/*"/>	
        /// <msdn-id>bb174551</msdn-id>	
        /// <unmanaged>GetFrameStatistics</unmanaged>	
        /// <unmanaged-short>GetFrameStatistics</unmanaged-short>	
        /// <unmanaged>HRESULT IDXGIOutput::GetFrameStatistics([Out] DXGI_FRAME_STATISTICS* pStats)</unmanaged>
        public SharpDX.DXGI.FrameStatistics FrameStatistics {
                get { SharpDX.DXGI.FrameStatistics __output__; GetFrameStatistics(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// <p>Get a description of the output.</p>	
        /// </summary>	
        /// <param name="descRef"><dd>  <p>A reference to the output description (see <strong><see cref="SharpDX.DXGI.OutputDescription"/></strong>).</p> </dd></param>	
        /// <returns><p>Returns a code that indicates success or failure. <see cref="SharpDX.Result.Ok"/> if successful, <see cref="SharpDX.DXGI.ResultCode.InvalidCall"/> if <em>pDesc</em> is passed in as <strong><c>null</c></strong>.</p></returns>	
        /// <remarks>	
        /// <p> On a high DPI desktop, <strong>GetDesc</strong> returns the visualized screen size unless the app is marked high DPI aware. For info about writing DPI-aware Win32 apps, see High DPI.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutput::GetDesc']/*"/>	
        /// <msdn-id>bb174548</msdn-id>	
        /// <unmanaged>HRESULT IDXGIOutput::GetDesc([Out] DXGI_OUTPUT_DESC* pDesc)</unmanaged>	
        /// <unmanaged-short>IDXGIOutput::GetDesc</unmanaged-short>	
        internal void GetDescription(out SharpDX.DXGI.OutputDescription descRef) {
            unsafe {
                var descRef_ = new SharpDX.DXGI.OutputDescription.__Native();
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, &descRef_,((void**)(*(void**)_nativePointer))[7]);		
                descRef = new SharpDX.DXGI.OutputDescription();
                descRef.__MarshalFrom(ref descRef_);
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>[Starting with Direct3D 11.1, we recommend not to use <strong>GetDisplayModeList</strong> anymore to retrieve the matching display mode. Instead, use <strong><see cref="SharpDX.DXGI.Output1.GetDisplayModeList1"/></strong>, which supports stereo display mode.]</p><p>Gets the display modes that match the requested format and other input options.</p>	
        /// </summary>	
        /// <param name="enumFormat">No documentation.</param>	
        /// <param name="flags">No documentation.</param>	
        /// <param name="numModesRef">No documentation.</param>	
        /// <param name="descRef">No documentation.</param>	
        /// <returns><p>Returns one of the following DXGI_ERROR. It is rare, but possible, that the display modes available can change immediately after calling  this method, in which case <see cref="SharpDX.DXGI.ResultCode.MoreData"/> is returned (if there is not enough room for all the display modes).   If <strong>GetDisplayModeList</strong> is called from a Remote Desktop Services session (formerly Terminal Services session), <see cref="SharpDX.DXGI.ResultCode.NotCurrentlyAvailable"/> is returned.</p></returns>	
        /// <remarks>	
        /// <p>In general, when switching from windowed to full-screen mode, a swap chain automatically chooses a display mode that meets (or exceeds) the resolution, color  depth and refresh rate of the swap chain. To exercise more control over the display mode, use this API to poll the set of display modes that are validated  against monitor capabilities, or all modes that match the desktop (if the desktop settings are not validated against the monitor).</p><p>As shown, this API is designed to be called twice. First to get the number of modes available, and second to return a description of the modes.</p><pre> UINT num = 0;	
        /// <see cref="SharpDX.DXGI.Format"/> format = <see cref="SharpDX.DXGI.Format.R32G32B32A32_Float"/>;	
        /// UINT flags         = <see cref="SharpDX.DXGI.DisplayModeEnumerationFlags.Interlaced"/>; pOutput-&gt;GetDisplayModeList( format, flags, &amp;num, 0); ... <see cref="SharpDX.DXGI.ModeDescription"/> * pDescs = new <see cref="SharpDX.DXGI.ModeDescription"/>[num];	
        /// pOutput-&gt;GetDisplayModeList( format, flags, &amp;num, pDescs); </pre><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutput::GetDisplayModeList']/*"/>	
        /// <msdn-id>bb174549</msdn-id>	
        /// <unmanaged>HRESULT IDXGIOutput::GetDisplayModeList([In] DXGI_FORMAT EnumFormat,[In] unsigned int Flags,[InOut] unsigned int* pNumModes,[Out, Buffer, Optional] DXGI_MODE_DESC* pDesc)</unmanaged>	
        /// <unmanaged-short>IDXGIOutput::GetDisplayModeList</unmanaged-short>	
        internal void GetDisplayModeList(SharpDX.DXGI.Format enumFormat, int flags, ref int numModesRef, SharpDX.DXGI.ModeDescription[] descRef) {
            unsafe {
                SharpDX.DXGI.ModeDescription[] descRef__ = descRef;
                SharpDX.Result __result__;
                fixed (void* numModesRef_ = &numModesRef)
                    fixed (void* descRef_ = descRef__)
                        __result__= 
        				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, unchecked((int)enumFormat), flags, numModesRef_, descRef_,((void**)(*(void**)_nativePointer))[8]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>[Starting with Direct3D 11.1, we recommend not to use <strong>FindClosestMatchingMode</strong> anymore to find the display mode that most closely matches the requested display mode. Instead, use <strong><see cref="SharpDX.DXGI.Output1.FindClosestMatchingMode1"/></strong>, which supports stereo display mode.]</p><p>Finds the display mode that most closely matches the requested display mode.</p>	
        /// </summary>	
        /// <param name="modeToMatchRef">No documentation.</param>	
        /// <param name="closestMatchRef">No documentation.</param>	
        /// <param name="concernedDeviceRef">No documentation.</param>	
        /// <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
        /// <remarks>	
        /// <p><strong>FindClosestMatchingMode</strong> behaves similarly to the <strong><see cref="SharpDX.DXGI.Output1.FindClosestMatchingMode1"/></strong> except <strong>FindClosestMatchingMode</strong> considers only the mono display modes. <strong><see cref="SharpDX.DXGI.Output1.FindClosestMatchingMode1"/></strong> considers only stereo modes if you set the <strong>Stereo</strong> member in the <strong><see cref="SharpDX.DXGI.ModeDescription1"/></strong> structure that <em>pModeToMatch</em> points to, and considers only mono modes if <strong>Stereo</strong> is not set.</p><p> <strong><see cref="SharpDX.DXGI.Output1.FindClosestMatchingMode1"/></strong> returns a matched display-mode set with only stereo modes or only mono modes.	
        /// <strong>FindClosestMatchingMode</strong> behaves as though you specified the input mode as mono.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutput::FindClosestMatchingMode']/*"/>	
        /// <msdn-id>bb174547</msdn-id>	
        /// <unmanaged>HRESULT IDXGIOutput::FindClosestMatchingMode([In] const DXGI_MODE_DESC* pModeToMatch,[Out] DXGI_MODE_DESC* pClosestMatch,[In, Optional] IUnknown* pConcernedDevice)</unmanaged>	
        /// <unmanaged-short>IDXGIOutput::FindClosestMatchingMode</unmanaged-short>	
        internal void FindClosestMatchingMode(ref SharpDX.DXGI.ModeDescription modeToMatchRef, out SharpDX.DXGI.ModeDescription closestMatchRef, SharpDX.ComObject concernedDeviceRef) {
            unsafe {
                closestMatchRef = new SharpDX.DXGI.ModeDescription();
                SharpDX.Result __result__;
                fixed (void* modeToMatchRef_ = &modeToMatchRef)
                    fixed (void* closestMatchRef_ = &closestMatchRef)
                        __result__= 
        				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, modeToMatchRef_, closestMatchRef_, (void*)((concernedDeviceRef == null)?IntPtr.Zero:concernedDeviceRef.NativePointer),((void**)(*(void**)_nativePointer))[9]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Halt a thread until the next vertical blank occurs.</p>	
        /// </summary>	
        /// <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
        /// <remarks>	
        /// <p>A vertical blank occurs when the raster moves from the lower right corner to the upper left corner to begin drawing the next frame.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutput::WaitForVBlank']/*"/>	
        /// <msdn-id>bb174559</msdn-id>	
        /// <unmanaged>HRESULT IDXGIOutput::WaitForVBlank()</unmanaged>	
        /// <unmanaged-short>IDXGIOutput::WaitForVBlank</unmanaged-short>	
        public void WaitForVerticalBlank() {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer,((void**)(*(void**)_nativePointer))[10]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Takes ownership of an output.</p>	
        /// </summary>	
        /// <param name="deviceRef"><dd>  <p>A reference to the <strong><see cref="SharpDX.ComObject"/></strong> interface of a device (such as an <strong>ID3D10Device</strong>).</p> </dd></param>	
        /// <param name="exclusive"><dd>  <p>Set to <strong>TRUE</strong> to enable other threads or applications to take ownership of the device; otherwise, set to <strong><see cref="SharpDX.Result.False"/></strong>.</p> </dd></param>	
        /// <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
        /// <remarks>	
        /// <p>When you are finished with the output, call <strong><see cref="SharpDX.DXGI.Output.ReleaseOwnership"/></strong>.</p><p><strong>TakeOwnership</strong> should not be called directly by applications, since results will be unpredictable. It is called implicitly by the DXGI swap chain object during full-screen transitions, and should not be used as a substitute for swap-chain methods.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutput::TakeOwnership']/*"/>	
        /// <msdn-id>bb174558</msdn-id>	
        /// <unmanaged>HRESULT IDXGIOutput::TakeOwnership([In] IUnknown* pDevice,[In] BOOL Exclusive)</unmanaged>	
        /// <unmanaged-short>IDXGIOutput::TakeOwnership</unmanaged-short>	
        public void TakeOwnership(SharpDX.ComObject deviceRef, SharpDX.Mathematics.Interop.RawBool exclusive) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint12(_nativePointer, (void*)((deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer), exclusive,((void**)(*(void**)_nativePointer))[11]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Releases ownership of the output.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>If you are not using a swap chain, get access to an output by calling <strong><see cref="SharpDX.DXGI.Output.TakeOwnership"/></strong> and release it when you are finished by calling <strong><see cref="SharpDX.DXGI.Output.ReleaseOwnership"/></strong>. An application that uses a swap chain will typically not call either of these methods.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutput::ReleaseOwnership']/*"/>	
        /// <msdn-id>bb174554</msdn-id>	
        /// <unmanaged>void IDXGIOutput::ReleaseOwnership()</unmanaged>	
        /// <unmanaged-short>IDXGIOutput::ReleaseOwnership</unmanaged-short>	
        public void ReleaseOwnership() {
            unsafe {
                SharpDX.DXGI.LocalInterop.Callivoid(_nativePointer,((void**)(*(void**)_nativePointer))[12]);		
            }
        }
        
        /// <summary>	
        /// <p>Gets a description of the gamma-control capabilities.</p>	
        /// </summary>	
        /// <param name="gammaCapsRef"><dd>  <p>A reference to a  description of the gamma-control capabilities (see <strong><see cref="SharpDX.DXGI.GammaControlCapabilities"/></strong>).</p> </dd></param>	
        /// <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
        /// <remarks>	
        /// <p> </p><p><strong>Note</strong>??Calling this method is only supported while in full-screen mode.</p><p>For info about using gamma correction, see Using gamma correction. </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutput::GetGammaControlCapabilities']/*"/>	
        /// <msdn-id>bb174553</msdn-id>	
        /// <unmanaged>HRESULT IDXGIOutput::GetGammaControlCapabilities([Out] DXGI_GAMMA_CONTROL_CAPABILITIES* pGammaCaps)</unmanaged>	
        /// <unmanaged-short>IDXGIOutput::GetGammaControlCapabilities</unmanaged-short>	
        internal void GetGammaControlCapabilities(out SharpDX.DXGI.GammaControlCapabilities gammaCapsRef) {
            unsafe {
                var gammaCapsRef_ = new SharpDX.DXGI.GammaControlCapabilities.__Native();
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, &gammaCapsRef_,((void**)(*(void**)_nativePointer))[13]);		
                gammaCapsRef = new SharpDX.DXGI.GammaControlCapabilities();
                gammaCapsRef.__MarshalFrom(ref gammaCapsRef_);
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Sets the gamma controls.</p>	
        /// </summary>	
        /// <param name="arrayRef"><dd>  <p>A reference to a <strong><see cref="SharpDX.DXGI.GammaControl"/></strong> structure that describes the gamma curve to set.</p> </dd></param>	
        /// <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
        /// <remarks>	
        /// <p> </p><p><strong>Note</strong>??Calling this method is only supported while in full-screen mode.</p><p>For info about using gamma correction, see Using gamma correction. </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutput::SetGammaControl']/*"/>	
        /// <msdn-id>bb174557</msdn-id>	
        /// <unmanaged>HRESULT IDXGIOutput::SetGammaControl([In] const DXGI_GAMMA_CONTROL* pArray)</unmanaged>	
        /// <unmanaged-short>IDXGIOutput::SetGammaControl</unmanaged-short>	
        internal void SetGammaControl(ref SharpDX.DXGI.GammaControl arrayRef) {
            unsafe {
                var arrayRef_ = new SharpDX.DXGI.GammaControl.__Native();
                arrayRef.__MarshalTo(ref arrayRef_);
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, &arrayRef_,((void**)(*(void**)_nativePointer))[14]);		
                arrayRef.__MarshalFree(ref arrayRef_);
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Gets the gamma control settings.</p>	
        /// </summary>	
        /// <param name="arrayRef"><dd>  <p>An array of gamma control settings (see <strong><see cref="SharpDX.DXGI.GammaControl"/></strong>).</p> </dd></param>	
        /// <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
        /// <remarks>	
        /// <p> </p><p><strong>Note</strong>??Calling this method is only supported while in full-screen mode.</p><p>For info about using gamma correction, see Using gamma correction. </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutput::GetGammaControl']/*"/>	
        /// <msdn-id>bb174552</msdn-id>	
        /// <unmanaged>HRESULT IDXGIOutput::GetGammaControl([Out] DXGI_GAMMA_CONTROL* pArray)</unmanaged>	
        /// <unmanaged-short>IDXGIOutput::GetGammaControl</unmanaged-short>	
        internal void GetGammaControl(out SharpDX.DXGI.GammaControl arrayRef) {
            unsafe {
                var arrayRef_ = new SharpDX.DXGI.GammaControl.__Native();
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, &arrayRef_,((void**)(*(void**)_nativePointer))[15]);		
                arrayRef = new SharpDX.DXGI.GammaControl();
                arrayRef.__MarshalFrom(ref arrayRef_);
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Changes the display mode.</p>	
        /// </summary>	
        /// <param name="scanoutSurfaceRef"><dd>  <p>A reference to a surface (see <strong><see cref="SharpDX.DXGI.Surface"/></strong>) used for rendering an image to the screen. The surface must have been created as a back buffer (DXGI_USAGE_BACKBUFFER).</p> </dd></param>	
        /// <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
        /// <remarks>	
        /// <p><strong><see cref="SharpDX.DXGI.Output.SetDisplaySurface"/></strong> should not be called directly by applications, since results will be unpredictable. It is called implicitly by the DXGI swap chain object during full-screen transitions, and should not be used as a substitute for swap-chain methods.</p><p>This method should only be called between <strong><see cref="SharpDX.DXGI.Output.TakeOwnership"/></strong> and <strong><see cref="SharpDX.DXGI.Output.ReleaseOwnership"/></strong> calls.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutput::SetDisplaySurface']/*"/>	
        /// <msdn-id>bb174556</msdn-id>	
        /// <unmanaged>HRESULT IDXGIOutput::SetDisplaySurface([In] IDXGISurface* pScanoutSurface)</unmanaged>	
        /// <unmanaged-short>IDXGIOutput::SetDisplaySurface</unmanaged-short>	
        public void SetDisplaySurface(SharpDX.DXGI.Surface scanoutSurfaceRef) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, (void*)((scanoutSurfaceRef == null)?IntPtr.Zero:scanoutSurfaceRef.NativePointer),((void**)(*(void**)_nativePointer))[16]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>[Starting with Direct3D 11.1, we recommend not to use <strong>GetDisplaySurfaceData</strong> anymore to retrieve the current display surface. Instead, use <strong><see cref="SharpDX.DXGI.Output1.GetDisplaySurfaceData1"/></strong>, which supports stereo display mode.]</p><p>Gets a copy of the current display surface.</p>	
        /// </summary>	
        /// <param name="destinationRef">No documentation.</param>	
        /// <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
        /// <remarks>	
        /// <p><strong><see cref="SharpDX.DXGI.Output.CopyDisplaySurfaceTo"/></strong> can only be called when an output is in full-screen mode. If the method succeeds, DXGI fills the destination surface.</p><p>Use <strong><see cref="SharpDX.DXGI.Output.GetDescription"/></strong> to determine the size (width and height) of the output when you want to allocate space for the destination surface. This is true regardless of target monitor rotation. A destination surface created by a graphics component (such as Direct3D 10) must be created with CPU-write permission (see D3D10_CPU_ACCESS_WRITE). Other surfaces should be created with CPU read-write permission (see D3D10_CPU_ACCESS_READ_WRITE). This method will modify the surface data to fit the destination surface (stretch, shrink, convert format, rotate). The stretch and shrink is performed with point-sampling.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutput::GetDisplaySurfaceData']/*"/>	
        /// <msdn-id>bb174550</msdn-id>	
        /// <unmanaged>HRESULT IDXGIOutput::GetDisplaySurfaceData([In] IDXGISurface* pDestination)</unmanaged>	
        /// <unmanaged-short>IDXGIOutput::GetDisplaySurfaceData</unmanaged-short>	
        public void CopyDisplaySurfaceTo(SharpDX.DXGI.Surface destinationRef) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, (void*)((destinationRef == null)?IntPtr.Zero:destinationRef.NativePointer),((void**)(*(void**)_nativePointer))[17]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Gets statistics about recently rendered frames.</p>	
        /// </summary>	
        /// <param name="statsRef"><dd>  <p>A reference to frame statistics (see <strong><see cref="SharpDX.DXGI.FrameStatistics"/></strong>).</p> </dd></param>	
        /// <returns><p>If this function succeeds, it returns <see cref="SharpDX.Result.Ok"/>. Otherwise, it might return <see cref="SharpDX.DXGI.ResultCode.InvalidCall"/>.</p></returns>	
        /// <remarks>	
        /// <p>This API is similar to <strong><see cref="SharpDX.DXGI.SwapChain.GetFrameStatistics"/></strong>.</p><p> </p><p><strong>Note</strong>??Calling this method is only supported while in full-screen mode.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutput::GetFrameStatistics']/*"/>	
        /// <msdn-id>bb174551</msdn-id>	
        /// <unmanaged>HRESULT IDXGIOutput::GetFrameStatistics([Out] DXGI_FRAME_STATISTICS* pStats)</unmanaged>	
        /// <unmanaged-short>IDXGIOutput::GetFrameStatistics</unmanaged-short>	
        internal void GetFrameStatistics(out SharpDX.DXGI.FrameStatistics statsRef) {
            unsafe {
                statsRef = new SharpDX.DXGI.FrameStatistics();
                SharpDX.Result __result__;
                fixed (void* statsRef_ = &statsRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, statsRef_,((void**)(*(void**)_nativePointer))[18]);		
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>An <strong><see cref="SharpDX.DXGI.Output1"/></strong> interface represents an adapter output (such as a monitor).</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To determine  the outputs that are available from the adapter, use <strong><see cref="SharpDX.DXGI.Adapter.GetOutput"/></strong>. To determine the specific output that the swap chain will update, use <strong><see cref="SharpDX.DXGI.SwapChain.GetContainingOutput"/></strong>. You can then call <strong>QueryInterface</strong> from any  <strong><see cref="SharpDX.DXGI.Output"/></strong> object to obtain an <strong><see cref="SharpDX.DXGI.Output1"/></strong> object.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutput1']/*"/>	
    /// <msdn-id>hh404597</msdn-id>	
    /// <unmanaged>IDXGIOutput1</unmanaged>	
    /// <unmanaged-short>IDXGIOutput1</unmanaged-short>	
    [Guid("00cddea8-939b-4b83-a340-a685226666cc")]
    public partial class Output1 : SharpDX.DXGI.Output {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.Output1"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Output1(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.Output1"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.Output1(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.Output1(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Gets the display modes that match the requested format and other input options.</p>	
        /// </summary>	
        /// <param name="enumFormat"><dd> <p>A <strong><see cref="SharpDX.DXGI.Format"/></strong>-typed value for the color format.</p> </dd></param>	
        /// <param name="flags"><dd> <p>A combination of DXGI_ENUM_MODES-typed values that are combined by using a bitwise OR operation. The resulting value specifies options for display modes to include. You must specify <see cref="SharpDX.DXGI.DisplayModeEnumerationFlags.Scaling"/> to expose the display modes that require scaling.  Centered modes that require no  scaling and correspond directly to the display output are enumerated by default.</p> </dd></param>	
        /// <param name="numModesRef"><dd> <p>A reference to a variable that receives the number of display modes that <strong>GetDisplayModeList1</strong> returns in the memory block to which <em>pDesc</em> points. Set <em>pDesc</em> to <strong><c>null</c></strong> so that <em>pNumModes</em> returns the number of display modes that match the format and the options. Otherwise, <em>pNumModes</em> returns the number of display modes returned in <em>pDesc</em>.</p> </dd></param>	
        /// <param name="descRef"><dd> <p>A reference to a list of display modes; set to <strong><c>null</c></strong> to get the number of display modes.</p> </dd></param>	
        /// <returns><p>Returns one of the error codes described in the DXGI_ERROR topic. It is rare, but possible, that the display modes available can change immediately after calling  this method, in which case <see cref="SharpDX.DXGI.ResultCode.MoreData"/> is returned (if there is not enough room for all the display modes).</p></returns>	
        /// <remarks>	
        /// <p><strong>GetDisplayModeList1</strong> is updated from  <strong>GetDisplayModeList</strong> to return a list of <strong><see cref="SharpDX.DXGI.ModeDescription1"/></strong> structures, which are updated mode descriptions.  <strong>GetDisplayModeList</strong> behaves as though it calls <strong>GetDisplayModeList1</strong> because  <strong>GetDisplayModeList</strong> can return all of the modes that are specified by DXGI_ENUM_MODES, including stereo mode.  However, <strong>GetDisplayModeList</strong> returns a list of <strong><see cref="SharpDX.DXGI.ModeDescription"/></strong> structures, which are the former mode descriptions and do not indicate stereo mode.</p><p>The <strong>GetDisplayModeList1</strong> method does not enumerate stereo modes unless you specify the <see cref="SharpDX.DXGI.DisplayModeEnumerationFlags.Stereo"/> flag in the <em>Flags</em> parameter.  If you specify <see cref="SharpDX.DXGI.DisplayModeEnumerationFlags.Stereo"/>, stereo modes are included in the list of returned modes that the <em>pDesc</em> parameter points to.  In other words, the method returns both stereo and mono modes.</p><p>In general, when you switch from windowed to full-screen mode, a swap chain automatically chooses a display mode that meets (or exceeds) the resolution, color  depth, and refresh rate of the swap chain. To exercise more control over the display mode, use <strong>GetDisplayModeList1</strong> to poll the set of display modes that are validated  against monitor capabilities, or all modes that match the desktop (if the desktop settings are not validated against the monitor).</p><p>The following example code shows that you need to call <strong>GetDisplayModeList1</strong> twice. First call <strong>GetDisplayModeList1</strong> to get the number of modes available, and second call <strong>GetDisplayModeList1</strong> to return a description of the modes.</p><pre> UINT num = 0;	
        /// <see cref="SharpDX.DXGI.Format"/> format = <see cref="SharpDX.DXGI.Format.R32G32B32A32_Float"/>;	
        /// UINT flags         = <see cref="SharpDX.DXGI.DisplayModeEnumerationFlags.Interlaced"/>; pOutput-&gt;GetDisplayModeList1( format, flags, &amp;num, 0); ... <see cref="SharpDX.DXGI.ModeDescription1"/> * pDescs = new <see cref="SharpDX.DXGI.ModeDescription1"/>[num];	
        /// pOutput-&gt;GetDisplayModeList1( format, flags, &amp;num, pDescs); </pre><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutput1::GetDisplayModeList1']/*"/>	
        /// <msdn-id>hh404606</msdn-id>	
        /// <unmanaged>HRESULT IDXGIOutput1::GetDisplayModeList1([In] DXGI_FORMAT EnumFormat,[In] unsigned int Flags,[InOut] unsigned int* pNumModes,[Out, Buffer, Optional] DXGI_MODE_DESC1* pDesc)</unmanaged>	
        /// <unmanaged-short>IDXGIOutput1::GetDisplayModeList1</unmanaged-short>	
        internal void GetDisplayModeList1(SharpDX.DXGI.Format enumFormat, int flags, ref int numModesRef, SharpDX.DXGI.ModeDescription1[] descRef) {
            unsafe {
                SharpDX.DXGI.ModeDescription1[] descRef__ = descRef;
                SharpDX.Result __result__;
                fixed (void* numModesRef_ = &numModesRef)
                    fixed (void* descRef_ = descRef__)
                        __result__= 
        				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, unchecked((int)enumFormat), flags, numModesRef_, descRef_,((void**)(*(void**)_nativePointer))[19]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Finds the display mode that most closely matches the requested display mode.</p>	
        /// </summary>	
        /// <param name="modeToMatchRef"><dd> <p>A reference to the <strong><see cref="SharpDX.DXGI.ModeDescription1"/></strong> structure that describes the display mode to match. Members of <strong><see cref="SharpDX.DXGI.ModeDescription1"/></strong> can be unspecified, which indicates no preference for  that member.  A value of 0 for <strong>Width</strong> or <strong>Height</strong> indicates that the value is unspecified.  If either <strong>Width</strong> or  <strong>Height</strong> is 0, both must be 0.  A numerator and denominator of 0 in <strong>RefreshRate</strong> indicate it is unspecified. Other members  of <strong><see cref="SharpDX.DXGI.ModeDescription1"/></strong> have enumeration values that indicate that the member is unspecified.  If <em>pConcernedDevice</em> is <strong><c>null</c></strong>, the <strong>Format</strong> member of <strong><see cref="SharpDX.DXGI.ModeDescription1"/></strong> cannot be <strong><see cref="SharpDX.DXGI.Format.Unknown"/></strong>.</p> </dd></param>	
        /// <param name="closestMatchRef"><dd> <p>A reference to the <strong><see cref="SharpDX.DXGI.ModeDescription1"/></strong> structure that receives a description of the display mode that most closely matches the display mode described at <em>pModeToMatch</em>.</p> </dd></param>	
        /// <param name="concernedDeviceRef"><dd> <p>A reference to the Direct3D device interface. If this parameter is <strong><c>null</c></strong>, <strong>FindClosestMatchingMode1</strong> returns only modes whose format matches that of <em>pModeToMatch</em>; otherwise, <strong>FindClosestMatchingMode1</strong> returns only those formats that are supported for scan-out by the device. For info about the formats that are supported for scan-out by the device at each feature level, see Hardware Support for Direct3D 10 Formats, Hardware Support for Direct3D 10.1 Formats, Hardware Support for Direct3D 10Level9 Formats, Hardware Support for Direct3D 11 Formats, and Hardware Support for Direct3D 11.1 Formats.</p> </dd></param>	
        /// <returns><p>Returns one of the error codes described in the DXGI_ERROR topic.</p></returns>	
        /// <remarks>	
        /// <p>Direct3D devices require UNORM formats.</p><p><strong>FindClosestMatchingMode1</strong> finds the closest matching available display mode to the mode that you specify in <em>pModeToMatch</em>.</p><p>If you set the <strong>Stereo</strong> member in the <strong><see cref="SharpDX.DXGI.ModeDescription1"/></strong> structure to which <em>pModeToMatch</em> points to specify a stereo mode as input, <strong>FindClosestMatchingMode1</strong> considers only stereo modes. <strong>FindClosestMatchingMode1</strong> considers only mono modes if <strong>Stereo</strong> is not set.</p><p><strong>FindClosestMatchingMode1</strong> resolves similarly ranked members of display modes (that is, all specified, or all unspecified, and so on) in the following order:</p><ol> <li><strong>ScanlineOrdering</strong></li> <li><strong>Scaling</strong></li> <li><strong>Format</strong></li> <li><strong>Resolution</strong></li> <li><strong>RefreshRate</strong></li> </ol><p>When <strong>FindClosestMatchingMode1</strong> determines the closest value for a particular member, it uses previously matched members to filter the display mode list choices, and  ignores other members. For example, when <strong>FindClosestMatchingMode1</strong> matches <strong>Resolution</strong>, it already filtered the display mode list by a certain <strong>ScanlineOrdering</strong>,  <strong>Scaling</strong>, and <strong>Format</strong>, while it ignores <strong>RefreshRate</strong>. This ordering doesn't define the absolute ordering for every usage scenario of <strong>FindClosestMatchingMode1</strong>, because  the application can choose some values initially, which effectively changes the order of resolving members.</p><p><strong>FindClosestMatchingMode1</strong> matches members of the display mode one at a time, generally in a specified order.</p><p>If a member is unspecified, <strong>FindClosestMatchingMode1</strong> gravitates toward the values for the desktop related to this output.  If this output is not part of the desktop, <strong>FindClosestMatchingMode1</strong> uses the default desktop output to find values. If an application uses a fully unspecified  display mode, <strong>FindClosestMatchingMode1</strong> typically returns a display mode that matches the desktop settings for this output.   Because unspecified members are lower priority than specified members, <strong>FindClosestMatchingMode1</strong> resolves unspecified members later than specified members.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutput1::FindClosestMatchingMode1']/*"/>	
        /// <msdn-id>hh404603</msdn-id>	
        /// <unmanaged>HRESULT IDXGIOutput1::FindClosestMatchingMode1([In] const DXGI_MODE_DESC1* pModeToMatch,[Out] DXGI_MODE_DESC1* pClosestMatch,[In, Optional] IUnknown* pConcernedDevice)</unmanaged>	
        /// <unmanaged-short>IDXGIOutput1::FindClosestMatchingMode1</unmanaged-short>	
        public void FindClosestMatchingMode1(ref SharpDX.DXGI.ModeDescription1 modeToMatchRef, out SharpDX.DXGI.ModeDescription1 closestMatchRef, SharpDX.ComObject concernedDeviceRef) {
            unsafe {
                closestMatchRef = new SharpDX.DXGI.ModeDescription1();
                SharpDX.Result __result__;
                fixed (void* modeToMatchRef_ = &modeToMatchRef)
                    fixed (void* closestMatchRef_ = &closestMatchRef)
                        __result__= 
        				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, modeToMatchRef_, closestMatchRef_, (void*)((concernedDeviceRef == null)?IntPtr.Zero:concernedDeviceRef.NativePointer),((void**)(*(void**)_nativePointer))[20]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Copies the display surface (front buffer) to a user-provided resource.</p>	
        /// </summary>	
        /// <param name="destinationRef"><dd> <p>A reference to a resource interface that represents the resource to which <strong>GetDisplaySurfaceData1</strong> copies the display surface.</p> </dd></param>	
        /// <returns><p>Returns one of the error codes described in the DXGI_ERROR topic.</p></returns>	
        /// <remarks>	
        /// <p><strong>GetDisplaySurfaceData1</strong> is similar to <strong><see cref="SharpDX.DXGI.Output.CopyDisplaySurfaceTo"/></strong> except <strong>GetDisplaySurfaceData1</strong> takes an <strong><see cref="SharpDX.DXGI.Resource"/></strong> and <strong><see cref="SharpDX.DXGI.Output.CopyDisplaySurfaceTo"/></strong> takes an <strong><see cref="SharpDX.DXGI.Surface"/></strong>.</p><p><strong>GetDisplaySurfaceData1</strong> returns an error if the input resource is not a 2D texture (represented by the <strong><see cref="SharpDX.Direct3D11.Texture2D"/></strong> interface) with an array size (<strong>ArraySize</strong> member of the <strong><see cref="SharpDX.Direct3D11.Texture2DDescription"/></strong> structure) that is equal to the swap chain buffers.</p><p>The original <strong><see cref="SharpDX.DXGI.Output.CopyDisplaySurfaceTo"/></strong> and the updated <strong>GetDisplaySurfaceData1</strong> behave exactly the same. <strong>GetDisplaySurfaceData1</strong> was required because textures with an array size equal to 2 (<strong>ArraySize</strong> = 2) do not implement <strong><see cref="SharpDX.DXGI.Surface"/></strong>.</p><p> You can call <strong>GetDisplaySurfaceData1</strong> only when an output is in full-screen mode. If <strong>GetDisplaySurfaceData1</strong> succeeds, it fills the destination resource.</p><p>Use <strong><see cref="SharpDX.DXGI.Output.GetDescription"/></strong> to determine the size (width and height) of the output when you want to allocate space for the destination resource. This is true regardless of target monitor rotation. A destination resource created by a graphics component (such as Direct3D 11) must be created with CPU write permission (see <strong><see cref="SharpDX.Direct3D11.CpuAccessFlags.Write"/></strong>). Other surfaces can be created with CPU read-write permission (<strong><see cref="SharpDX.Direct3D11.CpuAccessFlags.Read"/></strong> | <strong><see cref="SharpDX.Direct3D11.CpuAccessFlags.Write"/></strong>). <strong>GetDisplaySurfaceData1</strong> modifies the surface data to fit the destination resource (stretch, shrink, convert format, rotate). <strong>GetDisplaySurfaceData1</strong> performs the stretch and shrink with point sampling. </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutput1::GetDisplaySurfaceData1']/*"/>	
        /// <msdn-id>hh404609</msdn-id>	
        /// <unmanaged>HRESULT IDXGIOutput1::GetDisplaySurfaceData1([In] IDXGIResource* pDestination)</unmanaged>	
        /// <unmanaged-short>IDXGIOutput1::GetDisplaySurfaceData1</unmanaged-short>	
        public void GetDisplaySurfaceData1(SharpDX.DXGI.Resource destinationRef) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, (void*)((destinationRef == null)?IntPtr.Zero:destinationRef.NativePointer),((void**)(*(void**)_nativePointer))[21]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Creates a desktop duplication interface from the <strong><see cref="SharpDX.DXGI.Output1"/></strong> interface that represents an adapter output.</p>	
        /// </summary>	
        /// <param name="deviceRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <remarks>	
        /// <p>If an application wants to duplicate the entire desktop, it must create a desktop duplication interface on each active output on the desktop. This interface does not provide an explicit way to synchronize the timing of each output image. Instead, the application must use the time stamp of each output, and then determine how to combine the images.</p><p>For <strong>DuplicateOutput</strong> to succeed, you must create <em>pDevice</em> from <strong><see cref="SharpDX.DXGI.Factory1"/></strong> or a later version of a DXGI factory interface that inherits from <strong><see cref="SharpDX.DXGI.Factory1"/></strong>.</p><p>If the current mode is a stereo mode, the desktop duplication interface provides the image for the left stereo image only.</p><p>By default, only four processes can use a <strong><see cref="SharpDX.DXGI.OutputDuplication"/></strong> interface at the same time within a single session. A process can have only one desktop duplication interface on a single desktop output; however, that process can have a desktop duplication interface for each output that is part of the desktop. </p><p>If <strong>DuplicateOutput</strong> fails with <see cref="SharpDX.DXGI.ResultCode.Unsupported"/>, the application can wait for system notification of desktop switches and mode changes and then call <strong>DuplicateOutput</strong> again after such a notification occurs.  For more information, see information in desktop switch (<strong>EVENT_SYSTEM_DESKTOPSWITCH</strong>) and mode change notification (<strong>WM_DISPLAYCHANGE</strong>). </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutput1::DuplicateOutput']/*"/>	
        /// <msdn-id>hh404600</msdn-id>	
        /// <unmanaged>HRESULT IDXGIOutput1::DuplicateOutput([In] IUnknown* pDevice,[Out] IDXGIOutputDuplication** ppOutputDuplication)</unmanaged>	
        /// <unmanaged-short>IDXGIOutput1::DuplicateOutput</unmanaged-short>	
        public SharpDX.DXGI.OutputDuplication DuplicateOutput(SharpDX.ComObject deviceRef) {
            unsafe {
                SharpDX.DXGI.OutputDuplication outputDuplicationOut;
                IntPtr outputDuplicationOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, (void*)((deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer), &outputDuplicationOut_,((void**)(*(void**)_nativePointer))[22]);		
                outputDuplicationOut= (outputDuplicationOut_ == IntPtr.Zero)?null:new SharpDX.DXGI.OutputDuplication(outputDuplicationOut_);	
                __result__.CheckError();
                return outputDuplicationOut;
            }
        }
    }
    /// <summary>	
    /// <p>An <strong><see cref="SharpDX.DXGI.Output"/></strong> interface represents an adapter output (such as a monitor).</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To see the outputs available, use <strong><see cref="SharpDX.DXGI.Adapter.GetOutput"/></strong>. To see the specific output that the swap chain will update, use <strong><see cref="SharpDX.DXGI.SwapChain.GetContainingOutput"/></strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutput2']/*"/>	
    /// <msdn-id>bb174546</msdn-id>	
    /// <unmanaged>IDXGIOutput2</unmanaged>	
    /// <unmanaged-short>IDXGIOutput2</unmanaged-short>	
    [Guid("595e39d1-2724-4663-99b1-da969de28364")]
    public partial class Output2 : SharpDX.DXGI.Output1 {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.Output2"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Output2(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.Output2"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.Output2(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.Output2(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Queries an adapter output for multiplane overlay support. If this API returns ?TRUE?, multiple swap chain composition takes place in a performant manner using overlay hardware. If this API returns false, apps should avoid using foreground swap chains (that is, avoid using swap chains created with the <strong><see cref="SharpDX.DXGI.SwapChainFlags.ForegroundLayer"/></strong> flag).</p>	
        /// </summary>	
        /// <returns><p>TRUE if the output adapter is the primary adapter and it supports multiplane overlays, otherwise returns <see cref="SharpDX.Result.False"/>.</p></returns>	
        /// <remarks>	
        /// <p>See <strong>CreateSwapChainForCoreWindow</strong> for info on creating a foreground swap chain.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutput2::SupportsOverlays']/*"/>	
        /// <msdn-id>dn280411</msdn-id>	
        /// <unmanaged>BOOL IDXGIOutput2::SupportsOverlays()</unmanaged>	
        /// <unmanaged-short>IDXGIOutput2::SupportsOverlays</unmanaged-short>	
        internal SharpDX.Mathematics.Interop.RawBool SupportsOverlays_() {
            unsafe {
                SharpDX.Mathematics.Interop.RawBool __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.CalliSharpDXMathematicsInteropRawBool(_nativePointer,((void**)(*(void**)_nativePointer))[23]);		
                return __result__;
            }
        }
    }
    /// <summary>	
    /// <p>An <strong><see cref="SharpDX.DXGI.Output"/></strong> interface represents an adapter output (such as a monitor).</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To see the outputs available, use <strong><see cref="SharpDX.DXGI.Adapter.GetOutput"/></strong>. To see the specific output that the swap chain will update, use <strong><see cref="SharpDX.DXGI.SwapChain.GetContainingOutput"/></strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutput3']/*"/>	
    /// <msdn-id>bb174546</msdn-id>	
    /// <unmanaged>IDXGIOutput3</unmanaged>	
    /// <unmanaged-short>IDXGIOutput3</unmanaged-short>	
    [Guid("8a6bb301-7e7e-41F4-a8e0-5b32f7f99b18")]
    public partial class Output3 : SharpDX.DXGI.Output2 {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.Output3"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Output3(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.Output3"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.Output3(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.Output3(nativePointer);
		}
        
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="enumFormat">No documentation.</param>	
        /// <param name="concernedDeviceRef">No documentation.</param>	
        /// <param name="flagsRef">No documentation.</param>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutput3::CheckOverlaySupport']/*"/>	
        /// <unmanaged>HRESULT IDXGIOutput3::CheckOverlaySupport([In] DXGI_FORMAT EnumFormat,[In] IUnknown* pConcernedDevice,[Out] unsigned int* pFlags)</unmanaged>	
        /// <unmanaged-short>IDXGIOutput3::CheckOverlaySupport</unmanaged-short>	
        public void CheckOverlaySupport(SharpDX.DXGI.Format enumFormat, SharpDX.ComObject concernedDeviceRef, out int flagsRef) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* flagsRef_ = &flagsRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, unchecked((int)enumFormat), (void*)((concernedDeviceRef == null)?IntPtr.Zero:concernedDeviceRef.NativePointer), flagsRef_,((void**)(*(void**)_nativePointer))[24]);		
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>An <strong><see cref="SharpDX.DXGI.Output"/></strong> interface represents an adapter output (such as a monitor).</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To see the outputs available, use <strong><see cref="SharpDX.DXGI.Adapter.GetOutput"/></strong>. To see the specific output that the swap chain will update, use <strong><see cref="SharpDX.DXGI.SwapChain.GetContainingOutput"/></strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutput4']/*"/>	
    /// <msdn-id>bb174546</msdn-id>	
    /// <unmanaged>IDXGIOutput4</unmanaged>	
    /// <unmanaged-short>IDXGIOutput4</unmanaged-short>	
    [Guid("dc7dca35-2196-414d-9F53-617884032a60")]
    public partial class Output4 : SharpDX.DXGI.Output3 {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.Output4"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Output4(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.Output4"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.Output4(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.Output4(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Checks for overlay color space support.</p>	
        /// </summary>	
        /// <param name="format"><dd>  <p>A <strong><see cref="SharpDX.DXGI.Format"/></strong>-typed value for the color format.</p> </dd></param>	
        /// <param name="colorSpace"><dd>  <p>A <strong><see cref="SharpDX.DXGI.ColorSpaceType"/></strong>-typed value that specifies color space type to check overlay support for.</p> </dd></param>	
        /// <param name="concernedDeviceRef"><dd>  <p>A reference to the Direct3D device interface. <strong>CheckOverlayColorSpaceSupport</strong> returns only support info about this scan-out device. </p> </dd></param>	
        /// <param name="flagsRef"><dd>  <p>A reference to a variable that receives a combination of <strong><see cref="SharpDX.DXGI.OverlayColorSpaceSupportFlags"/></strong>-typed values that are combined by using a bitwise OR operation. The resulting value specifies options for overlay color space support. </p> </dd></param>	
        /// <returns><p>This method returns <strong><see cref="SharpDX.Result.Ok"/></strong> on success, or it returns one of the error codes that are described in the DXGI_ERROR topic.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutput4::CheckOverlayColorSpaceSupport']/*"/>	
        /// <msdn-id>dn903672</msdn-id>	
        /// <unmanaged>HRESULT IDXGIOutput4::CheckOverlayColorSpaceSupport([In] DXGI_FORMAT Format,[In] DXGI_COLOR_SPACE_TYPE ColorSpace,[In] IUnknown* pConcernedDevice,[Out] unsigned int* pFlags)</unmanaged>	
        /// <unmanaged-short>IDXGIOutput4::CheckOverlayColorSpaceSupport</unmanaged-short>	
        public void CheckOverlayColorSpaceSupport(SharpDX.DXGI.Format format, SharpDX.DXGI.ColorSpaceType colorSpace, SharpDX.ComObject concernedDeviceRef, out int flagsRef) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* flagsRef_ = &flagsRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, unchecked((int)format), unchecked((int)colorSpace), (void*)((concernedDeviceRef == null)?IntPtr.Zero:concernedDeviceRef.NativePointer), flagsRef_,((void**)(*(void**)_nativePointer))[25]);		
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>The <strong><see cref="SharpDX.DXGI.OutputDuplication"/></strong> interface accesses and manipulates the duplicated desktop image.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>A collaboration application can use <strong><see cref="SharpDX.DXGI.OutputDuplication"/></strong> to access the desktop image. <strong><see cref="SharpDX.DXGI.OutputDuplication"/></strong> is supported in Desktop Window Manager (DWM) on non-8bpp DirectX full-screen modes and non-8bpp OpenGL full-screen modes. 16-bit or 32-bit GDI non-DWM desktop modes are not supported.</p><p>An application can use <strong><see cref="SharpDX.DXGI.OutputDuplication"/></strong> on a separate thread to receive the desktop images and to feed them into their specific image-processing pipeline.  The application uses <strong><see cref="SharpDX.DXGI.OutputDuplication"/></strong> to perform the following operations:</p><ol> <li>Acquire the next desktop image.</li> <li>Retrieve the information that describes the image.</li> <li>Perform an operation on the image. This operation can be as simple as copying the image to a staging buffer so that the application can read the pixel data on the image. The application reads the pixel data  after the application calls <strong><see cref="SharpDX.DXGI.Surface.Map"/></strong>. Alternatively, this operation can be more complex. For example, the application can run some pixel shaders on the updated regions of the image to encode those regions for transmission to a client.</li> <li>After the application finishes  processing each desktop image, it releases the image, loops to step 1, and repeats the steps. The application repeats these steps until it is finished processing desktop images.</li> </ol><p>The following components of the operating system can generate the desktop image:</p><ul> <li>The DWM by composing the desktop image</li> <li>A full-screen DirectX or OpenGL application</li> <li>An application by switching to a separate desktop, for example, the secure desktop that is used to display the login screen</li> </ul><p>All current <strong><see cref="SharpDX.DXGI.OutputDuplication"/></strong> interfaces become invalid when the operating system switches to a different component that produces the desktop image or when a mode change occurs.  In these situations, the application must destroy its current <strong><see cref="SharpDX.DXGI.OutputDuplication"/></strong> interface and create a new <strong><see cref="SharpDX.DXGI.OutputDuplication"/></strong> interface.</p><p>Examples of situations in which <strong><see cref="SharpDX.DXGI.OutputDuplication"/></strong> becomes invalid are:</p><ul> <li>Desktop switch</li> <li>Mode change</li> <li>Switch from DWM on, DWM off, or other full-screen application</li> </ul><p>In these situations, the application must release the <strong><see cref="SharpDX.DXGI.OutputDuplication"/></strong> interface and must create a new <strong><see cref="SharpDX.DXGI.OutputDuplication"/></strong> interface for the new content.  If the application does not have the appropriate privilege to the new desktop image, its call to the <strong><see cref="SharpDX.DXGI.Output1.DuplicateOutput"/></strong> method fails.</p><p>While the application processes each desktop image, the operating system accumulates all the desktop image updates into a single update. For more information about desktop updates, see Updating the desktop image data.</p><p>The desktop image is always in the <strong><see cref="SharpDX.DXGI.Format.B8G8R8A8_UNorm"/></strong> format.</p><p>The <strong><see cref="SharpDX.DXGI.OutputDuplication"/></strong> interface does not exist for Windows Store apps.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutputDuplication']/*"/>	
    /// <msdn-id>hh404611</msdn-id>	
    /// <unmanaged>IDXGIOutputDuplication</unmanaged>	
    /// <unmanaged-short>IDXGIOutputDuplication</unmanaged-short>	
    [Guid("191cfac3-a341-470d-b26e-a864f428319c")]
    public partial class OutputDuplication : SharpDX.DXGI.DXGIObject {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.OutputDuplication"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public OutputDuplication(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.OutputDuplication"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.OutputDuplication(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.OutputDuplication(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Retrieves a description of a duplicated output. This description specifies the dimensions of the surface that contains the desktop image.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>After an application creates an <strong><see cref="SharpDX.DXGI.OutputDuplication"/></strong> interface, it calls <strong>GetDesc</strong> to retrieve the dimensions of the surface that contains the desktop image. The format of the desktop image is always <strong><see cref="SharpDX.DXGI.Format.B8G8R8A8_UNorm"/></strong>.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutputDuplication::GetDesc']/*"/>	
        /// <msdn-id>hh404618</msdn-id>	
        /// <unmanaged>GetDesc</unmanaged>	
        /// <unmanaged-short>GetDesc</unmanaged-short>	
        /// <unmanaged>void IDXGIOutputDuplication::GetDesc([Out] DXGI_OUTDUPL_DESC* pDesc)</unmanaged>
        public SharpDX.DXGI.OutputDuplicateDescription Description {
                get { SharpDX.DXGI.OutputDuplicateDescription __output__; GetDescription(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// <p>Retrieves a description of a duplicated output. This description specifies the dimensions of the surface that contains the desktop image.</p>	
        /// </summary>	
        /// <param name="descRef"><dd> <p>A reference to a <strong><see cref="SharpDX.DXGI.OutputDuplicateDescription"/></strong> structure that describes the duplicated output. This parameter must not be <strong><c>null</c></strong>.</p> </dd></param>	
        /// <remarks>	
        /// <p>After an application creates an <strong><see cref="SharpDX.DXGI.OutputDuplication"/></strong> interface, it calls <strong>GetDesc</strong> to retrieve the dimensions of the surface that contains the desktop image. The format of the desktop image is always <strong><see cref="SharpDX.DXGI.Format.B8G8R8A8_UNorm"/></strong>.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutputDuplication::GetDesc']/*"/>	
        /// <msdn-id>hh404618</msdn-id>	
        /// <unmanaged>void IDXGIOutputDuplication::GetDesc([Out] DXGI_OUTDUPL_DESC* pDesc)</unmanaged>	
        /// <unmanaged-short>IDXGIOutputDuplication::GetDesc</unmanaged-short>	
        internal void GetDescription(out SharpDX.DXGI.OutputDuplicateDescription descRef) {
            unsafe {
                descRef = new SharpDX.DXGI.OutputDuplicateDescription();
                fixed (void* descRef_ = &descRef)
                    SharpDX.DXGI.LocalInterop.Callivoid(_nativePointer, descRef_,((void**)(*(void**)_nativePointer))[7]);		
            }
        }
        
        /// <summary>	
        /// <p>Indicates that the application is ready to process the next desktop image.</p>	
        /// </summary>	
        /// <param name="timeoutInMilliseconds"><dd> <p>The time-out interval, in milliseconds. This interval specifies the amount of time that this method waits for a new frame before it returns to the caller.  This method returns if the interval elapses, and a new desktop image is not available.</p> <p>For more information about the time-out interval, see Remarks.</p> </dd></param>	
        /// <param name="frameInfoRef"><dd> <p>A reference to a memory location that receives the <strong><see cref="SharpDX.DXGI.OutputDuplicateFrameInformation"/></strong> structure that describes timing and presentation statistics for a frame.</p> </dd></param>	
        /// <param name="desktopResourceOut"><dd> <p>A reference to a variable that receives the <strong><see cref="SharpDX.DXGI.Resource"/></strong> interface of the surface that contains the desktop bitmap.</p> </dd></param>	
        /// <returns><p><strong>AcquireNextFrame</strong> returns: </p><ul> <li><see cref="SharpDX.Result.Ok"/> if it successfully received the next desktop image.</li> <li><see cref="SharpDX.DXGI.ResultCode.AccessLost"/> if the desktop duplication interface is invalid. The desktop duplication interface typically becomes invalid when a different type of image is displayed on the desktop.  Examples of this situation are: <ul> <li>Desktop switch</li> <li>Mode change</li> <li>Switch from DWM on, DWM off, or other full-screen application</li> </ul>In this situation, the application must release the <strong><see cref="SharpDX.DXGI.OutputDuplication"/></strong> interface and create a new <strong><see cref="SharpDX.DXGI.OutputDuplication"/></strong> for the new content.</li> <li><see cref="SharpDX.DXGI.ResultCode.WaitTimeout"/> if the time-out interval elapsed before the next desktop frame was available.</li> <li><see cref="SharpDX.DXGI.ResultCode.InvalidCall"/> if the application called <strong>AcquireNextFrame</strong> without releasing the previous frame.</li> <li>E_INVALIDARG if one of the parameters to <strong>AcquireNextFrame</strong> is incorrect; for example, if <em>pFrameInfo</em> is <c>null</c>.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul></returns>	
        /// <remarks>	
        /// <p>When <strong>AcquireNextFrame</strong> returns successfully, the calling application can access the desktop image that <strong>AcquireNextFrame</strong> returns in the variable at <em>ppDesktopResource</em>.	
        /// If the caller specifies a zero time-out interval in the <em>TimeoutInMilliseconds</em> parameter, <strong>AcquireNextFrame</strong> verifies whether there is a new desktop image available, returns immediately, and indicates its outcome with the return value.  If the caller specifies an <strong>INFINITE</strong> time-out interval in the <em>TimeoutInMilliseconds</em> parameter, the time-out interval never elapses.</p><p><strong>Note</strong>??You cannot cancel the wait that you specified in the <em>TimeoutInMilliseconds</em> parameter. Therefore, if you must periodically check for other conditions (for example, a terminate signal), you should specify a non-<strong>INFINITE</strong> time-out interval. After the time-out interval elapses, you can check for these other conditions and then call <strong>AcquireNextFrame</strong> again to wait for the next frame.</p><p><strong>AcquireNextFrame</strong> acquires a new desktop frame when the operating system either updates the desktop bitmap image or changes the shape or position of a hardware reference.  The new frame that <strong>AcquireNextFrame</strong> acquires might have only the desktop image updated, only the reference shape or position updated, or both.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutputDuplication::AcquireNextFrame']/*"/>	
        /// <msdn-id>hh404615</msdn-id>	
        /// <unmanaged>HRESULT IDXGIOutputDuplication::AcquireNextFrame([In] unsigned int TimeoutInMilliseconds,[Out] DXGI_OUTDUPL_FRAME_INFO* pFrameInfo,[Out] IDXGIResource** ppDesktopResource)</unmanaged>	
        /// <unmanaged-short>IDXGIOutputDuplication::AcquireNextFrame</unmanaged-short>	
        public void AcquireNextFrame(int timeoutInMilliseconds, out SharpDX.DXGI.OutputDuplicateFrameInformation frameInfoRef, out SharpDX.DXGI.Resource desktopResourceOut) {
            unsafe {
                frameInfoRef = new SharpDX.DXGI.OutputDuplicateFrameInformation();
                IntPtr desktopResourceOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                fixed (void* frameInfoRef_ = &frameInfoRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, timeoutInMilliseconds, frameInfoRef_, &desktopResourceOut_,((void**)(*(void**)_nativePointer))[8]);		
                desktopResourceOut= (desktopResourceOut_ == IntPtr.Zero)?null:new SharpDX.DXGI.Resource(desktopResourceOut_);	
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Gets information about dirty rectangles for the current desktop frame.</p>	
        /// </summary>	
        /// <param name="dirtyRectsBufferSize"><dd> <p>The size in bytes of the buffer that the caller passed to the  <em>pDirtyRectsBuffer</em> parameter.</p> </dd></param>	
        /// <param name="dirtyRectsBufferRef"><dd> <p>A reference to an array of <strong><see cref="SharpDX.Mathematics.Interop.RawRectangle"/></strong> structures  that identifies the dirty rectangle regions for the desktop frame.</p> </dd></param>	
        /// <param name="dirtyRectsBufferSizeRequiredRef"><dd> <p>Pointer to a variable that receives the number of bytes that  <strong>GetFrameDirtyRects</strong> needs to store information about dirty regions in the buffer at  <em>pDirtyRectsBuffer</em>.</p> <p>For more information about returning the required buffer size, see Remarks.</p> </dd></param>	
        /// <returns><p><strong>GetFrameDirtyRects</strong> returns: </p><ul> <li><see cref="SharpDX.Result.Ok"/> if it successfully retrieved information about dirty rectangles.</li> <li><see cref="SharpDX.DXGI.ResultCode.AccessLost"/> if the desktop duplication interface is invalid. The desktop duplication  interface typically becomes invalid when a different type of image is displayed on the desktop. Examples of  this situation are:  <ul> <li>Desktop switch</li> <li>Mode change</li> <li>Switch from DWM on, DWM off, or other full-screen application</li> </ul> In this situation, the application must release the  <strong><see cref="SharpDX.DXGI.OutputDuplication"/></strong> interface and  create a new  <strong><see cref="SharpDX.DXGI.OutputDuplication"/></strong> for the new  content.</li> <li><see cref="SharpDX.DXGI.ResultCode.MoreData"/> if the buffer that the calling application provided was not big enough.</li> <li><see cref="SharpDX.DXGI.ResultCode.InvalidCall"/> if the application called  <strong>GetFrameDirtyRects</strong> without owning the desktop image.</li> <li>E_INVALIDARG if one of the parameters to  <strong>GetFrameDirtyRects</strong> is incorrect; for example, if <em>pDirtyRectsBuffer</em> is <c>null</c>.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul></returns>	
        /// <remarks>	
        /// <p><strong>GetFrameDirtyRects</strong> stores a size value in the variable at <em>pDirtyRectsBufferSizeRequired</em>. This  value specifies the number of bytes that <strong>GetFrameDirtyRects</strong> needs to store information about dirty regions. You can use this value  in the following situations to determine the amount of memory to allocate for future buffers that you pass to <em>pDirtyRectsBuffer</em>:</p><ul> <li><strong>GetFrameDirtyRects</strong> fails with <see cref="SharpDX.DXGI.ResultCode.MoreData"/> because the buffer is not big enough.</li> <li><strong>GetFrameDirtyRects</strong> supplies a buffer that is bigger than necessary. The size value returned at  <em>pDirtyRectsBufferSizeRequired</em> informs the caller how much buffer space was actually  used compared to how much buffer space the caller allocated and specified in the  <em>DirtyRectsBufferSize</em> parameter.</li> </ul><p>The caller can also use the value returned at <em>pDirtyRectsBufferSizeRequired</em> to  determine the number of <strong><see cref="SharpDX.Mathematics.Interop.RawRectangle"/></strong>s returned in the <em>pDirtyRectsBuffer</em> array.</p><p>The buffer contains the list of dirty <strong><see cref="SharpDX.Mathematics.Interop.RawRectangle"/></strong>s for the current frame.</p><p><strong>Note</strong>??To produce a visually accurate copy of the desktop, an application must first process all move <strong><see cref="SharpDX.Mathematics.Interop.RawRectangle"/></strong>s before  it processes dirty <strong><see cref="SharpDX.Mathematics.Interop.RawRectangle"/></strong>s.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutputDuplication::GetFrameDirtyRects']/*"/>	
        /// <msdn-id>hh404619</msdn-id>	
        /// <unmanaged>HRESULT IDXGIOutputDuplication::GetFrameDirtyRects([In] unsigned int DirtyRectsBufferSize,[Out, Buffer] RECT* pDirtyRectsBuffer,[Out] unsigned int* pDirtyRectsBufferSizeRequired)</unmanaged>	
        /// <unmanaged-short>IDXGIOutputDuplication::GetFrameDirtyRects</unmanaged-short>	
        public void GetFrameDirtyRects(int dirtyRectsBufferSize, SharpDX.Mathematics.Interop.RawRectangle[] dirtyRectsBufferRef, out int dirtyRectsBufferSizeRequiredRef) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* dirtyRectsBufferRef_ = dirtyRectsBufferRef)
                    fixed (void* dirtyRectsBufferSizeRequiredRef_ = &dirtyRectsBufferSizeRequiredRef)
                        __result__= 
        				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, dirtyRectsBufferSize, dirtyRectsBufferRef_, dirtyRectsBufferSizeRequiredRef_,((void**)(*(void**)_nativePointer))[9]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Gets information about the moved rectangles for the current desktop frame.</p>	
        /// </summary>	
        /// <param name="moveRectsBufferSize"><dd> <p>The size in bytes of the buffer that the caller passed to the  <em>pMoveRectBuffer</em> parameter.</p> </dd></param>	
        /// <param name="moveRectBufferRef"><dd> <p>A reference to an array of  <strong><see cref="SharpDX.DXGI.OutputDuplicateMoveRectangle"/></strong> structures  that identifies the moved rectangle regions for the desktop frame.</p> </dd></param>	
        /// <param name="moveRectsBufferSizeRequiredRef"><dd> <p>Pointer to a variable that receives the number of bytes that  <strong>GetFrameMoveRects</strong> needs to store information about moved regions in the buffer at <em>pMoveRectBuffer</em>.</p> <p>For more information about returning the required buffer size, see Remarks.</p> </dd></param>	
        /// <returns><p><strong>GetFrameMoveRects</strong> returns: </p><ul> <li><see cref="SharpDX.Result.Ok"/> if it successfully retrieved information about moved rectangles.</li> <li><see cref="SharpDX.DXGI.ResultCode.AccessLost"/> if the desktop duplication interface is invalid. The desktop duplication interface typically becomes invalid when a different type of image is displayed on the desktop.  Examples of this situation are:  <ul> <li>Desktop switch</li> <li>Mode change</li> <li>Switch from DWM on, DWM off, or other full-screen application</li> </ul> In this situation, the application must release the  <strong><see cref="SharpDX.DXGI.OutputDuplication"/></strong> interface and  create a new <strong><see cref="SharpDX.DXGI.OutputDuplication"/></strong> for the new content.</li> <li><see cref="SharpDX.DXGI.ResultCode.MoreData"/> if the buffer that the calling application provided  is not big enough.</li> <li><see cref="SharpDX.DXGI.ResultCode.InvalidCall"/> if the application called  <strong>GetFrameMoveRects</strong> without owning the desktop image.</li> <li>E_INVALIDARG if one of the parameters to  <strong>GetFrameMoveRects</strong> is incorrect; for example, if  <em>pMoveRectBuffer</em> is <c>null</c>.</li> <li>Possibly other error codes that are described in the  DXGI_ERROR topic.</li> </ul></returns>	
        /// <remarks>	
        /// <p><strong>GetFrameMoveRects</strong> stores a size value in the variable at <em>pMoveRectsBufferSizeRequired</em>. This  value specifies the number of bytes that <strong>GetFrameMoveRects</strong> needs to store information about moved regions. You can use  this value in the following situations to determine the amount of memory to allocate for future buffers that you pass to <em>pMoveRectBuffer</em>:</p><ul> <li><strong>GetFrameMoveRects</strong> fails with <see cref="SharpDX.DXGI.ResultCode.MoreData"/> because the buffer is not big enough.</li> <li><strong>GetFrameMoveRects</strong> supplies a buffer that is bigger than necessary. The size value returned at <em>pMoveRectsBufferSizeRequired</em> informs the caller how much buffer space was actually used compared to how much buffer space the caller allocated and specified in the  <em>MoveRectsBufferSize</em> parameter.</li> </ul><p>The caller can also use the value returned at <em>pMoveRectsBufferSizeRequired</em> to determine the number of <strong><see cref="SharpDX.DXGI.OutputDuplicateMoveRectangle"/></strong> structures returned.</p><p>The buffer contains the list of move RECTs for the current frame.</p><p><strong>Note</strong>??To produce a visually accurate copy of the desktop, an application must first process all move RECTs before it processes dirty RECTs.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutputDuplication::GetFrameMoveRects']/*"/>	
        /// <msdn-id>hh404620</msdn-id>	
        /// <unmanaged>HRESULT IDXGIOutputDuplication::GetFrameMoveRects([In] unsigned int MoveRectsBufferSize,[Out, Buffer] DXGI_OUTDUPL_MOVE_RECT* pMoveRectBuffer,[Out] unsigned int* pMoveRectsBufferSizeRequired)</unmanaged>	
        /// <unmanaged-short>IDXGIOutputDuplication::GetFrameMoveRects</unmanaged-short>	
        public void GetFrameMoveRects(int moveRectsBufferSize, SharpDX.DXGI.OutputDuplicateMoveRectangle[] moveRectBufferRef, out int moveRectsBufferSizeRequiredRef) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* moveRectBufferRef_ = moveRectBufferRef)
                    fixed (void* moveRectsBufferSizeRequiredRef_ = &moveRectsBufferSizeRequiredRef)
                        __result__= 
        				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, moveRectsBufferSize, moveRectBufferRef_, moveRectsBufferSizeRequiredRef_,((void**)(*(void**)_nativePointer))[10]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Gets information about the new reference shape for the current desktop frame.</p>	
        /// </summary>	
        /// <param name="pointerShapeBufferSize"><dd> <p>The size in bytes of the buffer that the caller passed to the  <em>pPointerShapeBuffer</em> parameter.</p> </dd></param>	
        /// <param name="pointerShapeBufferRef"><dd> <p>A reference to a buffer to which <strong>GetFramePointerShape</strong> copies and returns pixel data for the new reference shape.</p> </dd></param>	
        /// <param name="pointerShapeBufferSizeRequiredRef"><dd> <p>Pointer to a variable that receives the number of bytes that <strong>GetFramePointerShape</strong> needs to store the new reference shape pixel data in the buffer at <em>pPointerShapeBuffer</em>.</p> <p>For more information about returning the required buffer size, see Remarks.</p> </dd></param>	
        /// <param name="pointerShapeInfoRef"><dd> <p>Pointer to a <strong><see cref="SharpDX.DXGI.OutputDuplicatePointerShapeInformation"/></strong> structure that receives the reference shape information.</p> </dd></param>	
        /// <returns><p><strong>GetFramePointerShape</strong> returns: </p><ul> <li><see cref="SharpDX.Result.Ok"/> if it successfully retrieved information about the new reference shape.</li> <li><see cref="SharpDX.DXGI.ResultCode.AccessLost"/> if the desktop duplication interface is invalid. The desktop duplication interface typically becomes invalid when a different type of image is displayed on the desktop.  Examples of this situation are: <ul> <li>Desktop switch</li> <li>Mode change</li> <li>Switch from DWM on, DWM off, or other full-screen application</li> </ul>In this situation, the application must release the <strong><see cref="SharpDX.DXGI.OutputDuplication"/></strong> interface and create a new <strong><see cref="SharpDX.DXGI.OutputDuplication"/></strong> for the new content.</li> <li><see cref="SharpDX.DXGI.ResultCode.MoreData"/> if the buffer that the calling application provided was not big enough.</li> <li><see cref="SharpDX.DXGI.ResultCode.InvalidCall"/> if the application called <strong>GetFramePointerShape</strong> without owning the desktop image.</li> <li>E_INVALIDARG if one of the parameters to <strong>GetFramePointerShape</strong> is incorrect; for example, if <em>pPointerShapeInfo</em> is <c>null</c>.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul></returns>	
        /// <remarks>	
        /// <p><strong>GetFramePointerShape</strong> stores a size value in the variable at <em>pPointerShapeBufferSizeRequired</em>. This  value specifies the number of bytes that <em>pPointerShapeBufferSizeRequired</em> needs to store the new reference shape pixel data. You can use the value in the following situations to determine the amount of memory to allocate for future buffers that you pass to <em>pPointerShapeBuffer</em>:</p><ul> <li><strong>GetFramePointerShape</strong> fails with <see cref="SharpDX.DXGI.ResultCode.MoreData"/> because the buffer is not big enough.</li> <li><strong>GetFramePointerShape</strong> supplies a bigger than necessary buffer. The size value returned at <em>pPointerShapeBufferSizeRequired</em> informs the caller how much buffer space was actually used compared to how much buffer space the caller allocated and specified in the  <em>PointerShapeBufferSize</em> parameter.</li> </ul><p>The <em>pPointerShapeInfo</em> parameter describes the new reference shape.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutputDuplication::GetFramePointerShape']/*"/>	
        /// <msdn-id>hh404621</msdn-id>	
        /// <unmanaged>HRESULT IDXGIOutputDuplication::GetFramePointerShape([In] unsigned int PointerShapeBufferSize,[Out, Buffer] void* pPointerShapeBuffer,[Out] unsigned int* pPointerShapeBufferSizeRequired,[Out] DXGI_OUTDUPL_POINTER_SHAPE_INFO* pPointerShapeInfo)</unmanaged>	
        /// <unmanaged-short>IDXGIOutputDuplication::GetFramePointerShape</unmanaged-short>	
        public void GetFramePointerShape(int pointerShapeBufferSize, System.IntPtr pointerShapeBufferRef, out int pointerShapeBufferSizeRequiredRef, out SharpDX.DXGI.OutputDuplicatePointerShapeInformation pointerShapeInfoRef) {
            unsafe {
                pointerShapeInfoRef = new SharpDX.DXGI.OutputDuplicatePointerShapeInformation();
                SharpDX.Result __result__;
                fixed (void* pointerShapeBufferSizeRequiredRef_ = &pointerShapeBufferSizeRequiredRef)
                    fixed (void* pointerShapeInfoRef_ = &pointerShapeInfoRef)
                        __result__= 
        				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, pointerShapeBufferSize, (void*)pointerShapeBufferRef, pointerShapeBufferSizeRequiredRef_, pointerShapeInfoRef_,((void**)(*(void**)_nativePointer))[11]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Provides the CPU with efficient access to a desktop image if that desktop image is already in system memory.</p>	
        /// </summary>	
        /// <param name="lockedRectRef"><dd> <p>A reference to a <strong><see cref="SharpDX.DXGI.MappedRectangle"/></strong> structure that receives the surface data that the CPU needs to directly access the surface data. </p> </dd></param>	
        /// <returns><p><strong>MapDesktopSurface</strong> returns: </p><ul> <li><see cref="SharpDX.Result.Ok"/> if it successfully retrieved the surface data.</li> <li><see cref="SharpDX.DXGI.ResultCode.AccessLost"/> if the desktop duplication interface is invalid. The desktop duplication interface typically becomes invalid when a different type of image is displayed on the desktop.  Examples of this situation are: <ul> <li>Desktop switch</li> <li>Mode change</li> <li>Switch from DWM on, DWM off, or other full-screen application</li> </ul>In this situation, the application must release the <strong><see cref="SharpDX.DXGI.OutputDuplication"/></strong> interface and create a new <strong><see cref="SharpDX.DXGI.OutputDuplication"/></strong> for the new content.</li> <li><see cref="SharpDX.DXGI.ResultCode.InvalidCall"/> if the application already has an outstanding map on the desktop image.  The application must call <strong>UnMapDesktopSurface</strong> before it calls <strong>MapDesktopSurface</strong> again. <see cref="SharpDX.DXGI.ResultCode.InvalidCall"/> is also returned if the application did not own the desktop image when it called <strong>MapDesktopSurface</strong>.</li> <li><see cref="SharpDX.DXGI.ResultCode.Unsupported"/> if the desktop image is not in system memory. In this situation, the application must first transfer the image to a staging surface and then lock the image by calling the <strong><see cref="SharpDX.DXGI.Surface.Map"/></strong> method.</li> <li>E_INVALIDARG if the <em>pLockedRect</em> parameter is incorrect; for example, if <em>pLockedRect</em> is <strong><c>null</c></strong>.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul></returns>	
        /// <remarks>	
        /// <p>You can successfully call <strong>MapDesktopSurface</strong> if the  <strong>DesktopImageInSystemMemory</strong> member of the <strong><see cref="SharpDX.DXGI.OutputDuplicateDescription"/></strong> structure is set to <strong>TRUE</strong>. If <strong>DesktopImageInSystemMemory</strong> is <strong><see cref="SharpDX.Result.False"/></strong>, <strong>MapDesktopSurface</strong> returns <see cref="SharpDX.DXGI.ResultCode.Unsupported"/>. Call <strong><see cref="SharpDX.DXGI.OutputDuplication.GetDescription"/></strong> to retrieve the <strong><see cref="SharpDX.DXGI.OutputDuplicateDescription"/></strong> structure.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutputDuplication::MapDesktopSurface']/*"/>	
        /// <msdn-id>hh404622</msdn-id>	
        /// <unmanaged>HRESULT IDXGIOutputDuplication::MapDesktopSurface([Out] DXGI_MAPPED_RECT* pLockedRect)</unmanaged>	
        /// <unmanaged-short>IDXGIOutputDuplication::MapDesktopSurface</unmanaged-short>	
        internal void MapDesktopSurface(out SharpDX.DXGI.MappedRectangle lockedRectRef) {
            unsafe {
                lockedRectRef = new SharpDX.DXGI.MappedRectangle();
                SharpDX.Result __result__;
                fixed (void* lockedRectRef_ = &lockedRectRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, lockedRectRef_,((void**)(*(void**)_nativePointer))[12]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Invalidates the reference to the desktop image that was retrieved by using <strong><see cref="SharpDX.DXGI.OutputDuplication.MapDesktopSurface"/></strong>.</p>	
        /// </summary>	
        /// <returns><p><strong>UnMapDesktopSurface</strong> returns: </p><ul> <li><see cref="SharpDX.Result.Ok"/> if it successfully completed.</li> <li><see cref="SharpDX.DXGI.ResultCode.InvalidCall"/> if the application did not map the desktop surface by calling <strong><see cref="SharpDX.DXGI.OutputDuplication.MapDesktopSurface"/></strong>.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutputDuplication::UnMapDesktopSurface']/*"/>	
        /// <msdn-id>hh404624</msdn-id>	
        /// <unmanaged>HRESULT IDXGIOutputDuplication::UnMapDesktopSurface()</unmanaged>	
        /// <unmanaged-short>IDXGIOutputDuplication::UnMapDesktopSurface</unmanaged-short>	
        public void UnMapDesktopSurface() {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer,((void**)(*(void**)_nativePointer))[13]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Indicates that the application finished processing the frame.</p>	
        /// </summary>	
        /// <returns><p><strong>ReleaseFrame</strong> returns: </p><ul> <li><see cref="SharpDX.Result.Ok"/> if it successfully completed.</li> <li><see cref="SharpDX.DXGI.ResultCode.InvalidCall"/> if the application already released the frame.</li> <li><see cref="SharpDX.DXGI.ResultCode.AccessLost"/> if the desktop duplication interface is invalid. The desktop duplication interface typically becomes invalid when a different type of image is displayed on the desktop.  Examples of this situation are: <ul> <li>Desktop switch</li> <li>Mode change</li> <li>Switch from DWM on, DWM off, or other full-screen application</li> </ul>In this situation, the application must release the <strong><see cref="SharpDX.DXGI.OutputDuplication"/></strong> interface and create a new <strong><see cref="SharpDX.DXGI.OutputDuplication"/></strong> for the new content.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul></returns>	
        /// <remarks>	
        /// <p>The application must release the frame before it acquires the next frame.  After the frame is released, the surface that contains the desktop bitmap becomes invalid; you will not be able to use the surface in a DirectX graphics operation.</p><p>For performance reasons, we recommend that you release the frame just before you call the <strong><see cref="SharpDX.DXGI.OutputDuplication.AcquireNextFrame"/></strong> method to acquire the next frame.  When the client does not own the frame, the operating system copies all desktop updates to the surface. This can result in wasted GPU cycles if the operating system updates the same region for each frame that occurs.  When the client acquires the frame, the client is aware of only the final update to this region; therefore, any overlapping updates during previous frames are wasted. When the client acquires a frame, the client owns the surface; therefore, the operating system can track only the updated regions and cannot copy desktop updates to the surface. Because of this behavior, we recommend that you minimize the time between the call to release the current frame and the call to acquire the next frame.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIOutputDuplication::ReleaseFrame']/*"/>	
        /// <msdn-id>hh404623</msdn-id>	
        /// <unmanaged>HRESULT IDXGIOutputDuplication::ReleaseFrame()</unmanaged>	
        /// <unmanaged-short>IDXGIOutputDuplication::ReleaseFrame</unmanaged-short>	
        public void ReleaseFrame() {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer,((void**)(*(void**)_nativePointer))[14]);		
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>An <strong><see cref="SharpDX.DXGI.Resource"/></strong> interface allows resource sharing and identifies the memory that a resource resides in.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To find out what type of memory a resource is currently located in, use <strong><see cref="SharpDX.DXGI.Device.QueryResourceResidency"/></strong>. To share resources between processes, use <strong>ID3D10Device::OpenSharedResource</strong>. For information about how to share resources between multiple Windows graphics APIs, including Direct3D 11, Direct2D, Direct3D 10, and Direct3D 9Ex, see Surface Sharing Between Windows Graphics APIs.</p><p>You can retrieve the <strong><see cref="SharpDX.DXGI.Resource"/></strong> interface from any video memory resource that you create from a Direct3D 10 and later function. Any Direct3D object that supports <strong>ID3D10Resource</strong> or <strong><see cref="SharpDX.Direct3D11.Resource"/></strong> also supports <strong><see cref="SharpDX.DXGI.Resource"/></strong>. For example, the Direct3D 2D texture object that you create from <strong><see cref="SharpDX.Direct3D11.Device.CreateTexture2D"/></strong> supports <strong><see cref="SharpDX.DXGI.Resource"/></strong>. You can call <strong>QueryInterface</strong> on the 2D texture object (<strong><see cref="SharpDX.Direct3D11.Texture2D"/></strong>) to retrieve the <strong><see cref="SharpDX.DXGI.Resource"/></strong> interface. For example, to retrieve the <strong><see cref="SharpDX.DXGI.Resource"/></strong> interface from  the 2D texture object, use the following code.</p><pre><see cref="SharpDX.DXGI.Resource"/> * pDXGIResource;	
    /// hr = g_pd3dTexture2D-&gt;QueryInterface(__uuidof(<see cref="SharpDX.DXGI.Resource"/>), (void **)&amp;pDXGIResource);	
    /// </pre><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIResource']/*"/>	
    /// <msdn-id>bb174560</msdn-id>	
    /// <unmanaged>IDXGIResource</unmanaged>	
    /// <unmanaged-short>IDXGIResource</unmanaged-short>	
    [Guid("035f3ab4-482e-4e50-b41f-8a7f8bd8960b")]
    public partial class Resource : SharpDX.DXGI.DeviceChild {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.Resource"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Resource(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.Resource"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.Resource(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.Resource(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>[Starting with Direct3D 11.1, we recommend not to use <strong>GetSharedHandle</strong> anymore to retrieve the handle to a shared resource. Instead, use <strong><see cref="SharpDX.DXGI.Resource1.CreateSharedHandle"/></strong> to get a handle for sharing. To use <strong><see cref="SharpDX.DXGI.Resource1.CreateSharedHandle"/></strong>, you  must create the resource as shared and specify that it uses NT handles (that is, you set the <strong><see cref="SharpDX.Direct3D11.ResourceOptionFlags.SharedNthandle"/></strong> flag). We also recommend that you create shared resources that use NT handles so you can use <strong>CloseHandle</strong>, <strong>DuplicateHandle</strong>, and so on on those shared resources.]</p><p>Gets the handle to a shared resource.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p><strong>GetSharedHandle</strong> returns a handle for the resource that you created as shared (that is, you set the <strong><see cref="SharpDX.Direct3D11.ResourceOptionFlags.Shared"/></strong> with or without the <strong><see cref="SharpDX.Direct3D11.ResourceOptionFlags.SharedKeyedmutex"/></strong> flag). You can pass this handle to the <strong><see cref="SharpDX.Direct3D11.Device.OpenSharedResource"/></strong> method to give another device access to the shared resource. You can also marshal this handle to another process to share a resource with a device in another process. However, this handle is not an NT handle. Therefore, don't use the handle with <strong>CloseHandle</strong>, <strong>DuplicateHandle</strong>, and so on.</p><p>The creator of a shared resource must not destroy the resource until all intended entities have opened the resource. The validity of the handle is tied to the lifetime of the underlying video memory. If no resource objects exist on any devices that refer to this resource, the handle is no longer valid. To extend the lifetime of the handle and video memory, you must open the shared resource on a device.</p><p><strong>GetSharedHandle</strong> can also return handles for resources that were passed into <strong><see cref="SharpDX.Direct3D11.Device.OpenSharedResource"/></strong> to open those resources.</p><p><strong>GetSharedHandle</strong> fails if the resource to which it wants to get a handle is not shared.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIResource::GetSharedHandle']/*"/>	
        /// <msdn-id>bb174562</msdn-id>	
        /// <unmanaged>GetSharedHandle</unmanaged>	
        /// <unmanaged-short>GetSharedHandle</unmanaged-short>	
        /// <unmanaged>HRESULT IDXGIResource::GetSharedHandle([Out] void** pSharedHandle)</unmanaged>
        public System.IntPtr SharedHandle {
                get { System.IntPtr __output__; GetSharedHandle(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// <p>Get or sets the eviction priority.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>The eviction priority is a memory-management variable that is used by DXGI to determine how to manage overcommitted memory.</p><p>Priority levels other than the defined values are used when appropriate. For example, a resource with a priority level of 0x78000001 indicates that the resource is slightly above normal.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIResource::GetEvictionPriority']/*"/>	
        /// <msdn-id>bb174561</msdn-id>	
        /// <unmanaged>GetEvictionPriority / SetEvictionPriority</unmanaged>	
        /// <unmanaged-short>GetEvictionPriority</unmanaged-short>	
        /// <unmanaged>HRESULT IDXGIResource::GetEvictionPriority([Out] unsigned int* pEvictionPriority)</unmanaged>
        public int EvictionPriority {
                get { int __output__; GetEvictionPriority(out __output__); return __output__; }
                set { SetEvictionPriority(value); }
        }
        
        /// <summary>	
        /// <p>[Starting with Direct3D 11.1, we recommend not to use <strong>GetSharedHandle</strong> anymore to retrieve the handle to a shared resource. Instead, use <strong><see cref="SharpDX.DXGI.Resource1.CreateSharedHandle"/></strong> to get a handle for sharing. To use <strong><see cref="SharpDX.DXGI.Resource1.CreateSharedHandle"/></strong>, you  must create the resource as shared and specify that it uses NT handles (that is, you set the <strong><see cref="SharpDX.Direct3D11.ResourceOptionFlags.SharedNthandle"/></strong> flag). We also recommend that you create shared resources that use NT handles so you can use <strong>CloseHandle</strong>, <strong>DuplicateHandle</strong>, and so on on those shared resources.]</p><p>Gets the handle to a shared resource.</p>	
        /// </summary>	
        /// <param name="sharedHandleRef">No documentation.</param>	
        /// <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
        /// <remarks>	
        /// <p><strong>GetSharedHandle</strong> returns a handle for the resource that you created as shared (that is, you set the <strong><see cref="SharpDX.Direct3D11.ResourceOptionFlags.Shared"/></strong> with or without the <strong><see cref="SharpDX.Direct3D11.ResourceOptionFlags.SharedKeyedmutex"/></strong> flag). You can pass this handle to the <strong><see cref="SharpDX.Direct3D11.Device.OpenSharedResource"/></strong> method to give another device access to the shared resource. You can also marshal this handle to another process to share a resource with a device in another process. However, this handle is not an NT handle. Therefore, don't use the handle with <strong>CloseHandle</strong>, <strong>DuplicateHandle</strong>, and so on.</p><p>The creator of a shared resource must not destroy the resource until all intended entities have opened the resource. The validity of the handle is tied to the lifetime of the underlying video memory. If no resource objects exist on any devices that refer to this resource, the handle is no longer valid. To extend the lifetime of the handle and video memory, you must open the shared resource on a device.</p><p><strong>GetSharedHandle</strong> can also return handles for resources that were passed into <strong><see cref="SharpDX.Direct3D11.Device.OpenSharedResource"/></strong> to open those resources.</p><p><strong>GetSharedHandle</strong> fails if the resource to which it wants to get a handle is not shared.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIResource::GetSharedHandle']/*"/>	
        /// <msdn-id>bb174562</msdn-id>	
        /// <unmanaged>HRESULT IDXGIResource::GetSharedHandle([Out] void** pSharedHandle)</unmanaged>	
        /// <unmanaged-short>IDXGIResource::GetSharedHandle</unmanaged-short>	
        internal void GetSharedHandle(out System.IntPtr sharedHandleRef) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* sharedHandleRef_ = &sharedHandleRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, sharedHandleRef_,((void**)(*(void**)_nativePointer))[8]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Get the expected resource usage.</p>	
        /// </summary>	
        /// <param name="usageRef"><dd>  <p>A reference to a usage flag (see DXGI_USAGE). For Direct3D 10, a surface can be used as a shader input or a render-target output.</p> </dd></param>	
        /// <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
        /// <remarks>	
        /// <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIResource::GetUsage']/*"/>	
        /// <msdn-id>bb174563</msdn-id>	
        /// <unmanaged>HRESULT IDXGIResource::GetUsage([In] unsigned int* pUsage)</unmanaged>	
        /// <unmanaged-short>IDXGIResource::GetUsage</unmanaged-short>	
        public void GetUsage(int usageRef) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, &usageRef,((void**)(*(void**)_nativePointer))[9]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Set the priority for evicting the resource from memory.</p>	
        /// </summary>	
        /// <param name="evictionPriority"><dd>  <p>The priority is one of the following values: </p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.DXGI.ResourcePriority.Minimum"/> (0x28000000)</strong></dt> </dl> </td><td> <p>The resource is unused and can be evicted as soon as another resource requires the memory that the resource occupies.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.DXGI.ResourcePriority.Low"/> (0x50000000)</strong></dt> </dl> </td><td> <p>The eviction priority of the resource is low. The placement of the resource is not critical, and minimal work is performed to find a location for the resource. For example, if a GPU can render with a vertex buffer from either local or non-local memory with little difference in performance, that vertex buffer is low priority. Other more critical resources (for example, a render target or texture) can then occupy the faster memory.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.DXGI.ResourcePriority.Normal"/> (0x78000000)</strong></dt> </dl> </td><td> <p>The eviction priority of the resource is normal. The placement of the resource is important, but not critical, for performance. The resource is placed in its preferred location instead of a low-priority resource. </p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.DXGI.ResourcePriority.High"/> (0xa0000000)</strong></dt> </dl> </td><td> <p>The eviction priority of the resource is high. The resource is placed in its preferred location instead of a low-priority or normal-priority resource.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.DXGI.ResourcePriority.Maximum"/> (0xc8000000)</strong></dt> </dl> </td><td> <p>The resource is evicted from memory only if there is no other way of resolving the memory requirement.</p> </td></tr> </table> <p>?</p> </dd></param>	
        /// <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
        /// <remarks>	
        /// <p>The eviction priority is a memory-management variable that is used by DXGI for determining how to populate overcommitted memory.</p><p>You can set priority levels other than the defined values when appropriate. For example, you can set a resource with a priority level of 0x78000001 to indicate that the resource is slightly above normal.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIResource::SetEvictionPriority']/*"/>	
        /// <msdn-id>bb174564</msdn-id>	
        /// <unmanaged>HRESULT IDXGIResource::SetEvictionPriority([In] unsigned int EvictionPriority)</unmanaged>	
        /// <unmanaged-short>IDXGIResource::SetEvictionPriority</unmanaged-short>	
        internal void SetEvictionPriority(int evictionPriority) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, evictionPriority,((void**)(*(void**)_nativePointer))[10]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Get the eviction priority.</p>	
        /// </summary>	
        /// <param name="evictionPriorityRef"><dd>  <p>A reference to the eviction priority, which determines when a resource can be evicted from memory.  </p> <p>The following defined values are possible.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.DXGI.ResourcePriority.Minimum"/> (0x28000000)</strong></dt> </dl> </td><td> <p>The resource is unused and can be evicted as soon as another resource requires the memory that the resource occupies.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.DXGI.ResourcePriority.Low"/> (0x50000000)</strong></dt> </dl> </td><td> <p>The eviction priority of the resource is low. The placement of the resource is not critical, and minimal work is performed to find a location for the resource. For example, if a GPU can render with a vertex buffer from either local or non-local memory with little difference in performance, that vertex buffer is low priority. Other more critical resources (for example, a render target or texture) can then occupy the faster memory.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.DXGI.ResourcePriority.Normal"/> (0x78000000)</strong></dt> </dl> </td><td> <p>The eviction priority of the resource is normal. The placement of the resource is important, but not critical, for performance. The resource is placed in its preferred location instead of a low-priority resource. </p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.DXGI.ResourcePriority.High"/> (0xa0000000)</strong></dt> </dl> </td><td> <p>The eviction priority of the resource is high. The resource is placed in its preferred location instead of a low-priority or normal-priority resource.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.DXGI.ResourcePriority.Maximum"/> (0xc8000000)</strong></dt> </dl> </td><td> <p>The resource is evicted from memory only if there is no other way of resolving the memory requirement.</p> </td></tr> </table> <p>?</p> </dd></param>	
        /// <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
        /// <remarks>	
        /// <p>The eviction priority is a memory-management variable that is used by DXGI to determine how to manage overcommitted memory.</p><p>Priority levels other than the defined values are used when appropriate. For example, a resource with a priority level of 0x78000001 indicates that the resource is slightly above normal.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIResource::GetEvictionPriority']/*"/>	
        /// <msdn-id>bb174561</msdn-id>	
        /// <unmanaged>HRESULT IDXGIResource::GetEvictionPriority([Out] unsigned int* pEvictionPriority)</unmanaged>	
        /// <unmanaged-short>IDXGIResource::GetEvictionPriority</unmanaged-short>	
        internal void GetEvictionPriority(out int evictionPriorityRef) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* evictionPriorityRef_ = &evictionPriorityRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, evictionPriorityRef_,((void**)(*(void**)_nativePointer))[11]);		
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>An <strong><see cref="SharpDX.DXGI.Resource"/></strong> interface allows resource sharing and identifies the memory that a resource resides in.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To find out what type of memory a resource is currently located in, use <strong><see cref="SharpDX.DXGI.Device.QueryResourceResidency"/></strong>. To share resources between processes, use <strong>ID3D10Device::OpenSharedResource</strong>. For information about how to share resources between multiple Windows graphics APIs, including Direct3D 11, Direct2D, Direct3D 10, and Direct3D 9Ex, see Surface Sharing Between Windows Graphics APIs.</p><p>You can retrieve the <strong><see cref="SharpDX.DXGI.Resource"/></strong> interface from any video memory resource that you create from a Direct3D 10 and later function. Any Direct3D object that supports <strong>ID3D10Resource</strong> or <strong><see cref="SharpDX.Direct3D11.Resource"/></strong> also supports <strong><see cref="SharpDX.DXGI.Resource"/></strong>. For example, the Direct3D 2D texture object that you create from <strong><see cref="SharpDX.Direct3D11.Device.CreateTexture2D"/></strong> supports <strong><see cref="SharpDX.DXGI.Resource"/></strong>. You can call <strong>QueryInterface</strong> on the 2D texture object (<strong><see cref="SharpDX.Direct3D11.Texture2D"/></strong>) to retrieve the <strong><see cref="SharpDX.DXGI.Resource"/></strong> interface. For example, to retrieve the <strong><see cref="SharpDX.DXGI.Resource"/></strong> interface from  the 2D texture object, use the following code.</p><pre><see cref="SharpDX.DXGI.Resource"/> * pDXGIResource;	
    /// hr = g_pd3dTexture2D-&gt;QueryInterface(__uuidof(<see cref="SharpDX.DXGI.Resource"/>), (void **)&amp;pDXGIResource);	
    /// </pre><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIResource1']/*"/>	
    /// <msdn-id>bb174560</msdn-id>	
    /// <unmanaged>IDXGIResource1</unmanaged>	
    /// <unmanaged-short>IDXGIResource1</unmanaged-short>	
    [Guid("30961379-4609-4a41-998e-54fe567ee0c1")]
    public partial class Resource1 : SharpDX.DXGI.Resource {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.Resource1"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Resource1(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.Resource1"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.Resource1(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.Resource1(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Creates a subresource surface object.</p>	
        /// </summary>	
        /// <param name="index"><dd> <p>The index of the subresource surface object to enumerate.</p> </dd></param>	
        /// <param name="surfaceOut"><dd> <p>The address of a reference to a <strong><see cref="SharpDX.DXGI.Surface2"/></strong> interface that represents the created subresource surface object at the position specified by the <em>index</em> parameter.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; otherwise, returns one of the following values:</p><ul> <li><see cref="SharpDX.DXGI.ResultCode.InvalidCall"/> if the index is out of range or if the subresource is not a valid surface.</li> <li>E_OUTOFMEMORY if insufficient memory is available to create the subresource surface object.</li> </ul><p>A subresource is a valid surface if the original resource would have been a valid surface had its array size been equal to 1.</p></returns>	
        /// <remarks>	
        /// <p>Subresource surface objects implement the <strong><see cref="SharpDX.DXGI.Surface2"/></strong> interface, which inherits from  <strong><see cref="SharpDX.DXGI.Surface1"/></strong> and indirectly <strong><see cref="SharpDX.DXGI.Surface"/></strong>.  Therefore, the GDI-interoperable methods of <strong><see cref="SharpDX.DXGI.Surface1"/></strong> work if the original resource interface object was created with the GDI-interoperable flag (<strong><see cref="SharpDX.Direct3D11.ResourceOptionFlags.GdiCompatible"/></strong>).</p><p><strong>CreateSubresourceSurface</strong> creates a subresource surface that is based on the resource interface on which <strong>CreateSubresourceSurface</strong> is called. For example, if the original resource interface object is a 2D texture, the created subresource surface is also a 2D texture.</p><p>You can use <strong>CreateSubresourceSurface</strong> to create parts of  a stereo resource so you can use Direct2D on either the left or right part of the stereo resource.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIResource1::CreateSubresourceSurface']/*"/>	
        /// <msdn-id>hh404627</msdn-id>	
        /// <unmanaged>HRESULT IDXGIResource1::CreateSubresourceSurface([In] unsigned int index,[Out, Fast] IDXGISurface2** ppSurface)</unmanaged>	
        /// <unmanaged-short>IDXGIResource1::CreateSubresourceSurface</unmanaged-short>	
        internal void CreateSubresourceSurface(int index, SharpDX.DXGI.Surface2 surfaceOut) {
            unsafe {
                IntPtr surfaceOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, index, &surfaceOut_,((void**)(*(void**)_nativePointer))[12]);		
                ((SharpDX.DXGI.Surface2)surfaceOut).NativePointer = surfaceOut_;
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Creates a handle to a shared resource. You can then use the returned handle with multiple Direct3D devices. </p>	
        /// </summary>	
        /// <param name="attributesRef"><dd> <p>A reference to a <strong><see cref="SharpDX.Win32.SecurityAttributes"/></strong> structure that contains two separate but related data members: an optional security descriptor, and a Boolean  value that determines whether child processes can inherit the returned handle.</p> <p>Set this parameter to <strong><c>null</c></strong> if you want child processes that the  application might create to not  inherit  the handle returned by  <strong>CreateSharedHandle</strong>, and if you want the resource that is associated with the returned handle to get a default security  descriptor.</p> <p>The <strong>lpSecurityDescriptor</strong> member of the structure specifies a  <strong>SECURITY_DESCRIPTOR</strong> for the resource. Set  this member to <strong><c>null</c></strong> if you want the runtime to assign a default security descriptor to the resource that is associated with the returned handle. The ACLs in the default security descriptor for the resource come from the primary or impersonation token of the creator. For more info, see Synchronization Object Security and Access Rights.</p> </dd></param>	
        /// <param name="dwAccess"><dd> <p>The requested access rights to the resource.  In addition to the generic access rights, DXGI defines the following values:</p> <ul> <li><strong><see cref="SharpDX.DXGI.SharedResourceFlags.Read"/></strong> ( 0x80000000L ) - specifies read access to the resource.</li> <li><strong><see cref="SharpDX.DXGI.SharedResourceFlags.Write"/></strong> ( 1 ) - specifies  write access to the resource.</li> </ul> <p>You can combine these values by using a bitwise OR operation.</p> </dd></param>	
        /// <param name="lpName"><dd> <p>The name of the resource to share. The name is limited to MAX_PATH characters. Name comparison is case sensitive.  You will need the  resource name if you  call the <strong><see cref="SharpDX.Direct3D11.Device1.OpenSharedResourceByName"/></strong> method to access the shared resource by name. If you instead  call the <strong><see cref="SharpDX.Direct3D11.Device1.OpenSharedResource1"/></strong> method to access the shared resource by handle, set this parameter to <strong><c>null</c></strong>.</p> <p>If <em>lpName</em> matches the name of an existing resource, <strong>CreateSharedHandle</strong> fails with <see cref="SharpDX.DXGI.ResultCode.NameAlreadyExists"/>. This occurs because these objects share the same namespace.</p> <p>The name can have a "Global\" or "Local\" prefix to explicitly create the object in the global or session namespace. The remainder of the name can contain any character except the backslash character (\). For more information, see Kernel Object Namespaces. Fast user switching is implemented using Terminal Services sessions. Kernel object names must follow the guidelines outlined for Terminal Services so that applications can support multiple users.</p> <p>The object can be created in a private namespace. For more information, see Object Namespaces.</p> </dd></param>	
        /// <returns><dd> <p>A reference to a variable that receives the NT HANDLE value to the resource to share.  You can  use this handle in calls to access the resource.</p> </dd></returns>	
        /// <remarks>	
        /// <p><strong>CreateSharedHandle</strong> only returns the NT handle when you  created the resource as shared and specified that it uses NT handles (that is, you set the <strong><see cref="SharpDX.Direct3D11.ResourceOptionFlags.SharedNthandle"/></strong> and <strong><see cref="SharpDX.Direct3D11.ResourceOptionFlags.SharedKeyedmutex"/></strong> flags). If you  created the resource as shared and specified that it uses NT handles, you must use <strong>CreateSharedHandle</strong> to get a handle for sharing.  In this situation, you can't use the <strong><see cref="SharpDX.DXGI.Resource.GetSharedHandle"/></strong> method because it will fail.</p><p>You can pass the handle that  <strong>CreateSharedHandle</strong> returns in a call to the <strong><see cref="SharpDX.Direct3D11.Device1.OpenSharedResource1"/></strong> method to give a device access to a shared resource that you created on a different device.</p><p>Because the handle that  <strong>CreateSharedHandle</strong> returns is an NT handle, you can use the handle with <strong>CloseHandle</strong>, <strong>DuplicateHandle</strong>, and so on. You can call <strong>CreateSharedHandle</strong> only once for a shared resource; later calls fail.  If you need more handles to the same shared resource, call <strong>DuplicateHandle</strong>. When you no longer need the shared resource handle, call <strong>CloseHandle</strong> to close the handle, in order to avoid memory leaks.</p><p>If you pass a name for the resource to <em>lpName</em> when you call <strong>CreateSharedHandle</strong> to share the resource, you can subsequently pass this name in a call to the <strong><see cref="SharpDX.Direct3D11.Device1.OpenSharedResourceByName"/></strong> method to give another device access to the shared resource. If you use a named resource, a malicious user can use this named resource before you do and prevent your app from starting. To prevent this situation, create a randomly named resource and store the name so that it can only be obtained by an authorized user. Alternatively, you can use a file for this purpose. To limit your app to one instance per user, create a locked file in the user's profile directory.</p><p>If you  created the resource as shared and did not specify that it uses NT handles, you cannot use <strong>CreateSharedHandle</strong> to get a handle for sharing because <strong>CreateSharedHandle</strong> will fail.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGIResource1::CreateSharedHandle']/*"/>	
        /// <msdn-id>hh404626</msdn-id>	
        /// <unmanaged>HRESULT IDXGIResource1::CreateSharedHandle([In, Optional] const SECURITY_ATTRIBUTES* pAttributes,[In] DXGI_SHARED_RESOURCE_FLAGS dwAccess,[In, Optional] const wchar_t* lpName,[Out] void** pHandle)</unmanaged>	
        /// <unmanaged-short>IDXGIResource1::CreateSharedHandle</unmanaged-short>	
        internal System.IntPtr CreateSharedHandle(SharpDX.Win32.SecurityAttributes? attributesRef, SharpDX.DXGI.SharedResourceFlags dwAccess, string lpName) {
            unsafe {
                SharpDX.Win32.SecurityAttributes attributesRef_;
                if (attributesRef.HasValue)
                    attributesRef_ = attributesRef.Value;				
                IntPtr lpName_ = Utilities.StringToHGlobalUni(lpName);
                System.IntPtr handleRef;
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, (attributesRef.HasValue)?&attributesRef_:(void*)IntPtr.Zero, unchecked((int)dwAccess), (void*)lpName_, &handleRef,((void**)(*(void**)_nativePointer))[13]);		
                Marshal.FreeHGlobal(lpName_ );
                __result__.CheckError();
                return handleRef;
            }
        }
    }
    /// <summary>	
    /// <p>The  <strong><see cref="SharpDX.DXGI.Surface"/></strong> interface implements methods for image-data objects.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>An image-data object is a 2D section of memory, commonly called a surface. To get the surface from an output, call <strong><see cref="SharpDX.DXGI.Output.CopyDisplaySurfaceTo"/></strong>. </p><p>The runtime automatically creates an <strong><see cref="SharpDX.DXGI.Surface"/></strong> interface when it creates a Direct3D resource object that represents a surface. For example, the runtime creates an <strong><see cref="SharpDX.DXGI.Surface"/></strong> interface when you call <strong><see cref="SharpDX.Direct3D11.Device.CreateTexture2D"/></strong> or <strong>ID3D10Device::CreateTexture2D</strong> to create a 2D texture. To retrieve the <strong><see cref="SharpDX.DXGI.Surface"/></strong> interface that represents the 2D texture surface, call <strong>ID3D11Texture2D::QueryInterface</strong> or <strong>ID3D10Texture2D::QueryInterface</strong>. In this call, you must pass the identifier of <strong><see cref="SharpDX.DXGI.Surface"/></strong>. If the 2D texture has only a single MIP-map level and does not consist of an array of textures, <strong>QueryInterface</strong> succeeds and returns a reference to the <strong><see cref="SharpDX.DXGI.Surface"/></strong> interface reference. Otherwise, <strong>QueryInterface</strong> fails and does not return the reference to <strong><see cref="SharpDX.DXGI.Surface"/></strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISurface']/*"/>	
    /// <msdn-id>bb174565</msdn-id>	
    /// <unmanaged>IDXGISurface</unmanaged>	
    /// <unmanaged-short>IDXGISurface</unmanaged-short>	
    [Guid("cafcb56c-6ac3-4889-bf47-9e23bbd260ec")]
    public partial class Surface : SharpDX.DXGI.DeviceChild {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.Surface"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Surface(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.Surface"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.Surface(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.Surface(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Get a description of the surface.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISurface::GetDesc']/*"/>	
        /// <msdn-id>bb174566</msdn-id>	
        /// <unmanaged>GetDesc</unmanaged>	
        /// <unmanaged-short>GetDesc</unmanaged-short>	
        /// <unmanaged>HRESULT IDXGISurface::GetDesc([Out] DXGI_SURFACE_DESC* pDesc)</unmanaged>
        public SharpDX.DXGI.SurfaceDescription Description {
                get { SharpDX.DXGI.SurfaceDescription __output__; GetDescription(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// <p>Get a description of the surface.</p>	
        /// </summary>	
        /// <param name="descRef"><dd>  <p>A reference to the surface description (see <strong><see cref="SharpDX.DXGI.SurfaceDescription"/></strong>).</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; otherwise, returns one of the error codes that are described in the DXGI_ERROR topic.</p></returns>	
        /// <remarks>	
        /// <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISurface::GetDesc']/*"/>	
        /// <msdn-id>bb174566</msdn-id>	
        /// <unmanaged>HRESULT IDXGISurface::GetDesc([Out] DXGI_SURFACE_DESC* pDesc)</unmanaged>	
        /// <unmanaged-short>IDXGISurface::GetDesc</unmanaged-short>	
        internal void GetDescription(out SharpDX.DXGI.SurfaceDescription descRef) {
            unsafe {
                descRef = new SharpDX.DXGI.SurfaceDescription();
                SharpDX.Result __result__;
                fixed (void* descRef_ = &descRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, descRef_,((void**)(*(void**)_nativePointer))[8]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Get a reference to the data contained in the surface, and deny GPU access to the surface.</p>	
        /// </summary>	
        /// <param name="lockedRectRef"><dd>  <p>A reference to the surface data (see <strong><see cref="SharpDX.DXGI.MappedRectangle"/></strong>).</p> </dd></param>	
        /// <param name="mapFlags"><dd>  <p>CPU read-write flags. These flags can be combined with a logical OR. </p> <ul> <li><see cref="SharpDX.DXGI.MapFlags.Read"/> - Allow CPU read access.</li> <li><see cref="SharpDX.DXGI.MapFlags.Write"/> - Allow CPU write access.</li> <li><see cref="SharpDX.DXGI.MapFlags.Discard"/> - Discard the previous contents of a resource when it is mapped.</li> </ul> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; otherwise, returns one of the error codes that are described in the DXGI_ERROR topic.</p></returns>	
        /// <remarks>	
        /// <p>Use <strong><see cref="SharpDX.DXGI.Surface.Map"/></strong> to access a surface from the CPU. To release a mapped surface (and allow GPU access) call <strong><see cref="SharpDX.DXGI.Surface.Unmap"/></strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISurface::Map']/*"/>	
        /// <msdn-id>bb174567</msdn-id>	
        /// <unmanaged>HRESULT IDXGISurface::Map([Out] DXGI_MAPPED_RECT* pLockedRect,[In] unsigned int MapFlags)</unmanaged>	
        /// <unmanaged-short>IDXGISurface::Map</unmanaged-short>	
        internal void Map(out SharpDX.DXGI.MappedRectangle lockedRectRef, int mapFlags) {
            unsafe {
                lockedRectRef = new SharpDX.DXGI.MappedRectangle();
                SharpDX.Result __result__;
                fixed (void* lockedRectRef_ = &lockedRectRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, lockedRectRef_, mapFlags,((void**)(*(void**)_nativePointer))[9]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Invalidate the reference to the surface retrieved by <strong><see cref="SharpDX.DXGI.Surface.Map"/></strong> and re-enable GPU access to the resource.</p>	
        /// </summary>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; otherwise, returns one of the error codes that are described in the DXGI_ERROR topic.</p></returns>	
        /// <remarks>	
        /// <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISurface::Unmap']/*"/>	
        /// <msdn-id>bb174568</msdn-id>	
        /// <unmanaged>HRESULT IDXGISurface::Unmap()</unmanaged>	
        /// <unmanaged-short>IDXGISurface::Unmap</unmanaged-short>	
        public void Unmap() {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer,((void**)(*(void**)_nativePointer))[10]);		
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>The <strong><see cref="SharpDX.DXGI.Surface1"/></strong> interface extends the <strong><see cref="SharpDX.DXGI.Surface"/></strong> by adding support for using Windows Graphics Device Interface (GDI) to render to a Microsoft DirectX Graphics Infrastructure (DXGI) surface.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This interface is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>An image-data object is a 2D section of memory, commonly called a surface. To get the surface from an output, call <strong><see cref="SharpDX.DXGI.Output.CopyDisplaySurfaceTo"/></strong>. Then, call <strong>QueryInterface</strong> on the <strong><see cref="SharpDX.DXGI.Surface"/></strong> object that <strong><see cref="SharpDX.DXGI.Output.CopyDisplaySurfaceTo"/></strong> returns to retrieve the <strong><see cref="SharpDX.DXGI.Surface1"/></strong> interface.</p><p>Any object that supports <strong><see cref="SharpDX.DXGI.Surface"/></strong> also supports <strong><see cref="SharpDX.DXGI.Surface1"/></strong>.</p><p>The runtime automatically creates an <strong><see cref="SharpDX.DXGI.Surface1"/></strong> interface when it creates a Direct3D resource object that represents a surface. For example, the runtime creates an <strong><see cref="SharpDX.DXGI.Surface1"/></strong> interface when you call <strong><see cref="SharpDX.Direct3D11.Device.CreateTexture2D"/></strong> or <strong>ID3D10Device::CreateTexture2D</strong> to create a 2D texture. To retrieve the <strong><see cref="SharpDX.DXGI.Surface1"/></strong> interface that represents the 2D texture surface, call <strong>ID3D11Texture2D::QueryInterface</strong> or <strong>ID3D10Texture2D::QueryInterface</strong>. In this call, you must pass the identifier of <strong><see cref="SharpDX.DXGI.Surface1"/></strong>. If the 2D texture has only a single MIP-map level and does not consist of an array of textures, <strong>QueryInterface</strong> succeeds and returns a reference to the <strong><see cref="SharpDX.DXGI.Surface1"/></strong> interface reference. Otherwise, <strong>QueryInterface</strong> fails and does not return the reference to <strong><see cref="SharpDX.DXGI.Surface1"/></strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISurface1']/*"/>	
    /// <msdn-id>ff471343</msdn-id>	
    /// <unmanaged>IDXGISurface1</unmanaged>	
    /// <unmanaged-short>IDXGISurface1</unmanaged-short>	
    [Guid("4AE63092-6327-4c1b-80AE-BFE12EA32B86")]
    public partial class Surface1 : SharpDX.DXGI.Surface {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.Surface1"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Surface1(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.Surface1"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.Surface1(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.Surface1(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Returns a device context (DC) that allows you to render to a Microsoft DirectX Graphics Infrastructure (DXGI) surface using Windows Graphics Device Interface (GDI).</p>	
        /// </summary>	
        /// <param name="discard"><dd>  <p>A Boolean value that specifies whether to preserve Direct3D contents in the GDI DC. <strong>TRUE</strong> directs the runtime not to preserve Direct3D contents in the GDI DC; that is, the runtime discards the Direct3D contents. <strong><see cref="SharpDX.Result.False"/></strong> guarantees that Direct3D contents are available in the GDI DC.</p> </dd></param>	
        /// <returns><dd>  <p>A reference to an <strong><see cref="System.IntPtr"/></strong> handle that represents the current device context for GDI rendering.</p> </dd></returns>	
        /// <remarks>	
        /// <p>This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>After you use the <strong>GetDC</strong> method to retrieve a DC, you can render to the DXGI surface by using GDI.   The <strong>GetDC</strong> method readies the surface for GDI rendering and allows inter-operation between DXGI and GDI technologies.  </p><p>Keep the following in mind when using this method:</p><ul> <li>You must create the surface by using the <strong><see cref="SharpDX.Direct3D11.ResourceOptionFlags.GdiCompatible"/></strong> flag for a surface or by using the <strong><see cref="SharpDX.DXGI.SwapChainFlags.GdiCompatible"/></strong> flag for swap chains,  otherwise this method fails.</li> <li>You must release the device and call the <strong><see cref="SharpDX.DXGI.Surface1.ReleaseDC_"/></strong> method before you issue any new Direct3D commands.</li> <li>This method fails if an outstanding DC has already been created by this method.</li> <li>The format for the surface or swap chain must be <strong><see cref="SharpDX.DXGI.Format.B8G8R8A8_UNorm_SRgb"/></strong> or <strong><see cref="SharpDX.DXGI.Format.B8G8R8A8_UNorm"/></strong>.</li> <li>On <strong>GetDC</strong>, the render target in the output merger of the Direct3D pipeline is unbound from the surface.   You must call the <strong><see cref="SharpDX.Direct3D11.OutputMergerStage.SetRenderTargets"/></strong> method on the device prior to Direct3D rendering after GDI rendering.</li> <li>Prior to resizing buffers you must release all outstanding DCs.</li> </ul><p> You can also call <strong>GetDC</strong> on the back buffer at index 0 of a swap chain by obtaining an <strong><see cref="SharpDX.DXGI.Surface1"/></strong> from the swap chain.   The following code illustrates the process.</p><pre> <see cref="SharpDX.DXGI.SwapChain"/>* g_pSwapChain = <c>null</c>;	
        /// <see cref="SharpDX.DXGI.Surface1"/>* g_pSurface1 = <c>null</c>;	
        /// ...	
        /// //Setup the device and and swapchain	
        /// g_pSwapChain-&gt;GetBuffer(0, __uuidof(<see cref="SharpDX.DXGI.Surface1"/>), (void**) &amp;g_pSurface1);	
        /// g_pSurface1-&gt;GetDC( <see cref="SharpDX.Result.False"/>, &amp;g_hDC );	
        /// ...      	
        /// //Draw on the DC using GDI	
        /// ...	
        /// //When finish drawing release the DC	
        /// g_pSurface1-&gt;ReleaseDC( <c>null</c> ); </pre>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISurface1::GetDC']/*"/>	
        /// <msdn-id>ff471345</msdn-id>	
        /// <unmanaged>HRESULT IDXGISurface1::GetDC([In] BOOL Discard,[Out] HDC* phdc)</unmanaged>	
        /// <unmanaged-short>IDXGISurface1::GetDC</unmanaged-short>	
        public System.IntPtr GetDC(SharpDX.Mathematics.Interop.RawBool discard) {
            unsafe {
                System.IntPtr hdcRef;
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint9(_nativePointer, discard, &hdcRef,((void**)(*(void**)_nativePointer))[11]);		
                __result__.CheckError();
                return hdcRef;
            }
        }
        
        /// <summary>	
        /// <p>Releases the GDI device context (DC) that is associated with the current surface and allows you to use Direct3D to render.</p>	
        /// </summary>	
        /// <param name="dirtyRectRef"><dd>  <p>A reference to a <strong><see cref="SharpDX.Mathematics.Interop.RawRectangle"/></strong> structure that identifies the dirty region of the surface.   A dirty region is any part of the surface that you used for GDI rendering and that you want to preserve.  This area is used as a performance hint to graphics subsystem in certain scenarios.  Do not use this parameter to restrict rendering to the specified rectangular region.  If you pass in <strong><c>null</c></strong>, <strong>ReleaseDC</strong> considers the whole surface as dirty.  Otherwise, <strong>ReleaseDC</strong> uses the area specified by the <see cref="SharpDX.Mathematics.Interop.RawRectangle"/> as a performance hint to indicate what areas have been manipulated by GDI rendering.</p> <p>You can pass a reference to an empty <strong><see cref="SharpDX.Mathematics.Interop.RawRectangle"/></strong> structure (a rectangle with no position or area) if you didn't change any content.</p> </dd></param>	
        /// <returns><p>If this method succeeds, it returns <strong><see cref="SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="SharpDX.Result"/></strong> error code.</p></returns>	
        /// <remarks>	
        /// <p>This method is not supported by DXGI 1.0, which shipped in Windows?Vista and Windows Server?2008. DXGI 1.1 support is required, which is available on  Windows?7, Windows Server?2008?R2, and as an update to Windows?Vista with Service Pack?2 (SP2) (KB 971644) and Windows Server?2008 (KB 971512).</p><p>Use the <strong>ReleaseDC</strong> method to release the DC and indicate that your application finished all GDI rendering to this surface.   You must call the <strong>ReleaseDC</strong> method before you can use Direct3D to perform additional rendering.</p><p>Prior to resizing buffers you must release all outstanding DCs.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISurface1::ReleaseDC']/*"/>	
        /// <msdn-id>ff471346</msdn-id>	
        /// <unmanaged>HRESULT IDXGISurface1::ReleaseDC([In, Optional] RECT* pDirtyRect)</unmanaged>	
        /// <unmanaged-short>IDXGISurface1::ReleaseDC</unmanaged-short>	
        internal void ReleaseDC_(SharpDX.Mathematics.Interop.RawRectangle? dirtyRectRef) {
            unsafe {
                SharpDX.Mathematics.Interop.RawRectangle dirtyRectRef_;
                if (dirtyRectRef.HasValue)
                    dirtyRectRef_ = dirtyRectRef.Value;				
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, (dirtyRectRef.HasValue)?&dirtyRectRef_:(void*)IntPtr.Zero,((void**)(*(void**)_nativePointer))[12]);		
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>The <strong><see cref="SharpDX.DXGI.Surface2"/></strong> interface extends the <strong><see cref="SharpDX.DXGI.Surface1"/></strong> interface by adding support for subresource surfaces and getting a handle to a shared resource.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>An image-data object is a 2D section of memory, commonly called a surface. To get the surface from an output, call <strong><see cref="SharpDX.DXGI.Output.CopyDisplaySurfaceTo"/></strong>. Then, call <strong>QueryInterface</strong> on the <strong><see cref="SharpDX.DXGI.Surface"/></strong> object that <strong><see cref="SharpDX.DXGI.Output.CopyDisplaySurfaceTo"/></strong> returns to retrieve the <strong><see cref="SharpDX.DXGI.Surface2"/></strong> interface.</p><p>Any object that supports <strong><see cref="SharpDX.DXGI.Surface"/></strong> also supports <strong><see cref="SharpDX.DXGI.Surface2"/></strong>.</p><p>The runtime automatically creates an <strong><see cref="SharpDX.DXGI.Surface2"/></strong> interface when it creates a Direct3D resource object that represents a surface. For example, the runtime creates an <strong><see cref="SharpDX.DXGI.Surface2"/></strong> interface when you call <strong><see cref="SharpDX.Direct3D11.Device.CreateTexture2D"/></strong> to create a 2D texture. To retrieve the <strong><see cref="SharpDX.DXGI.Surface2"/></strong> interface that represents the 2D texture surface, call <strong>ID3D11Texture2D::QueryInterface</strong>. In this call, you must pass the identifier of <strong><see cref="SharpDX.DXGI.Surface2"/></strong>. If the 2D texture has only a single MIP-map level and does not consist of an array of textures, <strong>QueryInterface</strong> succeeds and returns a reference to the <strong><see cref="SharpDX.DXGI.Surface2"/></strong> interface reference. Otherwise, <strong>QueryInterface</strong> fails and does not return the reference to <strong><see cref="SharpDX.DXGI.Surface2"/></strong>.</p><p>You can call the <strong><see cref="SharpDX.DXGI.Resource1.CreateSubresourceSurface"/></strong> method to create an <strong><see cref="SharpDX.DXGI.Surface2"/></strong> interface that refers to one subresource of a stereo resource.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISurface2']/*"/>	
    /// <msdn-id>hh404628</msdn-id>	
    /// <unmanaged>IDXGISurface2</unmanaged>	
    /// <unmanaged-short>IDXGISurface2</unmanaged-short>	
    [Guid("aba496dd-b617-4cb8-a866-bc44d7eb1fa2")]
    public partial class Surface2 : SharpDX.DXGI.Surface1 {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.Surface2"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Surface2(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.Surface2"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.Surface2(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.Surface2(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Gets the parent resource and subresource index that support a subresource surface.</p>	
        /// </summary>	
        /// <param name="riid"><dd> <p>The globally unique identifier (<see cref="System.Guid"/>)  of the requested interface type.</p> </dd></param>	
        /// <param name="parentResourceOut"><dd> <p>A reference to a buffer that receives a reference to the parent resource object for the subresource surface.</p> </dd></param>	
        /// <param name="subresourceIndexRef"><dd> <p>A reference to a variable that receives the index of the subresource surface.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; otherwise, returns one of the following values:</p><ul> <li>E_NOINTERFACE if the object does not implement the <see cref="System.Guid"/> that the <em>riid</em> parameter specifies.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul></returns>	
        /// <remarks>	
        /// <p>For subresource surface objects that the <strong><see cref="SharpDX.DXGI.Resource1.CreateSubresourceSurface"/></strong> method creates, <strong>GetResource</strong> simply returns the values that were used to create the subresource surface.</p><p>Current objects that implement <strong><see cref="SharpDX.DXGI.Surface"/></strong> are either resources or views.  <strong>GetResource</strong> for these objects returns ?this? or the resource that supports the view respectively.  In this situation, the subresource index is 0.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISurface2::GetResource']/*"/>	
        /// <msdn-id>hh404629</msdn-id>	
        /// <unmanaged>HRESULT IDXGISurface2::GetResource([In] const GUID&amp; riid,[Out] void** ppParentResource,[Out] unsigned int* pSubresourceIndex)</unmanaged>	
        /// <unmanaged-short>IDXGISurface2::GetResource</unmanaged-short>	
        public void GetResource(System.Guid riid, out System.IntPtr parentResourceOut, out int subresourceIndexRef) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* parentResourceOut_ = &parentResourceOut)
                    fixed (void* subresourceIndexRef_ = &subresourceIndexRef)
                        __result__= 
        				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, &riid, parentResourceOut_, subresourceIndexRef_,((void**)(*(void**)_nativePointer))[13]);		
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>An <strong><see cref="SharpDX.DXGI.SwapChain"/></strong> interface implements one or more <strong>surfaces</strong> for storing rendered data before presenting it to an output.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>You can create a swap chain by 	
    /// calling <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForHwnd"/></strong>, <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForCoreWindow"/></strong>, or <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForComposition"/></strong>. You can also create a swap chain when you call <strong>D3D11CreateDeviceAndSwapChain</strong>; however, you can then only access the sub-set of swap-chain functionality that the <strong><see cref="SharpDX.DXGI.SwapChain"/></strong> interface provides.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain']/*"/>	
    /// <msdn-id>bb174569</msdn-id>	
    /// <unmanaged>IDXGISwapChain</unmanaged>	
    /// <unmanaged-short>IDXGISwapChain</unmanaged-short>	
    [Guid("310d36a0-d2e7-4c0a-aa04-6a9d23b8886a")]
    public partial class SwapChain : SharpDX.DXGI.DeviceChild {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.SwapChain"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public SwapChain(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.SwapChain"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.SwapChain(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.SwapChain(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>[Starting with Direct3D 11.1, we recommend not to use <strong>GetDesc</strong> anymore to get a description of the swap chain. Instead, use <strong><see cref="SharpDX.DXGI.SwapChain1.GetDescription1"/></strong>.]</p><p>Get a description of the swap chain.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain::GetDesc']/*"/>	
        /// <msdn-id>bb174572</msdn-id>	
        /// <unmanaged>GetDesc</unmanaged>	
        /// <unmanaged-short>GetDesc</unmanaged-short>	
        /// <unmanaged>HRESULT IDXGISwapChain::GetDesc([Out] DXGI_SWAP_CHAIN_DESC* pDesc)</unmanaged>
        public SharpDX.DXGI.SwapChainDescription Description {
                get { SharpDX.DXGI.SwapChainDescription __output__; GetDescription(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// <p>Get the output (the display monitor) that contains the majority of the client area of the target window.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>If the method succeeds, the output interface will be filled and its reference count incremented. When you are finished with it, be sure to release the interface to avoid a memory leak.</p><p>The output is also owned by the adapter on which the swap chain's device was created.</p><p>You cannot call <strong>GetContainingOutput</strong> on a windowless swap chain that you created with <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForComposition"/></strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain::GetContainingOutput']/*"/>	
        /// <msdn-id>bb174571</msdn-id>	
        /// <unmanaged>GetContainingOutput</unmanaged>	
        /// <unmanaged-short>GetContainingOutput</unmanaged-short>	
        /// <unmanaged>HRESULT IDXGISwapChain::GetContainingOutput([Out] IDXGIOutput** ppOutput)</unmanaged>
        public SharpDX.DXGI.Output ContainingOutput {
                get { SharpDX.DXGI.Output __output__; GetContainingOutput(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// <p>Gets performance statistics about the last render frame.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>You cannot use <strong>GetFrameStatistics</strong> for swap chains that both use the bit-block transfer (bitblt) presentation model and draw in windowed mode.</p><p>You can only use <strong>GetFrameStatistics</strong> for swap chains that either use the flip presentation model or draw in full-screen mode. You set the <strong><see cref="SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> value in the <strong>SwapEffect</strong> member of the <strong><see cref="SharpDX.DXGI.SwapChainDescription1"/></strong> structure to specify that the swap chain uses the flip presentation model.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain::GetFrameStatistics']/*"/>	
        /// <msdn-id>bb174573</msdn-id>	
        /// <unmanaged>GetFrameStatistics</unmanaged>	
        /// <unmanaged-short>GetFrameStatistics</unmanaged-short>	
        /// <unmanaged>HRESULT IDXGISwapChain::GetFrameStatistics([Out] DXGI_FRAME_STATISTICS* pStats)</unmanaged>
        public SharpDX.DXGI.FrameStatistics FrameStatistics {
                get { SharpDX.DXGI.FrameStatistics __output__; GetFrameStatistics(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// <p>Gets the number of times  that <strong><see cref="SharpDX.DXGI.SwapChain.Present"/></strong> or <strong><see cref="SharpDX.DXGI.SwapChain1.Present1"/></strong> has been called.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>For info about presentation statistics for a frame, see <strong><see cref="SharpDX.DXGI.FrameStatistics"/></strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain::GetLastPresentCount']/*"/>	
        /// <msdn-id>bb174575</msdn-id>	
        /// <unmanaged>GetLastPresentCount</unmanaged>	
        /// <unmanaged-short>GetLastPresentCount</unmanaged-short>	
        /// <unmanaged>HRESULT IDXGISwapChain::GetLastPresentCount([Out] unsigned int* pLastPresentCount)</unmanaged>
        public int LastPresentCount {
                get { int __output__; GetLastPresentCount(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// <p>[Starting with Direct3D 11.1, we recommend not to use <strong>Present</strong> anymore to present a rendered image. Instead, use <strong><see cref="SharpDX.DXGI.SwapChain1.Present1"/></strong>. For more info, see Remarks.]</p><p>Presents a rendered image to the user.</p>	
        /// </summary>	
        /// <param name="syncInterval">No documentation.</param>	
        /// <param name="flags">No documentation.</param>	
        /// <returns><p>Possible return values include: <see cref="SharpDX.Result.Ok"/>, <see cref="SharpDX.DXGI.ResultCode.DeviceReset"/> or <see cref="SharpDX.DXGI.ResultCode.DeviceRemoved"/> (see DXGI_ERROR), <see cref="SharpDX.DXGI.DXGIStatus.Occluded"/> (see <see cref="SharpDX.DXGI.DXGIStatus"/>), or D3DDDIERR_DEVICEREMOVED.  </p><p><strong>Note</strong>??The <strong>Present</strong> method can return either <see cref="SharpDX.DXGI.ResultCode.DeviceRemoved"/> or D3DDDIERR_DEVICEREMOVED if a video card has been physically removed from the computer, or a driver upgrade for the video card has occurred.</p></returns>	
        /// <remarks>	
        /// <p>Starting with Direct3D 11.1, we recommend to instead use <strong><see cref="SharpDX.DXGI.SwapChain1.Present1"/></strong> because you can then use dirty rectangles and the scroll rectangle in the swap chain presentation and as such use less memory bandwidth and as a result less system power. For more info about using dirty rectangles and the scroll rectangle in swap chain presentation, see Using dirty rectangles and the scroll rectangle in swap chain presentation.</p><p>For the best performance when flipping swap-chain buffers in a full-screen application, see Full-Screen Application Performance Hints.</p><p>Because calling <strong>Present</strong> might cause the render thread to wait on the message-pump thread, be careful when calling this method in an application that uses multiple threads. For more details, see Multithreading Considerations.</p><table> <tr><td> <p>Differences between Direct3D 9 and Direct3D 10:</p> <p>Specifying <strong><see cref="SharpDX.DXGI.PresentFlags.Test"/></strong> in the <em>Flags</em> parameter is analogous to <strong>IDirect3DDevice9::TestCooperativeLevel</strong> in Direct3D 9.</p> </td></tr> </table><p>?</p><p>For flip presentation model swap chains that you create with the <strong><see cref="SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> value set, a successful presentation unbinds back buffer 0 from the graphics pipeline, except for when you pass the <strong><see cref="SharpDX.DXGI.PresentFlags.DoNotSequence"/></strong> flag in the <em>Flags</em> parameter.</p><p>For info about how data values change when you present content to the screen, see Converting data for the color space.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain::Present']/*"/>	
        /// <msdn-id>bb174576</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChain::Present([In] unsigned int SyncInterval,[In] DXGI_PRESENT_FLAGS Flags)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain::Present</unmanaged-short>	
        public void Present(int syncInterval, SharpDX.DXGI.PresentFlags flags) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, syncInterval, unchecked((int)flags),((void**)(*(void**)_nativePointer))[8]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Accesses one of the swap-chain's back buffers.</p>	
        /// </summary>	
        /// <param name="buffer"><dd>  <p>A zero-based buffer index. </p> <p>If the swap chain's swap effect is <strong><see cref="SharpDX.DXGI.SwapEffect.Discard"/></strong>, this method can only access the first buffer; for this situation, set the index to zero.</p> <p>If the swap chain's swap effect is either <strong><see cref="SharpDX.DXGI.SwapEffect.Sequential"/></strong> or <strong><see cref="SharpDX.DXGI.SwapEffect.FlipSequential"/></strong>, only the swap chain's zero-index buffer can be read from and written to. The swap chain's buffers with indexes greater than zero can only be read from; so if you call the <strong><see cref="SharpDX.DXGI.Resource.GetUsage"/></strong> method for such buffers, they have the <strong><see cref="SharpDX.DXGI.Usage.ReadOnly"/></strong> flag set.</p> </dd></param>	
        /// <param name="riid"><dd>  <p>The type of interface used to manipulate the buffer.</p> </dd></param>	
        /// <param name="surfaceOut"><dd>  <p>A reference to a back-buffer interface.</p> </dd></param>	
        /// <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
        /// <remarks>	
        /// <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain::GetBuffer']/*"/>	
        /// <msdn-id>bb174570</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChain::GetBuffer([In] unsigned int Buffer,[In] const GUID&amp; riid,[Out] void** ppSurface)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain::GetBuffer</unmanaged-short>	
        internal void GetBuffer(int buffer, System.Guid riid, out System.IntPtr surfaceOut) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* surfaceOut_ = &surfaceOut)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, buffer, &riid, surfaceOut_,((void**)(*(void**)_nativePointer))[9]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Sets the display state to windowed or full screen.</p>	
        /// </summary>	
        /// <param name="fullscreen"><dd>  <p>A Boolean value that specifies whether to set the display state to windowed or full screen. <strong>TRUE</strong> for full screen, and <strong><see cref="SharpDX.Result.False"/></strong> for windowed.</p> </dd></param>	
        /// <param name="targetRef"><dd>  <p>If you pass <strong>TRUE</strong> to the <em>Fullscreen</em> parameter to set the display state to full screen, you can optionally set this parameter to a reference to an <strong><see cref="SharpDX.DXGI.Output"/></strong> interface for the output target that contains the swap chain. If you set this parameter to <strong><c>null</c></strong>, DXGI will choose the output based on the swap-chain's device and the output window's  placement. If you pass <strong><see cref="SharpDX.Result.False"/></strong> to <em>Fullscreen</em>, you must set this parameter to <strong><c>null</c></strong>.</p> </dd></param>	
        /// <returns><p>This methods returns: </p><ul> <li><see cref="SharpDX.Result.Ok"/> if the action succeeded and the swap chain was placed in the requested state.</li> <li><see cref="SharpDX.DXGI.ResultCode.NotCurrentlyAvailable"/> if the action failed. There are many reasons why a windowed-mode swap chain cannot switch to full-screen mode. For instance: <ul> <li>The application is running over Terminal Server.</li> <li>The output window is occluded.</li> <li>The output window does not have keyboard focus.</li> <li>Another application is already in full-screen mode.</li> </ul> <p>When this error is returned, an application can continue to run in windowed mode and try to switch to full-screen mode later.</p> </li> <li><see cref="SharpDX.DXGI.DXGIStatus.ModeChangeInProgress"/> is returned if a fullscreen/windowed mode transition is occurring when this API is called.</li> <li>Other error codes if you run out of memory or encounter another unexpected fault; these codes may be treated as hard, non-continuable errors.</li> </ul></returns>	
        /// <remarks>	
        /// <p>DXGI may change the display state of a swap chain in response to end user or system requests.</p><p>We recommend that you create a windowed swap chain and allow the end user to change the swap chain to full screen through <strong>SetFullscreenState</strong>; that is, do not set the <strong>Windowed</strong> member of <strong><see cref="SharpDX.DXGI.SwapChainDescription"/></strong> to <see cref="SharpDX.Result.False"/> to force the swap chain to be full screen. However, if you create the swap chain as full screen, also provide the end user with a list of supported display modes because a swap chain that is created with an unsupported display mode might cause the display to go black and prevent the end user from seeing anything. Also, we recommend that you have a time-out confirmation screen or other fallback mechanism when you allow the end user to change display modes.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain::SetFullscreenState']/*"/>	
        /// <msdn-id>bb174579</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChain::SetFullscreenState([In] BOOL Fullscreen,[In, Optional] IDXGIOutput* pTarget)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain::SetFullscreenState</unmanaged-short>	
        public void SetFullscreenState(SharpDX.Mathematics.Interop.RawBool fullscreen, SharpDX.DXGI.Output targetRef) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint9(_nativePointer, fullscreen, (void*)((targetRef == null)?IntPtr.Zero:targetRef.NativePointer),((void**)(*(void**)_nativePointer))[10]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Get the state associated with full-screen mode.</p>	
        /// </summary>	
        /// <param name="fullscreenRef"><dd>  <p>A reference to a boolean whose value is either:</p> <ul> <li><strong>TRUE</strong> if the swap chain is in full-screen mode</li> <li><strong><see cref="SharpDX.Result.False"/></strong> if the swap chain is in windowed mode</li> </ul> </dd></param>	
        /// <param name="targetOut"><dd>  <p>A reference to the output target (see <strong><see cref="SharpDX.DXGI.Output"/></strong>) when the mode is full screen; otherwise <strong><c>null</c></strong>.</p> </dd></param>	
        /// <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
        /// <remarks>	
        /// <p>When the swap chain is in full-screen mode, a reference to the  target output will be returned and its reference count will be incremented.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain::GetFullscreenState']/*"/>	
        /// <msdn-id>bb174574</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChain::GetFullscreenState([Out, Optional] BOOL* pFullscreen,[Out, Optional] IDXGIOutput** ppTarget)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain::GetFullscreenState</unmanaged-short>	
        public void GetFullscreenState(out SharpDX.Mathematics.Interop.RawBool fullscreenRef, out SharpDX.DXGI.Output targetOut) {
            unsafe {
                fullscreenRef = new SharpDX.Mathematics.Interop.RawBool();
                IntPtr targetOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                fixed (void* fullscreenRef_ = &fullscreenRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, fullscreenRef_, &targetOut_,((void**)(*(void**)_nativePointer))[11]);		
                targetOut= (targetOut_ == IntPtr.Zero)?null:new SharpDX.DXGI.Output(targetOut_);	
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>[Starting with Direct3D 11.1, we recommend not to use <strong>GetDesc</strong> anymore to get a description of the swap chain. Instead, use <strong><see cref="SharpDX.DXGI.SwapChain1.GetDescription1"/></strong>.]</p><p>Get a description of the swap chain.</p>	
        /// </summary>	
        /// <param name="descRef">No documentation.</param>	
        /// <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
        /// <remarks>	
        /// <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain::GetDesc']/*"/>	
        /// <msdn-id>bb174572</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChain::GetDesc([Out] DXGI_SWAP_CHAIN_DESC* pDesc)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain::GetDesc</unmanaged-short>	
        internal void GetDescription(out SharpDX.DXGI.SwapChainDescription descRef) {
            unsafe {
                descRef = new SharpDX.DXGI.SwapChainDescription();
                SharpDX.Result __result__;
                fixed (void* descRef_ = &descRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, descRef_,((void**)(*(void**)_nativePointer))[12]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Changes the swap chain's back buffer size, format, and number of buffers. This should be called when the application window is resized.</p>	
        /// </summary>	
        /// <param name="bufferCount"><dd>  <p>The number of buffers in the swap chain (including all back and front buffers). This number can be different from the number of buffers with which you created the swap chain. This number can't be greater than <strong>DXGI_MAX_SWAP_CHAIN_BUFFERS</strong>. Set this number to zero to preserve the existing number of buffers in the swap chain. You can't specify less than two buffers for the flip presentation model.</p> </dd></param>	
        /// <param name="width"><dd>  <p>New width of the back buffer. If you specify zero, DXGI will use the width of the client area of the target window. You can't specify the width as zero if you called the <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForComposition"/></strong> method to create the swap chain for a composition surface.</p> </dd></param>	
        /// <param name="height"><dd>  <p>New height of the back buffer. If you specify zero, DXGI will use the height of the client area of the target window. You can't specify the height as zero if you called the <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForComposition"/></strong> method to create the swap chain for a composition surface.</p> </dd></param>	
        /// <param name="newFormat"><dd>  <p>A <strong><see cref="SharpDX.DXGI.Format"/></strong>-typed value for the new format of the back buffer. Set this value to <strong><see cref="SharpDX.DXGI.Format.Unknown"/></strong> to preserve the existing format of the back buffer. The flip presentation model supports a more restricted set of formats than the bit-block transfer (bitblt) model.</p> </dd></param>	
        /// <param name="swapChainFlags"><dd>  <p>A combination of <strong><see cref="SharpDX.DXGI.SwapChainFlags"/></strong>-typed values that are combined by using a bitwise OR operation. The resulting value specifies options for swap-chain behavior.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; an error code otherwise. For a list of error codes, see DXGI_ERROR.</p></returns>	
        /// <remarks>	
        /// <p>You can't resize a swap chain unless you release all outstanding references to its back buffers. You must release all of its direct and indirect references on the back buffers in order for <strong>ResizeBuffers</strong> to succeed.</p><p>Direct references are held by the application after it calls <strong>AddRef</strong> on a resource.</p><p>Indirect references are held by views to a resource, binding a view of the resource to a device context,  a command list that used the resource, a command list that used a view to that resource, a command list that executed another command list that used the  resource, and so on.</p><p>Before you call <strong>ResizeBuffers</strong>, ensure that the application releases all references (by calling the appropriate number of <strong>Release</strong> invocations)  on the resources, any views to the resource, and any command lists that use either the resources or views, and ensure that neither the resource nor a view is  still bound to a device context.  You can use <strong><see cref="SharpDX.Direct3D11.DeviceContext.ClearState"/></strong> to ensure that all references are released. If a view is bound to a deferred context, you must discard the partially built command list as well (by calling <strong>ClearState</strong>, <strong><see cref="SharpDX.Direct3D11.DeviceContext.FinishCommandListInternal"/></strong>, then <strong>Release</strong> on the command list).   After you call <strong>ResizeBuffers</strong>, you can re-query interfaces via <strong><see cref="SharpDX.DXGI.SwapChain.GetBuffer"/></strong>.</p><p>For swap chains that you created with <strong><see cref="SharpDX.DXGI.SwapChainFlags.GdiCompatible"/></strong>, before you call <strong>ResizeBuffers</strong>, also call <strong><see cref="SharpDX.DXGI.Surface1.ReleaseDC_"/></strong> on the swap chain's back-buffer surface to ensure that you have no outstanding GDI device contexts (DCs) open.</p><p>We recommend that you call <strong>ResizeBuffers</strong> when a client window is resized (that is, when an application receives a WM_SIZE message).</p><p>The only difference between <strong>ResizeBuffers</strong> in Windows?8 and <strong>ResizeBuffers</strong> in Windows?7 is with flip presentation model swap chains that you create with the <strong><see cref="SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> value set. In Windows?8, you must call <strong>ResizeBuffers</strong> to realize a transition between full-screen mode and windowed mode; otherwise, your next call to the <strong>Present</strong> method fails.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain::ResizeBuffers']/*"/>	
        /// <msdn-id>bb174577</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChain::ResizeBuffers([In] unsigned int BufferCount,[In] unsigned int Width,[In] unsigned int Height,[In] DXGI_FORMAT NewFormat,[In] DXGI_SWAP_CHAIN_FLAG SwapChainFlags)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain::ResizeBuffers</unmanaged-short>	
        public void ResizeBuffers(int bufferCount, int width, int height, SharpDX.DXGI.Format newFormat, SharpDX.DXGI.SwapChainFlags swapChainFlags) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, bufferCount, width, height, unchecked((int)newFormat), unchecked((int)swapChainFlags),((void**)(*(void**)_nativePointer))[13]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Resizes the output target.</p>	
        /// </summary>	
        /// <param name="newTargetParametersRef"><dd>  <p>A reference to a <strong><see cref="SharpDX.DXGI.ModeDescription"/></strong> structure that describes the mode, which specifies the new width, height, format, and refresh rate of the target.  If the format is <strong><see cref="SharpDX.DXGI.Format.Unknown"/></strong>, <strong>ResizeTarget</strong> uses the existing format. We only recommend that you use <strong><see cref="SharpDX.DXGI.Format.Unknown"/></strong> when the swap chain is in full-screen  mode as this method is not thread safe.</p> </dd></param>	
        /// <returns><p>Returns a code that indicates success or failure. <strong><see cref="SharpDX.DXGI.DXGIStatus.ModeChangeInProgress"/></strong> is returned if a full-screen/windowed mode transition is occurring  when this API is called. See DXGI_ERROR for additional DXGI error codes.</p></returns>	
        /// <remarks>	
        /// <p><strong>ResizeTarget</strong> resizes the target window when the swap chain is in windowed mode, and changes the display mode on the target output when the swap  chain is in full-screen mode. Therefore, apps can call <strong>ResizeTarget</strong> to resize the target window (rather than a Microsoft Win32API such as <strong>SetWindowPos</strong>)  without knowledge of the swap chain display mode.</p><p>If a Windows Store app calls <strong>ResizeTarget</strong>, it fails with <see cref="SharpDX.DXGI.ResultCode.NotCurrentlyAvailable"/>.</p><p>You cannot call <strong>ResizeTarget</strong> on a windowless swap chain that you created with <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForComposition"/></strong>.</p><p>Apps must still call <strong><see cref="SharpDX.DXGI.SwapChain.ResizeBuffers"/></strong> after they call <strong>ResizeTarget</strong> because only <strong>ResizeBuffers</strong> can change the back buffers. But, if those apps have implemented window resize processing to call <strong>ResizeBuffers</strong>, they don't need to explicitly call <strong>ResizeBuffers</strong> after they call <strong>ResizeTarget</strong> because the window resize processing will achieve what the app requires.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain::ResizeTarget']/*"/>	
        /// <msdn-id>bb174578</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChain::ResizeTarget([In] const DXGI_MODE_DESC* pNewTargetParameters)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain::ResizeTarget</unmanaged-short>	
        public void ResizeTarget(ref SharpDX.DXGI.ModeDescription newTargetParametersRef) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* newTargetParametersRef_ = &newTargetParametersRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, newTargetParametersRef_,((void**)(*(void**)_nativePointer))[14]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Get the output (the display monitor) that contains the majority of the client area of the target window.</p>	
        /// </summary>	
        /// <param name="outputOut"><dd>  <p>A reference to the output interface (see <strong><see cref="SharpDX.DXGI.Output"/></strong>).</p> </dd></param>	
        /// <returns><p>Returns one of the following DXGI_ERROR.</p></returns>	
        /// <remarks>	
        /// <p>If the method succeeds, the output interface will be filled and its reference count incremented. When you are finished with it, be sure to release the interface to avoid a memory leak.</p><p>The output is also owned by the adapter on which the swap chain's device was created.</p><p>You cannot call <strong>GetContainingOutput</strong> on a windowless swap chain that you created with <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForComposition"/></strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain::GetContainingOutput']/*"/>	
        /// <msdn-id>bb174571</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChain::GetContainingOutput([Out] IDXGIOutput** ppOutput)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain::GetContainingOutput</unmanaged-short>	
        internal void GetContainingOutput(out SharpDX.DXGI.Output outputOut) {
            unsafe {
                IntPtr outputOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, &outputOut_,((void**)(*(void**)_nativePointer))[15]);		
                outputOut= (outputOut_ == IntPtr.Zero)?null:new SharpDX.DXGI.Output(outputOut_);	
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Gets performance statistics about the last render frame.</p>	
        /// </summary>	
        /// <param name="statsRef"><dd>  <p>A reference to a <strong><see cref="SharpDX.DXGI.FrameStatistics"/></strong> structure for the frame statistics.</p> </dd></param>	
        /// <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
        /// <remarks>	
        /// <p>You cannot use <strong>GetFrameStatistics</strong> for swap chains that both use the bit-block transfer (bitblt) presentation model and draw in windowed mode.</p><p>You can only use <strong>GetFrameStatistics</strong> for swap chains that either use the flip presentation model or draw in full-screen mode. You set the <strong><see cref="SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> value in the <strong>SwapEffect</strong> member of the <strong><see cref="SharpDX.DXGI.SwapChainDescription1"/></strong> structure to specify that the swap chain uses the flip presentation model.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain::GetFrameStatistics']/*"/>	
        /// <msdn-id>bb174573</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChain::GetFrameStatistics([Out] DXGI_FRAME_STATISTICS* pStats)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain::GetFrameStatistics</unmanaged-short>	
        internal void GetFrameStatistics(out SharpDX.DXGI.FrameStatistics statsRef) {
            unsafe {
                statsRef = new SharpDX.DXGI.FrameStatistics();
                SharpDX.Result __result__;
                fixed (void* statsRef_ = &statsRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, statsRef_,((void**)(*(void**)_nativePointer))[16]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Gets the number of times  that <strong><see cref="SharpDX.DXGI.SwapChain.Present"/></strong> or <strong><see cref="SharpDX.DXGI.SwapChain1.Present1"/></strong> has been called.</p>	
        /// </summary>	
        /// <param name="lastPresentCountRef">No documentation.</param>	
        /// <returns><p>Returns one of the DXGI_ERROR values.</p></returns>	
        /// <remarks>	
        /// <p>For info about presentation statistics for a frame, see <strong><see cref="SharpDX.DXGI.FrameStatistics"/></strong>.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain::GetLastPresentCount']/*"/>	
        /// <msdn-id>bb174575</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChain::GetLastPresentCount([Out] unsigned int* pLastPresentCount)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain::GetLastPresentCount</unmanaged-short>	
        internal void GetLastPresentCount(out int lastPresentCountRef) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* lastPresentCountRef_ = &lastPresentCountRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, lastPresentCountRef_,((void**)(*(void**)_nativePointer))[17]);		
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>Provides presentation capabilities that are enhanced from <strong><see cref="SharpDX.DXGI.SwapChain"/></strong>. These presentation capabilities consist of specifying dirty rectangles and scroll rectangle to optimize the presentation.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>You can create a swap chain by 	
    /// calling <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForHwnd"/></strong>, <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForCoreWindow"/></strong>, or <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForComposition"/></strong>. You can also create a swap chain when you call <strong>D3D11CreateDeviceAndSwapChain</strong>; however, you can then only access the sub-set of swap-chain functionality that the <strong><see cref="SharpDX.DXGI.SwapChain"/></strong> interface provides.</p><p><strong><see cref="SharpDX.DXGI.SwapChain1"/></strong> provides the <strong>IsTemporaryMonoSupported</strong> method that you can use to determine whether the swap chain supports "temporary mono? presentation. This type of swap chain is a stereo swap chain that can be used to present mono content.	
    /// </p><p><strong>Note</strong>??Some stereo features like the advanced presentation flags are not represented by an explicit interface change.  Furthermore, the original (<strong><see cref="SharpDX.DXGI.SwapChain"/></strong>) and new (<strong><see cref="SharpDX.DXGI.SwapChain1"/></strong>) swap chain interfaces generally have the same behavior. For information about how <strong><see cref="SharpDX.DXGI.SwapChain"/></strong> methods are translated into <strong><see cref="SharpDX.DXGI.SwapChain1"/></strong> methods, see the descriptions of the <strong><see cref="SharpDX.DXGI.SwapChain1"/></strong> methods.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain1']/*"/>	
    /// <msdn-id>hh404631</msdn-id>	
    /// <unmanaged>IDXGISwapChain1</unmanaged>	
    /// <unmanaged-short>IDXGISwapChain1</unmanaged-short>	
    [Guid("790a45f7-0d42-4876-983a-0a55cfe6f4aa")]
    public partial class SwapChain1 : SharpDX.DXGI.SwapChain {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.SwapChain1"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public SwapChain1(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.SwapChain1"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.SwapChain1(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.SwapChain1(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Gets a description of the swap chain.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain1::GetDesc1']/*"/>	
        /// <msdn-id>hh404640</msdn-id>	
        /// <unmanaged>GetDesc1</unmanaged>	
        /// <unmanaged-short>GetDesc1</unmanaged-short>	
        /// <unmanaged>HRESULT IDXGISwapChain1::GetDesc1([Out] DXGI_SWAP_CHAIN_DESC1* pDesc)</unmanaged>
        public SharpDX.DXGI.SwapChainDescription1 Description1 {
                get { SharpDX.DXGI.SwapChainDescription1 __output__; GetDescription1(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// <p>Gets a description of a full-screen swap chain.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>The semantics of <strong>GetFullscreenDesc</strong> are identical to that of the <strong>IDXGISwapchain::GetDesc</strong> method for <strong><see cref="System.IntPtr"/></strong>-based swap chains.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain1::GetFullscreenDesc']/*"/>	
        /// <msdn-id>hh404644</msdn-id>	
        /// <unmanaged>GetFullscreenDesc</unmanaged>	
        /// <unmanaged-short>GetFullscreenDesc</unmanaged-short>	
        /// <unmanaged>HRESULT IDXGISwapChain1::GetFullscreenDesc([Out] DXGI_SWAP_CHAIN_FULLSCREEN_DESC* pDesc)</unmanaged>
        public SharpDX.DXGI.SwapChainFullScreenDescription FullscreenDescription {
                get { SharpDX.DXGI.SwapChainFullScreenDescription __output__; GetFullscreenDescription(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// <p>Retrieves the underlying <strong><see cref="System.IntPtr"/></strong> for this swap-chain object.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>Applications call the  <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForHwnd"/></strong> method to create a swap chain that is associated with an <strong><see cref="System.IntPtr"/></strong>.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain1::GetHwnd']/*"/>	
        /// <msdn-id>hh404647</msdn-id>	
        /// <unmanaged>GetHwnd</unmanaged>	
        /// <unmanaged-short>GetHwnd</unmanaged-short>	
        /// <unmanaged>HRESULT IDXGISwapChain1::GetHwnd([Out] HWND* pHwnd)</unmanaged>
        public System.IntPtr Hwnd {
                get { System.IntPtr __output__; GetHwnd(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// <p>Determines whether a swap chain supports ?temporary mono.?</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>Temporary mono is a feature where a stereo swap chain can be presented using only the content in the left buffer.  To present using the left buffer as a mono buffer, an application calls the  <strong><see cref="SharpDX.DXGI.SwapChain1.Present1"/></strong> method with the <strong><see cref="SharpDX.DXGI.PresentFlags.StereoTemporaryMono"/></strong> flag.  All windowed swap chains support temporary mono. However, full-screen swap chains optionally support temporary mono because not all hardware supports temporary mono on full-screen swap chains efficiently.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain1::IsTemporaryMonoSupported']/*"/>	
        /// <msdn-id>hh446794</msdn-id>	
        /// <unmanaged>IsTemporaryMonoSupported</unmanaged>	
        /// <unmanaged-short>IsTemporaryMonoSupported</unmanaged-short>	
        /// <unmanaged>BOOL IDXGISwapChain1::IsTemporaryMonoSupported()</unmanaged>
        public SharpDX.Mathematics.Interop.RawBool IsTemporaryMonoSupported {
                get { return IsTemporaryMonoSupported_(); }
        }
        
        /// <summary>	
        /// <p>Gets the output (the display monitor) to which you can restrict the contents of a present operation.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>If the method succeeds, the runtime fills the buffer at <em>ppRestrictToOutput</em> with a reference to the restrict-to output interface. This restrict-to output interface has its reference count incremented. When you are finished with it, be sure to release the interface to avoid a memory leak.</p><p>The output is also owned by the adapter on which the swap chain's device was created.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain1::GetRestrictToOutput']/*"/>	
        /// <msdn-id>hh446788</msdn-id>	
        /// <unmanaged>GetRestrictToOutput</unmanaged>	
        /// <unmanaged-short>GetRestrictToOutput</unmanaged-short>	
        /// <unmanaged>HRESULT IDXGISwapChain1::GetRestrictToOutput([Out] IDXGIOutput** ppRestrictToOutput)</unmanaged>
        public SharpDX.DXGI.Output RestrictToOutput {
                get { SharpDX.DXGI.Output __output__; GetRestrictToOutput(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// <p>Retrieves or sets the background color of the swap chain.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p><strong>Note</strong>??The background color that <strong>GetBackgroundColor</strong> retrieves does not indicate what the screen currently displays. The background color indicates what the screen will display with your next call to the <strong><see cref="SharpDX.DXGI.SwapChain1.Present1"/></strong> method. The default value of the background color is black with full opacity: 0,0,0,1.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain1::GetBackgroundColor']/*"/>	
        /// <msdn-id>hh404634</msdn-id>	
        /// <unmanaged>GetBackgroundColor / SetBackgroundColor</unmanaged>	
        /// <unmanaged-short>GetBackgroundColor</unmanaged-short>	
        /// <unmanaged>HRESULT IDXGISwapChain1::GetBackgroundColor([Out] D3DCOLORVALUE* pColor)</unmanaged>
        public SharpDX.Mathematics.Interop.RawColor4 BackgroundColor {
                get { SharpDX.Mathematics.Interop.RawColor4 __output__; GetBackgroundColor(out __output__); return __output__; }
                set { SetBackgroundColor(value); }
        }
        
        /// <summary>	
        /// <p>Gets or sets the rotation of the back buffers for the swap chain.</p>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain1::GetRotation']/*"/>	
        /// <msdn-id>hh446791</msdn-id>	
        /// <unmanaged>GetRotation / SetRotation</unmanaged>	
        /// <unmanaged-short>GetRotation</unmanaged-short>	
        /// <unmanaged>HRESULT IDXGISwapChain1::GetRotation([Out] DXGI_MODE_ROTATION* pRotation)</unmanaged>
        public SharpDX.DXGI.DisplayModeRotation Rotation {
                get { SharpDX.DXGI.DisplayModeRotation __output__; GetRotation(out __output__); return __output__; }
                set { SetRotation(value); }
        }
        
        /// <summary>	
        /// <p>Gets a description of the swap chain.</p>	
        /// </summary>	
        /// <param name="descRef"><dd> <p>A reference to a <strong><see cref="SharpDX.DXGI.SwapChainDescription1"/></strong> structure that describes the swap chain.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; an error code otherwise.  For a list of error codes, see DXGI_ERROR.</p></returns>	
        /// <remarks>	
        /// <p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain1::GetDesc1']/*"/>	
        /// <msdn-id>hh404640</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChain1::GetDesc1([Out] DXGI_SWAP_CHAIN_DESC1* pDesc)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain1::GetDesc1</unmanaged-short>	
        internal void GetDescription1(out SharpDX.DXGI.SwapChainDescription1 descRef) {
            unsafe {
                descRef = new SharpDX.DXGI.SwapChainDescription1();
                SharpDX.Result __result__;
                fixed (void* descRef_ = &descRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, descRef_,((void**)(*(void**)_nativePointer))[18]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Gets a description of a full-screen swap chain.</p>	
        /// </summary>	
        /// <param name="descRef"><dd> <p>A reference to a <strong><see cref="SharpDX.DXGI.SwapChainFullScreenDescription"/></strong> structure that describes the full-screen swap chain.</p> </dd></param>	
        /// <returns><p><strong>GetFullscreenDesc</strong> returns: </p><ul> <li><see cref="SharpDX.Result.Ok"/> if it successfully retrieved the description of the full-screen swap chain.</li> <li> <see cref="SharpDX.DXGI.ResultCode.InvalidCall"/> for non-<strong><see cref="System.IntPtr"/></strong> swap chains or if <em>pDesc</em> is <strong><c>null</c></strong>.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic. </li> </ul></returns>	
        /// <remarks>	
        /// <p>The semantics of <strong>GetFullscreenDesc</strong> are identical to that of the <strong>IDXGISwapchain::GetDesc</strong> method for <strong><see cref="System.IntPtr"/></strong>-based swap chains.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain1::GetFullscreenDesc']/*"/>	
        /// <msdn-id>hh404644</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChain1::GetFullscreenDesc([Out] DXGI_SWAP_CHAIN_FULLSCREEN_DESC* pDesc)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain1::GetFullscreenDesc</unmanaged-short>	
        internal void GetFullscreenDescription(out SharpDX.DXGI.SwapChainFullScreenDescription descRef) {
            unsafe {
                descRef = new SharpDX.DXGI.SwapChainFullScreenDescription();
                SharpDX.Result __result__;
                fixed (void* descRef_ = &descRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, descRef_,((void**)(*(void**)_nativePointer))[19]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Retrieves the underlying <strong><see cref="System.IntPtr"/></strong> for this swap-chain object.</p>	
        /// </summary>	
        /// <param name="hwndRef">No documentation.</param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; an error code otherwise.  For a list of error codes, see DXGI_ERROR.</p><p>If <em>pHwnd</em> receives <strong><c>null</c></strong> (that is, the swap chain is not <strong><see cref="System.IntPtr"/></strong>-based), <strong>GetHwnd</strong> returns <see cref="SharpDX.DXGI.ResultCode.InvalidCall"/>.</p></returns>	
        /// <remarks>	
        /// <p>Applications call the  <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForHwnd"/></strong> method to create a swap chain that is associated with an <strong><see cref="System.IntPtr"/></strong>.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain1::GetHwnd']/*"/>	
        /// <msdn-id>hh404647</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChain1::GetHwnd([Out] HWND* pHwnd)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain1::GetHwnd</unmanaged-short>	
        internal void GetHwnd(out System.IntPtr hwndRef) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* hwndRef_ = &hwndRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, hwndRef_,((void**)(*(void**)_nativePointer))[20]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Retrieves the underlying <strong>CoreWindow</strong> object for this swap-chain object.</p>	
        /// </summary>	
        /// <param name="refiid">No documentation.</param>	
        /// <param name="unkOut">No documentation.</param>	
        /// <returns><p><strong>GetCoreWindow</strong> returns: </p><ul> <li><see cref="SharpDX.Result.Ok"/> if it successfully retrieved the underlying <strong>CoreWindow</strong> object.</li> <li> <see cref="SharpDX.DXGI.ResultCode.InvalidCall"/> if <em>ppUnk</em> is <strong><c>null</c></strong>; that is, the swap chain is not associated with a <strong>CoreWindow</strong> object.</li> <li>Any <strong><see cref="SharpDX.Result"/></strong> that a call to <strong>QueryInterface</strong> to query for an <strong>CoreWindow</strong> object might typically return.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic. </li> </ul><p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>GetCoreWindow</strong> fails with E_NOTIMPL. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p></returns>	
        /// <remarks>	
        /// <p>Applications call the <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForCoreWindow"/></strong> method to create a swap chain that is associated with an <strong>CoreWindow</strong> object.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain1::GetCoreWindow']/*"/>	
        /// <msdn-id>hh404650</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChain1::GetCoreWindow([In] const GUID&amp; refiid,[Out] void** ppUnk)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain1::GetCoreWindow</unmanaged-short>	
        public void GetCoreWindow(System.Guid refiid, out System.IntPtr unkOut) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* unkOut_ = &unkOut)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, &refiid, unkOut_,((void**)(*(void**)_nativePointer))[21]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Presents a frame on the display screen. </p>	
        /// </summary>	
        /// <param name="syncInterval"><dd> <p>An integer that specifies how to synchronize presentation of a frame with the vertical blank.</p> <p>For the bit-block transfer (bitblt) model (<strong><see cref="SharpDX.DXGI.SwapEffect.Discard"/></strong> or <strong><see cref="SharpDX.DXGI.SwapEffect.Sequential"/></strong>), values are:</p> <ul> <li>0 - The presentation occurs immediately, there is no synchronization.</li> <li>1,2,3,4 - Synchronize presentation after the <em>n</em>th vertical blank.</li> </ul> <p>For the flip model (<strong><see cref="SharpDX.DXGI.SwapEffect.FlipSequential"/></strong>), values are:</p> <ul> <li>0 - Cancel the remaining time on the previously presented frame and discard this frame if a newer frame is queued.</li> <li>n &gt; 0 - Synchronize presentation for at least <em>n</em> vertical blanks.</li> </ul> <p>For an example that shows how sync-interval values affect a flip presentation queue, see Remarks.</p> <p>If the update region straddles more than one output (each represented by <strong><see cref="SharpDX.DXGI.Output1"/></strong>), <strong>Present1</strong> performs the synchronization to the output that contains the largest subrectangle of the target window's client area.</p> </dd></param>	
        /// <param name="presentFlags"><dd> <p>An integer value that contains swap-chain presentation options. These options are defined by the DXGI_PRESENT constants.</p> </dd></param>	
        /// <param name="presentParametersRef"><dd> <p>A reference to a <strong><see cref="SharpDX.DXGI.PresentParameters"/></strong> structure that describes updated rectangles and scroll information of the frame to present.</p> </dd></param>	
        /// <returns><p>Possible return values include: <see cref="SharpDX.Result.Ok"/>, <see cref="SharpDX.DXGI.ResultCode.DeviceRemoved"/> , <see cref="SharpDX.DXGI.DXGIStatus.Occluded"/>, <see cref="SharpDX.DXGI.ResultCode.InvalidCall"/>, or E_OUTOFMEMORY.  </p></returns>	
        /// <remarks>	
        /// <p>An app can use <strong>Present1</strong> to optimize presentation by specifying scroll and dirty rectangles. When the runtime has information about these rectangles, the runtime can then perform necessary bitblts during presentation more efficiently and pass this metadata to the Desktop Window Manager (DWM). The DWM can then use the metadata to optimize presentation and pass the metadata to indirect displays and terminal servers to optimize traffic over the wire. An app must confine its modifications to only the dirty regions that it passes to <strong>Present1</strong>, as well as modify the entire dirty region to avoid undefined resource contents from being exposed.</p><p>For flip presentation model swap chains that you create with the <strong><see cref="SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> value set, a successful presentation results in an unbind of back buffer 0 from the graphics pipeline, except for when you pass the <strong><see cref="SharpDX.DXGI.PresentFlags.DoNotSequence"/></strong> flag in the <em>Flags</em> parameter.</p><p>For info about how data values change when you present content to the screen, see Converting data for the color space.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain1::Present1']/*"/>	
        /// <msdn-id>hh446797</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChain1::Present1([In] unsigned int SyncInterval,[In] DXGI_PRESENT_FLAGS PresentFlags,[In] const void* pPresentParameters)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain1::Present1</unmanaged-short>	
        internal void Present1(int syncInterval, SharpDX.DXGI.PresentFlags presentFlags, System.IntPtr presentParametersRef) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, syncInterval, unchecked((int)presentFlags), (void*)presentParametersRef,((void**)(*(void**)_nativePointer))[22]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Determines whether a swap chain supports ?temporary mono.?</p>	
        /// </summary>	
        /// <returns><p>Indicates whether to use the swap chain in temporary mono mode. <strong>TRUE</strong> indicates that you can use temporary-mono mode; otherwise, <strong><see cref="SharpDX.Result.False"/></strong>.</p><p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>IsTemporaryMonoSupported</strong> always returns <see cref="SharpDX.Result.False"/> because stereoscopic 3D display behavior isn?t available with the Platform Update for Windows?7. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p></returns>	
        /// <remarks>	
        /// <p>Temporary mono is a feature where a stereo swap chain can be presented using only the content in the left buffer.  To present using the left buffer as a mono buffer, an application calls the  <strong><see cref="SharpDX.DXGI.SwapChain1.Present1"/></strong> method with the <strong><see cref="SharpDX.DXGI.PresentFlags.StereoTemporaryMono"/></strong> flag.  All windowed swap chains support temporary mono. However, full-screen swap chains optionally support temporary mono because not all hardware supports temporary mono on full-screen swap chains efficiently.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain1::IsTemporaryMonoSupported']/*"/>	
        /// <msdn-id>hh446794</msdn-id>	
        /// <unmanaged>BOOL IDXGISwapChain1::IsTemporaryMonoSupported()</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain1::IsTemporaryMonoSupported</unmanaged-short>	
        internal SharpDX.Mathematics.Interop.RawBool IsTemporaryMonoSupported_() {
            unsafe {
                SharpDX.Mathematics.Interop.RawBool __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.CalliSharpDXMathematicsInteropRawBool(_nativePointer,((void**)(*(void**)_nativePointer))[23]);		
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Gets the output (the display monitor) to which you can restrict the contents of a present operation.</p>	
        /// </summary>	
        /// <param name="restrictToOutputOut"><dd> <p> A reference to a buffer that receives a reference to the <strong><see cref="SharpDX.DXGI.Output"/></strong> interface for the restrict-to output. An application passes this reference to <strong><see cref="SharpDX.DXGI.Output"/></strong> in a call to the  <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForHwnd"/></strong>, <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForCoreWindow"/></strong>, or  <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForComposition"/></strong> method to create the swap chain.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if the restrict-to output was successfully retrieved; otherwise, returns E_INVALIDARG if the reference is invalid.</p></returns>	
        /// <remarks>	
        /// <p>If the method succeeds, the runtime fills the buffer at <em>ppRestrictToOutput</em> with a reference to the restrict-to output interface. This restrict-to output interface has its reference count incremented. When you are finished with it, be sure to release the interface to avoid a memory leak.</p><p>The output is also owned by the adapter on which the swap chain's device was created.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain1::GetRestrictToOutput']/*"/>	
        /// <msdn-id>hh446788</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChain1::GetRestrictToOutput([Out] IDXGIOutput** ppRestrictToOutput)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain1::GetRestrictToOutput</unmanaged-short>	
        internal void GetRestrictToOutput(out SharpDX.DXGI.Output restrictToOutputOut) {
            unsafe {
                IntPtr restrictToOutputOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, &restrictToOutputOut_,((void**)(*(void**)_nativePointer))[24]);		
                restrictToOutputOut= (restrictToOutputOut_ == IntPtr.Zero)?null:new SharpDX.DXGI.Output(restrictToOutputOut_);	
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Changes the background color of the swap chain.</p>	
        /// </summary>	
        /// <param name="colorRef"><dd> <p>A reference to a <strong>DXGI_RGBA</strong> structure that specifies the background color to set.</p> </dd></param>	
        /// <returns><p><strong>SetBackgroundColor</strong> returns: </p><ul> <li><see cref="SharpDX.Result.Ok"/> if it successfully set the background color.</li> <li>E_INVALIDARG if the <em>pColor</em> parameter is incorrect, for example, <em>pColor</em> is <c>null</c> or any of the floating-point values of the members of <strong>DXGI_RGBA</strong> to which <em>pColor</em> points are outside the range from 0.0 through 1.0.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul><p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>SetBackgroundColor</strong> fails with E_NOTIMPL. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p></returns>	
        /// <remarks>	
        /// <p>The background color affects only swap chains that you create with <strong><see cref="SharpDX.DXGI.Scaling.None"/></strong> in windowed mode. You pass this value in a call to <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForHwnd"/></strong>, <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForCoreWindow"/></strong>, or  <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForComposition"/></strong>. Typically, the background color is not visible unless the swap-chain contents are smaller than the destination window.</p><p>When you set the background color, it is not immediately realized. It takes effect in conjunction with your next call to the <strong><see cref="SharpDX.DXGI.SwapChain1.Present1"/></strong> method. The <strong>DXGI_PRESENT</strong> flags that you pass to <strong><see cref="SharpDX.DXGI.SwapChain1.Present1"/></strong> can help achieve the effect that you require. For example, if you call <strong>SetBackgroundColor</strong> and then call <strong><see cref="SharpDX.DXGI.SwapChain1.Present1"/></strong> with the <em>Flags</em> parameter set to <strong><see cref="SharpDX.DXGI.PresentFlags.DoNotSequence"/></strong>, you change only the background color without changing the displayed contents of the swap chain.</p><p>When you call the <strong><see cref="SharpDX.DXGI.SwapChain1.Present1"/></strong> method to display contents of the swap chain, <strong><see cref="SharpDX.DXGI.SwapChain1.Present1"/></strong> uses the <strong><see cref="SharpDX.DXGI.AlphaMode"/></strong> value that is specified in the <strong>AlphaMode</strong> member of the <strong><see cref="SharpDX.DXGI.SwapChainDescription1"/></strong> structure to determine how to handle the <strong>a</strong> member of the <strong>DXGI_RGBA</strong> structure, the alpha value of the background color, that achieves window transparency. For example, if <strong>AlphaMode</strong> is <strong><see cref="SharpDX.DXGI.AlphaMode.Ignore"/></strong>, <strong><see cref="SharpDX.DXGI.SwapChain1.Present1"/></strong> ignores the a member of <strong>DXGI_RGBA</strong>.</p><p><strong>Note</strong>??Like all presentation data, we recommend that you perform floating point operations in a linear color space. When the desktop is in a fixed bit color depth mode, the operating system converts linear color data to standard RGB data (sRGB, gamma 2.2 corrected space) to compose to the screen. For more info, see Converting data for the color space.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain1::SetBackgroundColor']/*"/>	
        /// <msdn-id>hh446799</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChain1::SetBackgroundColor([In] const D3DCOLORVALUE* pColor)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain1::SetBackgroundColor</unmanaged-short>	
        internal void SetBackgroundColor(SharpDX.Mathematics.Interop.RawColor4 colorRef) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, &colorRef,((void**)(*(void**)_nativePointer))[25]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Retrieves the background color of the swap chain.</p>	
        /// </summary>	
        /// <param name="colorRef"><dd> <p>A reference to a <strong>DXGI_RGBA</strong> structure that receives the background color of the swap chain.</p> </dd></param>	
        /// <returns><p><strong>GetBackgroundColor</strong> returns: </p><ul> <li><see cref="SharpDX.Result.Ok"/> if it successfully retrieves the background color.</li> <li> <see cref="SharpDX.DXGI.ResultCode.InvalidCall"/> if the <em>pColor</em> parameter is invalid, for example, <em>pColor</em> is <c>null</c>.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul></returns>	
        /// <remarks>	
        /// <p><strong>Note</strong>??The background color that <strong>GetBackgroundColor</strong> retrieves does not indicate what the screen currently displays. The background color indicates what the screen will display with your next call to the <strong><see cref="SharpDX.DXGI.SwapChain1.Present1"/></strong> method. The default value of the background color is black with full opacity: 0,0,0,1.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain1::GetBackgroundColor']/*"/>	
        /// <msdn-id>hh404634</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChain1::GetBackgroundColor([Out] D3DCOLORVALUE* pColor)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain1::GetBackgroundColor</unmanaged-short>	
        internal void GetBackgroundColor(out SharpDX.Mathematics.Interop.RawColor4 colorRef) {
            unsafe {
                colorRef = new SharpDX.Mathematics.Interop.RawColor4();
                SharpDX.Result __result__;
                fixed (void* colorRef_ = &colorRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, colorRef_,((void**)(*(void**)_nativePointer))[26]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Sets the rotation of the back buffers for the swap chain.</p>	
        /// </summary>	
        /// <param name="rotation"><dd> <p>A <strong><see cref="SharpDX.DXGI.DisplayModeRotation"/></strong>-typed value that specifies how to set the rotation of the back buffers for the swap chain.</p> </dd></param>	
        /// <returns><p><strong>SetRotation</strong> returns: </p><ul> <li><see cref="SharpDX.Result.Ok"/> if it successfully set the rotation.</li> <li><see cref="SharpDX.DXGI.ResultCode.InvalidCall"/> if the swap chain is bit-block transfer (bitblt) model. The swap chain must be flip model to successfully call <strong>SetRotation</strong>.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul><p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>SetRotation</strong> fails with <see cref="SharpDX.DXGI.ResultCode.InvalidCall"/>. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p></returns>	
        /// <remarks>	
        /// <p>You can only use <strong>SetRotation</strong> to rotate the back buffers for flip-model swap chains that you present in windowed mode. </p><p><strong>SetRotation</strong> isn't supported for rotating the back buffers for flip-model swap chains that you present in full-screen mode. In this situation, <strong>SetRotation</strong> doesn't fail, but you must ensure that you specify no rotation (<strong><see cref="SharpDX.DXGI.DisplayModeRotation.Identity"/></strong>) for the swap chain. Otherwise, when you call <strong><see cref="SharpDX.DXGI.SwapChain1.Present1"/></strong> or <strong><see cref="SharpDX.DXGI.SwapChain.Present"/></strong> to present a frame,  the presentation fails.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain1::SetRotation']/*"/>	
        /// <msdn-id>hh446801</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChain1::SetRotation([In] DXGI_MODE_ROTATION Rotation)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain1::SetRotation</unmanaged-short>	
        internal void SetRotation(SharpDX.DXGI.DisplayModeRotation rotation) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, unchecked((int)rotation),((void**)(*(void**)_nativePointer))[27]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Gets the rotation of the back buffers for the swap chain.</p>	
        /// </summary>	
        /// <param name="rotationRef"><dd> <p>A reference to a variable that receives a <strong><see cref="SharpDX.DXGI.DisplayModeRotation"/></strong>-typed value that specifies the rotation of the back buffers for the swap chain.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; an error code otherwise.  For a list of error codes, see DXGI_ERROR.</p><p><strong>Platform Update for Windows?7:??</strong>On Windows?7 or Windows Server?2008?R2 with the Platform Update for Windows?7 installed, <strong>GetRotation</strong> fails with <see cref="SharpDX.DXGI.ResultCode.InvalidCall"/>. For more info about the Platform Update for Windows?7, see Platform Update for Windows 7. </p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain1::GetRotation']/*"/>	
        /// <msdn-id>hh446791</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChain1::GetRotation([Out] DXGI_MODE_ROTATION* pRotation)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain1::GetRotation</unmanaged-short>	
        internal void GetRotation(out SharpDX.DXGI.DisplayModeRotation rotationRef) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* rotationRef_ = &rotationRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, rotationRef_,((void**)(*(void**)_nativePointer))[28]);		
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>Extends <strong><see cref="SharpDX.DXGI.SwapChain1"/></strong> with methods to support swap back buffer scaling and lower-latency swap chains.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>You can create a swap chain by 	
    /// calling <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForHwnd"/></strong>, <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForCoreWindow"/></strong>, or <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForComposition"/></strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain2']/*"/>	
    /// <msdn-id>dn280420</msdn-id>	
    /// <unmanaged>IDXGISwapChain2</unmanaged>	
    /// <unmanaged-short>IDXGISwapChain2</unmanaged-short>	
    [Guid("a8be2ac4-199f-4946-b331-79599fb98de7")]
    public partial class SwapChain2 : SharpDX.DXGI.SwapChain1 {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.SwapChain2"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public SwapChain2(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.SwapChain2"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.SwapChain2(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.SwapChain2(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Gets or sets the number of frames that the swap chain is allowed to queue for rendering.</p>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain2::GetMaximumFrameLatency']/*"/>	
        /// <msdn-id>dn268311</msdn-id>	
        /// <unmanaged>GetMaximumFrameLatency / SetMaximumFrameLatency</unmanaged>	
        /// <unmanaged-short>GetMaximumFrameLatency</unmanaged-short>	
        /// <unmanaged>HRESULT IDXGISwapChain2::GetMaximumFrameLatency([Out] unsigned int* pMaxLatency)</unmanaged>
        public int MaximumFrameLatency {
                get { int __output__; GetMaximumFrameLatency(out __output__); return __output__; }
                set { SetMaximumFrameLatency(value); }
        }
        
        /// <summary>	
        /// <p>Returns a waitable handle that signals when the DXGI adapter has finished presenting a new frame.</p><p>Windows?8.1 introduces new APIs that allow lower-latency rendering by waiting  until the previous frame is presented to the display before drawing the next frame. To use this method, first create the DXGI swap chain with the <strong><see cref="SharpDX.DXGI.SwapChainFlags.FrameLatencyWaitAbleObject"/></strong> flag set, then call <strong>GetFrameLatencyWaitableObject</strong> to retrieve the waitable handle. Use the waitable handle with <strong>WaitForSingleObjectEx</strong> to synchronize rendering of each new frame with the end of the previous frame. For every frame it renders, the app should wait on this handle before starting any rendering operations. Note that this requirement includes the first frame the app renders with the swap chain. See the DirectXLatency sample.</p>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain2::GetFrameLatencyWaitableObject']/*"/>	
        /// <msdn-id>dn268309</msdn-id>	
        /// <unmanaged>GetFrameLatencyWaitableObject</unmanaged>	
        /// <unmanaged-short>GetFrameLatencyWaitableObject</unmanaged-short>	
        /// <unmanaged>void* IDXGISwapChain2::GetFrameLatencyWaitableObject()</unmanaged>
        public System.IntPtr FrameLatencyWaitableObject {
                get { return GetFrameLatencyWaitableObject(); }
        }
        
        /// <summary>	
        /// <p>Gets or sets the transform matrix that will be applied to a composition swap chain upon the next present. </p><p>Starting with Windows?8.1, Windows Store apps are able to place DirectX swap chain visuals in XAML pages using the <strong>SwapChainPanel</strong> element, which can be placed and sized arbitrarily. This exposes the DirectX swap chain visuals to touch scaling and translation scenarios using touch UI. The <strong>GetMatrixTransform</strong> and  <strong>SetMatrixTransform</strong> methods are used to synchronize scaling of the DirectX swap chain with its associated <strong>SwapChainPanel</strong> element. Only simple scale/translation elements in the matrix are allowed ? the call will fail if the matrix contains skew/rotation elements.</p>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain2::GetMatrixTransform']/*"/>	
        /// <msdn-id>dn268310</msdn-id>	
        /// <unmanaged>GetMatrixTransform / SetMatrixTransform</unmanaged>	
        /// <unmanaged-short>GetMatrixTransform</unmanaged-short>	
        /// <unmanaged>HRESULT IDXGISwapChain2::GetMatrixTransform([Out] DXGI_MATRIX_3X2_F* pMatrix)</unmanaged>
        public SharpDX.Mathematics.Interop.RawMatrix3x2 MatrixTransform {
                get { SharpDX.Mathematics.Interop.RawMatrix3x2 __output__; GetMatrixTransform(out __output__); return __output__; }
                set { SetMatrixTransform(ref value); }
        }
        
        /// <summary>	
        /// <p>Sets the source region to be used for the swap chain.</p><p>Use <strong>SetSourceSize</strong> to specify the portion of the swap chain from which the operating system presents. This allows an effective resize without calling the more-expensive <strong><see cref="SharpDX.DXGI.SwapChain.ResizeBuffers"/></strong> method. Prior to Windows?8.1, calling <strong><see cref="SharpDX.DXGI.SwapChain.ResizeBuffers"/></strong> was the only way to resize the swap chain. The source rectangle is always defined by the region [0, 0, Width, Height].</p>	
        /// </summary>	
        /// <param name="width">No documentation.</param>	
        /// <param name="height">No documentation.</param>	
        /// <returns><p>This method can return:</p><ul> <li>E_INVALIDARG if one or more parameters exceed the size of the back buffer.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain2::SetSourceSize']/*"/>	
        /// <msdn-id>dn280409</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChain2::SetSourceSize([In] unsigned int Width,[In] unsigned int Height)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain2::SetSourceSize</unmanaged-short>	
        internal void SetSourceSize(int width, int height) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, width, height,((void**)(*(void**)_nativePointer))[29]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Gets the source region used for the swap chain.</p><p>Use <strong>GetSourceSize</strong> to get the portion of the swap chain from which the operating system presents. The source rectangle is always defined by the region [0, 0, Width, Height]. Use <strong>SetSourceSize</strong> to set this portion of the swap chain. </p>	
        /// </summary>	
        /// <param name="widthRef">No documentation.</param>	
        /// <param name="heightRef">No documentation.</param>	
        /// <returns><p> This method can return error codes that are described in the DXGI_ERROR topic.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain2::GetSourceSize']/*"/>	
        /// <msdn-id>dn280408</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChain2::GetSourceSize([Out] unsigned int* pWidth,[Out] unsigned int* pHeight)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain2::GetSourceSize</unmanaged-short>	
        internal void GetSourceSize(out int widthRef, out int heightRef) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* widthRef_ = &widthRef)
                    fixed (void* heightRef_ = &heightRef)
                        __result__= 
        				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, widthRef_, heightRef_,((void**)(*(void**)_nativePointer))[30]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Sets the number of frames that the swap chain is allowed to queue for rendering.</p>	
        /// </summary>	
        /// <param name="maxLatency"><dd> <p>The maximum number of back buffer frames that will be queued for the swap chain. This value is 1 by default, but should be set to 2 if the scene takes longer than it takes for one vertical refresh (typically about 16ms) to draw.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; otherwise, <see cref="SharpDX.DXGI.ResultCode.DeviceRemoved"/> if the device was removed.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain2::SetMaximumFrameLatency']/*"/>	
        /// <msdn-id>dn268313</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChain2::SetMaximumFrameLatency([In] unsigned int MaxLatency)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain2::SetMaximumFrameLatency</unmanaged-short>	
        internal void SetMaximumFrameLatency(int maxLatency) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, maxLatency,((void**)(*(void**)_nativePointer))[31]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Gets the number of frames that the swap chain is allowed to queue for rendering.</p>	
        /// </summary>	
        /// <param name="maxLatencyRef"><dd> <p>The maximum number of back buffer frames that will be queued for the swap chain. This value is 1 by default, but should be set to 2 if the scene takes longer than it takes for one vertical refresh (typically about 16ms) to draw.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; otherwise, returns one of the following members of the D3DERR enumerated type:</p><ul> <li><strong>D3DERR_DEVICELOST</strong></li> <li><strong>D3DERR_DEVICEREMOVED</strong></li> <li><strong>D3DERR_DRIVERINTERNALERROR</strong></li> <li><strong>D3DERR_INVALIDCALL</strong></li> <li><strong>D3DERR_OUTOFVIDEOMEMORY</strong></li> </ul></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain2::GetMaximumFrameLatency']/*"/>	
        /// <msdn-id>dn268311</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChain2::GetMaximumFrameLatency([Out] unsigned int* pMaxLatency)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain2::GetMaximumFrameLatency</unmanaged-short>	
        internal void GetMaximumFrameLatency(out int maxLatencyRef) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* maxLatencyRef_ = &maxLatencyRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, maxLatencyRef_,((void**)(*(void**)_nativePointer))[32]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Returns a waitable handle that signals when the DXGI adapter has finished presenting a new frame.</p><p>Windows?8.1 introduces new APIs that allow lower-latency rendering by waiting  until the previous frame is presented to the display before drawing the next frame. To use this method, first create the DXGI swap chain with the <strong><see cref="SharpDX.DXGI.SwapChainFlags.FrameLatencyWaitAbleObject"/></strong> flag set, then call <strong>GetFrameLatencyWaitableObject</strong> to retrieve the waitable handle. Use the waitable handle with <strong>WaitForSingleObjectEx</strong> to synchronize rendering of each new frame with the end of the previous frame. For every frame it renders, the app should wait on this handle before starting any rendering operations. Note that this requirement includes the first frame the app renders with the swap chain. See the DirectXLatency sample.</p>	
        /// </summary>	
        /// <returns><p>A handle to the waitable object, or <c>null</c> if the swap chain was not created with <strong><see cref="SharpDX.DXGI.SwapChainFlags.FrameLatencyWaitAbleObject"/></strong>.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain2::GetFrameLatencyWaitableObject']/*"/>	
        /// <msdn-id>dn268309</msdn-id>	
        /// <unmanaged>void* IDXGISwapChain2::GetFrameLatencyWaitableObject()</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain2::GetFrameLatencyWaitableObject</unmanaged-short>	
        internal System.IntPtr GetFrameLatencyWaitableObject() {
            unsafe {
                System.IntPtr __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.CalliSystemIntPtr(_nativePointer,((void**)(*(void**)_nativePointer))[33]);		
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Sets the transform matrix that will be applied to a composition swap chain upon the next present. </p><p>Starting with Windows?8.1, Windows Store apps are able to place DirectX swap chain visuals in XAML pages using the <strong>SwapChainPanel</strong> element, which can be placed and sized arbitrarily. This exposes the DirectX swap chain visuals to touch scaling and translation scenarios using touch UI. The <strong>GetMatrixTransform</strong> and  <strong>SetMatrixTransform</strong> methods are used to synchronize scaling of the DirectX swap chain with its associated <strong>SwapChainPanel</strong> element. Only simple scale/translation elements in the matrix are allowed ? the call will fail if the matrix contains skew/rotation elements.</p>	
        /// </summary>	
        /// <param name="matrixRef">No documentation.</param>	
        /// <returns><p><strong>SetMatrixTransform</strong> returns: </p><ul> <li><see cref="SharpDX.Result.Ok"/> if it successfully retrieves the transform matrix.</li> <li>E_INVALIDARG if the <em>pMatrix</em> parameter is incorrect, for example, <em>pMatrix</em> is <c>null</c> or the matrix represented by <strong><see cref="SharpDX.Mathematics.Interop.RawMatrix3x2"/></strong> includes components other than scale and translation.</li> <li><see cref="SharpDX.DXGI.ResultCode.InvalidCall"/> if the method is called on a swap chain that was not created with <strong>CreateSwapChainForComposition</strong>.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain2::SetMatrixTransform']/*"/>	
        /// <msdn-id>dn268312</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChain2::SetMatrixTransform([In] const DXGI_MATRIX_3X2_F* pMatrix)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain2::SetMatrixTransform</unmanaged-short>	
        internal void SetMatrixTransform(ref SharpDX.Mathematics.Interop.RawMatrix3x2 matrixRef) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* matrixRef_ = &matrixRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, matrixRef_,((void**)(*(void**)_nativePointer))[34]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Gets the transform matrix that will be applied to a composition swap chain upon the next present. </p><p>Starting with Windows?8.1, Windows Store apps are able to place DirectX swap chain visuals in XAML pages using the <strong>SwapChainPanel</strong> element, which can be placed and sized arbitrarily. This exposes the DirectX swap chain visuals to touch scaling and translation scenarios using touch UI. The <strong>GetMatrixTransform</strong> and  <strong>SetMatrixTransform</strong> methods are used to synchronize scaling of the DirectX swap chain with its associated <strong>SwapChainPanel</strong> element. Only simple scale/translation elements in the matrix are allowed ? the call will fail if the matrix contains skew/rotation elements.</p>	
        /// </summary>	
        /// <param name="matrixRef">No documentation.</param>	
        /// <returns><p><strong>GetMatrixTransform</strong> returns: </p><ul> <li><see cref="SharpDX.Result.Ok"/> if it successfully retrieves the transform matrix.</li> <li><see cref="SharpDX.DXGI.ResultCode.InvalidCall"/> if the method is called on a swap chain that was not created with <strong>CreateSwapChainForComposition</strong>.</li> <li>Possibly other error codes that are described in the DXGI_ERROR topic.</li> </ul></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain2::GetMatrixTransform']/*"/>	
        /// <msdn-id>dn268310</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChain2::GetMatrixTransform([Out] DXGI_MATRIX_3X2_F* pMatrix)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain2::GetMatrixTransform</unmanaged-short>	
        internal void GetMatrixTransform(out SharpDX.Mathematics.Interop.RawMatrix3x2 matrixRef) {
            unsafe {
                matrixRef = new SharpDX.Mathematics.Interop.RawMatrix3x2();
                SharpDX.Result __result__;
                fixed (void* matrixRef_ = &matrixRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, matrixRef_,((void**)(*(void**)_nativePointer))[35]);		
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>An <strong><see cref="SharpDX.DXGI.SwapChain"/></strong> interface implements one or more <strong>surfaces</strong> for storing rendered data before presenting it to an output.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>You can create a swap chain by 	
    /// calling <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForHwnd"/></strong>, <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForCoreWindow"/></strong>, or <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForComposition"/></strong>. You can also create a swap chain when you call <strong>D3D11CreateDeviceAndSwapChain</strong>; however, you can then only access the sub-set of swap-chain functionality that the <strong><see cref="SharpDX.DXGI.SwapChain"/></strong> interface provides.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain3']/*"/>	
    /// <msdn-id>bb174569</msdn-id>	
    /// <unmanaged>IDXGISwapChain3</unmanaged>	
    /// <unmanaged-short>IDXGISwapChain3</unmanaged-short>	
    [Guid("94d99bdb-f1f8-4ab0-b236-7da0170edab1")]
    public partial class SwapChain3 : SharpDX.DXGI.SwapChain2 {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.SwapChain3"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public SwapChain3(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.SwapChain3"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.SwapChain3(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.SwapChain3(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Gets the index of the swap chain's current back buffer.</p>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain3::GetCurrentBackBufferIndex']/*"/>	
        /// <msdn-id>dn903675</msdn-id>	
        /// <unmanaged>GetCurrentBackBufferIndex</unmanaged>	
        /// <unmanaged-short>GetCurrentBackBufferIndex</unmanaged-short>	
        /// <unmanaged>unsigned int IDXGISwapChain3::GetCurrentBackBufferIndex()</unmanaged>
        public int CurrentBackBufferIndex {
                get { return GetCurrentBackBufferIndex(); }
        }
        
        /// <summary>	
        /// <p>Sets the color space used by the swap chain.</p>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain3::SetColorSpace1']/*"/>	
        /// <msdn-id>dn903676</msdn-id>	
        /// <unmanaged>SetColorSpace1</unmanaged>	
        /// <unmanaged-short>SetColorSpace1</unmanaged-short>	
        /// <unmanaged>HRESULT IDXGISwapChain3::SetColorSpace1([In] DXGI_COLOR_SPACE_TYPE ColorSpace)</unmanaged>
        public SharpDX.DXGI.ColorSpaceType ColorSpace1 {
                set { SetColorSpace1(value); }
        }
        
        /// <summary>	
        /// <p>Gets the index of the swap chain's current back buffer.</p>	
        /// </summary>	
        /// <returns><p>Returns the index of the current back buffer.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain3::GetCurrentBackBufferIndex']/*"/>	
        /// <msdn-id>dn903675</msdn-id>	
        /// <unmanaged>unsigned int IDXGISwapChain3::GetCurrentBackBufferIndex()</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain3::GetCurrentBackBufferIndex</unmanaged-short>	
        internal int GetCurrentBackBufferIndex() {
            unsafe {
                int __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer,((void**)(*(void**)_nativePointer))[36]);		
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Checks the swap chain's support for color space.</p>	
        /// </summary>	
        /// <param name="colorSpace"><dd>  <p>A <strong><see cref="SharpDX.DXGI.ColorSpaceType"/></strong>-typed value that specifies color space type to check support for.</p> </dd></param>	
        /// <param name="colorSpaceSupportRef"><dd>  <p>A reference to a variable that receives a combination of <strong><see cref="SharpDX.DXGI.SwapChainColorSpaceSupportFlags"/></strong>-typed values that are combined by using a bitwise OR operation. The resulting value specifies options for color space support. </p> </dd></param>	
        /// <returns><p>This method returns <strong><see cref="SharpDX.Result.Ok"/></strong> on success, or it returns one of the error codes that are described in the DXGI_ERROR topic.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain3::CheckColorSpaceSupport']/*"/>	
        /// <msdn-id>dn903674</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChain3::CheckColorSpaceSupport([In] DXGI_COLOR_SPACE_TYPE ColorSpace,[Out] unsigned int* pColorSpaceSupport)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain3::CheckColorSpaceSupport</unmanaged-short>	
        public void CheckColorSpaceSupport(SharpDX.DXGI.ColorSpaceType colorSpace, out int colorSpaceSupportRef) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* colorSpaceSupportRef_ = &colorSpaceSupportRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, unchecked((int)colorSpace), colorSpaceSupportRef_,((void**)(*(void**)_nativePointer))[37]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Sets the color space used by the swap chain.</p>	
        /// </summary>	
        /// <param name="colorSpace"><dd>  <p>A <strong><see cref="SharpDX.DXGI.ColorSpaceType"/></strong>-typed value that specifies the color space to set.</p> </dd></param>	
        /// <returns><p>This method returns <strong><see cref="SharpDX.Result.Ok"/></strong> on success, or it returns one of the error codes that are described in the DXGI_ERROR topic.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain3::SetColorSpace1']/*"/>	
        /// <msdn-id>dn903676</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChain3::SetColorSpace1([In] DXGI_COLOR_SPACE_TYPE ColorSpace)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain3::SetColorSpace1</unmanaged-short>	
        internal void SetColorSpace1(SharpDX.DXGI.ColorSpaceType colorSpace) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, unchecked((int)colorSpace),((void**)(*(void**)_nativePointer))[38]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p> Changes the swap chain's back buffer size, format, and number of buffers, where the swap chain was created using a D3D12 command queue as an input device. This should be called when the application window is resized. </p>	
        /// </summary>	
        /// <param name="bufferCount"><dd>  <p> The number of buffers in the swap chain (including all back and front buffers). This number can be different from the number of buffers with which you created the swap chain. This number can't be greater than <strong>DXGI_MAX_SWAP_CHAIN_BUFFERS</strong>. Set this number to zero to preserve the existing number of buffers in the swap chain. You can't specify less than two buffers for the flip presentation model. </p> </dd></param>	
        /// <param name="width"><dd>  <p> The new width of the back buffer.  If you specify zero, DXGI will use the width of the client area of the target window.  You can't specify the width as zero if you called the <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForComposition"/></strong> method to create the swap chain for a composition surface. </p> </dd></param>	
        /// <param name="height"><dd>  <p> The new height of the back buffer.  If you specify zero, DXGI will use the height of the client area of the target window.  You can't specify the height as zero if you called the <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForComposition"/></strong> method to create the swap chain for a composition surface. </p> </dd></param>	
        /// <param name="format"><dd>  <p> A <strong><see cref="SharpDX.DXGI.Format"/></strong>-typed value for the new format of the back buffer.  Set this value to <strong><see cref="SharpDX.DXGI.Format.Unknown"/></strong> to preserve the existing format of the back buffer.  The flip presentation model supports a more restricted set of formats than the bit-block transfer (bitblt) model. </p> </dd></param>	
        /// <param name="swapChainFlags"><dd>  <p> A combination of <strong><see cref="SharpDX.DXGI.SwapChainFlags"/></strong>-typed values that are combined by using a bitwise OR operation. The resulting value specifies options for swap-chain behavior. </p> </dd></param>	
        /// <param name="creationNodeMaskRef"><dd>  <p> An array of UINTs, of total size <em>BufferCount</em>, where the value indicates which node the back buffer should be created on. Buffers created using <strong>ResizeBuffers1</strong> with a non-null <em>pCreationNodeMask</em> array are visible to all nodes. </p> </dd></param>	
        /// <param name="presentQueueOut"><dd>  <p> An array of command queues (<strong><see cref="SharpDX.Direct3D12.CommandQueue"/></strong> instances), of total size <em>BufferCount</em>. Each queue provided must match the corresponding creation node mask specified in the <em>pCreationNodeMask</em> array. When <strong>Present()</strong> is called, in addition to rotating to the next buffer for the next frame, the swapchain will also rotate through these command queues. This allows the app to control which queue requires synchronization for a given present operation. </p> </dd></param>	
        /// <returns><p> Returns <see cref="SharpDX.Result.Ok"/> if successful; an error code otherwise. For a list of error codes, see DXGI_ERROR. </p></returns>	
        /// <remarks>	
        /// <p> This method is only valid to call when the swapchain was created using a D3D12 command queue (<strong><see cref="SharpDX.Direct3D12.CommandQueue"/></strong>) as an input device. </p><p> When a swapchain is created on a multi-GPU adapter, the backbuffers are all created on node 1 and only a single command queue is supported. <strong>ResizeBuffers1</strong> enables applications to create backbuffers on different nodes, allowing a different command queue to be used with each node. These capabilities enable Alternate Frame Rendering (AFR) techniques to be used with the swapchain. See Direct3D 12 Multi-Adapters. </p><p> The only difference between <strong><see cref="SharpDX.DXGI.SwapChain.ResizeBuffers"/></strong> in Windows?8 versus Windows?7 is with flip presentation model swap chains that you create with the <strong><see cref="SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> or <see cref="SharpDX.DXGI.SwapEffect.FlipDiscard"/> value set. In Windows?8, you must call <strong>ResizeBuffers</strong> to realize a transition between full-screen mode and windowed mode; otherwise, your next call to the <strong><see cref="SharpDX.DXGI.SwapChain.Present"/></strong> method fails. </p><p> Also see the Remarks section in <strong><see cref="SharpDX.DXGI.SwapChain.ResizeBuffers"/></strong>, all of which is relevant to <strong>ResizeBuffers1</strong>. </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain3::ResizeBuffers1']/*"/>	
        /// <msdn-id>mt403341</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChain3::ResizeBuffers1([In] unsigned int BufferCount,[In] unsigned int Width,[In] unsigned int Height,[In] DXGI_FORMAT Format,[In] unsigned int SwapChainFlags,[In, Buffer] const unsigned int* pCreationNodeMask,[In, Buffer] const IUnknown** ppPresentQueue)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain3::ResizeBuffers1</unmanaged-short>	
        public void ResizeBuffers1(int bufferCount, int width, int height, SharpDX.DXGI.Format format, int swapChainFlags, int[] creationNodeMaskRef, SharpDX.ComObject[] presentQueueOut) {
            unsafe {
                IntPtr* presentQueueOut_ = (IntPtr*)0;
                if ( presentQueueOut != null ) {
                    IntPtr* presentQueueOut__ = stackalloc IntPtr[presentQueueOut.Length];
                    presentQueueOut_ = presentQueueOut__;
                    for (int i = 0; i < presentQueueOut.Length; i++)                        
                        presentQueueOut_[i] =  (presentQueueOut[i] == null)? IntPtr.Zero : presentQueueOut[i].NativePointer;
                }
                SharpDX.Result __result__;
                fixed (void* creationNodeMaskRef_ = creationNodeMaskRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, bufferCount, width, height, unchecked((int)format), swapChainFlags, creationNodeMaskRef_, presentQueueOut_,((void**)(*(void**)_nativePointer))[39]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p> Changes the swap chain's back buffer size, format, and number of buffers, where the swap chain was created using a D3D12 command queue as an input device. This should be called when the application window is resized. </p>	
        /// </summary>	
        /// <param name="bufferCount"><dd>  <p> The number of buffers in the swap chain (including all back and front buffers). This number can be different from the number of buffers with which you created the swap chain. This number can't be greater than <strong>DXGI_MAX_SWAP_CHAIN_BUFFERS</strong>. Set this number to zero to preserve the existing number of buffers in the swap chain. You can't specify less than two buffers for the flip presentation model. </p> </dd></param>	
        /// <param name="width"><dd>  <p> The new width of the back buffer.  If you specify zero, DXGI will use the width of the client area of the target window.  You can't specify the width as zero if you called the <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForComposition"/></strong> method to create the swap chain for a composition surface. </p> </dd></param>	
        /// <param name="height"><dd>  <p> The new height of the back buffer.  If you specify zero, DXGI will use the height of the client area of the target window.  You can't specify the height as zero if you called the <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForComposition"/></strong> method to create the swap chain for a composition surface. </p> </dd></param>	
        /// <param name="format"><dd>  <p> A <strong><see cref="SharpDX.DXGI.Format"/></strong>-typed value for the new format of the back buffer.  Set this value to <strong><see cref="SharpDX.DXGI.Format.Unknown"/></strong> to preserve the existing format of the back buffer.  The flip presentation model supports a more restricted set of formats than the bit-block transfer (bitblt) model. </p> </dd></param>	
        /// <param name="swapChainFlags"><dd>  <p> A combination of <strong><see cref="SharpDX.DXGI.SwapChainFlags"/></strong>-typed values that are combined by using a bitwise OR operation. The resulting value specifies options for swap-chain behavior. </p> </dd></param>	
        /// <param name="creationNodeMaskRef"><dd>  <p> An array of UINTs, of total size <em>BufferCount</em>, where the value indicates which node the back buffer should be created on. Buffers created using <strong>ResizeBuffers1</strong> with a non-null <em>pCreationNodeMask</em> array are visible to all nodes. </p> </dd></param>	
        /// <param name="presentQueueOut"><dd>  <p> An array of command queues (<strong><see cref="SharpDX.Direct3D12.CommandQueue"/></strong> instances), of total size <em>BufferCount</em>. Each queue provided must match the corresponding creation node mask specified in the <em>pCreationNodeMask</em> array. When <strong>Present()</strong> is called, in addition to rotating to the next buffer for the next frame, the swapchain will also rotate through these command queues. This allows the app to control which queue requires synchronization for a given present operation. </p> </dd></param>	
        /// <returns><p> Returns <see cref="SharpDX.Result.Ok"/> if successful; an error code otherwise. For a list of error codes, see DXGI_ERROR. </p></returns>	
        /// <remarks>	
        /// <p> This method is only valid to call when the swapchain was created using a D3D12 command queue (<strong><see cref="SharpDX.Direct3D12.CommandQueue"/></strong>) as an input device. </p><p> When a swapchain is created on a multi-GPU adapter, the backbuffers are all created on node 1 and only a single command queue is supported. <strong>ResizeBuffers1</strong> enables applications to create backbuffers on different nodes, allowing a different command queue to be used with each node. These capabilities enable Alternate Frame Rendering (AFR) techniques to be used with the swapchain. See Direct3D 12 Multi-Adapters. </p><p> The only difference between <strong><see cref="SharpDX.DXGI.SwapChain.ResizeBuffers"/></strong> in Windows?8 versus Windows?7 is with flip presentation model swap chains that you create with the <strong><see cref="SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> or <see cref="SharpDX.DXGI.SwapEffect.FlipDiscard"/> value set. In Windows?8, you must call <strong>ResizeBuffers</strong> to realize a transition between full-screen mode and windowed mode; otherwise, your next call to the <strong><see cref="SharpDX.DXGI.SwapChain.Present"/></strong> method fails. </p><p> Also see the Remarks section in <strong><see cref="SharpDX.DXGI.SwapChain.ResizeBuffers"/></strong>, all of which is relevant to <strong>ResizeBuffers1</strong>. </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain3::ResizeBuffers1']/*"/>	
        /// <msdn-id>mt403341</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChain3::ResizeBuffers1([In] unsigned int BufferCount,[In] unsigned int Width,[In] unsigned int Height,[In] DXGI_FORMAT Format,[In] unsigned int SwapChainFlags,[In, Buffer] const unsigned int* pCreationNodeMask,[In, Buffer] const IUnknown** ppPresentQueue)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain3::ResizeBuffers1</unmanaged-short>	
        public void ResizeBuffers1(int bufferCount, int width, int height, SharpDX.DXGI.Format format, int swapChainFlags, int[] creationNodeMaskRef, SharpDX.ComArray<SharpDX.ComObject> presentQueueOut) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* creationNodeMaskRef_ = creationNodeMaskRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, bufferCount, width, height, unchecked((int)format), swapChainFlags, creationNodeMaskRef_, (void*)((presentQueueOut == null)?IntPtr.Zero:presentQueueOut.NativePointer),((void**)(*(void**)_nativePointer))[39]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p> Changes the swap chain's back buffer size, format, and number of buffers, where the swap chain was created using a D3D12 command queue as an input device. This should be called when the application window is resized. </p>	
        /// </summary>	
        /// <param name="bufferCount"><dd>  <p> The number of buffers in the swap chain (including all back and front buffers). This number can be different from the number of buffers with which you created the swap chain. This number can't be greater than <strong>DXGI_MAX_SWAP_CHAIN_BUFFERS</strong>. Set this number to zero to preserve the existing number of buffers in the swap chain. You can't specify less than two buffers for the flip presentation model. </p> </dd></param>	
        /// <param name="width"><dd>  <p> The new width of the back buffer.  If you specify zero, DXGI will use the width of the client area of the target window.  You can't specify the width as zero if you called the <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForComposition"/></strong> method to create the swap chain for a composition surface. </p> </dd></param>	
        /// <param name="height"><dd>  <p> The new height of the back buffer.  If you specify zero, DXGI will use the height of the client area of the target window.  You can't specify the height as zero if you called the <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForComposition"/></strong> method to create the swap chain for a composition surface. </p> </dd></param>	
        /// <param name="format"><dd>  <p> A <strong><see cref="SharpDX.DXGI.Format"/></strong>-typed value for the new format of the back buffer.  Set this value to <strong><see cref="SharpDX.DXGI.Format.Unknown"/></strong> to preserve the existing format of the back buffer.  The flip presentation model supports a more restricted set of formats than the bit-block transfer (bitblt) model. </p> </dd></param>	
        /// <param name="swapChainFlags"><dd>  <p> A combination of <strong><see cref="SharpDX.DXGI.SwapChainFlags"/></strong>-typed values that are combined by using a bitwise OR operation. The resulting value specifies options for swap-chain behavior. </p> </dd></param>	
        /// <param name="creationNodeMaskRef"><dd>  <p> An array of UINTs, of total size <em>BufferCount</em>, where the value indicates which node the back buffer should be created on. Buffers created using <strong>ResizeBuffers1</strong> with a non-null <em>pCreationNodeMask</em> array are visible to all nodes. </p> </dd></param>	
        /// <param name="presentQueueOut"><dd>  <p> An array of command queues (<strong><see cref="SharpDX.Direct3D12.CommandQueue"/></strong> instances), of total size <em>BufferCount</em>. Each queue provided must match the corresponding creation node mask specified in the <em>pCreationNodeMask</em> array. When <strong>Present()</strong> is called, in addition to rotating to the next buffer for the next frame, the swapchain will also rotate through these command queues. This allows the app to control which queue requires synchronization for a given present operation. </p> </dd></param>	
        /// <returns><p> Returns <see cref="SharpDX.Result.Ok"/> if successful; an error code otherwise. For a list of error codes, see DXGI_ERROR. </p></returns>	
        /// <remarks>	
        /// <p> This method is only valid to call when the swapchain was created using a D3D12 command queue (<strong><see cref="SharpDX.Direct3D12.CommandQueue"/></strong>) as an input device. </p><p> When a swapchain is created on a multi-GPU adapter, the backbuffers are all created on node 1 and only a single command queue is supported. <strong>ResizeBuffers1</strong> enables applications to create backbuffers on different nodes, allowing a different command queue to be used with each node. These capabilities enable Alternate Frame Rendering (AFR) techniques to be used with the swapchain. See Direct3D 12 Multi-Adapters. </p><p> The only difference between <strong><see cref="SharpDX.DXGI.SwapChain.ResizeBuffers"/></strong> in Windows?8 versus Windows?7 is with flip presentation model swap chains that you create with the <strong><see cref="SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> or <see cref="SharpDX.DXGI.SwapEffect.FlipDiscard"/> value set. In Windows?8, you must call <strong>ResizeBuffers</strong> to realize a transition between full-screen mode and windowed mode; otherwise, your next call to the <strong><see cref="SharpDX.DXGI.SwapChain.Present"/></strong> method fails. </p><p> Also see the Remarks section in <strong><see cref="SharpDX.DXGI.SwapChain.ResizeBuffers"/></strong>, all of which is relevant to <strong>ResizeBuffers1</strong>. </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChain3::ResizeBuffers1']/*"/>	
        /// <msdn-id>mt403341</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChain3::ResizeBuffers1([In] unsigned int BufferCount,[In] unsigned int Width,[In] unsigned int Height,[In] DXGI_FORMAT Format,[In] unsigned int SwapChainFlags,[In, Buffer] const unsigned int* pCreationNodeMask,[In, Buffer] const IUnknown** ppPresentQueue)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChain3::ResizeBuffers1</unmanaged-short>	
        private void ResizeBuffers1(int bufferCount, int width, int height, SharpDX.DXGI.Format format, int swapChainFlags, System.IntPtr creationNodeMaskRef, System.IntPtr presentQueueOut) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, bufferCount, width, height, unchecked((int)format), swapChainFlags, (void*)creationNodeMaskRef, (void*)presentQueueOut,((void**)(*(void**)_nativePointer))[39]);		
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>This swap chain interface allows desktop media applications to request a seamless change to a specific refresh rate.</p><p>For example, a media application presenting video at a typical framerate of 23.997 frames per second can request a custom refresh rate of 24 or 48 Hz to eliminate judder. If the request is approved, the app starts presenting frames at the custom refresh rate immediately - without the typical 'mode switch' a user would experience when changing the refresh rate themselves by using the control panel.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Seamless changes to custom framerates can only be done on integrated panels. Custom frame rates cannot be applied to external displays. If the DXGI output adapter is attached to an external display then <strong>CheckPresentDurationSupport</strong> will return (0, 0) for upper and lower bounds, indicating that the device does not support seamless refresh rate changes.</p><p>Custom refresh rates can be used when displaying video with a dynamic framerate. However, the refresh rate change should be kept imperceptible to the user. A best practice for keeping the refresh rate transition imperceptible  is to only set the custom framerate if the app determines it can present at that rate for least 5 seconds.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChainMedia']/*"/>	
    /// <msdn-id>dn384131</msdn-id>	
    /// <unmanaged>IDXGISwapChainMedia</unmanaged>	
    /// <unmanaged-short>IDXGISwapChainMedia</unmanaged-short>	
    [Guid("dd95b90b-f05f-4f6a-bd65-25bfb264bd84")]
    public partial class SwapChainMedia : SharpDX.ComObject {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.DXGI.SwapChainMedia"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public SwapChainMedia(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.DXGI.SwapChainMedia"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.DXGI.SwapChainMedia(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.DXGI.SwapChainMedia(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Queries the system for a  <strong><see cref="SharpDX.DXGI.FrameStatisticsMedia"/></strong> structure that indicates whether a custom refresh rate is currently approved by the system.</p>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChainMedia::GetFrameStatisticsMedia']/*"/>	
        /// <msdn-id>dn384133</msdn-id>	
        /// <unmanaged>GetFrameStatisticsMedia</unmanaged>	
        /// <unmanaged-short>GetFrameStatisticsMedia</unmanaged-short>	
        /// <unmanaged>HRESULT IDXGISwapChainMedia::GetFrameStatisticsMedia([Out] DXGI_FRAME_STATISTICS_MEDIA* pStats)</unmanaged>
        public SharpDX.DXGI.FrameStatisticsMedia FrameStatisticsMedia {
                get { SharpDX.DXGI.FrameStatisticsMedia __output__; GetFrameStatisticsMedia(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// <p>Requests a custom presentation duration (custom refresh rate).</p>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChainMedia::SetPresentDuration']/*"/>	
        /// <msdn-id>dn384134</msdn-id>	
        /// <unmanaged>SetPresentDuration</unmanaged>	
        /// <unmanaged-short>SetPresentDuration</unmanaged-short>	
        /// <unmanaged>HRESULT IDXGISwapChainMedia::SetPresentDuration([In] unsigned int Duration)</unmanaged>
        public int PresentDuration {
                set { SetPresentDuration(value); }
        }
        
        /// <summary>	
        /// <p>Queries the system for a  <strong><see cref="SharpDX.DXGI.FrameStatisticsMedia"/></strong> structure that indicates whether a custom refresh rate is currently approved by the system.</p>	
        /// </summary>	
        /// <param name="statsRef">No documentation.</param>	
        /// <returns><p>This method returns <see cref="SharpDX.Result.Ok"/> on success, or a DXGI error code on failure.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChainMedia::GetFrameStatisticsMedia']/*"/>	
        /// <msdn-id>dn384133</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChainMedia::GetFrameStatisticsMedia([Out] DXGI_FRAME_STATISTICS_MEDIA* pStats)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChainMedia::GetFrameStatisticsMedia</unmanaged-short>	
        internal void GetFrameStatisticsMedia(out SharpDX.DXGI.FrameStatisticsMedia statsRef) {
            unsafe {
                statsRef = new SharpDX.DXGI.FrameStatisticsMedia();
                SharpDX.Result __result__;
                fixed (void* statsRef_ = &statsRef)
                    __result__= 
    				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, statsRef_,((void**)(*(void**)_nativePointer))[3]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Requests a custom presentation duration (custom refresh rate).</p>	
        /// </summary>	
        /// <param name="duration"><dd> <p>The custom presentation duration, specified in hundreds of nanoseconds.</p> </dd></param>	
        /// <returns><p>This method returns <see cref="SharpDX.Result.Ok"/> on success, or a DXGI error code on failure.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChainMedia::SetPresentDuration']/*"/>	
        /// <msdn-id>dn384134</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChainMedia::SetPresentDuration([In] unsigned int Duration)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChainMedia::SetPresentDuration</unmanaged-short>	
        internal void SetPresentDuration(int duration) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, duration,((void**)(*(void**)_nativePointer))[4]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Queries the graphics driver for a supported frame present duration corresponding to a custom refresh rate.</p>	
        /// </summary>	
        /// <param name="desiredPresentDuration"><dd> <p>Indicates the frame duration to check. This value is the duration of one frame at the desired refresh rate, specified in hundreds of nanoseconds. For example, set this field to 167777 to check for 60 Hz refresh rate support.</p> </dd></param>	
        /// <param name="closestSmallerPresentDurationRef"><dd> <p>A variable that will be set to the closest supported frame present duration that's smaller than the requested value, or zero if the device does not support any lower duration.</p> </dd></param>	
        /// <param name="closestLargerPresentDurationRef"><dd> <p>A variable that will be set to the closest supported frame present duration that's larger than the requested value, or zero if the device does not support any higher duration.</p> </dd></param>	
        /// <returns><p>This method returns <see cref="SharpDX.Result.Ok"/> on success, or a DXGI error code on failure.</p></returns>	
        /// <remarks>	
        /// <p>If the DXGI output adapter does not support custom refresh rates (for example, an external display) then the display driver will set upper and lower bounds to (0, 0).</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='IDXGISwapChainMedia::CheckPresentDurationSupport']/*"/>	
        /// <msdn-id>dn384132</msdn-id>	
        /// <unmanaged>HRESULT IDXGISwapChainMedia::CheckPresentDurationSupport([In] unsigned int DesiredPresentDuration,[Out] unsigned int* pClosestSmallerPresentDuration,[Out] unsigned int* pClosestLargerPresentDuration)</unmanaged>	
        /// <unmanaged-short>IDXGISwapChainMedia::CheckPresentDurationSupport</unmanaged-short>	
        public void CheckPresentDurationSupport(int desiredPresentDuration, out int closestSmallerPresentDurationRef, out int closestLargerPresentDurationRef) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* closestSmallerPresentDurationRef_ = &closestSmallerPresentDurationRef)
                    fixed (void* closestLargerPresentDurationRef_ = &closestLargerPresentDurationRef)
                        __result__= 
        				SharpDX.DXGI.LocalInterop.Calliint(_nativePointer, desiredPresentDuration, closestSmallerPresentDurationRef_, closestLargerPresentDurationRef_,((void**)(*(void**)_nativePointer))[5]);		
                __result__.CheckError();
            }
        }
    }
}
