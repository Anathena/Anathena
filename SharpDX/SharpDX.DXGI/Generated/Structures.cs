// Copyright (c) 2010-2014 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Types declaration for SharpDX.DXGI namespace.
//     This code was generated by a tool.
//     Date : 6/25/2016 10:38:07 PM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
namespace SharpDX.DXGI {

#pragma warning disable 282
#pragma warning disable 649
#pragma warning disable 419
#pragma warning disable 1587
#pragma warning disable 1574
    
    /// <summary>	
    /// <p>Describes an adapter (or video card) by using DXGI 1.0.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <strong><see cref="SharpDX.DXGI.AdapterDescription"/></strong> structure provides a description of an adapter.  This structure is initialized by using the <strong><see cref="SharpDX.DXGI.Adapter.GetDescription"/></strong> method.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC']/*"/>	
    /// <msdn-id>bb173058</msdn-id>	
    /// <unmanaged>DXGI_ADAPTER_DESC</unmanaged>	
    /// <unmanaged-short>DXGI_ADAPTER_DESC</unmanaged-short>	
    public  partial struct AdapterDescription {	
        
        /// <summary>	
        /// <dd> <p>A string that contains the adapter description. On feature level 9 graphics hardware, <strong>GetDesc</strong> returns ?Software Adapter? for the description string.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC::Description']/*"/>	
        /// <msdn-id>bb173058</msdn-id>	
        /// <unmanaged>wchar_t Description[128]</unmanaged>	
        /// <unmanaged-short>wchar_t Description</unmanaged-short>	
        public string Description;
        
        /// <summary>	
        /// <dd> <p>The PCI ID of the hardware vendor. On feature level 9 graphics hardware, <strong>GetDesc</strong> returns zeros for the PCI ID of the hardware vendor.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC::VendorId']/*"/>	
        /// <msdn-id>bb173058</msdn-id>	
        /// <unmanaged>unsigned int VendorId</unmanaged>	
        /// <unmanaged-short>unsigned int VendorId</unmanaged-short>	
        public int VendorId;
        
        /// <summary>	
        /// <dd> <p>The PCI ID of the hardware device. On feature level 9 graphics hardware, <strong>GetDesc</strong> returns zeros for the PCI ID of the hardware device.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC::DeviceId']/*"/>	
        /// <msdn-id>bb173058</msdn-id>	
        /// <unmanaged>unsigned int DeviceId</unmanaged>	
        /// <unmanaged-short>unsigned int DeviceId</unmanaged-short>	
        public int DeviceId;
        
        /// <summary>	
        /// <dd> <p>The PCI ID of the sub system. On feature level 9 graphics hardware, <strong>GetDesc</strong> returns zeros for the PCI ID of the sub system.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC::SubSysId']/*"/>	
        /// <msdn-id>bb173058</msdn-id>	
        /// <unmanaged>unsigned int SubSysId</unmanaged>	
        /// <unmanaged-short>unsigned int SubSysId</unmanaged-short>	
        public int SubsystemId;
        
        /// <summary>	
        /// <dd> <p>The PCI ID of the revision number of the adapter. On feature level 9 graphics hardware, <strong>GetDesc</strong> returns zeros for the PCI ID of the revision number of the adapter.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC::Revision']/*"/>	
        /// <msdn-id>bb173058</msdn-id>	
        /// <unmanaged>unsigned int Revision</unmanaged>	
        /// <unmanaged-short>unsigned int Revision</unmanaged-short>	
        public int Revision;
        
        /// <summary>	
        /// <dd> <p>The number of bytes of dedicated video memory that are not shared with the CPU.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC::DedicatedVideoMemory']/*"/>	
        /// <msdn-id>bb173058</msdn-id>	
        /// <unmanaged>SIZE_T DedicatedVideoMemory</unmanaged>	
        /// <unmanaged-short>SIZE_T DedicatedVideoMemory</unmanaged-short>	
        public SharpDX.PointerSize DedicatedVideoMemory;
        
        /// <summary>	
        /// <dd> <p>The number of bytes of dedicated system memory that are not shared with the CPU. This memory is allocated from available system memory at boot time.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC::DedicatedSystemMemory']/*"/>	
        /// <msdn-id>bb173058</msdn-id>	
        /// <unmanaged>SIZE_T DedicatedSystemMemory</unmanaged>	
        /// <unmanaged-short>SIZE_T DedicatedSystemMemory</unmanaged-short>	
        public SharpDX.PointerSize DedicatedSystemMemory;
        
        /// <summary>	
        /// <dd> <p>The number of bytes of shared system memory. This is the maximum value of system memory that may be consumed by the adapter during operation. Any incidental memory consumed by the driver as it manages and uses video memory is additional.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC::SharedSystemMemory']/*"/>	
        /// <msdn-id>bb173058</msdn-id>	
        /// <unmanaged>SIZE_T SharedSystemMemory</unmanaged>	
        /// <unmanaged-short>SIZE_T SharedSystemMemory</unmanaged-short>	
        public SharpDX.PointerSize SharedSystemMemory;
        
        /// <summary>	
        /// <dd> <p>A unique value that identifies the adapter. See <strong><see cref="long"/></strong> for a definition of the structure. <strong><see cref="long"/></strong> is defined in dxgi.h.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC::AdapterLuid']/*"/>	
        /// <msdn-id>bb173058</msdn-id>	
        /// <unmanaged>LUID AdapterLuid</unmanaged>	
        /// <unmanaged-short>LUID AdapterLuid</unmanaged-short>	
        public long Luid;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential, Pack = 4)]
        internal partial struct __Native {	
            public char Description;
            char __Description1;
            char __Description2;
            char __Description3;
            char __Description4;
            char __Description5;
            char __Description6;
            char __Description7;
            char __Description8;
            char __Description9;
            char __Description10;
            char __Description11;
            char __Description12;
            char __Description13;
            char __Description14;
            char __Description15;
            char __Description16;
            char __Description17;
            char __Description18;
            char __Description19;
            char __Description20;
            char __Description21;
            char __Description22;
            char __Description23;
            char __Description24;
            char __Description25;
            char __Description26;
            char __Description27;
            char __Description28;
            char __Description29;
            char __Description30;
            char __Description31;
            char __Description32;
            char __Description33;
            char __Description34;
            char __Description35;
            char __Description36;
            char __Description37;
            char __Description38;
            char __Description39;
            char __Description40;
            char __Description41;
            char __Description42;
            char __Description43;
            char __Description44;
            char __Description45;
            char __Description46;
            char __Description47;
            char __Description48;
            char __Description49;
            char __Description50;
            char __Description51;
            char __Description52;
            char __Description53;
            char __Description54;
            char __Description55;
            char __Description56;
            char __Description57;
            char __Description58;
            char __Description59;
            char __Description60;
            char __Description61;
            char __Description62;
            char __Description63;
            char __Description64;
            char __Description65;
            char __Description66;
            char __Description67;
            char __Description68;
            char __Description69;
            char __Description70;
            char __Description71;
            char __Description72;
            char __Description73;
            char __Description74;
            char __Description75;
            char __Description76;
            char __Description77;
            char __Description78;
            char __Description79;
            char __Description80;
            char __Description81;
            char __Description82;
            char __Description83;
            char __Description84;
            char __Description85;
            char __Description86;
            char __Description87;
            char __Description88;
            char __Description89;
            char __Description90;
            char __Description91;
            char __Description92;
            char __Description93;
            char __Description94;
            char __Description95;
            char __Description96;
            char __Description97;
            char __Description98;
            char __Description99;
            char __Description100;
            char __Description101;
            char __Description102;
            char __Description103;
            char __Description104;
            char __Description105;
            char __Description106;
            char __Description107;
            char __Description108;
            char __Description109;
            char __Description110;
            char __Description111;
            char __Description112;
            char __Description113;
            char __Description114;
            char __Description115;
            char __Description116;
            char __Description117;
            char __Description118;
            char __Description119;
            char __Description120;
            char __Description121;
            char __Description122;
            char __Description123;
            char __Description124;
            char __Description125;
            char __Description126;
            char __Description127;
            public int VendorId;
            public int DeviceId;
            public int SubsystemId;
            public int Revision;
            public SharpDX.PointerSize DedicatedVideoMemory;
            public SharpDX.PointerSize DedicatedSystemMemory;
            public SharpDX.PointerSize SharedSystemMemory;
            public long Luid;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            fixed (char* __ptr = &@ref.Description) this.Description = SharpDX.Utilities.PtrToStringUni((IntPtr)__ptr, 128);
            this.VendorId = @ref.VendorId;
            this.DeviceId = @ref.DeviceId;
            this.SubsystemId = @ref.SubsystemId;
            this.Revision = @ref.Revision;
            this.DedicatedVideoMemory = @ref.DedicatedVideoMemory;
            this.DedicatedSystemMemory = @ref.DedicatedSystemMemory;
            this.SharedSystemMemory = @ref.SharedSystemMemory;
            this.Luid = @ref.Luid;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            fixed (char* __psrc = this.Description) fixed (char* __ptr = &@ref.Description) Utilities.CopyMemory((IntPtr)__ptr, (IntPtr)__psrc, Description.Length * 2);
            @ref.VendorId = this.VendorId;
            @ref.DeviceId = this.DeviceId;
            @ref.SubsystemId = this.SubsystemId;
            @ref.Revision = this.Revision;
            @ref.DedicatedVideoMemory = this.DedicatedVideoMemory;
            @ref.DedicatedSystemMemory = this.DedicatedSystemMemory;
            @ref.SharedSystemMemory = this.SharedSystemMemory;
            @ref.Luid = this.Luid;
		
		}
    }
    
    /// <summary>	
    /// <p>Describes an adapter (or video card) using DXGI 1.1.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <strong><see cref="SharpDX.DXGI.AdapterDescription1"/></strong> structure provides a DXGI 1.1 description of an adapter.  This structure is initialized by using the <strong><see cref="SharpDX.DXGI.Adapter1.GetDescription1"/></strong> method.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC1']/*"/>	
    /// <msdn-id>ff471326</msdn-id>	
    /// <unmanaged>DXGI_ADAPTER_DESC1</unmanaged>	
    /// <unmanaged-short>DXGI_ADAPTER_DESC1</unmanaged-short>	
    public  partial struct AdapterDescription1 {	
        
        /// <summary>	
        /// <dd> <p>A string that contains the adapter description. On feature level 9 graphics hardware, <strong>GetDesc1</strong> returns ?Software Adapter? for the description string.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC1::Description']/*"/>	
        /// <msdn-id>ff471326</msdn-id>	
        /// <unmanaged>wchar_t Description[128]</unmanaged>	
        /// <unmanaged-short>wchar_t Description</unmanaged-short>	
        public string Description;
        
        /// <summary>	
        /// <dd> <p>The PCI ID of the hardware vendor. On feature level 9 graphics hardware, <strong>GetDesc1</strong> returns zeros for the PCI ID of the hardware vendor.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC1::VendorId']/*"/>	
        /// <msdn-id>ff471326</msdn-id>	
        /// <unmanaged>unsigned int VendorId</unmanaged>	
        /// <unmanaged-short>unsigned int VendorId</unmanaged-short>	
        public int VendorId;
        
        /// <summary>	
        /// <dd> <p>The PCI ID of the hardware device. On feature level 9 graphics hardware, <strong>GetDesc1</strong> returns zeros for the PCI ID of the hardware device.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC1::DeviceId']/*"/>	
        /// <msdn-id>ff471326</msdn-id>	
        /// <unmanaged>unsigned int DeviceId</unmanaged>	
        /// <unmanaged-short>unsigned int DeviceId</unmanaged-short>	
        public int DeviceId;
        
        /// <summary>	
        /// <dd> <p>The PCI ID of the sub system. On feature level 9 graphics hardware, <strong>GetDesc1</strong> returns zeros for the PCI ID of the sub system.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC1::SubSysId']/*"/>	
        /// <msdn-id>ff471326</msdn-id>	
        /// <unmanaged>unsigned int SubSysId</unmanaged>	
        /// <unmanaged-short>unsigned int SubSysId</unmanaged-short>	
        public int SubsystemId;
        
        /// <summary>	
        /// <dd> <p>The PCI ID of the revision number of the adapter. On feature level 9 graphics hardware, <strong>GetDesc1</strong> returns zeros for the PCI ID of the revision number of the adapter.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC1::Revision']/*"/>	
        /// <msdn-id>ff471326</msdn-id>	
        /// <unmanaged>unsigned int Revision</unmanaged>	
        /// <unmanaged-short>unsigned int Revision</unmanaged-short>	
        public int Revision;
        
        /// <summary>	
        /// <dd> <p>The number of bytes of dedicated video memory that are not shared with the CPU.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC1::DedicatedVideoMemory']/*"/>	
        /// <msdn-id>ff471326</msdn-id>	
        /// <unmanaged>SIZE_T DedicatedVideoMemory</unmanaged>	
        /// <unmanaged-short>SIZE_T DedicatedVideoMemory</unmanaged-short>	
        public SharpDX.PointerSize DedicatedVideoMemory;
        
        /// <summary>	
        /// <dd> <p>The number of bytes of dedicated system memory that are not shared with the CPU. This memory is allocated from available system memory at boot time.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC1::DedicatedSystemMemory']/*"/>	
        /// <msdn-id>ff471326</msdn-id>	
        /// <unmanaged>SIZE_T DedicatedSystemMemory</unmanaged>	
        /// <unmanaged-short>SIZE_T DedicatedSystemMemory</unmanaged-short>	
        public SharpDX.PointerSize DedicatedSystemMemory;
        
        /// <summary>	
        /// <dd> <p>The number of bytes of shared system memory. This is the maximum value of system memory that may be consumed by the adapter during operation. Any incidental memory consumed by the driver as it manages and uses video memory is additional.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC1::SharedSystemMemory']/*"/>	
        /// <msdn-id>ff471326</msdn-id>	
        /// <unmanaged>SIZE_T SharedSystemMemory</unmanaged>	
        /// <unmanaged-short>SIZE_T SharedSystemMemory</unmanaged-short>	
        public SharpDX.PointerSize SharedSystemMemory;
        
        /// <summary>	
        /// <dd> <p>A unique value that identifies the adapter. See <strong><see cref="long"/></strong> for a definition of the structure. <strong><see cref="long"/></strong> is defined in dxgi.h.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC1::AdapterLuid']/*"/>	
        /// <msdn-id>ff471326</msdn-id>	
        /// <unmanaged>LUID AdapterLuid</unmanaged>	
        /// <unmanaged-short>LUID AdapterLuid</unmanaged-short>	
        public long Luid;
        
        /// <summary>	
        /// <dd> <p>A value of the <strong><see cref="SharpDX.DXGI.AdapterFlags"/></strong> enumerated type that describes the adapter type.  The <strong><see cref="SharpDX.DXGI.AdapterFlags.Remote"/></strong> flag is reserved.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC1::Flags']/*"/>	
        /// <msdn-id>ff471326</msdn-id>	
        /// <unmanaged>DXGI_ADAPTER_FLAG Flags</unmanaged>	
        /// <unmanaged-short>DXGI_ADAPTER_FLAG Flags</unmanaged-short>	
        public SharpDX.DXGI.AdapterFlags Flags;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential, Pack = 4)]
        internal partial struct __Native {	
            public char Description;
            char __Description1;
            char __Description2;
            char __Description3;
            char __Description4;
            char __Description5;
            char __Description6;
            char __Description7;
            char __Description8;
            char __Description9;
            char __Description10;
            char __Description11;
            char __Description12;
            char __Description13;
            char __Description14;
            char __Description15;
            char __Description16;
            char __Description17;
            char __Description18;
            char __Description19;
            char __Description20;
            char __Description21;
            char __Description22;
            char __Description23;
            char __Description24;
            char __Description25;
            char __Description26;
            char __Description27;
            char __Description28;
            char __Description29;
            char __Description30;
            char __Description31;
            char __Description32;
            char __Description33;
            char __Description34;
            char __Description35;
            char __Description36;
            char __Description37;
            char __Description38;
            char __Description39;
            char __Description40;
            char __Description41;
            char __Description42;
            char __Description43;
            char __Description44;
            char __Description45;
            char __Description46;
            char __Description47;
            char __Description48;
            char __Description49;
            char __Description50;
            char __Description51;
            char __Description52;
            char __Description53;
            char __Description54;
            char __Description55;
            char __Description56;
            char __Description57;
            char __Description58;
            char __Description59;
            char __Description60;
            char __Description61;
            char __Description62;
            char __Description63;
            char __Description64;
            char __Description65;
            char __Description66;
            char __Description67;
            char __Description68;
            char __Description69;
            char __Description70;
            char __Description71;
            char __Description72;
            char __Description73;
            char __Description74;
            char __Description75;
            char __Description76;
            char __Description77;
            char __Description78;
            char __Description79;
            char __Description80;
            char __Description81;
            char __Description82;
            char __Description83;
            char __Description84;
            char __Description85;
            char __Description86;
            char __Description87;
            char __Description88;
            char __Description89;
            char __Description90;
            char __Description91;
            char __Description92;
            char __Description93;
            char __Description94;
            char __Description95;
            char __Description96;
            char __Description97;
            char __Description98;
            char __Description99;
            char __Description100;
            char __Description101;
            char __Description102;
            char __Description103;
            char __Description104;
            char __Description105;
            char __Description106;
            char __Description107;
            char __Description108;
            char __Description109;
            char __Description110;
            char __Description111;
            char __Description112;
            char __Description113;
            char __Description114;
            char __Description115;
            char __Description116;
            char __Description117;
            char __Description118;
            char __Description119;
            char __Description120;
            char __Description121;
            char __Description122;
            char __Description123;
            char __Description124;
            char __Description125;
            char __Description126;
            char __Description127;
            public int VendorId;
            public int DeviceId;
            public int SubsystemId;
            public int Revision;
            public SharpDX.PointerSize DedicatedVideoMemory;
            public SharpDX.PointerSize DedicatedSystemMemory;
            public SharpDX.PointerSize SharedSystemMemory;
            public long Luid;
            public SharpDX.DXGI.AdapterFlags Flags;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            fixed (char* __ptr = &@ref.Description) this.Description = SharpDX.Utilities.PtrToStringUni((IntPtr)__ptr, 128);
            this.VendorId = @ref.VendorId;
            this.DeviceId = @ref.DeviceId;
            this.SubsystemId = @ref.SubsystemId;
            this.Revision = @ref.Revision;
            this.DedicatedVideoMemory = @ref.DedicatedVideoMemory;
            this.DedicatedSystemMemory = @ref.DedicatedSystemMemory;
            this.SharedSystemMemory = @ref.SharedSystemMemory;
            this.Luid = @ref.Luid;
            this.Flags = @ref.Flags;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            fixed (char* __psrc = this.Description) fixed (char* __ptr = &@ref.Description) Utilities.CopyMemory((IntPtr)__ptr, (IntPtr)__psrc, Description.Length * 2);
            @ref.VendorId = this.VendorId;
            @ref.DeviceId = this.DeviceId;
            @ref.SubsystemId = this.SubsystemId;
            @ref.Revision = this.Revision;
            @ref.DedicatedVideoMemory = this.DedicatedVideoMemory;
            @ref.DedicatedSystemMemory = this.DedicatedSystemMemory;
            @ref.SharedSystemMemory = this.SharedSystemMemory;
            @ref.Luid = this.Luid;
            @ref.Flags = this.Flags;
		
		}
    }
    
    /// <summary>	
    /// <p>Describes an adapter (or video card) that uses Microsoft DirectX Graphics Infrastructure (DXGI) 1.2.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <strong><see cref="SharpDX.DXGI.AdapterDescription2"/></strong> structure provides a DXGI 1.2 description of an adapter.  This structure is initialized by using the <strong><see cref="SharpDX.DXGI.Adapter2.GetDescription2"/></strong> method.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC2']/*"/>	
    /// <msdn-id>hh404493</msdn-id>	
    /// <unmanaged>DXGI_ADAPTER_DESC2</unmanaged>	
    /// <unmanaged-short>DXGI_ADAPTER_DESC2</unmanaged-short>	
    public  partial struct AdapterDescription2 {	
        
        /// <summary>	
        /// <dd> <p>A string that contains the adapter description.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC2::Description']/*"/>	
        /// <msdn-id>hh404493</msdn-id>	
        /// <unmanaged>wchar_t Description[128]</unmanaged>	
        /// <unmanaged-short>wchar_t Description</unmanaged-short>	
        public string Description;
        
        /// <summary>	
        /// <dd> <p>The PCI ID of the hardware vendor.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC2::VendorId']/*"/>	
        /// <msdn-id>hh404493</msdn-id>	
        /// <unmanaged>unsigned int VendorId</unmanaged>	
        /// <unmanaged-short>unsigned int VendorId</unmanaged-short>	
        public int VendorId;
        
        /// <summary>	
        /// <dd> <p>The PCI ID of the hardware device.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC2::DeviceId']/*"/>	
        /// <msdn-id>hh404493</msdn-id>	
        /// <unmanaged>unsigned int DeviceId</unmanaged>	
        /// <unmanaged-short>unsigned int DeviceId</unmanaged-short>	
        public int DeviceId;
        
        /// <summary>	
        /// <dd> <p>The PCI ID of the sub system.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC2::SubSysId']/*"/>	
        /// <msdn-id>hh404493</msdn-id>	
        /// <unmanaged>unsigned int SubSysId</unmanaged>	
        /// <unmanaged-short>unsigned int SubSysId</unmanaged-short>	
        public int SubsystemId;
        
        /// <summary>	
        /// <dd> <p>The PCI ID of the revision number of the adapter.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC2::Revision']/*"/>	
        /// <msdn-id>hh404493</msdn-id>	
        /// <unmanaged>unsigned int Revision</unmanaged>	
        /// <unmanaged-short>unsigned int Revision</unmanaged-short>	
        public int Revision;
        
        /// <summary>	
        /// <dd> <p>The number of bytes of dedicated video memory that are not shared with the CPU.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC2::DedicatedVideoMemory']/*"/>	
        /// <msdn-id>hh404493</msdn-id>	
        /// <unmanaged>SIZE_T DedicatedVideoMemory</unmanaged>	
        /// <unmanaged-short>SIZE_T DedicatedVideoMemory</unmanaged-short>	
        public SharpDX.PointerSize DedicatedVideoMemory;
        
        /// <summary>	
        /// <dd> <p>The number of bytes of dedicated system memory that are not shared with the CPU. This memory is allocated from available system memory at boot time.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC2::DedicatedSystemMemory']/*"/>	
        /// <msdn-id>hh404493</msdn-id>	
        /// <unmanaged>SIZE_T DedicatedSystemMemory</unmanaged>	
        /// <unmanaged-short>SIZE_T DedicatedSystemMemory</unmanaged-short>	
        public SharpDX.PointerSize DedicatedSystemMemory;
        
        /// <summary>	
        /// <dd> <p>The number of bytes of shared system memory. This is the maximum value of system memory that may be consumed by the adapter during operation. Any incidental memory consumed by the driver as it manages and uses video memory is additional.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC2::SharedSystemMemory']/*"/>	
        /// <msdn-id>hh404493</msdn-id>	
        /// <unmanaged>SIZE_T SharedSystemMemory</unmanaged>	
        /// <unmanaged-short>SIZE_T SharedSystemMemory</unmanaged-short>	
        public SharpDX.PointerSize SharedSystemMemory;
        
        /// <summary>	
        /// <dd> <p>A unique value that identifies the adapter. See <strong><see cref="long"/></strong> for a definition of the structure. <strong><see cref="long"/></strong> is defined in dxgi.h.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC2::AdapterLuid']/*"/>	
        /// <msdn-id>hh404493</msdn-id>	
        /// <unmanaged>LUID AdapterLuid</unmanaged>	
        /// <unmanaged-short>LUID AdapterLuid</unmanaged-short>	
        public long Luid;
        
        /// <summary>	
        /// <dd> <p>A value of the <strong><see cref="SharpDX.DXGI.AdapterFlags"/></strong> enumerated type that describes the adapter type.  The <strong><see cref="SharpDX.DXGI.AdapterFlags.Remote"/></strong> flag is reserved.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC2::Flags']/*"/>	
        /// <msdn-id>hh404493</msdn-id>	
        /// <unmanaged>DXGI_ADAPTER_FLAG Flags</unmanaged>	
        /// <unmanaged-short>DXGI_ADAPTER_FLAG Flags</unmanaged-short>	
        public SharpDX.DXGI.AdapterFlags Flags;
        
        /// <summary>	
        /// <dd> <p>A value of the <strong><see cref="SharpDX.DXGI.GraphicsPreemptionGranularity"/></strong> enumerated type that describes the granularity level at which the GPU can be preempted from performing its current graphics rendering task.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC2::GraphicsPreemptionGranularity']/*"/>	
        /// <msdn-id>hh404493</msdn-id>	
        /// <unmanaged>DXGI_GRAPHICS_PREEMPTION_GRANULARITY GraphicsPreemptionGranularity</unmanaged>	
        /// <unmanaged-short>DXGI_GRAPHICS_PREEMPTION_GRANULARITY GraphicsPreemptionGranularity</unmanaged-short>	
        public SharpDX.DXGI.GraphicsPreemptionGranularity GraphicsPreemptionGranularity;
        
        /// <summary>	
        /// <dd> <p>A value of the <strong><see cref="SharpDX.DXGI.ComputePreemptionGranularity"/></strong> enumerated type that describes the granularity level at which the GPU can be preempted from performing its current compute task.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_ADAPTER_DESC2::ComputePreemptionGranularity']/*"/>	
        /// <msdn-id>hh404493</msdn-id>	
        /// <unmanaged>DXGI_COMPUTE_PREEMPTION_GRANULARITY ComputePreemptionGranularity</unmanaged>	
        /// <unmanaged-short>DXGI_COMPUTE_PREEMPTION_GRANULARITY ComputePreemptionGranularity</unmanaged-short>	
        public SharpDX.DXGI.ComputePreemptionGranularity ComputePreemptionGranularity;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public char Description;
            char __Description1;
            char __Description2;
            char __Description3;
            char __Description4;
            char __Description5;
            char __Description6;
            char __Description7;
            char __Description8;
            char __Description9;
            char __Description10;
            char __Description11;
            char __Description12;
            char __Description13;
            char __Description14;
            char __Description15;
            char __Description16;
            char __Description17;
            char __Description18;
            char __Description19;
            char __Description20;
            char __Description21;
            char __Description22;
            char __Description23;
            char __Description24;
            char __Description25;
            char __Description26;
            char __Description27;
            char __Description28;
            char __Description29;
            char __Description30;
            char __Description31;
            char __Description32;
            char __Description33;
            char __Description34;
            char __Description35;
            char __Description36;
            char __Description37;
            char __Description38;
            char __Description39;
            char __Description40;
            char __Description41;
            char __Description42;
            char __Description43;
            char __Description44;
            char __Description45;
            char __Description46;
            char __Description47;
            char __Description48;
            char __Description49;
            char __Description50;
            char __Description51;
            char __Description52;
            char __Description53;
            char __Description54;
            char __Description55;
            char __Description56;
            char __Description57;
            char __Description58;
            char __Description59;
            char __Description60;
            char __Description61;
            char __Description62;
            char __Description63;
            char __Description64;
            char __Description65;
            char __Description66;
            char __Description67;
            char __Description68;
            char __Description69;
            char __Description70;
            char __Description71;
            char __Description72;
            char __Description73;
            char __Description74;
            char __Description75;
            char __Description76;
            char __Description77;
            char __Description78;
            char __Description79;
            char __Description80;
            char __Description81;
            char __Description82;
            char __Description83;
            char __Description84;
            char __Description85;
            char __Description86;
            char __Description87;
            char __Description88;
            char __Description89;
            char __Description90;
            char __Description91;
            char __Description92;
            char __Description93;
            char __Description94;
            char __Description95;
            char __Description96;
            char __Description97;
            char __Description98;
            char __Description99;
            char __Description100;
            char __Description101;
            char __Description102;
            char __Description103;
            char __Description104;
            char __Description105;
            char __Description106;
            char __Description107;
            char __Description108;
            char __Description109;
            char __Description110;
            char __Description111;
            char __Description112;
            char __Description113;
            char __Description114;
            char __Description115;
            char __Description116;
            char __Description117;
            char __Description118;
            char __Description119;
            char __Description120;
            char __Description121;
            char __Description122;
            char __Description123;
            char __Description124;
            char __Description125;
            char __Description126;
            char __Description127;
            public int VendorId;
            public int DeviceId;
            public int SubsystemId;
            public int Revision;
            public SharpDX.PointerSize DedicatedVideoMemory;
            public SharpDX.PointerSize DedicatedSystemMemory;
            public SharpDX.PointerSize SharedSystemMemory;
            public long Luid;
            public SharpDX.DXGI.AdapterFlags Flags;
            public SharpDX.DXGI.GraphicsPreemptionGranularity GraphicsPreemptionGranularity;
            public SharpDX.DXGI.ComputePreemptionGranularity ComputePreemptionGranularity;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            fixed (char* __ptr = &@ref.Description) this.Description = SharpDX.Utilities.PtrToStringUni((IntPtr)__ptr, 128);
            this.VendorId = @ref.VendorId;
            this.DeviceId = @ref.DeviceId;
            this.SubsystemId = @ref.SubsystemId;
            this.Revision = @ref.Revision;
            this.DedicatedVideoMemory = @ref.DedicatedVideoMemory;
            this.DedicatedSystemMemory = @ref.DedicatedSystemMemory;
            this.SharedSystemMemory = @ref.SharedSystemMemory;
            this.Luid = @ref.Luid;
            this.Flags = @ref.Flags;
            this.GraphicsPreemptionGranularity = @ref.GraphicsPreemptionGranularity;
            this.ComputePreemptionGranularity = @ref.ComputePreemptionGranularity;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            fixed (char* __psrc = this.Description) fixed (char* __ptr = &@ref.Description) Utilities.CopyMemory((IntPtr)__ptr, (IntPtr)__psrc, Description.Length * 2);
            @ref.VendorId = this.VendorId;
            @ref.DeviceId = this.DeviceId;
            @ref.SubsystemId = this.SubsystemId;
            @ref.Revision = this.Revision;
            @ref.DedicatedVideoMemory = this.DedicatedVideoMemory;
            @ref.DedicatedSystemMemory = this.DedicatedSystemMemory;
            @ref.SharedSystemMemory = this.SharedSystemMemory;
            @ref.Luid = this.Luid;
            @ref.Flags = this.Flags;
            @ref.GraphicsPreemptionGranularity = this.GraphicsPreemptionGranularity;
            @ref.ComputePreemptionGranularity = this.ComputePreemptionGranularity;
		
		}
    }
    
    /// <summary>	
    /// <p>Used with <strong><see cref="SharpDX.DXGI.FactoryMedia"/></strong>::<strong>CreateDecodeSwapChainForCompositionSurfaceHandle</strong> to describe a decode swap chain.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_DECODE_SWAP_CHAIN_DESC']/*"/>	
    /// <msdn-id>dn384106</msdn-id>	
    /// <unmanaged>DXGI_DECODE_SWAP_CHAIN_DESC</unmanaged>	
    /// <unmanaged-short>DXGI_DECODE_SWAP_CHAIN_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct DecodeSwapChainDescription {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_DECODE_SWAP_CHAIN_DESC::Flags']/*"/>	
        /// <msdn-id>dn384106</msdn-id>	
        /// <unmanaged>unsigned int Flags</unmanaged>	
        /// <unmanaged-short>unsigned int Flags</unmanaged-short>	
        public int Flags;
    }
    
    /// <summary>	
    /// <p>Describes timing and presentation statistics for a frame.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>You initialize the <strong><see cref="SharpDX.DXGI.FrameStatistics"/></strong> structure with the <strong><see cref="SharpDX.DXGI.Output.GetFrameStatistics"/></strong> or <strong><see cref="SharpDX.DXGI.SwapChain.GetFrameStatistics"/></strong> method.</p><p>You can only use <strong><see cref="SharpDX.DXGI.SwapChain.GetFrameStatistics"/></strong> for swap chains that either use the flip presentation model or draw in full-screen mode. You set the <strong><see cref="SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> value in the <strong>SwapEffect</strong> member of the <strong><see cref="SharpDX.DXGI.SwapChainDescription1"/></strong> structure to specify that the swap chain uses the flip presentation model.</p><p>The values in the <strong>PresentCount</strong> and <strong>PresentRefreshCount</strong> members indicate information about when a frame was presented on the display screen. You can use these values to determine whether a glitch occurred. The values in the <strong>SyncRefreshCount</strong> and <strong>SyncQPCTime</strong> members indicate timing information that you can use for audio and video synchronization or very precise animation. If the swap chain draws in full-screen mode, these values are based on when the computer booted. 	
    /// If the swap chain draws in windowed mode, these values are based on when the swap chain is created.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FRAME_STATISTICS']/*"/>	
    /// <msdn-id>bb173060</msdn-id>	
    /// <unmanaged>DXGI_FRAME_STATISTICS</unmanaged>	
    /// <unmanaged-short>DXGI_FRAME_STATISTICS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct FrameStatistics {	
        
        /// <summary>	
        /// <dd> <p>A value that represents the running total count of times that an image was presented to the monitor since the computer booted.</p> <p><strong>Note</strong>??The number of times that an image was presented to the monitor is not necessarily the same as the number of times  that you called <strong><see cref="SharpDX.DXGI.SwapChain.Present"/></strong> or <strong><see cref="SharpDX.DXGI.SwapChain1.Present1"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FRAME_STATISTICS::PresentCount']/*"/>	
        /// <msdn-id>bb173060</msdn-id>	
        /// <unmanaged>unsigned int PresentCount</unmanaged>	
        /// <unmanaged-short>unsigned int PresentCount</unmanaged-short>	
        public int PresentCount;
        
        /// <summary>	
        /// <dd> <p>A value that represents  the running total count of v-blanks at which the last image was presented to the monitor and that have happened since the computer booted (for windowed mode, since the swap chain was created).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FRAME_STATISTICS::PresentRefreshCount']/*"/>	
        /// <msdn-id>bb173060</msdn-id>	
        /// <unmanaged>unsigned int PresentRefreshCount</unmanaged>	
        /// <unmanaged-short>unsigned int PresentRefreshCount</unmanaged-short>	
        public int PresentRefreshCount;
        
        /// <summary>	
        /// <dd> <p>A value that represents  the running total count of v-blanks when the scheduler last sampled the machine time by calling <strong>QueryPerformanceCounter</strong> and that have happened since the computer booted (for windowed mode, since the swap chain was created).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FRAME_STATISTICS::SyncRefreshCount']/*"/>	
        /// <msdn-id>bb173060</msdn-id>	
        /// <unmanaged>unsigned int SyncRefreshCount</unmanaged>	
        /// <unmanaged-short>unsigned int SyncRefreshCount</unmanaged-short>	
        public int SyncRefreshCount;
        
        /// <summary>	
        /// <dd> <p>A value that represents the high-resolution performance counter timer.  This value is the same as the value returned by the <strong>QueryPerformanceCounter</strong> function.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FRAME_STATISTICS::SyncQPCTime']/*"/>	
        /// <msdn-id>bb173060</msdn-id>	
        /// <unmanaged>LARGE_INTEGER SyncQPCTime</unmanaged>	
        /// <unmanaged-short>LARGE_INTEGER SyncQPCTime</unmanaged-short>	
        public long SyncQPCTime;
        
        /// <summary>	
        /// <dd> <p>Reserved. Always returns 0.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FRAME_STATISTICS::SyncGPUTime']/*"/>	
        /// <msdn-id>bb173060</msdn-id>	
        /// <unmanaged>LARGE_INTEGER SyncGPUTime</unmanaged>	
        /// <unmanaged-short>LARGE_INTEGER SyncGPUTime</unmanaged-short>	
        public long SyncGPUTime;
    }
    
    /// <summary>	
    /// <p>Used to verify system approval for the app's custom present duration (custom refresh rate). Approval should be continuously verified on a frame-by-frame basis.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FRAME_STATISTICS_MEDIA']/*"/>	
    /// <msdn-id>dn384108</msdn-id>	
    /// <unmanaged>DXGI_FRAME_STATISTICS_MEDIA</unmanaged>	
    /// <unmanaged-short>DXGI_FRAME_STATISTICS_MEDIA</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct FrameStatisticsMedia {	
        
        /// <summary>	
        /// <dd> <p>A value indicating the composition presentation mode. This value is used to determine whether the app should continue to use the decode swap chain. See <strong><see cref="SharpDX.DXGI.FramePresentationMode"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FRAME_STATISTICS_MEDIA::PresentCount']/*"/>	
        /// <msdn-id>dn384108</msdn-id>	
        /// <unmanaged>unsigned int PresentCount</unmanaged>	
        /// <unmanaged-short>unsigned int PresentCount</unmanaged-short>	
        public int PresentCount;
        
        /// <summary>	
        /// <dd> <p>If the system approves an app's custom present duration request, this field is set to the approved custom present duration.</p> <p>If the app's custom present duration request is not approved, this field is set to zero.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FRAME_STATISTICS_MEDIA::PresentRefreshCount']/*"/>	
        /// <msdn-id>dn384108</msdn-id>	
        /// <unmanaged>unsigned int PresentRefreshCount</unmanaged>	
        /// <unmanaged-short>unsigned int PresentRefreshCount</unmanaged-short>	
        public int PresentRefreshCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FRAME_STATISTICS_MEDIA::SyncRefreshCount']/*"/>	
        /// <msdn-id>dn384108</msdn-id>	
        /// <unmanaged>unsigned int SyncRefreshCount</unmanaged>	
        /// <unmanaged-short>unsigned int SyncRefreshCount</unmanaged-short>	
        public int SyncRefreshCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FRAME_STATISTICS_MEDIA::SyncQPCTime']/*"/>	
        /// <msdn-id>dn384108</msdn-id>	
        /// <unmanaged>LARGE_INTEGER SyncQPCTime</unmanaged>	
        /// <unmanaged-short>LARGE_INTEGER SyncQPCTime</unmanaged-short>	
        public long SyncQPCTime;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FRAME_STATISTICS_MEDIA::SyncGPUTime']/*"/>	
        /// <msdn-id>dn384108</msdn-id>	
        /// <unmanaged>LARGE_INTEGER SyncGPUTime</unmanaged>	
        /// <unmanaged-short>LARGE_INTEGER SyncGPUTime</unmanaged-short>	
        public long SyncGPUTime;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FRAME_STATISTICS_MEDIA::CompositionMode']/*"/>	
        /// <msdn-id>dn384108</msdn-id>	
        /// <unmanaged>DXGI_FRAME_PRESENTATION_MODE CompositionMode</unmanaged>	
        /// <unmanaged-short>DXGI_FRAME_PRESENTATION_MODE CompositionMode</unmanaged-short>	
        public SharpDX.DXGI.FramePresentationMode CompositionMode;
        
        /// <summary>	
        /// <dd> <p>If the system approves an app's custom present duration request, this field is set to the approved custom present duration.</p> <p>If the app's custom present duration request is not approved, this field is set to zero.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_FRAME_STATISTICS_MEDIA::ApprovedPresentDuration']/*"/>	
        /// <msdn-id>dn384108</msdn-id>	
        /// <unmanaged>unsigned int ApprovedPresentDuration</unmanaged>	
        /// <unmanaged-short>unsigned int ApprovedPresentDuration</unmanaged-short>	
        public int ApprovedPresentDuration;
    }
    
    /// <summary>	
    /// <p>Controls the settings of a gamma curve.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <strong><see cref="SharpDX.DXGI.GammaControl"/></strong> structure is used by the <strong><see cref="SharpDX.DXGI.Output.SetGammaControl"/></strong> method.</p><p>For info about using gamma correction, see Using gamma correction. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_GAMMA_CONTROL']/*"/>	
    /// <msdn-id>bb173061</msdn-id>	
    /// <unmanaged>DXGI_GAMMA_CONTROL</unmanaged>	
    /// <unmanaged-short>DXGI_GAMMA_CONTROL</unmanaged-short>	
    public  partial struct GammaControl {	
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Mathematics.Interop.RawColor4"/></strong> structure with scalar values that are applied to rgb values before being sent to the gamma look up table.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_GAMMA_CONTROL::Scale']/*"/>	
        /// <msdn-id>bb173061</msdn-id>	
        /// <unmanaged>DXGI_RGB Scale</unmanaged>	
        /// <unmanaged-short>DXGI_RGB Scale</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawColor4 Scale;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Mathematics.Interop.RawColor4"/></strong> structure with offset values that are applied to the rgb values before being sent to the gamma look up table.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_GAMMA_CONTROL::Offset']/*"/>	
        /// <msdn-id>bb173061</msdn-id>	
        /// <unmanaged>DXGI_RGB Offset</unmanaged>	
        /// <unmanaged-short>DXGI_RGB Offset</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawColor4 Offset;
        
        /// <summary>	
        /// <dd> <p>An array of <strong><see cref="SharpDX.Mathematics.Interop.RawColor4"/></strong> structures that control the points of a gamma curve.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_GAMMA_CONTROL::GammaCurve']/*"/>	
        /// <msdn-id>bb173061</msdn-id>	
        /// <unmanaged>DXGI_RGB GammaCurve[1025]</unmanaged>	
        /// <unmanaged-short>DXGI_RGB GammaCurve</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawColor4[] GammaCurve { 
            get { return _GammaCurve ?? (_GammaCurve = new SharpDX.Mathematics.Interop.RawColor4[1025]);}
        }
        internal SharpDX.Mathematics.Interop.RawColor4[] _GammaCurve;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public SharpDX.Mathematics.Interop.RawColor4 Scale;
            public SharpDX.Mathematics.Interop.RawColor4 Offset;
            public SharpDX.Mathematics.Interop.RawColor4 GammaCurve;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve1;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve2;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve3;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve4;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve5;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve6;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve7;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve8;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve9;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve10;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve11;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve12;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve13;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve14;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve15;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve16;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve17;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve18;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve19;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve20;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve21;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve22;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve23;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve24;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve25;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve26;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve27;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve28;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve29;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve30;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve31;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve32;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve33;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve34;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve35;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve36;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve37;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve38;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve39;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve40;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve41;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve42;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve43;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve44;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve45;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve46;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve47;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve48;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve49;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve50;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve51;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve52;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve53;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve54;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve55;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve56;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve57;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve58;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve59;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve60;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve61;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve62;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve63;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve64;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve65;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve66;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve67;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve68;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve69;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve70;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve71;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve72;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve73;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve74;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve75;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve76;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve77;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve78;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve79;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve80;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve81;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve82;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve83;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve84;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve85;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve86;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve87;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve88;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve89;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve90;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve91;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve92;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve93;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve94;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve95;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve96;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve97;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve98;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve99;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve100;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve101;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve102;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve103;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve104;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve105;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve106;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve107;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve108;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve109;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve110;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve111;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve112;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve113;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve114;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve115;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve116;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve117;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve118;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve119;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve120;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve121;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve122;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve123;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve124;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve125;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve126;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve127;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve128;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve129;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve130;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve131;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve132;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve133;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve134;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve135;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve136;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve137;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve138;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve139;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve140;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve141;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve142;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve143;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve144;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve145;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve146;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve147;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve148;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve149;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve150;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve151;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve152;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve153;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve154;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve155;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve156;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve157;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve158;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve159;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve160;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve161;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve162;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve163;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve164;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve165;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve166;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve167;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve168;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve169;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve170;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve171;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve172;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve173;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve174;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve175;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve176;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve177;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve178;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve179;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve180;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve181;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve182;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve183;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve184;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve185;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve186;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve187;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve188;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve189;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve190;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve191;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve192;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve193;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve194;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve195;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve196;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve197;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve198;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve199;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve200;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve201;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve202;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve203;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve204;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve205;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve206;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve207;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve208;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve209;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve210;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve211;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve212;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve213;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve214;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve215;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve216;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve217;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve218;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve219;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve220;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve221;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve222;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve223;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve224;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve225;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve226;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve227;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve228;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve229;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve230;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve231;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve232;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve233;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve234;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve235;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve236;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve237;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve238;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve239;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve240;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve241;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve242;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve243;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve244;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve245;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve246;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve247;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve248;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve249;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve250;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve251;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve252;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve253;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve254;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve255;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve256;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve257;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve258;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve259;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve260;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve261;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve262;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve263;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve264;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve265;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve266;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve267;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve268;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve269;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve270;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve271;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve272;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve273;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve274;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve275;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve276;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve277;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve278;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve279;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve280;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve281;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve282;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve283;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve284;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve285;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve286;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve287;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve288;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve289;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve290;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve291;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve292;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve293;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve294;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve295;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve296;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve297;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve298;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve299;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve300;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve301;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve302;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve303;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve304;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve305;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve306;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve307;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve308;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve309;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve310;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve311;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve312;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve313;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve314;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve315;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve316;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve317;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve318;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve319;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve320;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve321;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve322;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve323;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve324;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve325;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve326;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve327;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve328;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve329;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve330;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve331;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve332;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve333;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve334;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve335;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve336;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve337;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve338;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve339;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve340;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve341;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve342;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve343;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve344;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve345;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve346;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve347;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve348;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve349;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve350;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve351;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve352;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve353;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve354;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve355;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve356;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve357;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve358;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve359;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve360;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve361;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve362;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve363;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve364;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve365;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve366;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve367;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve368;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve369;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve370;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve371;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve372;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve373;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve374;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve375;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve376;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve377;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve378;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve379;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve380;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve381;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve382;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve383;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve384;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve385;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve386;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve387;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve388;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve389;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve390;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve391;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve392;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve393;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve394;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve395;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve396;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve397;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve398;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve399;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve400;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve401;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve402;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve403;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve404;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve405;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve406;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve407;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve408;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve409;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve410;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve411;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve412;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve413;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve414;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve415;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve416;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve417;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve418;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve419;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve420;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve421;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve422;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve423;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve424;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve425;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve426;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve427;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve428;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve429;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve430;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve431;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve432;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve433;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve434;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve435;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve436;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve437;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve438;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve439;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve440;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve441;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve442;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve443;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve444;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve445;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve446;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve447;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve448;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve449;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve450;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve451;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve452;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve453;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve454;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve455;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve456;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve457;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve458;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve459;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve460;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve461;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve462;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve463;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve464;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve465;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve466;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve467;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve468;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve469;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve470;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve471;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve472;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve473;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve474;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve475;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve476;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve477;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve478;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve479;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve480;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve481;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve482;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve483;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve484;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve485;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve486;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve487;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve488;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve489;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve490;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve491;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve492;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve493;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve494;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve495;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve496;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve497;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve498;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve499;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve500;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve501;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve502;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve503;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve504;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve505;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve506;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve507;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve508;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve509;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve510;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve511;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve512;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve513;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve514;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve515;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve516;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve517;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve518;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve519;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve520;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve521;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve522;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve523;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve524;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve525;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve526;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve527;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve528;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve529;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve530;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve531;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve532;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve533;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve534;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve535;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve536;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve537;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve538;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve539;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve540;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve541;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve542;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve543;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve544;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve545;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve546;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve547;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve548;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve549;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve550;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve551;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve552;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve553;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve554;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve555;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve556;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve557;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve558;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve559;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve560;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve561;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve562;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve563;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve564;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve565;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve566;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve567;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve568;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve569;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve570;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve571;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve572;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve573;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve574;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve575;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve576;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve577;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve578;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve579;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve580;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve581;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve582;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve583;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve584;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve585;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve586;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve587;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve588;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve589;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve590;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve591;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve592;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve593;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve594;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve595;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve596;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve597;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve598;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve599;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve600;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve601;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve602;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve603;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve604;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve605;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve606;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve607;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve608;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve609;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve610;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve611;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve612;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve613;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve614;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve615;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve616;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve617;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve618;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve619;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve620;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve621;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve622;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve623;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve624;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve625;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve626;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve627;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve628;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve629;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve630;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve631;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve632;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve633;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve634;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve635;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve636;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve637;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve638;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve639;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve640;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve641;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve642;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve643;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve644;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve645;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve646;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve647;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve648;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve649;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve650;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve651;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve652;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve653;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve654;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve655;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve656;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve657;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve658;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve659;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve660;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve661;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve662;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve663;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve664;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve665;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve666;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve667;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve668;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve669;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve670;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve671;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve672;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve673;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve674;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve675;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve676;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve677;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve678;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve679;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve680;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve681;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve682;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve683;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve684;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve685;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve686;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve687;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve688;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve689;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve690;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve691;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve692;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve693;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve694;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve695;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve696;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve697;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve698;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve699;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve700;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve701;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve702;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve703;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve704;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve705;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve706;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve707;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve708;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve709;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve710;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve711;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve712;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve713;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve714;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve715;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve716;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve717;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve718;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve719;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve720;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve721;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve722;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve723;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve724;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve725;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve726;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve727;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve728;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve729;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve730;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve731;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve732;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve733;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve734;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve735;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve736;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve737;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve738;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve739;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve740;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve741;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve742;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve743;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve744;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve745;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve746;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve747;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve748;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve749;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve750;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve751;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve752;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve753;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve754;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve755;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve756;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve757;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve758;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve759;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve760;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve761;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve762;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve763;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve764;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve765;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve766;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve767;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve768;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve769;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve770;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve771;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve772;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve773;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve774;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve775;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve776;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve777;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve778;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve779;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve780;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve781;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve782;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve783;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve784;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve785;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve786;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve787;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve788;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve789;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve790;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve791;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve792;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve793;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve794;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve795;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve796;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve797;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve798;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve799;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve800;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve801;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve802;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve803;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve804;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve805;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve806;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve807;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve808;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve809;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve810;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve811;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve812;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve813;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve814;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve815;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve816;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve817;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve818;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve819;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve820;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve821;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve822;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve823;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve824;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve825;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve826;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve827;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve828;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve829;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve830;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve831;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve832;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve833;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve834;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve835;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve836;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve837;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve838;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve839;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve840;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve841;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve842;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve843;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve844;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve845;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve846;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve847;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve848;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve849;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve850;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve851;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve852;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve853;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve854;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve855;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve856;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve857;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve858;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve859;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve860;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve861;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve862;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve863;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve864;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve865;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve866;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve867;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve868;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve869;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve870;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve871;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve872;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve873;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve874;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve875;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve876;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve877;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve878;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve879;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve880;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve881;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve882;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve883;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve884;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve885;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve886;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve887;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve888;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve889;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve890;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve891;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve892;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve893;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve894;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve895;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve896;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve897;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve898;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve899;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve900;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve901;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve902;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve903;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve904;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve905;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve906;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve907;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve908;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve909;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve910;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve911;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve912;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve913;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve914;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve915;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve916;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve917;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve918;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve919;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve920;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve921;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve922;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve923;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve924;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve925;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve926;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve927;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve928;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve929;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve930;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve931;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve932;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve933;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve934;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve935;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve936;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve937;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve938;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve939;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve940;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve941;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve942;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve943;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve944;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve945;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve946;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve947;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve948;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve949;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve950;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve951;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve952;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve953;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve954;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve955;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve956;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve957;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve958;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve959;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve960;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve961;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve962;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve963;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve964;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve965;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve966;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve967;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve968;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve969;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve970;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve971;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve972;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve973;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve974;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve975;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve976;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve977;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve978;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve979;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve980;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve981;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve982;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve983;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve984;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve985;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve986;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve987;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve988;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve989;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve990;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve991;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve992;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve993;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve994;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve995;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve996;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve997;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve998;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve999;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve1000;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve1001;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve1002;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve1003;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve1004;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve1005;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve1006;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve1007;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve1008;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve1009;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve1010;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve1011;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve1012;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve1013;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve1014;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve1015;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve1016;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve1017;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve1018;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve1019;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve1020;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve1021;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve1022;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve1023;
            SharpDX.Mathematics.Interop.RawColor4 __GammaCurve1024;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Scale = @ref.Scale;
            this.Offset = @ref.Offset;
            fixed (void* __to = &this.GammaCurve[0]) fixed (void* __from = &@ref.GammaCurve) SharpDX.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, 1025*sizeof ( SharpDX.Mathematics.Interop.RawColor4));
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Scale = this.Scale;
            @ref.Offset = this.Offset;
            fixed (void* __to = &@ref.GammaCurve) fixed (void* __from = &this.GammaCurve[0]) SharpDX.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, 1025*sizeof ( SharpDX.Mathematics.Interop.RawColor4));
		
		}
    }
    
    /// <summary>	
    /// <p>Controls the gamma capabilities of an adapter.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To get a list of the capabilities for controlling gamma correction, call <strong><see cref="SharpDX.DXGI.Output.GetGammaControlCapabilities"/></strong>.</p><p>For info about using gamma correction, see Using gamma correction. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_GAMMA_CONTROL_CAPABILITIES']/*"/>	
    /// <msdn-id>bb173062</msdn-id>	
    /// <unmanaged>DXGI_GAMMA_CONTROL_CAPABILITIES</unmanaged>	
    /// <unmanaged-short>DXGI_GAMMA_CONTROL_CAPABILITIES</unmanaged-short>	
    public  partial struct GammaControlCapabilities {	
        
        /// <summary>	
        /// <dd> <p>True if scaling and offset operations are supported during gamma correction; otherwise, false.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_GAMMA_CONTROL_CAPABILITIES::ScaleAndOffsetSupported']/*"/>	
        /// <msdn-id>bb173062</msdn-id>	
        /// <unmanaged>BOOL ScaleAndOffsetSupported</unmanaged>	
        /// <unmanaged-short>BOOL ScaleAndOffsetSupported</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IsScaleAndOffsetSupported;
        
        /// <summary>	
        /// <dd> <p>A value describing the maximum range of the control-point positions.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_GAMMA_CONTROL_CAPABILITIES::MaxConvertedValue']/*"/>	
        /// <msdn-id>bb173062</msdn-id>	
        /// <unmanaged>float MaxConvertedValue</unmanaged>	
        /// <unmanaged-short>float MaxConvertedValue</unmanaged-short>	
        public float MaximumConvertedValue;
        
        /// <summary>	
        /// <dd> <p>A value describing the minimum range of the control-point positions.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_GAMMA_CONTROL_CAPABILITIES::MinConvertedValue']/*"/>	
        /// <msdn-id>bb173062</msdn-id>	
        /// <unmanaged>float MinConvertedValue</unmanaged>	
        /// <unmanaged-short>float MinConvertedValue</unmanaged-short>	
        public float MinimumConvertedValue;
        
        /// <summary>	
        /// <dd> <p>A value describing the number of control points in the array.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_GAMMA_CONTROL_CAPABILITIES::NumGammaControlPoints']/*"/>	
        /// <msdn-id>bb173062</msdn-id>	
        /// <unmanaged>unsigned int NumGammaControlPoints</unmanaged>	
        /// <unmanaged-short>unsigned int NumGammaControlPoints</unmanaged-short>	
        public int ControlPointsCount;
        
        /// <summary>	
        /// <dd> <p>An array of values describing control points; the maximum length of control points is 1025.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_GAMMA_CONTROL_CAPABILITIES::ControlPointPositions']/*"/>	
        /// <msdn-id>bb173062</msdn-id>	
        /// <unmanaged>float ControlPointPositions[1025]</unmanaged>	
        /// <unmanaged-short>float ControlPointPositions</unmanaged-short>	
        public float[] ControlPoints { 
            get { return _ControlPoints ?? (_ControlPoints = new float[1025]);}
        }
        internal float[] _ControlPoints;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public SharpDX.Mathematics.Interop.RawBool IsScaleAndOffsetSupported;
            public float MaximumConvertedValue;
            public float MinimumConvertedValue;
            public int ControlPointsCount;
            public float ControlPoints;
            float __ControlPoints1;
            float __ControlPoints2;
            float __ControlPoints3;
            float __ControlPoints4;
            float __ControlPoints5;
            float __ControlPoints6;
            float __ControlPoints7;
            float __ControlPoints8;
            float __ControlPoints9;
            float __ControlPoints10;
            float __ControlPoints11;
            float __ControlPoints12;
            float __ControlPoints13;
            float __ControlPoints14;
            float __ControlPoints15;
            float __ControlPoints16;
            float __ControlPoints17;
            float __ControlPoints18;
            float __ControlPoints19;
            float __ControlPoints20;
            float __ControlPoints21;
            float __ControlPoints22;
            float __ControlPoints23;
            float __ControlPoints24;
            float __ControlPoints25;
            float __ControlPoints26;
            float __ControlPoints27;
            float __ControlPoints28;
            float __ControlPoints29;
            float __ControlPoints30;
            float __ControlPoints31;
            float __ControlPoints32;
            float __ControlPoints33;
            float __ControlPoints34;
            float __ControlPoints35;
            float __ControlPoints36;
            float __ControlPoints37;
            float __ControlPoints38;
            float __ControlPoints39;
            float __ControlPoints40;
            float __ControlPoints41;
            float __ControlPoints42;
            float __ControlPoints43;
            float __ControlPoints44;
            float __ControlPoints45;
            float __ControlPoints46;
            float __ControlPoints47;
            float __ControlPoints48;
            float __ControlPoints49;
            float __ControlPoints50;
            float __ControlPoints51;
            float __ControlPoints52;
            float __ControlPoints53;
            float __ControlPoints54;
            float __ControlPoints55;
            float __ControlPoints56;
            float __ControlPoints57;
            float __ControlPoints58;
            float __ControlPoints59;
            float __ControlPoints60;
            float __ControlPoints61;
            float __ControlPoints62;
            float __ControlPoints63;
            float __ControlPoints64;
            float __ControlPoints65;
            float __ControlPoints66;
            float __ControlPoints67;
            float __ControlPoints68;
            float __ControlPoints69;
            float __ControlPoints70;
            float __ControlPoints71;
            float __ControlPoints72;
            float __ControlPoints73;
            float __ControlPoints74;
            float __ControlPoints75;
            float __ControlPoints76;
            float __ControlPoints77;
            float __ControlPoints78;
            float __ControlPoints79;
            float __ControlPoints80;
            float __ControlPoints81;
            float __ControlPoints82;
            float __ControlPoints83;
            float __ControlPoints84;
            float __ControlPoints85;
            float __ControlPoints86;
            float __ControlPoints87;
            float __ControlPoints88;
            float __ControlPoints89;
            float __ControlPoints90;
            float __ControlPoints91;
            float __ControlPoints92;
            float __ControlPoints93;
            float __ControlPoints94;
            float __ControlPoints95;
            float __ControlPoints96;
            float __ControlPoints97;
            float __ControlPoints98;
            float __ControlPoints99;
            float __ControlPoints100;
            float __ControlPoints101;
            float __ControlPoints102;
            float __ControlPoints103;
            float __ControlPoints104;
            float __ControlPoints105;
            float __ControlPoints106;
            float __ControlPoints107;
            float __ControlPoints108;
            float __ControlPoints109;
            float __ControlPoints110;
            float __ControlPoints111;
            float __ControlPoints112;
            float __ControlPoints113;
            float __ControlPoints114;
            float __ControlPoints115;
            float __ControlPoints116;
            float __ControlPoints117;
            float __ControlPoints118;
            float __ControlPoints119;
            float __ControlPoints120;
            float __ControlPoints121;
            float __ControlPoints122;
            float __ControlPoints123;
            float __ControlPoints124;
            float __ControlPoints125;
            float __ControlPoints126;
            float __ControlPoints127;
            float __ControlPoints128;
            float __ControlPoints129;
            float __ControlPoints130;
            float __ControlPoints131;
            float __ControlPoints132;
            float __ControlPoints133;
            float __ControlPoints134;
            float __ControlPoints135;
            float __ControlPoints136;
            float __ControlPoints137;
            float __ControlPoints138;
            float __ControlPoints139;
            float __ControlPoints140;
            float __ControlPoints141;
            float __ControlPoints142;
            float __ControlPoints143;
            float __ControlPoints144;
            float __ControlPoints145;
            float __ControlPoints146;
            float __ControlPoints147;
            float __ControlPoints148;
            float __ControlPoints149;
            float __ControlPoints150;
            float __ControlPoints151;
            float __ControlPoints152;
            float __ControlPoints153;
            float __ControlPoints154;
            float __ControlPoints155;
            float __ControlPoints156;
            float __ControlPoints157;
            float __ControlPoints158;
            float __ControlPoints159;
            float __ControlPoints160;
            float __ControlPoints161;
            float __ControlPoints162;
            float __ControlPoints163;
            float __ControlPoints164;
            float __ControlPoints165;
            float __ControlPoints166;
            float __ControlPoints167;
            float __ControlPoints168;
            float __ControlPoints169;
            float __ControlPoints170;
            float __ControlPoints171;
            float __ControlPoints172;
            float __ControlPoints173;
            float __ControlPoints174;
            float __ControlPoints175;
            float __ControlPoints176;
            float __ControlPoints177;
            float __ControlPoints178;
            float __ControlPoints179;
            float __ControlPoints180;
            float __ControlPoints181;
            float __ControlPoints182;
            float __ControlPoints183;
            float __ControlPoints184;
            float __ControlPoints185;
            float __ControlPoints186;
            float __ControlPoints187;
            float __ControlPoints188;
            float __ControlPoints189;
            float __ControlPoints190;
            float __ControlPoints191;
            float __ControlPoints192;
            float __ControlPoints193;
            float __ControlPoints194;
            float __ControlPoints195;
            float __ControlPoints196;
            float __ControlPoints197;
            float __ControlPoints198;
            float __ControlPoints199;
            float __ControlPoints200;
            float __ControlPoints201;
            float __ControlPoints202;
            float __ControlPoints203;
            float __ControlPoints204;
            float __ControlPoints205;
            float __ControlPoints206;
            float __ControlPoints207;
            float __ControlPoints208;
            float __ControlPoints209;
            float __ControlPoints210;
            float __ControlPoints211;
            float __ControlPoints212;
            float __ControlPoints213;
            float __ControlPoints214;
            float __ControlPoints215;
            float __ControlPoints216;
            float __ControlPoints217;
            float __ControlPoints218;
            float __ControlPoints219;
            float __ControlPoints220;
            float __ControlPoints221;
            float __ControlPoints222;
            float __ControlPoints223;
            float __ControlPoints224;
            float __ControlPoints225;
            float __ControlPoints226;
            float __ControlPoints227;
            float __ControlPoints228;
            float __ControlPoints229;
            float __ControlPoints230;
            float __ControlPoints231;
            float __ControlPoints232;
            float __ControlPoints233;
            float __ControlPoints234;
            float __ControlPoints235;
            float __ControlPoints236;
            float __ControlPoints237;
            float __ControlPoints238;
            float __ControlPoints239;
            float __ControlPoints240;
            float __ControlPoints241;
            float __ControlPoints242;
            float __ControlPoints243;
            float __ControlPoints244;
            float __ControlPoints245;
            float __ControlPoints246;
            float __ControlPoints247;
            float __ControlPoints248;
            float __ControlPoints249;
            float __ControlPoints250;
            float __ControlPoints251;
            float __ControlPoints252;
            float __ControlPoints253;
            float __ControlPoints254;
            float __ControlPoints255;
            float __ControlPoints256;
            float __ControlPoints257;
            float __ControlPoints258;
            float __ControlPoints259;
            float __ControlPoints260;
            float __ControlPoints261;
            float __ControlPoints262;
            float __ControlPoints263;
            float __ControlPoints264;
            float __ControlPoints265;
            float __ControlPoints266;
            float __ControlPoints267;
            float __ControlPoints268;
            float __ControlPoints269;
            float __ControlPoints270;
            float __ControlPoints271;
            float __ControlPoints272;
            float __ControlPoints273;
            float __ControlPoints274;
            float __ControlPoints275;
            float __ControlPoints276;
            float __ControlPoints277;
            float __ControlPoints278;
            float __ControlPoints279;
            float __ControlPoints280;
            float __ControlPoints281;
            float __ControlPoints282;
            float __ControlPoints283;
            float __ControlPoints284;
            float __ControlPoints285;
            float __ControlPoints286;
            float __ControlPoints287;
            float __ControlPoints288;
            float __ControlPoints289;
            float __ControlPoints290;
            float __ControlPoints291;
            float __ControlPoints292;
            float __ControlPoints293;
            float __ControlPoints294;
            float __ControlPoints295;
            float __ControlPoints296;
            float __ControlPoints297;
            float __ControlPoints298;
            float __ControlPoints299;
            float __ControlPoints300;
            float __ControlPoints301;
            float __ControlPoints302;
            float __ControlPoints303;
            float __ControlPoints304;
            float __ControlPoints305;
            float __ControlPoints306;
            float __ControlPoints307;
            float __ControlPoints308;
            float __ControlPoints309;
            float __ControlPoints310;
            float __ControlPoints311;
            float __ControlPoints312;
            float __ControlPoints313;
            float __ControlPoints314;
            float __ControlPoints315;
            float __ControlPoints316;
            float __ControlPoints317;
            float __ControlPoints318;
            float __ControlPoints319;
            float __ControlPoints320;
            float __ControlPoints321;
            float __ControlPoints322;
            float __ControlPoints323;
            float __ControlPoints324;
            float __ControlPoints325;
            float __ControlPoints326;
            float __ControlPoints327;
            float __ControlPoints328;
            float __ControlPoints329;
            float __ControlPoints330;
            float __ControlPoints331;
            float __ControlPoints332;
            float __ControlPoints333;
            float __ControlPoints334;
            float __ControlPoints335;
            float __ControlPoints336;
            float __ControlPoints337;
            float __ControlPoints338;
            float __ControlPoints339;
            float __ControlPoints340;
            float __ControlPoints341;
            float __ControlPoints342;
            float __ControlPoints343;
            float __ControlPoints344;
            float __ControlPoints345;
            float __ControlPoints346;
            float __ControlPoints347;
            float __ControlPoints348;
            float __ControlPoints349;
            float __ControlPoints350;
            float __ControlPoints351;
            float __ControlPoints352;
            float __ControlPoints353;
            float __ControlPoints354;
            float __ControlPoints355;
            float __ControlPoints356;
            float __ControlPoints357;
            float __ControlPoints358;
            float __ControlPoints359;
            float __ControlPoints360;
            float __ControlPoints361;
            float __ControlPoints362;
            float __ControlPoints363;
            float __ControlPoints364;
            float __ControlPoints365;
            float __ControlPoints366;
            float __ControlPoints367;
            float __ControlPoints368;
            float __ControlPoints369;
            float __ControlPoints370;
            float __ControlPoints371;
            float __ControlPoints372;
            float __ControlPoints373;
            float __ControlPoints374;
            float __ControlPoints375;
            float __ControlPoints376;
            float __ControlPoints377;
            float __ControlPoints378;
            float __ControlPoints379;
            float __ControlPoints380;
            float __ControlPoints381;
            float __ControlPoints382;
            float __ControlPoints383;
            float __ControlPoints384;
            float __ControlPoints385;
            float __ControlPoints386;
            float __ControlPoints387;
            float __ControlPoints388;
            float __ControlPoints389;
            float __ControlPoints390;
            float __ControlPoints391;
            float __ControlPoints392;
            float __ControlPoints393;
            float __ControlPoints394;
            float __ControlPoints395;
            float __ControlPoints396;
            float __ControlPoints397;
            float __ControlPoints398;
            float __ControlPoints399;
            float __ControlPoints400;
            float __ControlPoints401;
            float __ControlPoints402;
            float __ControlPoints403;
            float __ControlPoints404;
            float __ControlPoints405;
            float __ControlPoints406;
            float __ControlPoints407;
            float __ControlPoints408;
            float __ControlPoints409;
            float __ControlPoints410;
            float __ControlPoints411;
            float __ControlPoints412;
            float __ControlPoints413;
            float __ControlPoints414;
            float __ControlPoints415;
            float __ControlPoints416;
            float __ControlPoints417;
            float __ControlPoints418;
            float __ControlPoints419;
            float __ControlPoints420;
            float __ControlPoints421;
            float __ControlPoints422;
            float __ControlPoints423;
            float __ControlPoints424;
            float __ControlPoints425;
            float __ControlPoints426;
            float __ControlPoints427;
            float __ControlPoints428;
            float __ControlPoints429;
            float __ControlPoints430;
            float __ControlPoints431;
            float __ControlPoints432;
            float __ControlPoints433;
            float __ControlPoints434;
            float __ControlPoints435;
            float __ControlPoints436;
            float __ControlPoints437;
            float __ControlPoints438;
            float __ControlPoints439;
            float __ControlPoints440;
            float __ControlPoints441;
            float __ControlPoints442;
            float __ControlPoints443;
            float __ControlPoints444;
            float __ControlPoints445;
            float __ControlPoints446;
            float __ControlPoints447;
            float __ControlPoints448;
            float __ControlPoints449;
            float __ControlPoints450;
            float __ControlPoints451;
            float __ControlPoints452;
            float __ControlPoints453;
            float __ControlPoints454;
            float __ControlPoints455;
            float __ControlPoints456;
            float __ControlPoints457;
            float __ControlPoints458;
            float __ControlPoints459;
            float __ControlPoints460;
            float __ControlPoints461;
            float __ControlPoints462;
            float __ControlPoints463;
            float __ControlPoints464;
            float __ControlPoints465;
            float __ControlPoints466;
            float __ControlPoints467;
            float __ControlPoints468;
            float __ControlPoints469;
            float __ControlPoints470;
            float __ControlPoints471;
            float __ControlPoints472;
            float __ControlPoints473;
            float __ControlPoints474;
            float __ControlPoints475;
            float __ControlPoints476;
            float __ControlPoints477;
            float __ControlPoints478;
            float __ControlPoints479;
            float __ControlPoints480;
            float __ControlPoints481;
            float __ControlPoints482;
            float __ControlPoints483;
            float __ControlPoints484;
            float __ControlPoints485;
            float __ControlPoints486;
            float __ControlPoints487;
            float __ControlPoints488;
            float __ControlPoints489;
            float __ControlPoints490;
            float __ControlPoints491;
            float __ControlPoints492;
            float __ControlPoints493;
            float __ControlPoints494;
            float __ControlPoints495;
            float __ControlPoints496;
            float __ControlPoints497;
            float __ControlPoints498;
            float __ControlPoints499;
            float __ControlPoints500;
            float __ControlPoints501;
            float __ControlPoints502;
            float __ControlPoints503;
            float __ControlPoints504;
            float __ControlPoints505;
            float __ControlPoints506;
            float __ControlPoints507;
            float __ControlPoints508;
            float __ControlPoints509;
            float __ControlPoints510;
            float __ControlPoints511;
            float __ControlPoints512;
            float __ControlPoints513;
            float __ControlPoints514;
            float __ControlPoints515;
            float __ControlPoints516;
            float __ControlPoints517;
            float __ControlPoints518;
            float __ControlPoints519;
            float __ControlPoints520;
            float __ControlPoints521;
            float __ControlPoints522;
            float __ControlPoints523;
            float __ControlPoints524;
            float __ControlPoints525;
            float __ControlPoints526;
            float __ControlPoints527;
            float __ControlPoints528;
            float __ControlPoints529;
            float __ControlPoints530;
            float __ControlPoints531;
            float __ControlPoints532;
            float __ControlPoints533;
            float __ControlPoints534;
            float __ControlPoints535;
            float __ControlPoints536;
            float __ControlPoints537;
            float __ControlPoints538;
            float __ControlPoints539;
            float __ControlPoints540;
            float __ControlPoints541;
            float __ControlPoints542;
            float __ControlPoints543;
            float __ControlPoints544;
            float __ControlPoints545;
            float __ControlPoints546;
            float __ControlPoints547;
            float __ControlPoints548;
            float __ControlPoints549;
            float __ControlPoints550;
            float __ControlPoints551;
            float __ControlPoints552;
            float __ControlPoints553;
            float __ControlPoints554;
            float __ControlPoints555;
            float __ControlPoints556;
            float __ControlPoints557;
            float __ControlPoints558;
            float __ControlPoints559;
            float __ControlPoints560;
            float __ControlPoints561;
            float __ControlPoints562;
            float __ControlPoints563;
            float __ControlPoints564;
            float __ControlPoints565;
            float __ControlPoints566;
            float __ControlPoints567;
            float __ControlPoints568;
            float __ControlPoints569;
            float __ControlPoints570;
            float __ControlPoints571;
            float __ControlPoints572;
            float __ControlPoints573;
            float __ControlPoints574;
            float __ControlPoints575;
            float __ControlPoints576;
            float __ControlPoints577;
            float __ControlPoints578;
            float __ControlPoints579;
            float __ControlPoints580;
            float __ControlPoints581;
            float __ControlPoints582;
            float __ControlPoints583;
            float __ControlPoints584;
            float __ControlPoints585;
            float __ControlPoints586;
            float __ControlPoints587;
            float __ControlPoints588;
            float __ControlPoints589;
            float __ControlPoints590;
            float __ControlPoints591;
            float __ControlPoints592;
            float __ControlPoints593;
            float __ControlPoints594;
            float __ControlPoints595;
            float __ControlPoints596;
            float __ControlPoints597;
            float __ControlPoints598;
            float __ControlPoints599;
            float __ControlPoints600;
            float __ControlPoints601;
            float __ControlPoints602;
            float __ControlPoints603;
            float __ControlPoints604;
            float __ControlPoints605;
            float __ControlPoints606;
            float __ControlPoints607;
            float __ControlPoints608;
            float __ControlPoints609;
            float __ControlPoints610;
            float __ControlPoints611;
            float __ControlPoints612;
            float __ControlPoints613;
            float __ControlPoints614;
            float __ControlPoints615;
            float __ControlPoints616;
            float __ControlPoints617;
            float __ControlPoints618;
            float __ControlPoints619;
            float __ControlPoints620;
            float __ControlPoints621;
            float __ControlPoints622;
            float __ControlPoints623;
            float __ControlPoints624;
            float __ControlPoints625;
            float __ControlPoints626;
            float __ControlPoints627;
            float __ControlPoints628;
            float __ControlPoints629;
            float __ControlPoints630;
            float __ControlPoints631;
            float __ControlPoints632;
            float __ControlPoints633;
            float __ControlPoints634;
            float __ControlPoints635;
            float __ControlPoints636;
            float __ControlPoints637;
            float __ControlPoints638;
            float __ControlPoints639;
            float __ControlPoints640;
            float __ControlPoints641;
            float __ControlPoints642;
            float __ControlPoints643;
            float __ControlPoints644;
            float __ControlPoints645;
            float __ControlPoints646;
            float __ControlPoints647;
            float __ControlPoints648;
            float __ControlPoints649;
            float __ControlPoints650;
            float __ControlPoints651;
            float __ControlPoints652;
            float __ControlPoints653;
            float __ControlPoints654;
            float __ControlPoints655;
            float __ControlPoints656;
            float __ControlPoints657;
            float __ControlPoints658;
            float __ControlPoints659;
            float __ControlPoints660;
            float __ControlPoints661;
            float __ControlPoints662;
            float __ControlPoints663;
            float __ControlPoints664;
            float __ControlPoints665;
            float __ControlPoints666;
            float __ControlPoints667;
            float __ControlPoints668;
            float __ControlPoints669;
            float __ControlPoints670;
            float __ControlPoints671;
            float __ControlPoints672;
            float __ControlPoints673;
            float __ControlPoints674;
            float __ControlPoints675;
            float __ControlPoints676;
            float __ControlPoints677;
            float __ControlPoints678;
            float __ControlPoints679;
            float __ControlPoints680;
            float __ControlPoints681;
            float __ControlPoints682;
            float __ControlPoints683;
            float __ControlPoints684;
            float __ControlPoints685;
            float __ControlPoints686;
            float __ControlPoints687;
            float __ControlPoints688;
            float __ControlPoints689;
            float __ControlPoints690;
            float __ControlPoints691;
            float __ControlPoints692;
            float __ControlPoints693;
            float __ControlPoints694;
            float __ControlPoints695;
            float __ControlPoints696;
            float __ControlPoints697;
            float __ControlPoints698;
            float __ControlPoints699;
            float __ControlPoints700;
            float __ControlPoints701;
            float __ControlPoints702;
            float __ControlPoints703;
            float __ControlPoints704;
            float __ControlPoints705;
            float __ControlPoints706;
            float __ControlPoints707;
            float __ControlPoints708;
            float __ControlPoints709;
            float __ControlPoints710;
            float __ControlPoints711;
            float __ControlPoints712;
            float __ControlPoints713;
            float __ControlPoints714;
            float __ControlPoints715;
            float __ControlPoints716;
            float __ControlPoints717;
            float __ControlPoints718;
            float __ControlPoints719;
            float __ControlPoints720;
            float __ControlPoints721;
            float __ControlPoints722;
            float __ControlPoints723;
            float __ControlPoints724;
            float __ControlPoints725;
            float __ControlPoints726;
            float __ControlPoints727;
            float __ControlPoints728;
            float __ControlPoints729;
            float __ControlPoints730;
            float __ControlPoints731;
            float __ControlPoints732;
            float __ControlPoints733;
            float __ControlPoints734;
            float __ControlPoints735;
            float __ControlPoints736;
            float __ControlPoints737;
            float __ControlPoints738;
            float __ControlPoints739;
            float __ControlPoints740;
            float __ControlPoints741;
            float __ControlPoints742;
            float __ControlPoints743;
            float __ControlPoints744;
            float __ControlPoints745;
            float __ControlPoints746;
            float __ControlPoints747;
            float __ControlPoints748;
            float __ControlPoints749;
            float __ControlPoints750;
            float __ControlPoints751;
            float __ControlPoints752;
            float __ControlPoints753;
            float __ControlPoints754;
            float __ControlPoints755;
            float __ControlPoints756;
            float __ControlPoints757;
            float __ControlPoints758;
            float __ControlPoints759;
            float __ControlPoints760;
            float __ControlPoints761;
            float __ControlPoints762;
            float __ControlPoints763;
            float __ControlPoints764;
            float __ControlPoints765;
            float __ControlPoints766;
            float __ControlPoints767;
            float __ControlPoints768;
            float __ControlPoints769;
            float __ControlPoints770;
            float __ControlPoints771;
            float __ControlPoints772;
            float __ControlPoints773;
            float __ControlPoints774;
            float __ControlPoints775;
            float __ControlPoints776;
            float __ControlPoints777;
            float __ControlPoints778;
            float __ControlPoints779;
            float __ControlPoints780;
            float __ControlPoints781;
            float __ControlPoints782;
            float __ControlPoints783;
            float __ControlPoints784;
            float __ControlPoints785;
            float __ControlPoints786;
            float __ControlPoints787;
            float __ControlPoints788;
            float __ControlPoints789;
            float __ControlPoints790;
            float __ControlPoints791;
            float __ControlPoints792;
            float __ControlPoints793;
            float __ControlPoints794;
            float __ControlPoints795;
            float __ControlPoints796;
            float __ControlPoints797;
            float __ControlPoints798;
            float __ControlPoints799;
            float __ControlPoints800;
            float __ControlPoints801;
            float __ControlPoints802;
            float __ControlPoints803;
            float __ControlPoints804;
            float __ControlPoints805;
            float __ControlPoints806;
            float __ControlPoints807;
            float __ControlPoints808;
            float __ControlPoints809;
            float __ControlPoints810;
            float __ControlPoints811;
            float __ControlPoints812;
            float __ControlPoints813;
            float __ControlPoints814;
            float __ControlPoints815;
            float __ControlPoints816;
            float __ControlPoints817;
            float __ControlPoints818;
            float __ControlPoints819;
            float __ControlPoints820;
            float __ControlPoints821;
            float __ControlPoints822;
            float __ControlPoints823;
            float __ControlPoints824;
            float __ControlPoints825;
            float __ControlPoints826;
            float __ControlPoints827;
            float __ControlPoints828;
            float __ControlPoints829;
            float __ControlPoints830;
            float __ControlPoints831;
            float __ControlPoints832;
            float __ControlPoints833;
            float __ControlPoints834;
            float __ControlPoints835;
            float __ControlPoints836;
            float __ControlPoints837;
            float __ControlPoints838;
            float __ControlPoints839;
            float __ControlPoints840;
            float __ControlPoints841;
            float __ControlPoints842;
            float __ControlPoints843;
            float __ControlPoints844;
            float __ControlPoints845;
            float __ControlPoints846;
            float __ControlPoints847;
            float __ControlPoints848;
            float __ControlPoints849;
            float __ControlPoints850;
            float __ControlPoints851;
            float __ControlPoints852;
            float __ControlPoints853;
            float __ControlPoints854;
            float __ControlPoints855;
            float __ControlPoints856;
            float __ControlPoints857;
            float __ControlPoints858;
            float __ControlPoints859;
            float __ControlPoints860;
            float __ControlPoints861;
            float __ControlPoints862;
            float __ControlPoints863;
            float __ControlPoints864;
            float __ControlPoints865;
            float __ControlPoints866;
            float __ControlPoints867;
            float __ControlPoints868;
            float __ControlPoints869;
            float __ControlPoints870;
            float __ControlPoints871;
            float __ControlPoints872;
            float __ControlPoints873;
            float __ControlPoints874;
            float __ControlPoints875;
            float __ControlPoints876;
            float __ControlPoints877;
            float __ControlPoints878;
            float __ControlPoints879;
            float __ControlPoints880;
            float __ControlPoints881;
            float __ControlPoints882;
            float __ControlPoints883;
            float __ControlPoints884;
            float __ControlPoints885;
            float __ControlPoints886;
            float __ControlPoints887;
            float __ControlPoints888;
            float __ControlPoints889;
            float __ControlPoints890;
            float __ControlPoints891;
            float __ControlPoints892;
            float __ControlPoints893;
            float __ControlPoints894;
            float __ControlPoints895;
            float __ControlPoints896;
            float __ControlPoints897;
            float __ControlPoints898;
            float __ControlPoints899;
            float __ControlPoints900;
            float __ControlPoints901;
            float __ControlPoints902;
            float __ControlPoints903;
            float __ControlPoints904;
            float __ControlPoints905;
            float __ControlPoints906;
            float __ControlPoints907;
            float __ControlPoints908;
            float __ControlPoints909;
            float __ControlPoints910;
            float __ControlPoints911;
            float __ControlPoints912;
            float __ControlPoints913;
            float __ControlPoints914;
            float __ControlPoints915;
            float __ControlPoints916;
            float __ControlPoints917;
            float __ControlPoints918;
            float __ControlPoints919;
            float __ControlPoints920;
            float __ControlPoints921;
            float __ControlPoints922;
            float __ControlPoints923;
            float __ControlPoints924;
            float __ControlPoints925;
            float __ControlPoints926;
            float __ControlPoints927;
            float __ControlPoints928;
            float __ControlPoints929;
            float __ControlPoints930;
            float __ControlPoints931;
            float __ControlPoints932;
            float __ControlPoints933;
            float __ControlPoints934;
            float __ControlPoints935;
            float __ControlPoints936;
            float __ControlPoints937;
            float __ControlPoints938;
            float __ControlPoints939;
            float __ControlPoints940;
            float __ControlPoints941;
            float __ControlPoints942;
            float __ControlPoints943;
            float __ControlPoints944;
            float __ControlPoints945;
            float __ControlPoints946;
            float __ControlPoints947;
            float __ControlPoints948;
            float __ControlPoints949;
            float __ControlPoints950;
            float __ControlPoints951;
            float __ControlPoints952;
            float __ControlPoints953;
            float __ControlPoints954;
            float __ControlPoints955;
            float __ControlPoints956;
            float __ControlPoints957;
            float __ControlPoints958;
            float __ControlPoints959;
            float __ControlPoints960;
            float __ControlPoints961;
            float __ControlPoints962;
            float __ControlPoints963;
            float __ControlPoints964;
            float __ControlPoints965;
            float __ControlPoints966;
            float __ControlPoints967;
            float __ControlPoints968;
            float __ControlPoints969;
            float __ControlPoints970;
            float __ControlPoints971;
            float __ControlPoints972;
            float __ControlPoints973;
            float __ControlPoints974;
            float __ControlPoints975;
            float __ControlPoints976;
            float __ControlPoints977;
            float __ControlPoints978;
            float __ControlPoints979;
            float __ControlPoints980;
            float __ControlPoints981;
            float __ControlPoints982;
            float __ControlPoints983;
            float __ControlPoints984;
            float __ControlPoints985;
            float __ControlPoints986;
            float __ControlPoints987;
            float __ControlPoints988;
            float __ControlPoints989;
            float __ControlPoints990;
            float __ControlPoints991;
            float __ControlPoints992;
            float __ControlPoints993;
            float __ControlPoints994;
            float __ControlPoints995;
            float __ControlPoints996;
            float __ControlPoints997;
            float __ControlPoints998;
            float __ControlPoints999;
            float __ControlPoints1000;
            float __ControlPoints1001;
            float __ControlPoints1002;
            float __ControlPoints1003;
            float __ControlPoints1004;
            float __ControlPoints1005;
            float __ControlPoints1006;
            float __ControlPoints1007;
            float __ControlPoints1008;
            float __ControlPoints1009;
            float __ControlPoints1010;
            float __ControlPoints1011;
            float __ControlPoints1012;
            float __ControlPoints1013;
            float __ControlPoints1014;
            float __ControlPoints1015;
            float __ControlPoints1016;
            float __ControlPoints1017;
            float __ControlPoints1018;
            float __ControlPoints1019;
            float __ControlPoints1020;
            float __ControlPoints1021;
            float __ControlPoints1022;
            float __ControlPoints1023;
            float __ControlPoints1024;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.IsScaleAndOffsetSupported = @ref.IsScaleAndOffsetSupported;
            this.MaximumConvertedValue = @ref.MaximumConvertedValue;
            this.MinimumConvertedValue = @ref.MinimumConvertedValue;
            this.ControlPointsCount = @ref.ControlPointsCount;
            fixed (void* __to = &this.ControlPoints[0]) fixed (void* __from = &@ref.ControlPoints) SharpDX.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, 1025*sizeof ( float));
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.IsScaleAndOffsetSupported = this.IsScaleAndOffsetSupported;
            @ref.MaximumConvertedValue = this.MaximumConvertedValue;
            @ref.MinimumConvertedValue = this.MinimumConvertedValue;
            @ref.ControlPointsCount = this.ControlPointsCount;
            fixed (void* __to = &@ref.ControlPoints) fixed (void* __from = &this.ControlPoints[0]) SharpDX.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, 1025*sizeof ( float));
		
		}
    }
    
    /// <summary>	
    /// <p>Describes a JPEG AC huffman table.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_JPEG_AC_HUFFMAN_TABLE']/*"/>	
    /// <msdn-id>dn903662</msdn-id>	
    /// <unmanaged>DXGI_JPEG_AC_HUFFMAN_TABLE</unmanaged>	
    /// <unmanaged-short>DXGI_JPEG_AC_HUFFMAN_TABLE</unmanaged-short>	
    public  partial struct JpegAcHuffmanTable {	
        
        /// <summary>	
        /// <dd> <p>The number of codes for each code length.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_JPEG_AC_HUFFMAN_TABLE::CodeCounts']/*"/>	
        /// <msdn-id>dn903662</msdn-id>	
        /// <unmanaged>unsigned char CodeCounts[16]</unmanaged>	
        /// <unmanaged-short>unsigned char CodeCounts</unmanaged-short>	
        public byte[] CodeCounts { 
            get { return _CodeCounts ?? (_CodeCounts = new byte[16]);}
        }
        internal byte[] _CodeCounts;
        
        /// <summary>	
        /// <dd> <p>The Huffman code values, in order of increasing code length.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_JPEG_AC_HUFFMAN_TABLE::CodeValues']/*"/>	
        /// <msdn-id>dn903662</msdn-id>	
        /// <unmanaged>unsigned char CodeValues[162]</unmanaged>	
        /// <unmanaged-short>unsigned char CodeValues</unmanaged-short>	
        public byte[] CodeValues { 
            get { return _CodeValues ?? (_CodeValues = new byte[162]);}
        }
        internal byte[] _CodeValues;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public byte CodeCounts;
            byte __CodeCounts1;
            byte __CodeCounts2;
            byte __CodeCounts3;
            byte __CodeCounts4;
            byte __CodeCounts5;
            byte __CodeCounts6;
            byte __CodeCounts7;
            byte __CodeCounts8;
            byte __CodeCounts9;
            byte __CodeCounts10;
            byte __CodeCounts11;
            byte __CodeCounts12;
            byte __CodeCounts13;
            byte __CodeCounts14;
            byte __CodeCounts15;
            public byte CodeValues;
            byte __CodeValues1;
            byte __CodeValues2;
            byte __CodeValues3;
            byte __CodeValues4;
            byte __CodeValues5;
            byte __CodeValues6;
            byte __CodeValues7;
            byte __CodeValues8;
            byte __CodeValues9;
            byte __CodeValues10;
            byte __CodeValues11;
            byte __CodeValues12;
            byte __CodeValues13;
            byte __CodeValues14;
            byte __CodeValues15;
            byte __CodeValues16;
            byte __CodeValues17;
            byte __CodeValues18;
            byte __CodeValues19;
            byte __CodeValues20;
            byte __CodeValues21;
            byte __CodeValues22;
            byte __CodeValues23;
            byte __CodeValues24;
            byte __CodeValues25;
            byte __CodeValues26;
            byte __CodeValues27;
            byte __CodeValues28;
            byte __CodeValues29;
            byte __CodeValues30;
            byte __CodeValues31;
            byte __CodeValues32;
            byte __CodeValues33;
            byte __CodeValues34;
            byte __CodeValues35;
            byte __CodeValues36;
            byte __CodeValues37;
            byte __CodeValues38;
            byte __CodeValues39;
            byte __CodeValues40;
            byte __CodeValues41;
            byte __CodeValues42;
            byte __CodeValues43;
            byte __CodeValues44;
            byte __CodeValues45;
            byte __CodeValues46;
            byte __CodeValues47;
            byte __CodeValues48;
            byte __CodeValues49;
            byte __CodeValues50;
            byte __CodeValues51;
            byte __CodeValues52;
            byte __CodeValues53;
            byte __CodeValues54;
            byte __CodeValues55;
            byte __CodeValues56;
            byte __CodeValues57;
            byte __CodeValues58;
            byte __CodeValues59;
            byte __CodeValues60;
            byte __CodeValues61;
            byte __CodeValues62;
            byte __CodeValues63;
            byte __CodeValues64;
            byte __CodeValues65;
            byte __CodeValues66;
            byte __CodeValues67;
            byte __CodeValues68;
            byte __CodeValues69;
            byte __CodeValues70;
            byte __CodeValues71;
            byte __CodeValues72;
            byte __CodeValues73;
            byte __CodeValues74;
            byte __CodeValues75;
            byte __CodeValues76;
            byte __CodeValues77;
            byte __CodeValues78;
            byte __CodeValues79;
            byte __CodeValues80;
            byte __CodeValues81;
            byte __CodeValues82;
            byte __CodeValues83;
            byte __CodeValues84;
            byte __CodeValues85;
            byte __CodeValues86;
            byte __CodeValues87;
            byte __CodeValues88;
            byte __CodeValues89;
            byte __CodeValues90;
            byte __CodeValues91;
            byte __CodeValues92;
            byte __CodeValues93;
            byte __CodeValues94;
            byte __CodeValues95;
            byte __CodeValues96;
            byte __CodeValues97;
            byte __CodeValues98;
            byte __CodeValues99;
            byte __CodeValues100;
            byte __CodeValues101;
            byte __CodeValues102;
            byte __CodeValues103;
            byte __CodeValues104;
            byte __CodeValues105;
            byte __CodeValues106;
            byte __CodeValues107;
            byte __CodeValues108;
            byte __CodeValues109;
            byte __CodeValues110;
            byte __CodeValues111;
            byte __CodeValues112;
            byte __CodeValues113;
            byte __CodeValues114;
            byte __CodeValues115;
            byte __CodeValues116;
            byte __CodeValues117;
            byte __CodeValues118;
            byte __CodeValues119;
            byte __CodeValues120;
            byte __CodeValues121;
            byte __CodeValues122;
            byte __CodeValues123;
            byte __CodeValues124;
            byte __CodeValues125;
            byte __CodeValues126;
            byte __CodeValues127;
            byte __CodeValues128;
            byte __CodeValues129;
            byte __CodeValues130;
            byte __CodeValues131;
            byte __CodeValues132;
            byte __CodeValues133;
            byte __CodeValues134;
            byte __CodeValues135;
            byte __CodeValues136;
            byte __CodeValues137;
            byte __CodeValues138;
            byte __CodeValues139;
            byte __CodeValues140;
            byte __CodeValues141;
            byte __CodeValues142;
            byte __CodeValues143;
            byte __CodeValues144;
            byte __CodeValues145;
            byte __CodeValues146;
            byte __CodeValues147;
            byte __CodeValues148;
            byte __CodeValues149;
            byte __CodeValues150;
            byte __CodeValues151;
            byte __CodeValues152;
            byte __CodeValues153;
            byte __CodeValues154;
            byte __CodeValues155;
            byte __CodeValues156;
            byte __CodeValues157;
            byte __CodeValues158;
            byte __CodeValues159;
            byte __CodeValues160;
            byte __CodeValues161;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            fixed (void* __to = &this.CodeCounts[0]) fixed (void* __from = &@ref.CodeCounts) SharpDX.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, 16*sizeof ( byte));
            fixed (void* __to = &this.CodeValues[0]) fixed (void* __from = &@ref.CodeValues) SharpDX.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, 162*sizeof ( byte));
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            fixed (void* __to = &@ref.CodeCounts) fixed (void* __from = &this.CodeCounts[0]) SharpDX.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, 16*sizeof ( byte));
            fixed (void* __to = &@ref.CodeValues) fixed (void* __from = &this.CodeValues[0]) SharpDX.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, 162*sizeof ( byte));
		
		}
    }
    
    /// <summary>	
    /// <p>Describes a JPEG DC huffman table.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_JPEG_DC_HUFFMAN_TABLE']/*"/>	
    /// <msdn-id>dn903663</msdn-id>	
    /// <unmanaged>DXGI_JPEG_DC_HUFFMAN_TABLE</unmanaged>	
    /// <unmanaged-short>DXGI_JPEG_DC_HUFFMAN_TABLE</unmanaged-short>	
    public  partial struct JpegDeviceContextHuffmanTable {	
        
        /// <summary>	
        /// <dd> <p>The number of codes for each code length.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_JPEG_DC_HUFFMAN_TABLE::CodeCounts']/*"/>	
        /// <msdn-id>dn903663</msdn-id>	
        /// <unmanaged>unsigned char CodeCounts[12]</unmanaged>	
        /// <unmanaged-short>unsigned char CodeCounts</unmanaged-short>	
        public byte[] CodeCounts { 
            get { return _CodeCounts ?? (_CodeCounts = new byte[12]);}
        }
        internal byte[] _CodeCounts;
        
        /// <summary>	
        /// <dd> <p>The Huffman code values, in order of increasing code length.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_JPEG_DC_HUFFMAN_TABLE::CodeValues']/*"/>	
        /// <msdn-id>dn903663</msdn-id>	
        /// <unmanaged>unsigned char CodeValues[12]</unmanaged>	
        /// <unmanaged-short>unsigned char CodeValues</unmanaged-short>	
        public byte[] CodeValues { 
            get { return _CodeValues ?? (_CodeValues = new byte[12]);}
        }
        internal byte[] _CodeValues;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public byte CodeCounts;
            byte __CodeCounts1;
            byte __CodeCounts2;
            byte __CodeCounts3;
            byte __CodeCounts4;
            byte __CodeCounts5;
            byte __CodeCounts6;
            byte __CodeCounts7;
            byte __CodeCounts8;
            byte __CodeCounts9;
            byte __CodeCounts10;
            byte __CodeCounts11;
            public byte CodeValues;
            byte __CodeValues1;
            byte __CodeValues2;
            byte __CodeValues3;
            byte __CodeValues4;
            byte __CodeValues5;
            byte __CodeValues6;
            byte __CodeValues7;
            byte __CodeValues8;
            byte __CodeValues9;
            byte __CodeValues10;
            byte __CodeValues11;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            fixed (void* __to = &this.CodeCounts[0]) fixed (void* __from = &@ref.CodeCounts) SharpDX.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, 12*sizeof ( byte));
            fixed (void* __to = &this.CodeValues[0]) fixed (void* __from = &@ref.CodeValues) SharpDX.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, 12*sizeof ( byte));
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            fixed (void* __to = &@ref.CodeCounts) fixed (void* __from = &this.CodeCounts[0]) SharpDX.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, 12*sizeof ( byte));
            fixed (void* __to = &@ref.CodeValues) fixed (void* __from = &this.CodeValues[0]) SharpDX.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, 12*sizeof ( byte));
		
		}
    }
    
    /// <summary>	
    /// <p>Describes a JPEG quantization table.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_JPEG_QUANTIZATION_TABLE']/*"/>	
    /// <msdn-id>dn903664</msdn-id>	
    /// <unmanaged>DXGI_JPEG_QUANTIZATION_TABLE</unmanaged>	
    /// <unmanaged-short>DXGI_JPEG_QUANTIZATION_TABLE</unmanaged-short>	
    public  partial struct JpegQuantizationTable {	
        
        /// <summary>	
        /// <dd> <p>An array of bytes containing the elements of the quantization table.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_JPEG_QUANTIZATION_TABLE::Elements']/*"/>	
        /// <msdn-id>dn903664</msdn-id>	
        /// <unmanaged>unsigned char Elements[64]</unmanaged>	
        /// <unmanaged-short>unsigned char Elements</unmanaged-short>	
        public byte[] Elements { 
            get { return _Elements ?? (_Elements = new byte[64]);}
        }
        internal byte[] _Elements;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public byte Elements;
            byte __Elements1;
            byte __Elements2;
            byte __Elements3;
            byte __Elements4;
            byte __Elements5;
            byte __Elements6;
            byte __Elements7;
            byte __Elements8;
            byte __Elements9;
            byte __Elements10;
            byte __Elements11;
            byte __Elements12;
            byte __Elements13;
            byte __Elements14;
            byte __Elements15;
            byte __Elements16;
            byte __Elements17;
            byte __Elements18;
            byte __Elements19;
            byte __Elements20;
            byte __Elements21;
            byte __Elements22;
            byte __Elements23;
            byte __Elements24;
            byte __Elements25;
            byte __Elements26;
            byte __Elements27;
            byte __Elements28;
            byte __Elements29;
            byte __Elements30;
            byte __Elements31;
            byte __Elements32;
            byte __Elements33;
            byte __Elements34;
            byte __Elements35;
            byte __Elements36;
            byte __Elements37;
            byte __Elements38;
            byte __Elements39;
            byte __Elements40;
            byte __Elements41;
            byte __Elements42;
            byte __Elements43;
            byte __Elements44;
            byte __Elements45;
            byte __Elements46;
            byte __Elements47;
            byte __Elements48;
            byte __Elements49;
            byte __Elements50;
            byte __Elements51;
            byte __Elements52;
            byte __Elements53;
            byte __Elements54;
            byte __Elements55;
            byte __Elements56;
            byte __Elements57;
            byte __Elements58;
            byte __Elements59;
            byte __Elements60;
            byte __Elements61;
            byte __Elements62;
            byte __Elements63;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            fixed (void* __to = &this.Elements[0]) fixed (void* __from = &@ref.Elements) SharpDX.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, 64*sizeof ( byte));
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            fixed (void* __to = &@ref.Elements) fixed (void* __from = &this.Elements[0]) SharpDX.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, 64*sizeof ( byte));
		
		}
    }
    
    /// <summary>	
    /// <p>Describes a mapped rectangle that is used to access a surface.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <strong><see cref="SharpDX.DXGI.MappedRectangle"/></strong> structure is initialized by the <strong><see cref="SharpDX.DXGI.Surface.Map"/></strong> method.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MAPPED_RECT']/*"/>	
    /// <msdn-id>bb173063</msdn-id>	
    /// <unmanaged>DXGI_MAPPED_RECT</unmanaged>	
    /// <unmanaged-short>DXGI_MAPPED_RECT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    internal  partial struct MappedRectangle {	
        
        /// <summary>	
        /// <dd> <p>A value that describes the width, in bytes, of the surface.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MAPPED_RECT::Pitch']/*"/>	
        /// <msdn-id>bb173063</msdn-id>	
        /// <unmanaged>int Pitch</unmanaged>	
        /// <unmanaged-short>int Pitch</unmanaged-short>	
        public int Pitch;
        
        /// <summary>	
        /// <dd> <p>A reference to the image buffer of the surface.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MAPPED_RECT::pBits']/*"/>	
        /// <msdn-id>bb173063</msdn-id>	
        /// <unmanaged>unsigned char* pBits</unmanaged>	
        /// <unmanaged-short>unsigned char pBits</unmanaged-short>	
        public System.IntPtr PBits;
    }
    
    /// <summary>	
    /// <p>Describes a display mode.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The following format values are valid for display modes and when you create a bit-block transfer (bitblt) model swap chain. The valid values depend on the feature level that you are working with.</p><ul> <li> <p>Feature level &gt;= 9.1</p> <ul> <li> <strong><see cref="SharpDX.DXGI.Format.R8G8B8A8_UNorm"/></strong> </li> <li><strong><see cref="SharpDX.DXGI.Format.R8G8B8A8_UNorm_SRgb"/></strong></li> <li> <strong><see cref="SharpDX.DXGI.Format.B8G8R8A8_UNorm"/></strong> (except 10.x on Windows?Vista)</li> <li><strong><see cref="SharpDX.DXGI.Format.B8G8R8A8_UNorm_SRgb"/></strong> (except 10.x on Windows?Vista)</li> </ul> </li> <li> <p>Feature level &gt;= 10.0</p> <ul> <li> <strong><see cref="SharpDX.DXGI.Format.R16G16B16A16_Float"/></strong> </li> <li><strong><see cref="SharpDX.DXGI.Format.R10G10B10A2_UNorm"/></strong></li> </ul> </li> <li> <p>Feature level &gt;= 11.0</p> <ul> <li><strong><see cref="SharpDX.DXGI.Format.R10G10B10_Xr_Bias_A2_UNorm"/></strong></li> </ul> </li> </ul><p>You can pass one of these format values to <strong><see cref="SharpDX.Direct3D11.Device.CheckFormatSupport"/></strong> to determine if it is a valid format for displaying on screen. If <strong><see cref="SharpDX.Direct3D11.Device.CheckFormatSupport"/></strong> returns <strong><see cref="SharpDX.Direct3D11.FormatSupport.Display"/></strong> in the bit field to which the <em>pFormatSupport</em> parameter points, the format is valid for displaying on screen.</p><p>Starting with Windows?8 for a flip model swap chain (that is, a swap chain that has the <strong><see cref="SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> value set in the <strong>SwapEffect</strong> member of <strong><see cref="SharpDX.DXGI.SwapChainDescription"/></strong>), you must set the <strong>Format</strong> member of <strong><see cref="SharpDX.DXGI.ModeDescription"/></strong> to <strong><see cref="SharpDX.DXGI.Format.R16G16B16A16_Float"/></strong>, <strong><see cref="SharpDX.DXGI.Format.B8G8R8A8_UNorm"/></strong>, or <strong><see cref="SharpDX.DXGI.Format.R8G8B8A8_UNorm"/></strong>.</p><p>Because of the relaxed render target creation rules that Direct3D 11 has for back buffers, applications can create a <strong><see cref="SharpDX.DXGI.Format.B8G8R8A8_UNorm_SRgb"/></strong> render target view from a <strong><see cref="SharpDX.DXGI.Format.B8G8R8A8_UNorm"/></strong> swap chain so they can use automatic color space conversion when they render the swap chain.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MODE_DESC']/*"/>	
    /// <msdn-id>bb173064</msdn-id>	
    /// <unmanaged>DXGI_MODE_DESC</unmanaged>	
    /// <unmanaged-short>DXGI_MODE_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct ModeDescription {	
        
        /// <summary>	
        /// <dd> <p>A value that describes the resolution width. If you specify the width as zero when you call the  <strong><see cref="SharpDX.DXGI.Factory.CreateSwapChain"/></strong> method to create a swap chain, the runtime obtains the width from the output window and assigns this width value to the swap-chain description. You can subsequently call the <strong><see cref="SharpDX.DXGI.SwapChain.GetDescription"/></strong> method to retrieve the assigned width value.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MODE_DESC::Width']/*"/>	
        /// <msdn-id>bb173064</msdn-id>	
        /// <unmanaged>unsigned int Width</unmanaged>	
        /// <unmanaged-short>unsigned int Width</unmanaged-short>	
        public int Width;
        
        /// <summary>	
        /// <dd> <p>A value describing the resolution height. If you specify the height as zero when you call the  <strong><see cref="SharpDX.DXGI.Factory.CreateSwapChain"/></strong> method to create a swap chain, the runtime obtains the height from the output window and assigns this height value to the swap-chain description. You can subsequently call the <strong><see cref="SharpDX.DXGI.SwapChain.GetDescription"/></strong> method to retrieve the assigned height value.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MODE_DESC::Height']/*"/>	
        /// <msdn-id>bb173064</msdn-id>	
        /// <unmanaged>unsigned int Height</unmanaged>	
        /// <unmanaged-short>unsigned int Height</unmanaged-short>	
        public int Height;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.DXGI.Rational"/></strong> structure describing the refresh rate in hertz</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MODE_DESC::RefreshRate']/*"/>	
        /// <msdn-id>bb173064</msdn-id>	
        /// <unmanaged>DXGI_RATIONAL RefreshRate</unmanaged>	
        /// <unmanaged-short>DXGI_RATIONAL RefreshRate</unmanaged-short>	
        public SharpDX.DXGI.Rational RefreshRate;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.DXGI.Format"/></strong> structure describing the display format.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MODE_DESC::Format']/*"/>	
        /// <msdn-id>bb173064</msdn-id>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        public SharpDX.DXGI.Format Format;
        
        /// <summary>	
        /// <dd> <p>A member of the <strong><see cref="SharpDX.DXGI.DisplayModeScanlineOrder"/></strong> enumerated type describing the scanline drawing mode.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MODE_DESC::ScanlineOrdering']/*"/>	
        /// <msdn-id>bb173064</msdn-id>	
        /// <unmanaged>DXGI_MODE_SCANLINE_ORDER ScanlineOrdering</unmanaged>	
        /// <unmanaged-short>DXGI_MODE_SCANLINE_ORDER ScanlineOrdering</unmanaged-short>	
        public SharpDX.DXGI.DisplayModeScanlineOrder ScanlineOrdering;
        
        /// <summary>	
        /// <dd> <p>A member of the <strong><see cref="SharpDX.DXGI.DisplayModeScaling"/></strong> enumerated type describing the scaling mode.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MODE_DESC::Scaling']/*"/>	
        /// <msdn-id>bb173064</msdn-id>	
        /// <unmanaged>DXGI_MODE_SCALING Scaling</unmanaged>	
        /// <unmanaged-short>DXGI_MODE_SCALING Scaling</unmanaged-short>	
        public SharpDX.DXGI.DisplayModeScaling Scaling;
    }
    
    /// <summary>	
    /// <p>Describes a display mode.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The following format values are valid for display modes and when you create a bit-block transfer (bitblt) model swap chain. The valid values depend on the feature level that you are working with.</p><ul> <li> <p>Feature level &gt;= 9.1</p> <ul> <li> <strong><see cref="SharpDX.DXGI.Format.R8G8B8A8_UNorm"/></strong> </li> <li><strong><see cref="SharpDX.DXGI.Format.R8G8B8A8_UNorm_SRgb"/></strong></li> <li> <strong><see cref="SharpDX.DXGI.Format.B8G8R8A8_UNorm"/></strong> (except 10.x on Windows?Vista)</li> <li><strong><see cref="SharpDX.DXGI.Format.B8G8R8A8_UNorm_SRgb"/></strong> (except 10.x on Windows?Vista)</li> </ul> </li> <li> <p>Feature level &gt;= 10.0</p> <ul> <li> <strong><see cref="SharpDX.DXGI.Format.R16G16B16A16_Float"/></strong> </li> <li><strong><see cref="SharpDX.DXGI.Format.R10G10B10A2_UNorm"/></strong></li> </ul> </li> <li> <p>Feature level &gt;= 11.0</p> <ul> <li><strong><see cref="SharpDX.DXGI.Format.R10G10B10_Xr_Bias_A2_UNorm"/></strong></li> </ul> </li> </ul><p>You can pass one of these format values to <strong><see cref="SharpDX.Direct3D11.Device.CheckFormatSupport"/></strong> to determine if it is a valid format for displaying on screen. If <strong><see cref="SharpDX.Direct3D11.Device.CheckFormatSupport"/></strong> returns <strong><see cref="SharpDX.Direct3D11.FormatSupport.Display"/></strong> in the bit field to which the <em>pFormatSupport</em> parameter points, the format is valid for displaying on screen.</p><p>Starting with Windows?8 for a flip model swap chain (that is, a swap chain that has the <strong><see cref="SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> value set in the <strong>SwapEffect</strong> member of <strong><see cref="SharpDX.DXGI.SwapChainDescription"/></strong>), you must set the <strong>Format</strong> member of <strong><see cref="SharpDX.DXGI.ModeDescription"/></strong> to <strong><see cref="SharpDX.DXGI.Format.R16G16B16A16_Float"/></strong>, <strong><see cref="SharpDX.DXGI.Format.B8G8R8A8_UNorm"/></strong>, or <strong><see cref="SharpDX.DXGI.Format.R8G8B8A8_UNorm"/></strong>.</p><p>Because of the relaxed render target creation rules that Direct3D 11 has for back buffers, applications can create a <strong><see cref="SharpDX.DXGI.Format.B8G8R8A8_UNorm_SRgb"/></strong> render target view from a <strong><see cref="SharpDX.DXGI.Format.B8G8R8A8_UNorm"/></strong> swap chain so they can use automatic color space conversion when they render the swap chain.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MODE_DESC1']/*"/>	
    /// <msdn-id>bb173064</msdn-id>	
    /// <unmanaged>DXGI_MODE_DESC1</unmanaged>	
    /// <unmanaged-short>DXGI_MODE_DESC1</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct ModeDescription1 {	
        
        /// <summary>	
        /// <dd> <p>A value that describes the resolution width. If you specify the width as zero when you call the  <strong><see cref="SharpDX.DXGI.Factory.CreateSwapChain"/></strong> method to create a swap chain, the runtime obtains the width from the output window and assigns this width value to the swap-chain description. You can subsequently call the <strong><see cref="SharpDX.DXGI.SwapChain.GetDescription"/></strong> method to retrieve the assigned width value.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MODE_DESC1::Width']/*"/>	
        /// <msdn-id>bb173064</msdn-id>	
        /// <unmanaged>unsigned int Width</unmanaged>	
        /// <unmanaged-short>unsigned int Width</unmanaged-short>	
        public int Width;
        
        /// <summary>	
        /// <dd> <p>A value describing the resolution height. If you specify the height as zero when you call the  <strong><see cref="SharpDX.DXGI.Factory.CreateSwapChain"/></strong> method to create a swap chain, the runtime obtains the height from the output window and assigns this height value to the swap-chain description. You can subsequently call the <strong><see cref="SharpDX.DXGI.SwapChain.GetDescription"/></strong> method to retrieve the assigned height value.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MODE_DESC1::Height']/*"/>	
        /// <msdn-id>bb173064</msdn-id>	
        /// <unmanaged>unsigned int Height</unmanaged>	
        /// <unmanaged-short>unsigned int Height</unmanaged-short>	
        public int Height;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.DXGI.Rational"/></strong> structure describing the refresh rate in hertz</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MODE_DESC1::RefreshRate']/*"/>	
        /// <msdn-id>bb173064</msdn-id>	
        /// <unmanaged>DXGI_RATIONAL RefreshRate</unmanaged>	
        /// <unmanaged-short>DXGI_RATIONAL RefreshRate</unmanaged-short>	
        public SharpDX.DXGI.Rational RefreshRate;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.DXGI.Format"/></strong> structure describing the display format.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MODE_DESC1::Format']/*"/>	
        /// <msdn-id>bb173064</msdn-id>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        public SharpDX.DXGI.Format Format;
        
        /// <summary>	
        /// <dd> <p>A member of the <strong><see cref="SharpDX.DXGI.DisplayModeScanlineOrder"/></strong> enumerated type describing the scanline drawing mode.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MODE_DESC1::ScanlineOrdering']/*"/>	
        /// <msdn-id>bb173064</msdn-id>	
        /// <unmanaged>DXGI_MODE_SCANLINE_ORDER ScanlineOrdering</unmanaged>	
        /// <unmanaged-short>DXGI_MODE_SCANLINE_ORDER ScanlineOrdering</unmanaged-short>	
        public SharpDX.DXGI.DisplayModeScanlineOrder ScanlineOrdering;
        
        /// <summary>	
        /// <dd> <p>A member of the <strong><see cref="SharpDX.DXGI.DisplayModeScaling"/></strong> enumerated type describing the scaling mode.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MODE_DESC1::Scaling']/*"/>	
        /// <msdn-id>bb173064</msdn-id>	
        /// <unmanaged>DXGI_MODE_SCALING Scaling</unmanaged>	
        /// <unmanaged-short>DXGI_MODE_SCALING Scaling</unmanaged-short>	
        public SharpDX.DXGI.DisplayModeScaling Scaling;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_MODE_DESC1::Stereo']/*"/>	
        /// <msdn-id>bb173064</msdn-id>	
        /// <unmanaged>BOOL Stereo</unmanaged>	
        /// <unmanaged-short>BOOL Stereo</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool Stereo;
    }
    
    /// <summary>	
    /// <p>Describes an output or physical connection between the adapter (video card) and a device.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <strong><see cref="SharpDX.DXGI.OutputDescription"/></strong> structure is initialized by the <strong><see cref="SharpDX.DXGI.Output.GetDescription"/></strong> method.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTPUT_DESC']/*"/>	
    /// <msdn-id>bb173068</msdn-id>	
    /// <unmanaged>DXGI_OUTPUT_DESC</unmanaged>	
    /// <unmanaged-short>DXGI_OUTPUT_DESC</unmanaged-short>	
    public  partial struct OutputDescription {	
        
        /// <summary>	
        /// <dd> <p>A string that contains the name of the output device.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTPUT_DESC::DeviceName']/*"/>	
        /// <msdn-id>bb173068</msdn-id>	
        /// <unmanaged>wchar_t DeviceName[32]</unmanaged>	
        /// <unmanaged-short>wchar_t DeviceName</unmanaged-short>	
        public string DeviceName;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Mathematics.Interop.RawRectangle"/></strong> structure containing the bounds of the output in desktop coordinates. Desktop coordinates depend on the dots per inch (DPI) of the desktop.	
        /// For info about writing DPI-aware Win32 apps, see High DPI.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTPUT_DESC::DesktopCoordinates']/*"/>	
        /// <msdn-id>bb173068</msdn-id>	
        /// <unmanaged>RECT DesktopCoordinates</unmanaged>	
        /// <unmanaged-short>RECT DesktopCoordinates</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawRectangle DesktopBounds;
        
        /// <summary>	
        /// <dd> <p>True if the output is attached to the desktop; otherwise, false.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTPUT_DESC::AttachedToDesktop']/*"/>	
        /// <msdn-id>bb173068</msdn-id>	
        /// <unmanaged>BOOL AttachedToDesktop</unmanaged>	
        /// <unmanaged-short>BOOL AttachedToDesktop</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IsAttachedToDesktop;
        
        /// <summary>	
        /// <dd> <p>A member of the <strong><see cref="SharpDX.DXGI.DisplayModeRotation"/></strong> enumerated type describing on how an image is rotated by the output.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTPUT_DESC::Rotation']/*"/>	
        /// <msdn-id>bb173068</msdn-id>	
        /// <unmanaged>DXGI_MODE_ROTATION Rotation</unmanaged>	
        /// <unmanaged-short>DXGI_MODE_ROTATION Rotation</unmanaged-short>	
        public SharpDX.DXGI.DisplayModeRotation Rotation;
        
        /// <summary>	
        /// <dd> <p>An <strong><see cref="System.IntPtr"/></strong> handle that represents the display monitor. For more information, see <see cref="System.IntPtr"/> and the Device Context.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTPUT_DESC::Monitor']/*"/>	
        /// <msdn-id>bb173068</msdn-id>	
        /// <unmanaged>HMONITOR Monitor</unmanaged>	
        /// <unmanaged-short>HMONITOR Monitor</unmanaged-short>	
        public System.IntPtr MonitorHandle;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public char DeviceName;
            char __DeviceName1;
            char __DeviceName2;
            char __DeviceName3;
            char __DeviceName4;
            char __DeviceName5;
            char __DeviceName6;
            char __DeviceName7;
            char __DeviceName8;
            char __DeviceName9;
            char __DeviceName10;
            char __DeviceName11;
            char __DeviceName12;
            char __DeviceName13;
            char __DeviceName14;
            char __DeviceName15;
            char __DeviceName16;
            char __DeviceName17;
            char __DeviceName18;
            char __DeviceName19;
            char __DeviceName20;
            char __DeviceName21;
            char __DeviceName22;
            char __DeviceName23;
            char __DeviceName24;
            char __DeviceName25;
            char __DeviceName26;
            char __DeviceName27;
            char __DeviceName28;
            char __DeviceName29;
            char __DeviceName30;
            char __DeviceName31;
            public SharpDX.Mathematics.Interop.RawRectangle DesktopBounds;
            public SharpDX.Mathematics.Interop.RawBool IsAttachedToDesktop;
            public SharpDX.DXGI.DisplayModeRotation Rotation;
            public System.IntPtr MonitorHandle;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            fixed (char* __ptr = &@ref.DeviceName) this.DeviceName = SharpDX.Utilities.PtrToStringUni((IntPtr)__ptr, 32);
            this.DesktopBounds = @ref.DesktopBounds;
            this.IsAttachedToDesktop = @ref.IsAttachedToDesktop;
            this.Rotation = @ref.Rotation;
            this.MonitorHandle = @ref.MonitorHandle;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            fixed (char* __psrc = this.DeviceName) fixed (char* __ptr = &@ref.DeviceName) Utilities.CopyMemory((IntPtr)__ptr, (IntPtr)__psrc, DeviceName.Length * 2);
            @ref.DesktopBounds = this.DesktopBounds;
            @ref.IsAttachedToDesktop = this.IsAttachedToDesktop;
            @ref.Rotation = this.Rotation;
            @ref.MonitorHandle = this.MonitorHandle;
		
		}
    }
    
    /// <summary>	
    /// <p>The <see cref="SharpDX.DXGI.OutputDuplicateDescription"/> structure describes the dimension of the output and the surface that contains the desktop image. The format of the desktop image is always <strong><see cref="SharpDX.DXGI.Format.B8G8R8A8_UNorm"/></strong>.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTDUPL_DESC']/*"/>	
    /// <msdn-id>hh404510</msdn-id>	
    /// <unmanaged>DXGI_OUTDUPL_DESC</unmanaged>	
    /// <unmanaged-short>DXGI_OUTDUPL_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct OutputDuplicateDescription {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTDUPL_DESC::ModeDesc']/*"/>	
        /// <msdn-id>hh404510</msdn-id>	
        /// <unmanaged>DXGI_MODE_DESC ModeDesc</unmanaged>	
        /// <unmanaged-short>DXGI_MODE_DESC ModeDesc</unmanaged-short>	
        public SharpDX.DXGI.ModeDescription ModeDescription;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTDUPL_DESC::Rotation']/*"/>	
        /// <msdn-id>hh404510</msdn-id>	
        /// <unmanaged>DXGI_MODE_ROTATION Rotation</unmanaged>	
        /// <unmanaged-short>DXGI_MODE_ROTATION Rotation</unmanaged-short>	
        public SharpDX.DXGI.DisplayModeRotation Rotation;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTDUPL_DESC::DesktopImageInSystemMemory']/*"/>	
        /// <msdn-id>hh404510</msdn-id>	
        /// <unmanaged>BOOL DesktopImageInSystemMemory</unmanaged>	
        /// <unmanaged-short>BOOL DesktopImageInSystemMemory</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool DesktopImageInSystemMemory;
    }
    
    /// <summary>	
    /// <p>The <strong><see cref="SharpDX.DXGI.OutputDuplicateFrameInformation"/></strong> structure describes the current desktop image.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>A non-zero <strong>LastMouseUpdateTime</strong> indicates an update to either a mouse reference position or a mouse reference position and shape. That is, the mouse reference position is always valid for a non-zero <strong>LastMouseUpdateTime</strong>; however, the application must check the value of the <strong>PointerShapeBufferSize</strong> member to determine whether the shape was updated too.</p><p>If only the reference was updated (that is, the desktop image was not updated), the <strong>AccumulatedFrames</strong>, <strong>TotalMetadataBufferSize</strong>, and <strong>LastPresentTime</strong> members are set to zero.</p><p>An <strong>AccumulatedFrames</strong> value of one indicates that the application completed processing the last frame before a new desktop image was presented.  If the <strong>AccumulatedFrames</strong> value is greater than one, more desktop image updates have occurred while the application processed the last desktop update. In this situation, the operating system accumulated the update regions. For more information about desktop updates, see Desktop Update Data.</p><p>A non-zero <strong>TotalMetadataBufferSize</strong> indicates the total size of the buffers that are required to store all the desktop update metadata.  An application cannot determine the size of each type of metadata.  The application must call the <strong><see cref="SharpDX.DXGI.OutputDuplication.GetFrameDirtyRects"/></strong>, <strong><see cref="SharpDX.DXGI.OutputDuplication.GetFrameMoveRects"/></strong>, or <strong><see cref="SharpDX.DXGI.OutputDuplication.GetFramePointerShape"/></strong> method to obtain information about each type of metadata.</p><p><strong>Note</strong>??To correct visual effects, an application must process the move region data before it processes the dirty rectangles.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTDUPL_FRAME_INFO']/*"/>	
    /// <msdn-id>hh404512</msdn-id>	
    /// <unmanaged>DXGI_OUTDUPL_FRAME_INFO</unmanaged>	
    /// <unmanaged-short>DXGI_OUTDUPL_FRAME_INFO</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct OutputDuplicateFrameInformation {	
        
        /// <summary>	
        /// <dd> <p>The time stamp of the last update of the desktop image.  The operating system calls the <strong>QueryPerformanceCounter</strong> function to obtain the value. A zero value indicates that the desktop image was not updated since an application last called the <strong><see cref="SharpDX.DXGI.OutputDuplication.AcquireNextFrame"/></strong> method to acquire the next frame of the desktop image.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTDUPL_FRAME_INFO::LastPresentTime']/*"/>	
        /// <msdn-id>hh404512</msdn-id>	
        /// <unmanaged>LARGE_INTEGER LastPresentTime</unmanaged>	
        /// <unmanaged-short>LARGE_INTEGER LastPresentTime</unmanaged-short>	
        public long LastPresentTime;
        
        /// <summary>	
        /// <dd> <p>The time stamp of the last update to the mouse.  The operating system calls the <strong>QueryPerformanceCounter</strong> function to obtain the value. A zero value indicates that the position or shape of the mouse was not updated since an application last called the <strong><see cref="SharpDX.DXGI.OutputDuplication.AcquireNextFrame"/></strong> method to acquire the next frame of the desktop image.  The mouse position is always supplied for a mouse update. A new reference shape is indicated by a non-zero value in the <strong>PointerShapeBufferSize</strong> member.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTDUPL_FRAME_INFO::LastMouseUpdateTime']/*"/>	
        /// <msdn-id>hh404512</msdn-id>	
        /// <unmanaged>LARGE_INTEGER LastMouseUpdateTime</unmanaged>	
        /// <unmanaged-short>LARGE_INTEGER LastMouseUpdateTime</unmanaged-short>	
        public long LastMouseUpdateTime;
        
        /// <summary>	
        /// <dd> <p>The number of frames that the operating system accumulated in the desktop image surface since the calling application processed the last desktop image.  For more information about this number, see Remarks.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTDUPL_FRAME_INFO::AccumulatedFrames']/*"/>	
        /// <msdn-id>hh404512</msdn-id>	
        /// <unmanaged>unsigned int AccumulatedFrames</unmanaged>	
        /// <unmanaged-short>unsigned int AccumulatedFrames</unmanaged-short>	
        public int AccumulatedFrames;
        
        /// <summary>	
        /// <dd> <p>Specifies whether the operating system accumulated updates by coalescing dirty regions. Therefore,  the dirty regions might contain unmodified pixels. <strong>TRUE</strong> if dirty regions were accumulated; otherwise, <strong><see cref="SharpDX.Result.False"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTDUPL_FRAME_INFO::RectsCoalesced']/*"/>	
        /// <msdn-id>hh404512</msdn-id>	
        /// <unmanaged>BOOL RectsCoalesced</unmanaged>	
        /// <unmanaged-short>BOOL RectsCoalesced</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool RectsCoalesced;
        
        /// <summary>	
        /// <dd> <p>Specifies whether the desktop image might contain protected content that was already blacked out in the desktop image.  <strong>TRUE</strong> if protected content was already blacked; otherwise, <strong><see cref="SharpDX.Result.False"/></strong>. The application can use this information to notify the remote user that some of the desktop content might be protected and therefore not visible.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTDUPL_FRAME_INFO::ProtectedContentMaskedOut']/*"/>	
        /// <msdn-id>hh404512</msdn-id>	
        /// <unmanaged>BOOL ProtectedContentMaskedOut</unmanaged>	
        /// <unmanaged-short>BOOL ProtectedContentMaskedOut</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool ProtectedContentMaskedOut;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.DXGI.OutputDuplicatePointerPosition"/></strong> structure that describes the most recent mouse position if the <strong>LastMouseUpdateTime</strong> member is a non-zero value; otherwise, this value is ignored. This value provides the coordinates of the location where the top-left-hand corner of the reference shape is drawn; this value is not the desktop position of the hot spot.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTDUPL_FRAME_INFO::PointerPosition']/*"/>	
        /// <msdn-id>hh404512</msdn-id>	
        /// <unmanaged>DXGI_OUTDUPL_POINTER_POSITION PointerPosition</unmanaged>	
        /// <unmanaged-short>DXGI_OUTDUPL_POINTER_POSITION PointerPosition</unmanaged-short>	
        public SharpDX.DXGI.OutputDuplicatePointerPosition PointerPosition;
        
        /// <summary>	
        /// <dd> <p>Size in bytes of the buffers to store all the desktop update metadata for this frame. For more information about this size, see Remarks.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTDUPL_FRAME_INFO::TotalMetadataBufferSize']/*"/>	
        /// <msdn-id>hh404512</msdn-id>	
        /// <unmanaged>unsigned int TotalMetadataBufferSize</unmanaged>	
        /// <unmanaged-short>unsigned int TotalMetadataBufferSize</unmanaged-short>	
        public int TotalMetadataBufferSize;
        
        /// <summary>	
        /// <dd> <p>Size in bytes of the buffer to hold the new pixel data for the mouse shape. For more information about this size, see Remarks.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTDUPL_FRAME_INFO::PointerShapeBufferSize']/*"/>	
        /// <msdn-id>hh404512</msdn-id>	
        /// <unmanaged>unsigned int PointerShapeBufferSize</unmanaged>	
        /// <unmanaged-short>unsigned int PointerShapeBufferSize</unmanaged-short>	
        public int PointerShapeBufferSize;
    }
    
    /// <summary>	
    /// <p>The  <strong><see cref="SharpDX.DXGI.OutputDuplicateMoveRectangle"/></strong> structure describes the movement of a  rectangle.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTDUPL_MOVE_RECT']/*"/>	
    /// <msdn-id>hh404514</msdn-id>	
    /// <unmanaged>DXGI_OUTDUPL_MOVE_RECT</unmanaged>	
    /// <unmanaged-short>DXGI_OUTDUPL_MOVE_RECT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct OutputDuplicateMoveRectangle {	
        
        /// <summary>	
        /// <dd> <p>The starting position of a rectangle.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTDUPL_MOVE_RECT::SourcePoint']/*"/>	
        /// <msdn-id>hh404514</msdn-id>	
        /// <unmanaged>POINT SourcePoint</unmanaged>	
        /// <unmanaged-short>POINT SourcePoint</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawPoint SourcePoint;
        
        /// <summary>	
        /// <dd> <p>The target region to which to move a rectangle.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTDUPL_MOVE_RECT::DestinationRect']/*"/>	
        /// <msdn-id>hh404514</msdn-id>	
        /// <unmanaged>RECT DestinationRect</unmanaged>	
        /// <unmanaged-short>RECT DestinationRect</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawRectangle DestinationRect;
    }
    
    /// <summary>	
    /// <p>The <strong><see cref="SharpDX.DXGI.OutputDuplicatePointerPosition"/></strong> structure describes the position of the hardware cursor.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <strong>Position</strong> member is valid only if the <strong>Visible</strong> member?s value is set to <strong>TRUE</strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_POSITION']/*"/>	
    /// <msdn-id>hh404516</msdn-id>	
    /// <unmanaged>DXGI_OUTDUPL_POINTER_POSITION</unmanaged>	
    /// <unmanaged-short>DXGI_OUTDUPL_POINTER_POSITION</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct OutputDuplicatePointerPosition {	
        
        /// <summary>	
        /// <dd> <p>The position of the hardware cursor relative to the top-left of the adapter output.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_POSITION::Position']/*"/>	
        /// <msdn-id>hh404516</msdn-id>	
        /// <unmanaged>POINT Position</unmanaged>	
        /// <unmanaged-short>POINT Position</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawPoint Position;
        
        /// <summary>	
        /// <dd> <p>Specifies whether the hardware cursor is visible. <strong>TRUE</strong> if visible; otherwise, <strong><see cref="SharpDX.Result.False"/></strong>. If the hardware cursor is not visible, the calling application does not display the cursor in the client.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_POSITION::Visible']/*"/>	
        /// <msdn-id>hh404516</msdn-id>	
        /// <unmanaged>BOOL Visible</unmanaged>	
        /// <unmanaged-short>BOOL Visible</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool Visible;
    }
    
    /// <summary>	
    /// <p>The <strong><see cref="SharpDX.DXGI.OutputDuplicatePointerShapeInformation"/></strong> structure describes information about the cursor shape.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>An application draws the cursor shape with the top-left-hand corner drawn at the position that the <strong>Position</strong> member of the  <strong><see cref="SharpDX.DXGI.OutputDuplicatePointerPosition"/></strong> structure specifies; the application does not use the hot spot to draw the cursor shape.</p><p>An application calls the  <strong><see cref="SharpDX.DXGI.OutputDuplication.GetFramePointerShape"/></strong> method to retrieve cursor shape information in a  <strong><see cref="SharpDX.DXGI.OutputDuplicatePointerShapeInformation"/></strong> structure.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_SHAPE_INFO']/*"/>	
    /// <msdn-id>hh404518</msdn-id>	
    /// <unmanaged>DXGI_OUTDUPL_POINTER_SHAPE_INFO</unmanaged>	
    /// <unmanaged-short>DXGI_OUTDUPL_POINTER_SHAPE_INFO</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct OutputDuplicatePointerShapeInformation {	
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.DXGI.OutputDuplicatePointerShapeType"/></strong>-typed value that specifies the type of cursor shape. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_SHAPE_INFO::Type']/*"/>	
        /// <msdn-id>hh404518</msdn-id>	
        /// <unmanaged>unsigned int Type</unmanaged>	
        /// <unmanaged-short>unsigned int Type</unmanaged-short>	
        public int Type;
        
        /// <summary>	
        /// <dd> <p>The width in pixels of the mouse cursor.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_SHAPE_INFO::Width']/*"/>	
        /// <msdn-id>hh404518</msdn-id>	
        /// <unmanaged>unsigned int Width</unmanaged>	
        /// <unmanaged-short>unsigned int Width</unmanaged-short>	
        public int Width;
        
        /// <summary>	
        /// <dd> <p>The height in scan lines of the mouse cursor.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_SHAPE_INFO::Height']/*"/>	
        /// <msdn-id>hh404518</msdn-id>	
        /// <unmanaged>unsigned int Height</unmanaged>	
        /// <unmanaged-short>unsigned int Height</unmanaged-short>	
        public int Height;
        
        /// <summary>	
        /// <dd> <p>The width in bytes of the mouse cursor.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_SHAPE_INFO::Pitch']/*"/>	
        /// <msdn-id>hh404518</msdn-id>	
        /// <unmanaged>unsigned int Pitch</unmanaged>	
        /// <unmanaged-short>unsigned int Pitch</unmanaged-short>	
        public int Pitch;
        
        /// <summary>	
        /// <dd> <p>The position of the cursor's hot spot relative to its upper-left pixel. An application does not use the hot spot when it determines where to draw the cursor shape.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_OUTDUPL_POINTER_SHAPE_INFO::HotSpot']/*"/>	
        /// <msdn-id>hh404518</msdn-id>	
        /// <unmanaged>POINT HotSpot</unmanaged>	
        /// <unmanaged-short>POINT HotSpot</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawPoint HotSpot;
    }
    
    /// <summary>	
    /// <p>Describes information about present that helps the operating system optimize presentation.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The scroll rectangle and the list of dirty rectangles could overlap.  In this situation, the dirty rectangles take priority. Applications can then have pieces of dynamic content on top of a scrolled area. For example, an application could scroll a page and play video at the same time.</p><p>The following diagram and coordinates illustrate this example.</p><code> DirtyRectsCount = 2	
    /// pDirtyRects[ 0 ] = { 10, 30, 40, 50 } // Video	
    /// pDirtyRects[ 1 ] = { 0, 70, 50, 80 } // New line	
    /// *pScrollRect = { 0, 0, 50, 70 }	
    /// *pScrollOffset = { 0, -10 }	
    /// </code><p>Parts of the previous frame and content that the application renders are combined to produce the final frame that the operating system presents on the display screen. Most of the window is scrolled from the previous frame. The  application must update the video frame with the new chunk of content that appears due to scrolling.</p><p>The dashed rectangle shows the scroll rectangle in the current frame. The scroll rectangle is  specified by the <strong>pScrollRect</strong> member.	
    /// The arrow shows the scroll offset. The scroll offset is specified by the <strong>pScrollOffset</strong> member.	
    /// Filled rectangles show dirty rectangles that the application updated with new content. The filled rectangles are specified by the <strong>DirtyRectsCount</strong> and <strong>pDirtyRects</strong> members.</p><p>The scroll rectangle and offset are not supported for the <strong><see cref="SharpDX.DXGI.SwapEffect.Discard"/></strong> or <strong><see cref="SharpDX.DXGI.SwapEffect.Sequential"/></strong> present option. Dirty rectangles and scroll rectangle are not supported for multisampled swap chains.</p><p>The actual implementation of composition and necessary bitblts is different for the bitblt model and the flip model. For more info about these models, see DXGI Flip Model.</p><p>For more info about the flip-model swap chain and optimizing presentation, see Enhancing presentation with the flip model, dirty rectangles, and scrolled areas.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_PRESENT_PARAMETERS']/*"/>	
    /// <msdn-id>hh404522</msdn-id>	
    /// <unmanaged>DXGI_PRESENT_PARAMETERS</unmanaged>	
    /// <unmanaged-short>DXGI_PRESENT_PARAMETERS</unmanaged-short>	
    public  partial struct PresentParameters {	
        
        /// <summary>	
        /// <dd> <p>The number of updated rectangles that you update in the back buffer for the presented frame. The operating system uses this information to optimize presentation. You can set this member to 0 to indicate that you update the whole frame.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_PRESENT_PARAMETERS::DirtyRectsCount']/*"/>	
        /// <msdn-id>hh404522</msdn-id>	
        /// <unmanaged>unsigned int DirtyRectsCount</unmanaged>	
        /// <unmanaged-short>unsigned int DirtyRectsCount</unmanaged-short>	
        internal int DirtyRectsCount;
        
        /// <summary>	
        /// <dd> <p>A list of updated rectangles that you update in the back buffer for the presented frame. An application must update every single pixel in each rectangle that it reports to the runtime; the application cannot assume that the pixels are saved from the previous frame. For more information about updating dirty rectangles, see Remarks. You can set this member to <strong><c>null</c></strong> if <strong>DirtyRectsCount</strong> is 0. An application must not update any pixel outside of the dirty rectangles.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_PRESENT_PARAMETERS::pDirtyRects']/*"/>	
        /// <msdn-id>hh404522</msdn-id>	
        /// <unmanaged>RECT* pDirtyRects</unmanaged>	
        /// <unmanaged-short>RECT pDirtyRects</unmanaged-short>	
        internal System.IntPtr PDirtyRects;
        
        /// <summary>	
        /// <dd> <p> A reference to the scrolled rectangle. The scrolled rectangle is the rectangle of the previous frame from which the runtime bit-block transfers (bitblts) content. The runtime also uses the scrolled rectangle to optimize presentation in terminal server and indirect display scenarios.</p> <p>The scrolled rectangle also describes the destination rectangle, that is, the region on the current frame that is filled with scrolled content. You can set this member to <strong><c>null</c></strong> to indicate that no content is scrolled from the previous frame.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_PRESENT_PARAMETERS::pScrollRect']/*"/>	
        /// <msdn-id>hh404522</msdn-id>	
        /// <unmanaged>RECT* pScrollRect</unmanaged>	
        /// <unmanaged-short>RECT pScrollRect</unmanaged-short>	
        internal System.IntPtr PScrollRect;
        
        /// <summary>	
        /// <dd> <p>A reference to the offset of the scrolled area that goes from the source rectangle (of previous frame) to the destination rectangle (of current frame). You can set this member to <strong><c>null</c></strong> to indicate no offset.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_PRESENT_PARAMETERS::pScrollOffset']/*"/>	
        /// <msdn-id>hh404522</msdn-id>	
        /// <unmanaged>POINT* pScrollOffset</unmanaged>	
        /// <unmanaged-short>POINT pScrollOffset</unmanaged-short>	
        internal System.IntPtr PScrollOffset;
    }
    
    /// <summary>	
    /// <p>Describes the current video memory budgeting parameters.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Use this structure with <strong>QueryVideoMemoryInfo</strong>.</p><p>Refer to the remarks for <strong><see cref="SharpDX.Direct3D12.MemoryPool"/></strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_QUERY_VIDEO_MEMORY_INFO']/*"/>	
    /// <msdn-id>dn933220</msdn-id>	
    /// <unmanaged>DXGI_QUERY_VIDEO_MEMORY_INFO</unmanaged>	
    /// <unmanaged-short>DXGI_QUERY_VIDEO_MEMORY_INFO</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct QueryVideoMemoryInformation {	
        
        /// <summary>	
        /// <dd> <p>Specifies the OS-provided video memory budget, in bytes, that the application should target. If <em>CurrentUsage</em> is greater than <em>Budget</em>, the application may incur stuttering or performance penalties due to background activity by the OS to provide other applications with a fair usage of video memory.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_QUERY_VIDEO_MEMORY_INFO::Budget']/*"/>	
        /// <msdn-id>dn933220</msdn-id>	
        /// <unmanaged>unsigned longlong Budget</unmanaged>	
        /// <unmanaged-short>unsigned longlong Budget</unmanaged-short>	
        public long Budget;
        
        /// <summary>	
        /// <dd> <p> Specifies the application?s current video memory usage, in bytes.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_QUERY_VIDEO_MEMORY_INFO::CurrentUsage']/*"/>	
        /// <msdn-id>dn933220</msdn-id>	
        /// <unmanaged>unsigned longlong CurrentUsage</unmanaged>	
        /// <unmanaged-short>unsigned longlong CurrentUsage</unmanaged-short>	
        public long CurrentUsage;
        
        /// <summary>	
        /// <dd> <p> The amount of video memory, in bytes, that the application has available for reservation. To reserve this video memory, the application should call <strong><see cref="SharpDX.DXGI.Adapter3.SetVideoMemoryReservation"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_QUERY_VIDEO_MEMORY_INFO::AvailableForReservation']/*"/>	
        /// <msdn-id>dn933220</msdn-id>	
        /// <unmanaged>unsigned longlong AvailableForReservation</unmanaged>	
        /// <unmanaged-short>unsigned longlong AvailableForReservation</unmanaged-short>	
        public long AvailableForReservation;
        
        /// <summary>	
        /// <dd> <p> The amount of video memory, in bytes, that is reserved by the application. The OS uses the reservation as a hint to determine the application?s minimum working set. Applications should attempt to ensure that their video memory usage can be trimmed to meet this requirement. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_QUERY_VIDEO_MEMORY_INFO::CurrentReservation']/*"/>	
        /// <msdn-id>dn933220</msdn-id>	
        /// <unmanaged>unsigned longlong CurrentReservation</unmanaged>	
        /// <unmanaged-short>unsigned longlong CurrentReservation</unmanaged-short>	
        public long CurrentReservation;
    }
    
    /// <summary>	
    /// <p>Represents a rational number.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The <strong><see cref="SharpDX.DXGI.Rational"/></strong> structure operates under the following rules:</p><ul> <li>0/0 is legal and will be interpreted as 0/1.</li> <li>0/anything is interpreted as zero.</li> <li>If you are representing a whole number, the denominator should be 1.</li> </ul>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_RATIONAL']/*"/>	
    /// <msdn-id>bb173069</msdn-id>	
    /// <unmanaged>DXGI_RATIONAL</unmanaged>	
    /// <unmanaged-short>DXGI_RATIONAL</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct Rational {	
        
        /// <summary>	
        /// <dd> <p>An unsigned integer value representing the top of the rational number.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_RATIONAL::Numerator']/*"/>	
        /// <msdn-id>bb173069</msdn-id>	
        /// <unmanaged>unsigned int Numerator</unmanaged>	
        /// <unmanaged-short>unsigned int Numerator</unmanaged-short>	
        public int Numerator;
        
        /// <summary>	
        /// <dd> <p>An unsigned integer value representing the bottom of the rational number.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_RATIONAL::Denominator']/*"/>	
        /// <msdn-id>bb173069</msdn-id>	
        /// <unmanaged>unsigned int Denominator</unmanaged>	
        /// <unmanaged-short>unsigned int Denominator</unmanaged-short>	
        public int Denominator;
    }
    
    /// <summary>	
    /// <p>Describes multi-sampling parameters for a resource.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The default sampler mode, with no anti-aliasing, has a count of 1 and a quality level of 0.</p><p>If multi-sample antialiasing is being used, all bound render targets and depth buffers must have the same sample counts and quality levels.</p><table> <tr><td> <p>Differences between Direct3D 10.0 and Direct3D 10.1 and between Direct3D 10.0 and Direct3D 11:</p> <p>Direct3D 10.1 has defined two standard quality levels:   <strong>D3D10_STANDARD_MULTISAMPLE_PATTERN</strong> and <strong>D3D10_CENTER_MULTISAMPLE_PATTERN</strong> in the <strong>D3D10_STANDARD_MULTISAMPLE_QUALITY_LEVELS</strong> enumeration in D3D10_1.h.</p> <p>Direct3D 11 has defined two standard quality levels:   <strong><see cref="SharpDX.Direct3D11.StandardMultisampleQualityLevels.StandardMultisamplePattern"/></strong> and <strong><see cref="SharpDX.Direct3D11.StandardMultisampleQualityLevels.CenterMultisamplePattern"/></strong> in the <strong><see cref="SharpDX.Direct3D11.StandardMultisampleQualityLevels"/></strong> enumeration in D3D11.h.</p> </td></tr> </table><p>?</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SAMPLE_DESC']/*"/>	
    /// <msdn-id>bb173072</msdn-id>	
    /// <unmanaged>DXGI_SAMPLE_DESC</unmanaged>	
    /// <unmanaged-short>DXGI_SAMPLE_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct SampleDescription {	
        
        /// <summary>	
        /// <dd> <p>The number of multisamples per pixel.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SAMPLE_DESC::Count']/*"/>	
        /// <msdn-id>bb173072</msdn-id>	
        /// <unmanaged>unsigned int Count</unmanaged>	
        /// <unmanaged-short>unsigned int Count</unmanaged-short>	
        public int Count;
        
        /// <summary>	
        /// <dd> <p>The image quality level. The higher the quality, the lower the performance. The valid range is between zero and one less than the level returned  by <strong>ID3D10Device::CheckMultisampleQualityLevels</strong> for Direct3D 10 or <strong><see cref="SharpDX.Direct3D11.Device.CheckMultisampleQualityLevels"/></strong> for Direct3D 11.</p> <p>For Direct3D 10.1 and Direct3D 11, you can use two special quality level values. For more information about these quality level values, see Remarks.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SAMPLE_DESC::Quality']/*"/>	
        /// <msdn-id>bb173072</msdn-id>	
        /// <unmanaged>unsigned int Quality</unmanaged>	
        /// <unmanaged-short>unsigned int Quality</unmanaged-short>	
        public int Quality;
    }
    
    /// <summary>	
    /// <p>Represents a handle to a shared resource.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To create a shared surface, pass a shared-resource handle into the <strong><see cref="SharpDX.DXGI.Device.CreateSurface"/></strong> method.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SHARED_RESOURCE']/*"/>	
    /// <msdn-id>bb173073</msdn-id>	
    /// <unmanaged>DXGI_SHARED_RESOURCE</unmanaged>	
    /// <unmanaged-short>DXGI_SHARED_RESOURCE</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct SharedResource {	
        
        /// <summary>	
        /// <dd> <p>A handle to a shared resource.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SHARED_RESOURCE::Handle']/*"/>	
        /// <msdn-id>bb173073</msdn-id>	
        /// <unmanaged>void* Handle</unmanaged>	
        /// <unmanaged-short>void Handle</unmanaged-short>	
        public System.IntPtr Handle;
    }
    
    /// <summary>	
    /// <p>Describes a surface.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SURFACE_DESC']/*"/>	
    /// <msdn-id>bb173074</msdn-id>	
    /// <unmanaged>DXGI_SURFACE_DESC</unmanaged>	
    /// <unmanaged-short>DXGI_SURFACE_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct SurfaceDescription {	
        
        /// <summary>	
        /// <dd> <p>A value describing the surface width.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SURFACE_DESC::Width']/*"/>	
        /// <msdn-id>bb173074</msdn-id>	
        /// <unmanaged>unsigned int Width</unmanaged>	
        /// <unmanaged-short>unsigned int Width</unmanaged-short>	
        public int Width;
        
        /// <summary>	
        /// <dd> <p>A value describing the surface height.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SURFACE_DESC::Height']/*"/>	
        /// <msdn-id>bb173074</msdn-id>	
        /// <unmanaged>unsigned int Height</unmanaged>	
        /// <unmanaged-short>unsigned int Height</unmanaged-short>	
        public int Height;
        
        /// <summary>	
        /// <dd> <p>A member of the <strong><see cref="SharpDX.DXGI.Format"/></strong> enumerated type that describes the surface format.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SURFACE_DESC::Format']/*"/>	
        /// <msdn-id>bb173074</msdn-id>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        public SharpDX.DXGI.Format Format;
        
        /// <summary>	
        /// <dd> <p>A member of the <strong><see cref="SharpDX.DXGI.SampleDescription"/></strong> structure that describes multi-sampling parameters for the surface.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SURFACE_DESC::SampleDesc']/*"/>	
        /// <msdn-id>bb173074</msdn-id>	
        /// <unmanaged>DXGI_SAMPLE_DESC SampleDesc</unmanaged>	
        /// <unmanaged-short>DXGI_SAMPLE_DESC SampleDesc</unmanaged-short>	
        public SharpDX.DXGI.SampleDescription SampleDescription;
    }
    
    /// <summary>	
    /// <p>Describes a swap chain.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>In full-screen mode, there is a dedicated front buffer; in windowed mode, the desktop is the front buffer.</p><p>If you create a swap chain with one buffer, specifying <strong><see cref="SharpDX.DXGI.SwapEffect.Sequential"/></strong> does not cause the contents of the single  buffer to be swapped with the front buffer.</p><p>For performance information about flipping swap-chain buffers in full-screen application,  see Full-Screen Application Performance Hints.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC']/*"/>	
    /// <msdn-id>bb173075</msdn-id>	
    /// <unmanaged>DXGI_SWAP_CHAIN_DESC</unmanaged>	
    /// <unmanaged-short>DXGI_SWAP_CHAIN_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct SwapChainDescription {	
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.DXGI.ModeDescription"/></strong> structure that describes the backbuffer display mode.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC::BufferDesc']/*"/>	
        /// <msdn-id>bb173075</msdn-id>	
        /// <unmanaged>DXGI_MODE_DESC BufferDesc</unmanaged>	
        /// <unmanaged-short>DXGI_MODE_DESC BufferDesc</unmanaged-short>	
        public SharpDX.DXGI.ModeDescription ModeDescription;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.DXGI.SampleDescription"/></strong> structure that describes multi-sampling parameters.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC::SampleDesc']/*"/>	
        /// <msdn-id>bb173075</msdn-id>	
        /// <unmanaged>DXGI_SAMPLE_DESC SampleDesc</unmanaged>	
        /// <unmanaged-short>DXGI_SAMPLE_DESC SampleDesc</unmanaged-short>	
        public SharpDX.DXGI.SampleDescription SampleDescription;
        
        /// <summary>	
        /// <dd> <p>A member of the <strong>DXGI_USAGE</strong> enumerated type that describes the surface usage and CPU access options for the back buffer. The back buffer can  be used for shader input or render-target output.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC::BufferUsage']/*"/>	
        /// <msdn-id>bb173075</msdn-id>	
        /// <unmanaged>DXGI_USAGE_ENUM BufferUsage</unmanaged>	
        /// <unmanaged-short>DXGI_USAGE_ENUM BufferUsage</unmanaged-short>	
        public SharpDX.DXGI.Usage Usage;
        
        /// <summary>	
        /// <dd> <p>A value that describes the number of buffers in the swap chain. When you call  <strong><see cref="SharpDX.DXGI.Factory.CreateSwapChain"/></strong> to create a full-screen swap chain, you typically include the front buffer in this value. For more information about swap-chain buffers, see Remarks.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC::BufferCount']/*"/>	
        /// <msdn-id>bb173075</msdn-id>	
        /// <unmanaged>unsigned int BufferCount</unmanaged>	
        /// <unmanaged-short>unsigned int BufferCount</unmanaged-short>	
        public int BufferCount;
        
        /// <summary>	
        /// <dd> <p>An <strong><see cref="System.IntPtr"/></strong> handle to the output window. This member must not be <strong><c>null</c></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC::OutputWindow']/*"/>	
        /// <msdn-id>bb173075</msdn-id>	
        /// <unmanaged>HWND OutputWindow</unmanaged>	
        /// <unmanaged-short>HWND OutputWindow</unmanaged-short>	
        public System.IntPtr OutputHandle;
        
        /// <summary>	
        /// <dd> <p>A Boolean value that specifies whether the output is in windowed mode. <strong>TRUE</strong> if the output is in windowed mode; otherwise, <strong><see cref="SharpDX.Result.False"/></strong>. </p> <p>We recommend that you create a windowed swap chain and allow the end user to change the swap chain to full screen through <strong><see cref="SharpDX.DXGI.SwapChain.SetFullscreenState"/></strong>; that is, do not set this member to <see cref="SharpDX.Result.False"/> to force the swap chain to be full screen. However, if you create the swap chain as full screen, also provide the end user with a list of supported display modes through the <strong>BufferDesc</strong> member because a swap chain that is created with an unsupported display mode might cause the display to go black and prevent the end user from seeing anything. </p> <p>For more information about choosing windowed verses full screen, see <strong><see cref="SharpDX.DXGI.Factory.CreateSwapChain"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC::Windowed']/*"/>	
        /// <msdn-id>bb173075</msdn-id>	
        /// <unmanaged>BOOL Windowed</unmanaged>	
        /// <unmanaged-short>BOOL Windowed</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IsWindowed;
        
        /// <summary>	
        /// <dd> <p>A member of the <strong><see cref="SharpDX.DXGI.SwapEffect"/></strong> enumerated type that describes options for handling the contents of the presentation buffer after  presenting a surface.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC::SwapEffect']/*"/>	
        /// <msdn-id>bb173075</msdn-id>	
        /// <unmanaged>DXGI_SWAP_EFFECT SwapEffect</unmanaged>	
        /// <unmanaged-short>DXGI_SWAP_EFFECT SwapEffect</unmanaged-short>	
        public SharpDX.DXGI.SwapEffect SwapEffect;
        
        /// <summary>	
        /// <dd> <p>A member of the <strong><see cref="SharpDX.DXGI.SwapChainFlags"/></strong> enumerated type that describes options for swap-chain behavior.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC::Flags']/*"/>	
        /// <msdn-id>bb173075</msdn-id>	
        /// <unmanaged>DXGI_SWAP_CHAIN_FLAG Flags</unmanaged>	
        /// <unmanaged-short>DXGI_SWAP_CHAIN_FLAG Flags</unmanaged-short>	
        public SharpDX.DXGI.SwapChainFlags Flags;
    }
    
    /// <summary>	
    /// <p>Describes a swap chain.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p><strong>Note</strong>??You cannot cast a  <strong><see cref="SharpDX.DXGI.SwapChainDescription1"/></strong> to a  <strong><see cref="SharpDX.DXGI.SwapChainDescription"/></strong> and vice versa. An  application must explicitly use the  <strong><see cref="SharpDX.DXGI.SwapChain1.GetDescription1"/></strong> method to  retrieve the newer version of the swap-chain description structure.</p><p>In full-screen mode, there is a dedicated front buffer; in windowed mode, the desktop is the front buffer.</p><p>For a flip-model swap chain (that is, a swap  chain that has the  <strong><see cref="SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> value set in the <strong>SwapEffect</strong> member), you must set the  <strong>Format</strong> member to  <strong><see cref="SharpDX.DXGI.Format.R16G16B16A16_Float"/></strong>,  <strong><see cref="SharpDX.DXGI.Format.B8G8R8A8_UNorm"/></strong>, or  <strong><see cref="SharpDX.DXGI.Format.R8G8B8A8_UNorm"/></strong>; you must set the  <strong>Count</strong> member of the  <strong><see cref="SharpDX.DXGI.SampleDescription"/></strong> structure that the  <strong>SampleDesc</strong> member specifies to one and the <strong>Quality</strong> member  of <strong><see cref="SharpDX.DXGI.SampleDescription"/></strong> to zero because multiple  sample antialiasing (MSAA) is not supported; you must set the <strong>BufferCount</strong> member to  from two to sixteen. For more info about flip-model swap chain, see  DXGI Flip Model.</p><p><strong>Windows?Phone?8:</strong> This API is supported.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1']/*"/>	
    /// <msdn-id>hh404528</msdn-id>	
    /// <unmanaged>DXGI_SWAP_CHAIN_DESC1</unmanaged>	
    /// <unmanaged-short>DXGI_SWAP_CHAIN_DESC1</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct SwapChainDescription1 {	
        
        /// <summary>	
        /// <dd> <p>A value that describes the resolution width. If you specify the width as zero when you call the  <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForHwnd"/></strong> method to create a swap chain, the runtime obtains the width from the output window and assigns this width value  to the swap-chain description. You can subsequently call the  <strong><see cref="SharpDX.DXGI.SwapChain1.GetDescription1"/></strong> method to  retrieve the assigned width value. You cannot specify the width as zero when you call the  <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForComposition"/></strong> method.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::Width']/*"/>	
        /// <msdn-id>hh404528</msdn-id>	
        /// <unmanaged>unsigned int Width</unmanaged>	
        /// <unmanaged-short>unsigned int Width</unmanaged-short>	
        public int Width;
        
        /// <summary>	
        /// <dd> <p>A value that describes the resolution height. If you specify the height as zero when you call the  <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForHwnd"/></strong> method to create a swap chain, the runtime obtains the height from the output window and assigns this height  value to the swap-chain description. You can subsequently call the  <strong><see cref="SharpDX.DXGI.SwapChain1.GetDescription1"/></strong> method to  retrieve the assigned height value. You cannot specify the height as zero when you call the  <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForComposition"/></strong> method.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::Height']/*"/>	
        /// <msdn-id>hh404528</msdn-id>	
        /// <unmanaged>unsigned int Height</unmanaged>	
        /// <unmanaged-short>unsigned int Height</unmanaged-short>	
        public int Height;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.DXGI.Format"/></strong> structure that describes the  display format.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::Format']/*"/>	
        /// <msdn-id>hh404528</msdn-id>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        public SharpDX.DXGI.Format Format;
        
        /// <summary>	
        /// <dd> <p>Specifies whether the full-screen display mode or the swap-chain back buffer is stereo.  <strong>TRUE</strong> if stereo; otherwise, <strong><see cref="SharpDX.Result.False"/></strong>. If you specify stereo, you  must also specify a flip-model swap chain (that is, a swap chain that has the  <strong><see cref="SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> value set in the <strong>SwapEffect</strong> member).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::Stereo']/*"/>	
        /// <msdn-id>hh404528</msdn-id>	
        /// <unmanaged>BOOL Stereo</unmanaged>	
        /// <unmanaged-short>BOOL Stereo</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool Stereo;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.DXGI.SampleDescription"/></strong> structure that  describes multi-sampling parameters. This member is valid only with bit-block transfer (bitblt) model swap  chains.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::SampleDesc']/*"/>	
        /// <msdn-id>hh404528</msdn-id>	
        /// <unmanaged>DXGI_SAMPLE_DESC SampleDesc</unmanaged>	
        /// <unmanaged-short>DXGI_SAMPLE_DESC SampleDesc</unmanaged-short>	
        public SharpDX.DXGI.SampleDescription SampleDescription;
        
        /// <summary>	
        /// <dd> <p>A <strong>DXGI_USAGE</strong>-typed value that describes the  surface usage and CPU access options for the back buffer. The back buffer can be used for shader input or  render-target output.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::BufferUsage']/*"/>	
        /// <msdn-id>hh404528</msdn-id>	
        /// <unmanaged>DXGI_USAGE_ENUM BufferUsage</unmanaged>	
        /// <unmanaged-short>DXGI_USAGE_ENUM BufferUsage</unmanaged-short>	
        public SharpDX.DXGI.Usage Usage;
        
        /// <summary>	
        /// <dd> <p>A value that describes the number of buffers in the swap chain. When you create a full-screen swap chain,  you typically include the front buffer in this value.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::BufferCount']/*"/>	
        /// <msdn-id>hh404528</msdn-id>	
        /// <unmanaged>unsigned int BufferCount</unmanaged>	
        /// <unmanaged-short>unsigned int BufferCount</unmanaged-short>	
        public int BufferCount;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.DXGI.Scaling"/></strong>-typed value that identifies  resize behavior if the size of the back buffer is not equal to the target output.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::Scaling']/*"/>	
        /// <msdn-id>hh404528</msdn-id>	
        /// <unmanaged>DXGI_SCALING Scaling</unmanaged>	
        /// <unmanaged-short>DXGI_SCALING Scaling</unmanaged-short>	
        public SharpDX.DXGI.Scaling Scaling;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.DXGI.SwapEffect"/></strong>-typed value  that describes the presentation model that is used by the swap chain and options for handling the contents of  the presentation buffer after presenting a surface. You must specify the  <strong><see cref="SharpDX.DXGI.SwapEffect.FlipSequential"/></strong> value when you call the  <strong><see cref="SharpDX.DXGI.Factory2.CreateSwapChainForComposition"/></strong> method because this method supports only flip  presentation model.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::SwapEffect']/*"/>	
        /// <msdn-id>hh404528</msdn-id>	
        /// <unmanaged>DXGI_SWAP_EFFECT SwapEffect</unmanaged>	
        /// <unmanaged-short>DXGI_SWAP_EFFECT SwapEffect</unmanaged-short>	
        public SharpDX.DXGI.SwapEffect SwapEffect;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.DXGI.AlphaMode"/></strong>-typed value that  identifies the transparency behavior of the swap-chain back buffer.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::AlphaMode']/*"/>	
        /// <msdn-id>hh404528</msdn-id>	
        /// <unmanaged>DXGI_ALPHA_MODE AlphaMode</unmanaged>	
        /// <unmanaged-short>DXGI_ALPHA_MODE AlphaMode</unmanaged-short>	
        public SharpDX.DXGI.AlphaMode AlphaMode;
        
        /// <summary>	
        /// <dd> <p>A combination of  <strong><see cref="SharpDX.DXGI.SwapChainFlags"/></strong>-typed values that are  combined by using a bitwise OR operation. The resulting value specifies options for swap-chain behavior.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_DESC1::Flags']/*"/>	
        /// <msdn-id>hh404528</msdn-id>	
        /// <unmanaged>DXGI_SWAP_CHAIN_FLAG Flags</unmanaged>	
        /// <unmanaged-short>DXGI_SWAP_CHAIN_FLAG Flags</unmanaged-short>	
        public SharpDX.DXGI.SwapChainFlags Flags;
    }
    
    /// <summary>	
    /// <p>Describes full-screen mode for a swap chain.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_FULLSCREEN_DESC']/*"/>	
    /// <msdn-id>hh404531</msdn-id>	
    /// <unmanaged>DXGI_SWAP_CHAIN_FULLSCREEN_DESC</unmanaged>	
    /// <unmanaged-short>DXGI_SWAP_CHAIN_FULLSCREEN_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct SwapChainFullScreenDescription {	
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.DXGI.Rational"/></strong> structure that describes the refresh rate in hertz.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_FULLSCREEN_DESC::RefreshRate']/*"/>	
        /// <msdn-id>hh404531</msdn-id>	
        /// <unmanaged>DXGI_RATIONAL RefreshRate</unmanaged>	
        /// <unmanaged-short>DXGI_RATIONAL RefreshRate</unmanaged-short>	
        public SharpDX.DXGI.Rational RefreshRate;
        
        /// <summary>	
        /// <dd> <p>A member of the <strong><see cref="SharpDX.DXGI.DisplayModeScanlineOrder"/></strong> enumerated type that describes the scan-line drawing mode.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_FULLSCREEN_DESC::ScanlineOrdering']/*"/>	
        /// <msdn-id>hh404531</msdn-id>	
        /// <unmanaged>DXGI_MODE_SCANLINE_ORDER ScanlineOrdering</unmanaged>	
        /// <unmanaged-short>DXGI_MODE_SCANLINE_ORDER ScanlineOrdering</unmanaged-short>	
        public SharpDX.DXGI.DisplayModeScanlineOrder ScanlineOrdering;
        
        /// <summary>	
        /// <dd> <p>A member of the <strong><see cref="SharpDX.DXGI.DisplayModeScaling"/></strong> enumerated type that describes the scaling mode.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_FULLSCREEN_DESC::Scaling']/*"/>	
        /// <msdn-id>hh404531</msdn-id>	
        /// <unmanaged>DXGI_MODE_SCALING Scaling</unmanaged>	
        /// <unmanaged-short>DXGI_MODE_SCALING Scaling</unmanaged-short>	
        public SharpDX.DXGI.DisplayModeScaling Scaling;
        
        /// <summary>	
        /// <dd> <p>A Boolean value that specifies whether the swap chain is in windowed mode. <strong>TRUE</strong> if the swap chain is in windowed mode; otherwise, <strong><see cref="SharpDX.Result.False"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DXGI_SWAP_CHAIN_FULLSCREEN_DESC::Windowed']/*"/>	
        /// <msdn-id>hh404531</msdn-id>	
        /// <unmanaged>BOOL Windowed</unmanaged>	
        /// <unmanaged-short>BOOL Windowed</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool Windowed;
    }
}
