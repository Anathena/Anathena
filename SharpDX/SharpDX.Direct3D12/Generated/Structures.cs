// Copyright (c) 2010-2014 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Types declaration for SharpDX.Direct3D12 namespace.
//     This code was generated by a tool.
//     Date : 6/25/2016 10:38:08 PM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
namespace SharpDX.Direct3D12 {

#pragma warning disable 282
#pragma warning disable 649
#pragma warning disable 419
#pragma warning disable 1587
#pragma warning disable 1574
    
    /// <summary>	
    /// <p> Describes the blend state that you use in a call to <strong><see cref="SharpDX.Direct3D11.Device.CreateBlendState"/></strong> to create a blend-state object. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Here are the default values for blend state.</p><table> <tr><th>State</th><th>Default Value</th></tr> <tr><td>AlphaToCoverageEnable</td><td><strong><see cref="SharpDX.Result.False"/></strong></td></tr> <tr><td>IndependentBlendEnable</td><td><strong><see cref="SharpDX.Result.False"/></strong></td></tr> <tr><td>RenderTarget[0].BlendEnable</td><td><strong><see cref="SharpDX.Result.False"/></strong></td></tr> <tr><td>RenderTarget[0].SrcBlend</td><td><see cref="SharpDX.Direct3D11.BlendOption.One"/></td></tr> <tr><td>RenderTarget[0].DestBlend</td><td><see cref="SharpDX.Direct3D11.BlendOption.Zero"/></td></tr> <tr><td>RenderTarget[0].BlendOp</td><td><see cref="SharpDX.Direct3D11.BlendOperation.Add"/></td></tr> <tr><td>RenderTarget[0].SrcBlendAlpha</td><td><see cref="SharpDX.Direct3D11.BlendOption.One"/></td></tr> <tr><td>RenderTarget[0].DestBlendAlpha</td><td><see cref="SharpDX.Direct3D11.BlendOption.Zero"/></td></tr> <tr><td>RenderTarget[0].BlendOpAlpha</td><td><see cref="SharpDX.Direct3D11.BlendOperation.Add"/></td></tr> <tr><td>RenderTarget[0].RenderTargetWriteMask</td><td><see cref="SharpDX.Direct3D11.ColorWriteMaskFlags.All"/></td></tr> </table><p>?</p><strong>Note</strong>??<strong><see cref="SharpDX.Direct3D11.BlendStateDescription"/></strong> is identical to <strong>D3D10_BLEND_DESC1</strong>.?<p> If the driver type is set to <strong><see cref="SharpDX.Direct3D.DriverType.Hardware"/></strong>, the feature level is set to less than or equal to <strong><see cref="SharpDX.Direct3D.FeatureLevel.Level_9_3"/></strong>, and the pixel format of the render target is set to <strong><see cref="SharpDX.DXGI.Format.R8G8B8A8_UNorm_SRgb"/></strong>, <strong><see cref="SharpDX.DXGI.Format.B8G8R8A8_UNorm_SRgb"/></strong>, or <strong><see cref="SharpDX.DXGI.Format.B8G8R8X8_UNorm_SRgb"/></strong>, the display device performs the blend in standard RGB (sRGB) space and not in linear space. However, if the feature level is set to greater than <strong><see cref="SharpDX.Direct3D.FeatureLevel.Level_9_3"/></strong>, the display device performs the blend in linear space, which is ideal. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_BLEND_DESC']/*"/>	
    /// <msdn-id>ff476087</msdn-id>	
    /// <unmanaged>D3D12_BLEND_DESC</unmanaged>	
    /// <unmanaged-short>D3D12_BLEND_DESC</unmanaged-short>	
    public  partial struct BlendStateDescription {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_BLEND_DESC::AlphaToCoverageEnable']/*"/>	
        /// <msdn-id>ff476087</msdn-id>	
        /// <unmanaged>BOOL AlphaToCoverageEnable</unmanaged>	
        /// <unmanaged-short>BOOL AlphaToCoverageEnable</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool AlphaToCoverageEnable;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_BLEND_DESC::IndependentBlendEnable']/*"/>	
        /// <msdn-id>ff476087</msdn-id>	
        /// <unmanaged>BOOL IndependentBlendEnable</unmanaged>	
        /// <unmanaged-short>BOOL IndependentBlendEnable</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IndependentBlendEnable;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_BLEND_DESC::RenderTarget']/*"/>	
        /// <msdn-id>ff476087</msdn-id>	
        /// <unmanaged>D3D12_RENDER_TARGET_BLEND_DESC RenderTarget[8]</unmanaged>	
        /// <unmanaged-short>D3D12_RENDER_TARGET_BLEND_DESC RenderTarget</unmanaged-short>	
        public SharpDX.Direct3D12.RenderTargetBlendDescription[] RenderTarget { 
            get { return _RenderTarget ?? (_RenderTarget = new SharpDX.Direct3D12.RenderTargetBlendDescription[8]);}
        }
        internal SharpDX.Direct3D12.RenderTargetBlendDescription[] _RenderTarget;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public SharpDX.Mathematics.Interop.RawBool AlphaToCoverageEnable;
            public SharpDX.Mathematics.Interop.RawBool IndependentBlendEnable;
            public SharpDX.Direct3D12.RenderTargetBlendDescription RenderTarget;
            SharpDX.Direct3D12.RenderTargetBlendDescription __RenderTarget1;
            SharpDX.Direct3D12.RenderTargetBlendDescription __RenderTarget2;
            SharpDX.Direct3D12.RenderTargetBlendDescription __RenderTarget3;
            SharpDX.Direct3D12.RenderTargetBlendDescription __RenderTarget4;
            SharpDX.Direct3D12.RenderTargetBlendDescription __RenderTarget5;
            SharpDX.Direct3D12.RenderTargetBlendDescription __RenderTarget6;
            SharpDX.Direct3D12.RenderTargetBlendDescription __RenderTarget7;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.AlphaToCoverageEnable = @ref.AlphaToCoverageEnable;
            this.IndependentBlendEnable = @ref.IndependentBlendEnable;
            fixed (void* __to = &this.RenderTarget[0]) fixed (void* __from = &@ref.RenderTarget) SharpDX.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, 8*sizeof ( SharpDX.Direct3D12.RenderTargetBlendDescription));
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.AlphaToCoverageEnable = this.AlphaToCoverageEnable;
            @ref.IndependentBlendEnable = this.IndependentBlendEnable;
            fixed (void* __to = &@ref.RenderTarget) fixed (void* __from = &this.RenderTarget[0]) SharpDX.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, 8*sizeof ( SharpDX.Direct3D12.RenderTargetBlendDescription));
		
		}
    }
    
    /// <summary>	
    /// <p>Stores a pipeline state.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> This structure is used by the <strong><see cref="SharpDX.Direct3D12.GraphicsPipelineStateDescription"/></strong> structure, and the <strong><see cref="SharpDX.Direct3D12.ComputePipelineStateDescription"/></strong> structure.</p><p>This structure is intended to be filled with the data retrieved from <strong><see cref="SharpDX.Direct3D12.PipelineState.GetCachedBlob"/></strong>. This cached PSO contains data specific to the hardware, driver, and machine that it was retrieved from. Compilation using this data should be faster than compilation without. The rest of the data in the PSO needs to still be valid, and needs to match the cached PSO, otherwise E_INVALIDARG might be returned.</p><p>If the driver has been upgraded to a D3D12 driver after the PSO was cached, you might see a D3D12_ERROR_DRIVER_VERSION_MISMATCH return code, or if you?re running on a different GPU, the D3D12_ERROR_ADAPTER_NOT_FOUND return code.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_CACHED_PIPELINE_STATE']/*"/>	
    /// <msdn-id>dn914407</msdn-id>	
    /// <unmanaged>D3D12_CACHED_PIPELINE_STATE</unmanaged>	
    /// <unmanaged-short>D3D12_CACHED_PIPELINE_STATE</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct CachedPipelineState {	
        
        /// <summary>	
        /// <dd> <p> Specifies reference that references the memory location of the cache. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_CACHED_PIPELINE_STATE::pCachedBlob']/*"/>	
        /// <msdn-id>dn914407</msdn-id>	
        /// <unmanaged>const void* pCachedBlob</unmanaged>	
        /// <unmanaged-short>void pCachedBlob</unmanaged-short>	
        public System.IntPtr CachedBlobPointer;
        
        /// <summary>	
        /// <dd> <p> Specifies the size of the cache in bytes. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_CACHED_PIPELINE_STATE::CachedBlobSizeInBytes']/*"/>	
        /// <msdn-id>dn914407</msdn-id>	
        /// <unmanaged>SIZE_T CachedBlobSizeInBytes</unmanaged>	
        /// <unmanaged-short>SIZE_T CachedBlobSizeInBytes</unmanaged-short>	
        public SharpDX.PointerSize CachedBlobSizeInBytes;
    }
    
    /// <summary>	
    /// <p>Describes a value used to optimize clear operations for a particular resource.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> This structure is optionally passed into the following methods: </p><ul> <li> <strong><see cref="SharpDX.Direct3D12.Device.CreateCommittedResource"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D12.Device.CreatePlacedResource"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D12.Device.CreateReservedResource"/></strong> </li> </ul>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_CLEAR_VALUE']/*"/>	
    /// <msdn-id>dn903795</msdn-id>	
    /// <unmanaged>D3D12_CLEAR_VALUE</unmanaged>	
    /// <unmanaged-short>D3D12_CLEAR_VALUE</unmanaged-short>	
    [StructLayout(LayoutKind.Explicit)]
    public  partial struct ClearValue {	
        
        /// <summary>	
        /// <dd> <p>Specifies one member of the <strong><see cref="SharpDX.DXGI.Format"/></strong> enum.</p> <p>The format of the commonly cleared color follows the same validation rules as a view/ descriptor creation. In general, the format of the clear color can be any format in the same typeless group that the resource format belongs to.</p> <p>This <em>Format</em> must match the format of the view used during the clear operation. It indicates whether the <em>Color</em> or the <em>DepthStencil</em> member is valid and how to convert the values for usage with the resource.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_CLEAR_VALUE::Format']/*"/>	
        /// <msdn-id>dn903795</msdn-id>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        [FieldOffset(0)]
        public SharpDX.DXGI.Format Format;
        
        /// <summary>	
        /// <dd> <p>Specifies a 4-entry array of float values (each value in the range 0.0 to 1.0), determining the RGBA value. The order of RGBA matches the order used with <strong>ClearRenderTargetView</strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_CLEAR_VALUE::Color']/*"/>	
        /// <msdn-id>dn903795</msdn-id>	
        /// <unmanaged>SHARPDX_VECTOR4 Color</unmanaged>	
        /// <unmanaged-short>SHARPDX_VECTOR4 Color</unmanaged-short>	
        [FieldOffset(4)]
        public SharpDX.Mathematics.Interop.RawVector4 Color;
        
        /// <summary>	
        /// <dd> <p>Specifies one member of <strong><see cref="SharpDX.Direct3D12.DepthStencilValue"/></strong>. These values match the semantics of <em>Depth</em> and <em>Stencil</em> in <strong>ClearDepthStencilView</strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_CLEAR_VALUE::DepthStencil']/*"/>	
        /// <msdn-id>dn903795</msdn-id>	
        /// <unmanaged>D3D12_DEPTH_STENCIL_VALUE DepthStencil</unmanaged>	
        /// <unmanaged-short>D3D12_DEPTH_STENCIL_VALUE DepthStencil</unmanaged-short>	
        [FieldOffset(4)]
        public SharpDX.Direct3D12.DepthStencilValue DepthStencil;
    }
    
    /// <summary>	
    /// <p>Describes a command queue.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> This structure is passed into <strong>CreateCommandQueue</strong>. </p><p> This structure is returned by <strong><see cref="SharpDX.Direct3D12.CommandQueue.GetDescription"/></strong>. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_COMMAND_QUEUE_DESC']/*"/>	
    /// <msdn-id>dn903796</msdn-id>	
    /// <unmanaged>D3D12_COMMAND_QUEUE_DESC</unmanaged>	
    /// <unmanaged-short>D3D12_COMMAND_QUEUE_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct CommandQueueDescription {	
        
        /// <summary>	
        /// <dd> <p> Specifies one member of <strong><see cref="SharpDX.Direct3D12.CommandListType"/></strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_COMMAND_QUEUE_DESC::Type']/*"/>	
        /// <msdn-id>dn903796</msdn-id>	
        /// <unmanaged>D3D12_COMMAND_LIST_TYPE Type</unmanaged>	
        /// <unmanaged-short>D3D12_COMMAND_LIST_TYPE Type</unmanaged-short>	
        public SharpDX.Direct3D12.CommandListType Type;
        
        /// <summary>	
        /// <dd> <p> The priority for the command queue, as a  <strong><see cref="SharpDX.Direct3D12.CommandQueuePriority"/></strong> enumeration constant to select normal or high priority. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_COMMAND_QUEUE_DESC::Priority']/*"/>	
        /// <msdn-id>dn903796</msdn-id>	
        /// <unmanaged>int Priority</unmanaged>	
        /// <unmanaged-short>int Priority</unmanaged-short>	
        public int Priority;
        
        /// <summary>	
        /// <dd> <p> Specifies any flags from the <strong><see cref="SharpDX.Direct3D12.CommandQueueFlags"/></strong> enumeration. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_COMMAND_QUEUE_DESC::Flags']/*"/>	
        /// <msdn-id>dn903796</msdn-id>	
        /// <unmanaged>D3D12_COMMAND_QUEUE_FLAGS Flags</unmanaged>	
        /// <unmanaged-short>D3D12_COMMAND_QUEUE_FLAGS Flags</unmanaged-short>	
        public SharpDX.Direct3D12.CommandQueueFlags Flags;
        
        /// <summary>	
        /// <dd> <p> For single GPU operation, set this to zero. If there are multiple GPU nodes, set a bit to identify the node (the  device's physical adapter) to which the command queue applies. Each bit in the mask corresponds to a single node. Only 1 bit must be set. Refer to Multi-Adapter.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_COMMAND_QUEUE_DESC::NodeMask']/*"/>	
        /// <msdn-id>dn903796</msdn-id>	
        /// <unmanaged>unsigned int NodeMask</unmanaged>	
        /// <unmanaged-short>unsigned int NodeMask</unmanaged-short>	
        public int NodeMask;
    }
    
    /// <summary>	
    /// <p> Describes the arguments (parameters) of a command signature. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> Use this structure by <strong>CreateCommandSignature</strong>. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_COMMAND_SIGNATURE_DESC']/*"/>	
    /// <msdn-id>dn986724</msdn-id>	
    /// <unmanaged>D3D12_COMMAND_SIGNATURE_DESC</unmanaged>	
    /// <unmanaged-short>D3D12_COMMAND_SIGNATURE_DESC</unmanaged-short>	
    public  partial class CommandSignatureDescription {	
        
        /// <summary>	
        /// <dd> <p> Specifies the size of each argument of a command signature, in bytes. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_COMMAND_SIGNATURE_DESC::ByteStride']/*"/>	
        /// <msdn-id>dn986724</msdn-id>	
        /// <unmanaged>unsigned int ByteStride</unmanaged>	
        /// <unmanaged-short>unsigned int ByteStride</unmanaged-short>	
        public int ByteStride;
        
        /// <summary>	
        /// <dd> <p> Specifies the number of arguments in the command signature. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_COMMAND_SIGNATURE_DESC::NumArgumentDescs']/*"/>	
        /// <msdn-id>dn986724</msdn-id>	
        /// <unmanaged>unsigned int NumArgumentDescs</unmanaged>	
        /// <unmanaged-short>unsigned int NumArgumentDescs</unmanaged-short>	
        internal int ArgumentDescCount;
        
        /// <summary>	
        /// <dd> <p> An array of <strong><see cref="SharpDX.Direct3D12.IndirectArgumentDescription"/></strong> structures, containing details of the arguments, including whether the argument is a vertex buffer, constant, constant buffer view, shader resource view, or unordered access view. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_COMMAND_SIGNATURE_DESC::pArgumentDescs']/*"/>	
        /// <msdn-id>dn986724</msdn-id>	
        /// <unmanaged>const D3D12_INDIRECT_ARGUMENT_DESC* pArgumentDescs</unmanaged>	
        /// <unmanaged-short>D3D12_INDIRECT_ARGUMENT_DESC pArgumentDescs</unmanaged-short>	
        internal System.IntPtr ArgumentDescsPointer;
        
        /// <summary>	
        /// <dd> <p> For single GPU operation, set this to zero. If there are multiple GPU nodes, set bits to identify the nodes (the  device's physical adapters) for which the command signature is to apply. Each bit in the mask corresponds to a single node. Refer to Multi-Adapter.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_COMMAND_SIGNATURE_DESC::NodeMask']/*"/>	
        /// <msdn-id>dn986724</msdn-id>	
        /// <unmanaged>unsigned int NodeMask</unmanaged>	
        /// <unmanaged-short>unsigned int NodeMask</unmanaged-short>	
        public int NodeMask;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public int ByteStride;
            public int ArgumentDescCount;
            public System.IntPtr ArgumentDescsPointer;
            public int NodeMask;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.ByteStride = @ref.ByteStride;
            this.ArgumentDescCount = @ref.ArgumentDescCount;
            this.ArgumentDescsPointer = @ref.ArgumentDescsPointer;
            this.NodeMask = @ref.NodeMask;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.ByteStride = this.ByteStride;
            @ref.ArgumentDescCount = this.ArgumentDescCount;
            @ref.ArgumentDescsPointer = this.ArgumentDescsPointer;
            @ref.NodeMask = this.NodeMask;
		
		}
    }
    
    /// <summary>	
    /// <p>Describes a compute pipeline state object.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> This structure is used by <strong>CreateComputePipelineState</strong>. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_COMPUTE_PIPELINE_STATE_DESC']/*"/>	
    /// <msdn-id>dn770350</msdn-id>	
    /// <unmanaged>D3D12_COMPUTE_PIPELINE_STATE_DESC</unmanaged>	
    /// <unmanaged-short>D3D12_COMPUTE_PIPELINE_STATE_DESC</unmanaged-short>	
    public  partial class ComputePipelineStateDescription {	
        
        /// <summary>	
        /// <dd> <p> A reference to the <strong><see cref="SharpDX.Direct3D12.RootSignature"/></strong> object. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_COMPUTE_PIPELINE_STATE_DESC::pRootSignature']/*"/>	
        /// <msdn-id>dn770350</msdn-id>	
        /// <unmanaged>ID3D12RootSignature* pRootSignature</unmanaged>	
        /// <unmanaged-short>ID3D12RootSignature pRootSignature</unmanaged-short>	
        private System.IntPtr RootSignaturePointer;
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.ShaderBytecode"/></strong> structure that describes the compute shader. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_COMPUTE_PIPELINE_STATE_DESC::CS']/*"/>	
        /// <msdn-id>dn770350</msdn-id>	
        /// <unmanaged>D3D12_SHADER_BYTECODE CS</unmanaged>	
        /// <unmanaged-short>D3D12_SHADER_BYTECODE CS</unmanaged-short>	
        public SharpDX.Direct3D12.ShaderBytecode ComputeShader;
        
        /// <summary>	
        /// <dd> <p> For single GPU operation, set this to zero. If there are multiple GPU nodes, set bits to identify the nodes (the  device's physical adapters) for which the compute pipeline state is to apply. Each bit in the mask corresponds to a single node. Refer to Multi-Adapter.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_COMPUTE_PIPELINE_STATE_DESC::NodeMask']/*"/>	
        /// <msdn-id>dn770350</msdn-id>	
        /// <unmanaged>unsigned int NodeMask</unmanaged>	
        /// <unmanaged-short>unsigned int NodeMask</unmanaged-short>	
        public int NodeMask;
        
        /// <summary>	
        /// <dd> <p> A cached pipeline state object, as a <strong><see cref="SharpDX.Direct3D12.CachedPipelineState"/></strong> structure. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_COMPUTE_PIPELINE_STATE_DESC::CachedPSO']/*"/>	
        /// <msdn-id>dn770350</msdn-id>	
        /// <unmanaged>D3D12_CACHED_PIPELINE_STATE CachedPSO</unmanaged>	
        /// <unmanaged-short>D3D12_CACHED_PIPELINE_STATE CachedPSO</unmanaged-short>	
        public SharpDX.Direct3D12.CachedPipelineState CachedPSO;
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.PipelineStateFlags"/></strong> enumeration constant such as for "tool debug". </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_COMPUTE_PIPELINE_STATE_DESC::Flags']/*"/>	
        /// <msdn-id>dn770350</msdn-id>	
        /// <unmanaged>D3D12_PIPELINE_STATE_FLAGS Flags</unmanaged>	
        /// <unmanaged-short>D3D12_PIPELINE_STATE_FLAGS Flags</unmanaged-short>	
        public SharpDX.Direct3D12.PipelineStateFlags Flags;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public System.IntPtr RootSignaturePointer;
            public SharpDX.Direct3D12.ShaderBytecode.__Native ComputeShader;
            public int NodeMask;
            public SharpDX.Direct3D12.CachedPipelineState CachedPSO;
            public SharpDX.Direct3D12.PipelineStateFlags Flags;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                this.ComputeShader.__MarshalFree();
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.RootSignaturePointer = @ref.RootSignaturePointer;
            this.ComputeShader = new SharpDX.Direct3D12.ShaderBytecode();
			this.ComputeShader.__MarshalFrom(ref @ref.ComputeShader);
            this.NodeMask = @ref.NodeMask;
            this.CachedPSO = @ref.CachedPSO;
            this.Flags = @ref.Flags;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.RootSignaturePointer = this.RootSignaturePointer;
			@ref.ComputeShader = new SharpDX.Direct3D12.ShaderBytecode.__Native();
						
                this.ComputeShader.__MarshalTo(ref @ref.ComputeShader);
            @ref.NodeMask = this.NodeMask;
            @ref.CachedPSO = this.CachedPSO;
            @ref.Flags = this.Flags;
		
		}
    }
    
    /// <summary>	
    /// <p>Describes a constant buffer to view.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This structure is used by <strong>CreateConstantBufferView</strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_CONSTANT_BUFFER_VIEW_DESC']/*"/>	
    /// <msdn-id>dn770351</msdn-id>	
    /// <unmanaged>D3D12_CONSTANT_BUFFER_VIEW_DESC</unmanaged>	
    /// <unmanaged-short>D3D12_CONSTANT_BUFFER_VIEW_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct ConstantBufferViewDescription {	
        
        /// <summary>	
        /// <dd> <p> The D3D12_GPU_VIRTUAL_ADDRESS of the constant buffer. D3D12_GPU_VIRTUAL_ADDRESS is a typedef'd alias of UINT64. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_CONSTANT_BUFFER_VIEW_DESC::BufferLocation']/*"/>	
        /// <msdn-id>dn770351</msdn-id>	
        /// <unmanaged>unsigned longlong BufferLocation</unmanaged>	
        /// <unmanaged-short>unsigned longlong BufferLocation</unmanaged-short>	
        public long BufferLocation;
        
        /// <summary>	
        /// <dd> <p>The size in bytes of the constant buffer.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_CONSTANT_BUFFER_VIEW_DESC::SizeInBytes']/*"/>	
        /// <msdn-id>dn770351</msdn-id>	
        /// <unmanaged>unsigned int SizeInBytes</unmanaged>	
        /// <unmanaged-short>unsigned int SizeInBytes</unmanaged-short>	
        public int SizeInBytes;
    }
    
    /// <summary>	
    /// <p> Describes a CPU descriptor handle. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> This structure is returned by the following methods: </p><ul> <li> <strong><see cref="SharpDX.Direct3D12.DescriptorHeap.GetCPUDescriptorHandleForHeapStart"/></strong> </li> </ul><p> This structure is passed into the following methods: </p><ul> <li> <strong><see cref="SharpDX.Direct3D12.Device.CopyDescriptors"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D12.Device.CopyDescriptorsSimple"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D12.Device.CreateConstantBufferView"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D12.Device.CreateShaderResourceView"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D12.Device.CreateUnorderedAccessView"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D12.Device.CreateRenderTargetView"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D12.Device.CreateDepthStencilView"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D12.Device.CreateSampler"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D12.GraphicsCommandList.ClearDepthStencilView"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D12.GraphicsCommandList.ClearRenderTargetView"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D12.GraphicsCommandList.ClearUnorderedAccessViewUint"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D12.GraphicsCommandList.ClearUnorderedAccessViewFloat"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D12.GraphicsCommandList.SetRenderTargets"/></strong> </li> </ul>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_CPU_DESCRIPTOR_HANDLE']/*"/>	
    /// <msdn-id>dn859369</msdn-id>	
    /// <unmanaged>D3D12_CPU_DESCRIPTOR_HANDLE</unmanaged>	
    /// <unmanaged-short>D3D12_CPU_DESCRIPTOR_HANDLE</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct CpuDescriptorHandle {	
        
        /// <summary>	
        /// <dd> <p> The address of  the descriptor. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_CPU_DESCRIPTOR_HANDLE::ptr']/*"/>	
        /// <msdn-id>dn859369</msdn-id>	
        /// <unmanaged>SIZE_T ptr</unmanaged>	
        /// <unmanaged-short>SIZE_T ptr</unmanaged-short>	
        public SharpDX.PointerSize Ptr;
    }
    
    /// <summary>	
    /// <p>Describes stencil operations that can be performed based on the results of stencil test.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>All stencil operations are specified as a <strong><see cref="SharpDX.Direct3D12.StencilOperation"/></strong>-typed value. Each stencil operation can be set differently based on the outcome of the stencil test, which is referred to as <strong>StencilFunc</strong>, in the stencil test portion of depth-stencil testing.</p><p>Members of <strong><see cref="SharpDX.Direct3D12.DepthStencilStateDescription"/></strong> have this structure for their data type. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DEPTH_STENCILOP_DESC']/*"/>	
    /// <msdn-id>dn770355</msdn-id>	
    /// <unmanaged>D3D12_DEPTH_STENCILOP_DESC</unmanaged>	
    /// <unmanaged-short>D3D12_DEPTH_STENCILOP_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct DepthStencilOperationDescription {	
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D12.StencilOperation"/></strong>-typed value that identifies the stencil operation to perform when stencil testing fails.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DEPTH_STENCILOP_DESC::StencilFailOp']/*"/>	
        /// <msdn-id>dn770355</msdn-id>	
        /// <unmanaged>D3D12_STENCIL_OP StencilFailOp</unmanaged>	
        /// <unmanaged-short>D3D12_STENCIL_OP StencilFailOp</unmanaged-short>	
        public SharpDX.Direct3D12.StencilOperation FailOperation;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D12.StencilOperation"/></strong>-typed value that identifies the stencil operation to perform when stencil testing passes and depth testing fails.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DEPTH_STENCILOP_DESC::StencilDepthFailOp']/*"/>	
        /// <msdn-id>dn770355</msdn-id>	
        /// <unmanaged>D3D12_STENCIL_OP StencilDepthFailOp</unmanaged>	
        /// <unmanaged-short>D3D12_STENCIL_OP StencilDepthFailOp</unmanaged-short>	
        public SharpDX.Direct3D12.StencilOperation DepthFailOperation;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D12.StencilOperation"/></strong>-typed value that identifies the stencil operation to perform when stencil testing and depth testing both pass.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DEPTH_STENCILOP_DESC::StencilPassOp']/*"/>	
        /// <msdn-id>dn770355</msdn-id>	
        /// <unmanaged>D3D12_STENCIL_OP StencilPassOp</unmanaged>	
        /// <unmanaged-short>D3D12_STENCIL_OP StencilPassOp</unmanaged-short>	
        public SharpDX.Direct3D12.StencilOperation PassOperation;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D12.Comparison"/></strong>-typed value that identifies the function that compares stencil data against existing stencil data. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DEPTH_STENCILOP_DESC::StencilFunc']/*"/>	
        /// <msdn-id>dn770355</msdn-id>	
        /// <unmanaged>D3D12_COMPARISON_FUNC StencilFunc</unmanaged>	
        /// <unmanaged-short>D3D12_COMPARISON_FUNC StencilFunc</unmanaged-short>	
        public SharpDX.Direct3D12.Comparison Comparison;
    }
    
    /// <summary>	
    /// <p>Describes depth-stencil state.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> A <strong><see cref="SharpDX.Direct3D12.GraphicsPipelineStateDescription"/></strong> object contains a depth-stencil-state structure that controls how depth-stencil testing is performed by the output-merger stage. </p><p>This table shows the default values of depth-stencil states.</p><table> <tr><th>State</th><th>Default Value</th></tr> <tr><td>DepthEnable</td><td>TRUE</td></tr> <tr><td>DepthWriteMask</td><td><see cref="SharpDX.Direct3D12.DepthWriteMask.All"/></td></tr> <tr><td>DepthFunc</td><td>D3D12_COMPARISON_LESS</td></tr> <tr><td>StencilEnable</td><td><see cref="SharpDX.Result.False"/></td></tr> <tr><td>StencilReadMask</td><td>D3D12_DEFAULT_STENCIL_READ_MASK</td></tr> <tr><td>StencilWriteMask</td><td>D3D12_DEFAULT_STENCIL_WRITE_MASK</td></tr> <tr><td> <p>FrontFace.StencilFunc</p> <p>and</p> <p>BackFace.StencilFunc</p> </td><td>D3D12_COMPARISON_ALWAYS</td></tr> <tr><td> <p>FrontFace.StencilDepthFailOp</p> <p>and</p> <p>BackFace.StencilDepthFailOp</p> </td><td><see cref="SharpDX.Direct3D12.StencilOperation.Keep"/></td></tr> <tr><td> <p>FrontFace.StencilPassOp</p> <p>and</p> <p>BackFace.StencilPassOp</p> </td><td><see cref="SharpDX.Direct3D12.StencilOperation.Keep"/></td></tr> <tr><td> <p>FrontFace.StencilFailOp</p> <p>and</p> <p>BackFace.StencilFailOp</p> </td><td><see cref="SharpDX.Direct3D12.StencilOperation.Keep"/></td></tr> </table><p>?</p><p>The formats that support stenciling are <see cref="SharpDX.DXGI.Format.D24_UNorm_S8_UInt"/> and <see cref="SharpDX.DXGI.Format.D32_Float_S8X24_UInt"/>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DEPTH_STENCIL_DESC']/*"/>	
    /// <msdn-id>dn770356</msdn-id>	
    /// <unmanaged>D3D12_DEPTH_STENCIL_DESC</unmanaged>	
    /// <unmanaged-short>D3D12_DEPTH_STENCIL_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct DepthStencilStateDescription {	
        
        /// <summary>	
        /// <dd> <p> Specifies whether to enable depth testing. Set this member to <strong>TRUE</strong> to enable depth testing. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DEPTH_STENCIL_DESC::DepthEnable']/*"/>	
        /// <msdn-id>dn770356</msdn-id>	
        /// <unmanaged>BOOL DepthEnable</unmanaged>	
        /// <unmanaged-short>BOOL DepthEnable</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IsDepthEnabled;
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.DepthWriteMask"/></strong>-typed value that identifies a portion of the depth-stencil buffer that can be modified by depth data. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DEPTH_STENCIL_DESC::DepthWriteMask']/*"/>	
        /// <msdn-id>dn770356</msdn-id>	
        /// <unmanaged>D3D12_DEPTH_WRITE_MASK DepthWriteMask</unmanaged>	
        /// <unmanaged-short>D3D12_DEPTH_WRITE_MASK DepthWriteMask</unmanaged-short>	
        public SharpDX.Direct3D12.DepthWriteMask DepthWriteMask;
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.Comparison"/></strong>-typed value that identifies a function that compares depth data against existing depth data. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DEPTH_STENCIL_DESC::DepthFunc']/*"/>	
        /// <msdn-id>dn770356</msdn-id>	
        /// <unmanaged>D3D12_COMPARISON_FUNC DepthFunc</unmanaged>	
        /// <unmanaged-short>D3D12_COMPARISON_FUNC DepthFunc</unmanaged-short>	
        public SharpDX.Direct3D12.Comparison DepthComparison;
        
        /// <summary>	
        /// <dd> <p> Specifies whether to enable stencil testing. Set this member to <strong>TRUE</strong> to enable stencil testing. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DEPTH_STENCIL_DESC::StencilEnable']/*"/>	
        /// <msdn-id>dn770356</msdn-id>	
        /// <unmanaged>BOOL StencilEnable</unmanaged>	
        /// <unmanaged-short>BOOL StencilEnable</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IsStencilEnabled;
        
        /// <summary>	
        /// <dd> <p>Identify a portion of the depth-stencil buffer for reading stencil data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DEPTH_STENCIL_DESC::StencilReadMask']/*"/>	
        /// <msdn-id>dn770356</msdn-id>	
        /// <unmanaged>unsigned char StencilReadMask</unmanaged>	
        /// <unmanaged-short>unsigned char StencilReadMask</unmanaged-short>	
        public byte StencilReadMask;
        
        /// <summary>	
        /// <dd> <p>Identify a portion of the depth-stencil buffer for writing stencil data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DEPTH_STENCIL_DESC::StencilWriteMask']/*"/>	
        /// <msdn-id>dn770356</msdn-id>	
        /// <unmanaged>unsigned char StencilWriteMask</unmanaged>	
        /// <unmanaged-short>unsigned char StencilWriteMask</unmanaged-short>	
        public byte StencilWriteMask;
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.DepthStencilOperationDescription"/></strong> structure that describes how to use the results of the depth test and the stencil test for pixels whose surface normal is facing towards the camera. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DEPTH_STENCIL_DESC::FrontFace']/*"/>	
        /// <msdn-id>dn770356</msdn-id>	
        /// <unmanaged>D3D12_DEPTH_STENCILOP_DESC FrontFace</unmanaged>	
        /// <unmanaged-short>D3D12_DEPTH_STENCILOP_DESC FrontFace</unmanaged-short>	
        public SharpDX.Direct3D12.DepthStencilOperationDescription FrontFace;
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.DepthStencilOperationDescription"/></strong> structure that describes how to use the results of the depth test and the stencil test for pixels whose surface normal is facing away from the camera. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DEPTH_STENCIL_DESC::BackFace']/*"/>	
        /// <msdn-id>dn770356</msdn-id>	
        /// <unmanaged>D3D12_DEPTH_STENCILOP_DESC BackFace</unmanaged>	
        /// <unmanaged-short>D3D12_DEPTH_STENCILOP_DESC BackFace</unmanaged-short>	
        public SharpDX.Direct3D12.DepthStencilOperationDescription BackFace;
    }
    
    /// <summary>	
    /// <p>Specifies a depth and stencil value.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This structure is used in the <strong><see cref="SharpDX.Direct3D12.ClearValue"/></strong> structure.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DEPTH_STENCIL_VALUE']/*"/>	
    /// <msdn-id>dn903799</msdn-id>	
    /// <unmanaged>D3D12_DEPTH_STENCIL_VALUE</unmanaged>	
    /// <unmanaged-short>D3D12_DEPTH_STENCIL_VALUE</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct DepthStencilValue {	
        
        /// <summary>	
        /// <dd> <p>Specifies the depth value.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DEPTH_STENCIL_VALUE::Depth']/*"/>	
        /// <msdn-id>dn903799</msdn-id>	
        /// <unmanaged>float Depth</unmanaged>	
        /// <unmanaged-short>float Depth</unmanaged-short>	
        public float Depth;
        
        /// <summary>	
        /// <dd> <p>Specifies the stencil value.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DEPTH_STENCIL_VALUE::Stencil']/*"/>	
        /// <msdn-id>dn903799</msdn-id>	
        /// <unmanaged>unsigned char Stencil</unmanaged>	
        /// <unmanaged-short>unsigned char Stencil</unmanaged-short>	
        public byte Stencil;
    }
    
    /// <summary>	
    /// <p>Describes the subresources of a texture that are accessible from a depth-stencil view.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> These are valid formats for a depth-stencil view: </p><ul> <li><see cref="SharpDX.DXGI.Format.D16_UNorm"/></li> <li><see cref="SharpDX.DXGI.Format.D24_UNorm_S8_UInt"/></li> <li><see cref="SharpDX.DXGI.Format.D32_Float"/></li> <li><see cref="SharpDX.DXGI.Format.D32_Float_S8X24_UInt"/></li> <li><see cref="SharpDX.DXGI.Format.Unknown"/></li> </ul><p> A depth-stencil view can't use a typeless format.  If the format chosen is <see cref="SharpDX.DXGI.Format.Unknown"/>, the format of the parent resource is used. </p><p> Pass a depth-stencil-view description into <strong><see cref="SharpDX.Direct3D12.Device.CreateDepthStencilView"/></strong> to create a depth-stencil view. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DEPTH_STENCIL_VIEW_DESC']/*"/>	
    /// <msdn-id>dn770357</msdn-id>	
    /// <unmanaged>D3D12_DEPTH_STENCIL_VIEW_DESC</unmanaged>	
    /// <unmanaged-short>D3D12_DEPTH_STENCIL_VIEW_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Explicit)]
    public  partial struct DepthStencilViewDescription {	
        
        /// <summary>	
        /// <p>Describes the subresource from a multi sampled 2D texture that is accessible to a depth-stencil view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is a member of the <strong><see cref="SharpDX.Direct3D12.DepthStencilViewDescription"/></strong> structure.</p><p>Because a multi sampled 2D texture contains a single subresource, there is nothing to specify in <strong><see cref="SharpDX.Direct3D12.DepthStencilViewDescription.Texture2DMultisampledResource"/></strong>. Consequently, <strong>UnusedField_NothingToDefine</strong> is included so that this structure will compile in C. </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2DMS_DSV']/*"/>	
        /// <msdn-id>dn770425</msdn-id>	
        /// <unmanaged>D3D12_TEX2DMS_DSV</unmanaged>	
        /// <unmanaged-short>D3D12_TEX2DMS_DSV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DMultisampledResource {	
            
            /// <summary>	
            /// <dd> <p>Unused.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2DMS_DSV::UnusedField_NothingToDefine']/*"/>	
            /// <msdn-id>dn770425</msdn-id>	
            /// <unmanaged>unsigned int UnusedField_NothingToDefine</unmanaged>	
            /// <unmanaged-short>unsigned int UnusedField_NothingToDefine</unmanaged-short>	
            public int UnusedFieldNothingToDefine;
        }
        
        /// <summary>	
        /// <p>Describes the subresources from an array of 2D textures that are accessible to a depth-stencil view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>Use this structure with a <strong><see cref="SharpDX.Direct3D12.DepthStencilViewDescription"/></strong> structure to view the resource as an array of 2D textures.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_ARRAY_DSV']/*"/>	
        /// <msdn-id>dn770428</msdn-id>	
        /// <unmanaged>D3D12_TEX2D_ARRAY_DSV</unmanaged>	
        /// <unmanaged-short>D3D12_TEX2D_ARRAY_DSV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DArrayResource {	
            
            /// <summary>	
            /// <dd> <p>The index of the first mipmap level to use.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_ARRAY_DSV::MipSlice']/*"/>	
            /// <msdn-id>dn770428</msdn-id>	
            /// <unmanaged>unsigned int MipSlice</unmanaged>	
            /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
            public int MipSlice;
            
            /// <summary>	
            /// <dd> <p>The index of the first texture to use in an array of textures.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_ARRAY_DSV::FirstArraySlice']/*"/>	
            /// <msdn-id>dn770428</msdn-id>	
            /// <unmanaged>unsigned int FirstArraySlice</unmanaged>	
            /// <unmanaged-short>unsigned int FirstArraySlice</unmanaged-short>	
            public int FirstArraySlice;
            
            /// <summary>	
            /// <dd> <p>Number of textures to use.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_ARRAY_DSV::ArraySize']/*"/>	
            /// <msdn-id>dn770428</msdn-id>	
            /// <unmanaged>unsigned int ArraySize</unmanaged>	
            /// <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
            public int ArraySize;
        }
        
        /// <summary>	
        /// <p>Describes the subresources from an array of 1D textures to use in a depth-stencil view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>Use this structure with a <strong><see cref="SharpDX.Direct3D12.DepthStencilViewDescription"/></strong> structure to view the resource as an array of 1D textures.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX1D_ARRAY_DSV']/*"/>	
        /// <msdn-id>dn770414</msdn-id>	
        /// <unmanaged>D3D12_TEX1D_ARRAY_DSV</unmanaged>	
        /// <unmanaged-short>D3D12_TEX1D_ARRAY_DSV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture1DArrayResource {	
            
            /// <summary>	
            /// <dd> <p>The index of the first mipmap level to use.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX1D_ARRAY_DSV::MipSlice']/*"/>	
            /// <msdn-id>dn770414</msdn-id>	
            /// <unmanaged>unsigned int MipSlice</unmanaged>	
            /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
            public int MipSlice;
            
            /// <summary>	
            /// <dd> <p>The index of the first texture to use in an array of textures.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX1D_ARRAY_DSV::FirstArraySlice']/*"/>	
            /// <msdn-id>dn770414</msdn-id>	
            /// <unmanaged>unsigned int FirstArraySlice</unmanaged>	
            /// <unmanaged-short>unsigned int FirstArraySlice</unmanaged-short>	
            public int FirstArraySlice;
            
            /// <summary>	
            /// <dd> <p>Number of textures to use.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX1D_ARRAY_DSV::ArraySize']/*"/>	
            /// <msdn-id>dn770414</msdn-id>	
            /// <unmanaged>unsigned int ArraySize</unmanaged>	
            /// <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
            public int ArraySize;
        }
        
        /// <summary>	
        /// <p>Describes the subresource from a 1D texture that is accessible to a depth-stencil view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>Use this structure with a <strong><see cref="SharpDX.Direct3D12.DepthStencilViewDescription"/></strong> structure to view the resource as a 1D texture.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX1D_DSV']/*"/>	
        /// <msdn-id>dn770418</msdn-id>	
        /// <unmanaged>D3D12_TEX1D_DSV</unmanaged>	
        /// <unmanaged-short>D3D12_TEX1D_DSV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture1DResource {	
            
            /// <summary>	
            /// <dd> <p>The index of the first mipmap level to use.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX1D_DSV::MipSlice']/*"/>	
            /// <msdn-id>dn770418</msdn-id>	
            /// <unmanaged>unsigned int MipSlice</unmanaged>	
            /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
            public int MipSlice;
        }
        
        /// <summary>	
        /// <p>Describes the subresources from an array of multi sampled 2D textures for a depth-stencil view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>Use this structure with a <strong><see cref="SharpDX.Direct3D12.DepthStencilViewDescription"/></strong> structure to view the resource as an array of multi sampled 2D textures.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2DMS_ARRAY_DSV']/*"/>	
        /// <msdn-id>dn770422</msdn-id>	
        /// <unmanaged>D3D12_TEX2DMS_ARRAY_DSV</unmanaged>	
        /// <unmanaged-short>D3D12_TEX2DMS_ARRAY_DSV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DMultisampledArrayResource {	
            
            /// <summary>	
            /// <dd> <p>The index of the first texture to use in an array of textures.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2DMS_ARRAY_DSV::FirstArraySlice']/*"/>	
            /// <msdn-id>dn770422</msdn-id>	
            /// <unmanaged>unsigned int FirstArraySlice</unmanaged>	
            /// <unmanaged-short>unsigned int FirstArraySlice</unmanaged-short>	
            public int FirstArraySlice;
            
            /// <summary>	
            /// <dd> <p>Number of textures to use.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2DMS_ARRAY_DSV::ArraySize']/*"/>	
            /// <msdn-id>dn770422</msdn-id>	
            /// <unmanaged>unsigned int ArraySize</unmanaged>	
            /// <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
            public int ArraySize;
        }
        
        /// <summary>	
        /// <p>Describes the subresource from a 2D texture that is accessible to a depth-stencil view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>Use this structure with a <strong><see cref="SharpDX.Direct3D12.DepthStencilViewDescription"/></strong> structure to view the resource as a 2D texture.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_DSV']/*"/>	
        /// <msdn-id>dn770432</msdn-id>	
        /// <unmanaged>D3D12_TEX2D_DSV</unmanaged>	
        /// <unmanaged-short>D3D12_TEX2D_DSV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DResource {	
            
            /// <summary>	
            /// <dd> <p>The index of the first mipmap level to use.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_DSV::MipSlice']/*"/>	
            /// <msdn-id>dn770432</msdn-id>	
            /// <unmanaged>unsigned int MipSlice</unmanaged>	
            /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
            public int MipSlice;
        }
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.DXGI.Format"/></strong>-typed value that specifies the viewing format.  For allowable formats, see Remarks. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DEPTH_STENCIL_VIEW_DESC::Format']/*"/>	
        /// <msdn-id>dn770357</msdn-id>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        [FieldOffset(0)]
        public SharpDX.DXGI.Format Format;
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.DepthStencilViewDimension"/></strong>-typed value that specifies how the depth-stencil resource will be accessed. This member also determines which _DSV to use in the following union. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DEPTH_STENCIL_VIEW_DESC::ViewDimension']/*"/>	
        /// <msdn-id>dn770357</msdn-id>	
        /// <unmanaged>D3D12_DSV_DIMENSION ViewDimension</unmanaged>	
        /// <unmanaged-short>D3D12_DSV_DIMENSION ViewDimension</unmanaged-short>	
        [FieldOffset(4)]
        public SharpDX.Direct3D12.DepthStencilViewDimension Dimension;
        
        /// <summary>	
        /// <dd> <p> A combination of <strong><see cref="SharpDX.Direct3D12.DepthStencilViewFlags"/></strong> enumeration constants that are combined by using a bitwise OR operation.  The resulting value specifies whether the texture is read only.   Pass 0 to specify that it isn't read only; otherwise, pass one or more of the members of the <strong><see cref="SharpDX.Direct3D12.DepthStencilViewFlags"/></strong> enumerated type. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DEPTH_STENCIL_VIEW_DESC::Flags']/*"/>	
        /// <msdn-id>dn770357</msdn-id>	
        /// <unmanaged>D3D12_DSV_FLAGS Flags</unmanaged>	
        /// <unmanaged-short>D3D12_DSV_FLAGS Flags</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D12.DepthStencilViewFlags Flags;
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.DepthStencilViewDescription.Texture1DResource"/></strong> structure that specifies a 1D texture subresource. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DEPTH_STENCIL_VIEW_DESC::Texture1D']/*"/>	
        /// <msdn-id>dn770357</msdn-id>	
        /// <unmanaged>D3D12_TEX1D_DSV Texture1D</unmanaged>	
        /// <unmanaged-short>D3D12_TEX1D_DSV Texture1D</unmanaged-short>	
        [FieldOffset(12)]
        public SharpDX.Direct3D12.DepthStencilViewDescription.Texture1DResource Texture1D;
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.DepthStencilViewDescription.Texture1DArrayResource"/></strong> structure that specifies an array of 1D texture subresources. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DEPTH_STENCIL_VIEW_DESC::Texture1DArray']/*"/>	
        /// <msdn-id>dn770357</msdn-id>	
        /// <unmanaged>D3D12_TEX1D_ARRAY_DSV Texture1DArray</unmanaged>	
        /// <unmanaged-short>D3D12_TEX1D_ARRAY_DSV Texture1DArray</unmanaged-short>	
        [FieldOffset(12)]
        public SharpDX.Direct3D12.DepthStencilViewDescription.Texture1DArrayResource Texture1DArray;
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.DepthStencilViewDescription.Texture2DResource"/></strong> structure that specifies a 2D texture subresource. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DEPTH_STENCIL_VIEW_DESC::Texture2D']/*"/>	
        /// <msdn-id>dn770357</msdn-id>	
        /// <unmanaged>D3D12_TEX2D_DSV Texture2D</unmanaged>	
        /// <unmanaged-short>D3D12_TEX2D_DSV Texture2D</unmanaged-short>	
        [FieldOffset(12)]
        public SharpDX.Direct3D12.DepthStencilViewDescription.Texture2DResource Texture2D;
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.DepthStencilViewDescription.Texture2DArrayResource"/></strong> structure that specifies an array of 2D texture subresources. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DEPTH_STENCIL_VIEW_DESC::Texture2DArray']/*"/>	
        /// <msdn-id>dn770357</msdn-id>	
        /// <unmanaged>D3D12_TEX2D_ARRAY_DSV Texture2DArray</unmanaged>	
        /// <unmanaged-short>D3D12_TEX2D_ARRAY_DSV Texture2DArray</unmanaged-short>	
        [FieldOffset(12)]
        public SharpDX.Direct3D12.DepthStencilViewDescription.Texture2DArrayResource Texture2DArray;
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.DepthStencilViewDescription.Texture2DMultisampledResource"/></strong> structure that specifies a multisampled 2D texture. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DEPTH_STENCIL_VIEW_DESC::Texture2DMS']/*"/>	
        /// <msdn-id>dn770357</msdn-id>	
        /// <unmanaged>D3D12_TEX2DMS_DSV Texture2DMS</unmanaged>	
        /// <unmanaged-short>D3D12_TEX2DMS_DSV Texture2DMS</unmanaged-short>	
        [FieldOffset(12)]
        public SharpDX.Direct3D12.DepthStencilViewDescription.Texture2DMultisampledResource Texture2DMS;
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.DepthStencilViewDescription.Texture2DMultisampledArrayResource"/></strong> structure that specifies an array of multisampled 2D textures. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DEPTH_STENCIL_VIEW_DESC::Texture2DMSArray']/*"/>	
        /// <msdn-id>dn770357</msdn-id>	
        /// <unmanaged>D3D12_TEX2DMS_ARRAY_DSV Texture2DMSArray</unmanaged>	
        /// <unmanaged-short>D3D12_TEX2DMS_ARRAY_DSV Texture2DMSArray</unmanaged-short>	
        [FieldOffset(12)]
        public SharpDX.Direct3D12.DepthStencilViewDescription.Texture2DMultisampledArrayResource Texture2DMSArray;
    }
    
    /// <summary>	
    /// <p>Describes the descriptor heap.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> This structure is used by the following: </p><ul> <li> <strong><see cref="SharpDX.Direct3D12.DescriptorHeap.GetDescription"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D12.Device.CreateDescriptorHeap"/></strong> </li> </ul>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DESCRIPTOR_HEAP_DESC']/*"/>	
    /// <msdn-id>dn770359</msdn-id>	
    /// <unmanaged>D3D12_DESCRIPTOR_HEAP_DESC</unmanaged>	
    /// <unmanaged-short>D3D12_DESCRIPTOR_HEAP_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct DescriptorHeapDescription {	
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.DescriptorHeapType"/></strong>-typed value that specifies the types of descriptors in the heap. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DESCRIPTOR_HEAP_DESC::Type']/*"/>	
        /// <msdn-id>dn770359</msdn-id>	
        /// <unmanaged>D3D12_DESCRIPTOR_HEAP_TYPE Type</unmanaged>	
        /// <unmanaged-short>D3D12_DESCRIPTOR_HEAP_TYPE Type</unmanaged-short>	
        public SharpDX.Direct3D12.DescriptorHeapType Type;
        
        /// <summary>	
        /// <dd> <p> The number of descriptors in the heap. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DESCRIPTOR_HEAP_DESC::NumDescriptors']/*"/>	
        /// <msdn-id>dn770359</msdn-id>	
        /// <unmanaged>unsigned int NumDescriptors</unmanaged>	
        /// <unmanaged-short>unsigned int NumDescriptors</unmanaged-short>	
        public int DescriptorCount;
        
        /// <summary>	
        /// <dd> <p> A combination of <strong><see cref="SharpDX.Direct3D12.DescriptorHeapFlags"/></strong>-typed values that are combined by using a bitwise OR operation. The resulting value specifies options for the heap. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DESCRIPTOR_HEAP_DESC::Flags']/*"/>	
        /// <msdn-id>dn770359</msdn-id>	
        /// <unmanaged>D3D12_DESCRIPTOR_HEAP_FLAGS Flags</unmanaged>	
        /// <unmanaged-short>D3D12_DESCRIPTOR_HEAP_FLAGS Flags</unmanaged-short>	
        public SharpDX.Direct3D12.DescriptorHeapFlags Flags;
        
        /// <summary>	
        /// <dd> <p> For single-adapter operation, set this to zero. If there are multiple adapter nodes, set a bit to identify the node (one of the device's physical adapters) to which the descriptor heap applies. Each bit in the mask corresponds to a single node. Only one bit must be set. See Multi-Adapter. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DESCRIPTOR_HEAP_DESC::NodeMask']/*"/>	
        /// <msdn-id>dn770359</msdn-id>	
        /// <unmanaged>unsigned int NodeMask</unmanaged>	
        /// <unmanaged-short>unsigned int NodeMask</unmanaged-short>	
        public int NodeMask;
    }
    
    /// <summary>	
    /// <p> Specifies a range so that, for example, if part of a descriptor table has 100 shader-resource views (SRVs) that range can be declared in one entry rather than 100. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> This enum is used by the <strong><see cref="SharpDX.Direct3D12.DescriptorRange"/></strong> structure. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DESCRIPTOR_RANGE']/*"/>	
    /// <msdn-id>dn859381</msdn-id>	
    /// <unmanaged>D3D12_DESCRIPTOR_RANGE</unmanaged>	
    /// <unmanaged-short>D3D12_DESCRIPTOR_RANGE</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct DescriptorRange {	
        
        /// <summary>	
        /// <dd> <p> Specifies a range of SRVs. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DESCRIPTOR_RANGE::RangeType']/*"/>	
        /// <msdn-id>dn859381</msdn-id>	
        /// <unmanaged>D3D12_DESCRIPTOR_RANGE_TYPE RangeType</unmanaged>	
        /// <unmanaged-short>D3D12_DESCRIPTOR_RANGE_TYPE RangeType</unmanaged-short>	
        public SharpDX.Direct3D12.DescriptorRangeType RangeType;
        
        /// <summary>	
        /// <dd> <p> Specifies a range of unordered-access views (UAVs). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DESCRIPTOR_RANGE::NumDescriptors']/*"/>	
        /// <msdn-id>dn859381</msdn-id>	
        /// <unmanaged>unsigned int NumDescriptors</unmanaged>	
        /// <unmanaged-short>unsigned int NumDescriptors</unmanaged-short>	
        public int DescriptorCount;
        
        /// <summary>	
        /// <dd> <p> Specifies a range of constant-buffer views (CBVs). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DESCRIPTOR_RANGE::BaseShaderRegister']/*"/>	
        /// <msdn-id>dn859381</msdn-id>	
        /// <unmanaged>unsigned int BaseShaderRegister</unmanaged>	
        /// <unmanaged-short>unsigned int BaseShaderRegister</unmanaged-short>	
        public int BaseShaderRegister;
        
        /// <summary>	
        /// <dd> <p> Specifies a range of samplers. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DESCRIPTOR_RANGE::RegisterSpace']/*"/>	
        /// <msdn-id>dn859381</msdn-id>	
        /// <unmanaged>unsigned int RegisterSpace</unmanaged>	
        /// <unmanaged-short>unsigned int RegisterSpace</unmanaged-short>	
        public int RegisterSpace;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DESCRIPTOR_RANGE::OffsetInDescriptorsFromTableStart']/*"/>	
        /// <msdn-id>dn859381</msdn-id>	
        /// <unmanaged>unsigned int OffsetInDescriptorsFromTableStart</unmanaged>	
        /// <unmanaged-short>unsigned int OffsetInDescriptorsFromTableStart</unmanaged-short>	
        public int OffsetInDescriptorsFromTableStart;
    }
    
    /// <summary>	
    /// <p> Describes details for the discard-resource operation. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> This structure is used by the <strong><see cref="SharpDX.Direct3D12.GraphicsCommandList.DiscardResource"/></strong> method. </p><p> If rectangles are supplied in this structure, the resource must have 2D subresources with all specified subresources the same dimension. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DISCARD_REGION']/*"/>	
    /// <msdn-id>dn986726</msdn-id>	
    /// <unmanaged>D3D12_DISCARD_REGION</unmanaged>	
    /// <unmanaged-short>D3D12_DISCARD_REGION</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct DiscardRegion {	
        
        /// <summary>	
        /// <dd> <p> The number of rectangles in the array that the <strong>pRects</strong> member specifies. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DISCARD_REGION::NumRects']/*"/>	
        /// <msdn-id>dn986726</msdn-id>	
        /// <unmanaged>unsigned int NumRects</unmanaged>	
        /// <unmanaged-short>unsigned int NumRects</unmanaged-short>	
        public int RectCount;
        
        /// <summary>	
        /// <dd> <p> An array of <strong>D3D12_RECT</strong> structures for the rectangles in the resource to discard. If <strong><c>null</c></strong>, <strong>DiscardResource</strong> discards the entire resource. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DISCARD_REGION::pRects']/*"/>	
        /// <msdn-id>dn986726</msdn-id>	
        /// <unmanaged>const RECT* pRects</unmanaged>	
        /// <unmanaged-short>RECT pRects</unmanaged-short>	
        public System.IntPtr RectsPointer;
        
        /// <summary>	
        /// <dd> <p> Index of the first subresource in the resource to discard. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DISCARD_REGION::FirstSubresource']/*"/>	
        /// <msdn-id>dn986726</msdn-id>	
        /// <unmanaged>unsigned int FirstSubresource</unmanaged>	
        /// <unmanaged-short>unsigned int FirstSubresource</unmanaged-short>	
        public int FirstSubresource;
        
        /// <summary>	
        /// <dd> <p> The number of subresources in the resource to discard. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DISCARD_REGION::NumSubresources']/*"/>	
        /// <msdn-id>dn986726</msdn-id>	
        /// <unmanaged>unsigned int NumSubresources</unmanaged>	
        /// <unmanaged-short>unsigned int NumSubresources</unmanaged-short>	
        public int SubresourceCount;
    }
    
    /// <summary>	
    /// <p>Describes dispatch parameters, for use by the compute shader.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The members of this structure serve the same purpose as the parameters of <strong>Dispatch</strong>.</p><p> A compiled compute shader defines the set of instructions to execute per thread and the number of threads to run per group. The thread-group parameters  indicate how many thread groups to execute. Each thread group contains the same number of threads, as defined by the compiled compute shader. The thread groups are organized in a three-dimensional grid. The total number of thread groups that the compiled compute shader executes is determined by the following calculation:</p><code>ThreadGroupCountX * ThreadGroupCountY * ThreadGroupCountZ</code><p>In particular, if any of the values in the thread-group parameters are 0, nothing will happen. 	
    /// </p><p>The maximum size of any dimension is 65535.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DISPATCH_ARGUMENTS']/*"/>	
    /// <msdn-id>dn903800</msdn-id>	
    /// <unmanaged>D3D12_DISPATCH_ARGUMENTS</unmanaged>	
    /// <unmanaged-short>D3D12_DISPATCH_ARGUMENTS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct DispatchArgumentS {	
        
        /// <summary>	
        /// <dd> <p>The size, in thread groups, of the x-dimension of the thread-group grid. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DISPATCH_ARGUMENTS::ThreadGroupCountX']/*"/>	
        /// <msdn-id>dn903800</msdn-id>	
        /// <unmanaged>unsigned int ThreadGroupCountX</unmanaged>	
        /// <unmanaged-short>unsigned int ThreadGroupCountX</unmanaged-short>	
        public int ThreadGroupCountX;
        
        /// <summary>	
        /// <dd> <p>The size, in thread groups, of the y-dimension of the thread-group grid.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DISPATCH_ARGUMENTS::ThreadGroupCountY']/*"/>	
        /// <msdn-id>dn903800</msdn-id>	
        /// <unmanaged>unsigned int ThreadGroupCountY</unmanaged>	
        /// <unmanaged-short>unsigned int ThreadGroupCountY</unmanaged-short>	
        public int ThreadGroupCountY;
        
        /// <summary>	
        /// <dd> <p>The size, in thread groups, of the z-dimension of the thread-group grid.  </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DISPATCH_ARGUMENTS::ThreadGroupCountZ']/*"/>	
        /// <msdn-id>dn903800</msdn-id>	
        /// <unmanaged>unsigned int ThreadGroupCountZ</unmanaged>	
        /// <unmanaged-short>unsigned int ThreadGroupCountZ</unmanaged-short>	
        public int ThreadGroupCountZ;
    }
    
    /// <summary>	
    /// <p>Describes parameters for drawing instances.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The members of this structure serve the same purpose as the parameters of  <strong>DrawInstanced</strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DRAW_ARGUMENTS']/*"/>	
    /// <msdn-id>dn903801</msdn-id>	
    /// <unmanaged>D3D12_DRAW_ARGUMENTS</unmanaged>	
    /// <unmanaged-short>D3D12_DRAW_ARGUMENTS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct DrawArgumentS {	
        
        /// <summary>	
        /// <dd> <p>Specifies the number of vertices to draw, per instance.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DRAW_ARGUMENTS::VertexCountPerInstance']/*"/>	
        /// <msdn-id>dn903801</msdn-id>	
        /// <unmanaged>unsigned int VertexCountPerInstance</unmanaged>	
        /// <unmanaged-short>unsigned int VertexCountPerInstance</unmanaged-short>	
        public int VertexCountPerInstance;
        
        /// <summary>	
        /// <dd> <p>Specifies the number of instances.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DRAW_ARGUMENTS::InstanceCount']/*"/>	
        /// <msdn-id>dn903801</msdn-id>	
        /// <unmanaged>unsigned int InstanceCount</unmanaged>	
        /// <unmanaged-short>unsigned int InstanceCount</unmanaged-short>	
        public int InstanceCount;
        
        /// <summary>	
        /// <dd> <p>Specifies an index to the first vertex to start drawing from.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DRAW_ARGUMENTS::StartVertexLocation']/*"/>	
        /// <msdn-id>dn903801</msdn-id>	
        /// <unmanaged>unsigned int StartVertexLocation</unmanaged>	
        /// <unmanaged-short>unsigned int StartVertexLocation</unmanaged-short>	
        public int StartVertexLocation;
        
        /// <summary>	
        /// <dd> <p>Specifies an index to the first instance to start drawing from.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DRAW_ARGUMENTS::StartInstanceLocation']/*"/>	
        /// <msdn-id>dn903801</msdn-id>	
        /// <unmanaged>unsigned int StartInstanceLocation</unmanaged>	
        /// <unmanaged-short>unsigned int StartInstanceLocation</unmanaged-short>	
        public int StartInstanceLocation;
    }
    
    /// <summary>	
    /// <p>Describes parameters for drawing indexed instances.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>The members of this structure serve the same purpose as the parameters of <strong>DrawIndexedInstanced</strong>. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DRAW_INDEXED_ARGUMENTS']/*"/>	
    /// <msdn-id>dn903802</msdn-id>	
    /// <unmanaged>D3D12_DRAW_INDEXED_ARGUMENTS</unmanaged>	
    /// <unmanaged-short>D3D12_DRAW_INDEXED_ARGUMENTS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct DrawIndexedArgumentS {	
        
        /// <summary>	
        /// <dd> <p>The number of indices read from the index buffer for each instance.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DRAW_INDEXED_ARGUMENTS::IndexCountPerInstance']/*"/>	
        /// <msdn-id>dn903802</msdn-id>	
        /// <unmanaged>unsigned int IndexCountPerInstance</unmanaged>	
        /// <unmanaged-short>unsigned int IndexCountPerInstance</unmanaged-short>	
        public int IndexCountPerInstance;
        
        /// <summary>	
        /// <dd> <p> The number of instances to draw.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DRAW_INDEXED_ARGUMENTS::InstanceCount']/*"/>	
        /// <msdn-id>dn903802</msdn-id>	
        /// <unmanaged>unsigned int InstanceCount</unmanaged>	
        /// <unmanaged-short>unsigned int InstanceCount</unmanaged-short>	
        public int InstanceCount;
        
        /// <summary>	
        /// <dd> <p>The location of the first index read by the GPU from the index buffer.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DRAW_INDEXED_ARGUMENTS::StartIndexLocation']/*"/>	
        /// <msdn-id>dn903802</msdn-id>	
        /// <unmanaged>unsigned int StartIndexLocation</unmanaged>	
        /// <unmanaged-short>unsigned int StartIndexLocation</unmanaged-short>	
        public int StartIndexLocation;
        
        /// <summary>	
        /// <dd> <p>A value added to each index before reading a vertex from the vertex buffer.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DRAW_INDEXED_ARGUMENTS::BaseVertexLocation']/*"/>	
        /// <msdn-id>dn903802</msdn-id>	
        /// <unmanaged>int BaseVertexLocation</unmanaged>	
        /// <unmanaged-short>int BaseVertexLocation</unmanaged-short>	
        public int BaseVertexLocation;
        
        /// <summary>	
        /// <dd> <p> A value added to each index before reading per-instance data from a vertex buffer.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_DRAW_INDEXED_ARGUMENTS::StartInstanceLocation']/*"/>	
        /// <msdn-id>dn903802</msdn-id>	
        /// <unmanaged>unsigned int StartInstanceLocation</unmanaged>	
        /// <unmanaged-short>unsigned int StartInstanceLocation</unmanaged-short>	
        public int StartInstanceLocation;
    }
    
    /// <summary>	
    /// <p>Provide detail about the adapter architecture, helping applications better optimize for certain adapter properties.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_ARCHITECTURE']/*"/>	
    /// <msdn-id>dn859384</msdn-id>	
    /// <unmanaged>D3D12_FEATURE_DATA_ARCHITECTURE</unmanaged>	
    /// <unmanaged-short>D3D12_FEATURE_DATA_ARCHITECTURE</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct FeatureDataArchitecture {	
        
        /// <summary>	
        /// <dd> <p> In multi-adapter operation, this indicates which physical adapter of the device is relevant. See Multi-Adapter. <strong>NodeIndex</strong> is filled out by the application before calling <strong>CheckFeatureSupport</strong>, as the application can retrieve details about the architecture of each adapter. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_ARCHITECTURE::NodeIndex']/*"/>	
        /// <msdn-id>dn859384</msdn-id>	
        /// <unmanaged>unsigned int NodeIndex</unmanaged>	
        /// <unmanaged-short>unsigned int NodeIndex</unmanaged-short>	
        public int NodeIndex;
        
        /// <summary>	
        /// <dd> <p> Specifies whether the hardware and driver support a tile-based renderer. The runtime sets this member to <strong>TRUE</strong> if the hardware and driver support a tile-based renderer. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_ARCHITECTURE::TileBasedRenderer']/*"/>	
        /// <msdn-id>dn859384</msdn-id>	
        /// <unmanaged>BOOL TileBasedRenderer</unmanaged>	
        /// <unmanaged-short>BOOL TileBasedRenderer</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool TileBasedRenderer;
        
        /// <summary>	
        /// <dd> <p> Specifies whether the hardware and driver support UMA. The runtime sets this member to <strong>TRUE</strong> if the hardware and driver support UMA. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_ARCHITECTURE::UMA']/*"/>	
        /// <msdn-id>dn859384</msdn-id>	
        /// <unmanaged>BOOL UMA</unmanaged>	
        /// <unmanaged-short>BOOL UMA</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool Uma;
        
        /// <summary>	
        /// <dd> <p> Specifies whether the hardware and driver support cache-coherent UMA. The runtime sets this member to <strong>TRUE</strong> if the hardware and driver support cache-coherent UMA. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_ARCHITECTURE::CacheCoherentUMA']/*"/>	
        /// <msdn-id>dn859384</msdn-id>	
        /// <unmanaged>BOOL CacheCoherentUMA</unmanaged>	
        /// <unmanaged-short>BOOL CacheCoherentUMA</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool CacheCoherentUMA;
    }
    
    /// <summary>	
    /// <p> Describes Direct3D 12 feature options in the current graphics driver. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> See <strong><see cref="SharpDX.Direct3D12.Feature"/></strong>. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_D3D12_OPTIONS']/*"/>	
    /// <msdn-id>dn770364</msdn-id>	
    /// <unmanaged>D3D12_FEATURE_DATA_D3D12_OPTIONS</unmanaged>	
    /// <unmanaged-short>D3D12_FEATURE_DATA_D3D12_OPTIONS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct FeatureDataD3D12Options {	
        
        /// <summary>	
        /// <dd> <p> Specifies whether <strong>double</strong> types are allowed for shader operations. If <strong>TRUE</strong>, double types are allowed; otherwise <strong><see cref="SharpDX.Result.False"/></strong>. The supported operations are equivalent to Direct3D 11's <strong>ExtendedDoublesShaderInstructions</strong> member of the <strong><see cref="SharpDX.Direct3D11.FeatureDataD3D11Options"/></strong> structure. </p> <p> To use any HLSL shader that is compiled with a <strong>double</strong> type, the runtime must set <strong>DoublePrecisionFloatShaderOps</strong> to <strong>TRUE</strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_D3D12_OPTIONS::DoublePrecisionFloatShaderOps']/*"/>	
        /// <msdn-id>dn770364</msdn-id>	
        /// <unmanaged>BOOL DoublePrecisionFloatShaderOps</unmanaged>	
        /// <unmanaged-short>BOOL DoublePrecisionFloatShaderOps</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool DoublePrecisionFloatShaderOps;
        
        /// <summary>	
        /// <dd> <p> Specifies whether logic operations are available in blend state. The runtime sets this member to <strong>TRUE</strong> if logic operations are available in blend state and <strong><see cref="SharpDX.Result.False"/></strong> otherwise. This member is <strong><see cref="SharpDX.Result.False"/></strong> for feature level 9.1, 9.2, and 9.3.  This member is optional for feature level 10, 10.1, and 11.  This member is <strong>TRUE</strong> for feature level 11.1 and 12. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_D3D12_OPTIONS::OutputMergerLogicOp']/*"/>	
        /// <msdn-id>dn770364</msdn-id>	
        /// <unmanaged>BOOL OutputMergerLogicOp</unmanaged>	
        /// <unmanaged-short>BOOL OutputMergerLogicOp</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool OutputMergerLogicOp;
        
        /// <summary>	
        /// <dd> <p> A combination of <strong><see cref="SharpDX.Direct3D12.ShaderMinimumPrecisionSupport"/></strong>-typed values that are combined by using a bitwise OR operation. The resulting value specifies minimum precision levels that the driver supports for shader stages. A value of zero indicates that the driver supports only full 32-bit precision for all shader stages. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_D3D12_OPTIONS::MinPrecisionSupport']/*"/>	
        /// <msdn-id>dn770364</msdn-id>	
        /// <unmanaged>D3D12_SHADER_MIN_PRECISION_SUPPORT MinPrecisionSupport</unmanaged>	
        /// <unmanaged-short>D3D12_SHADER_MIN_PRECISION_SUPPORT MinPrecisionSupport</unmanaged-short>	
        public SharpDX.Direct3D12.ShaderMinimumPrecisionSupport MinPrecisionSupport;
        
        /// <summary>	
        /// <dd> <p> Specifies whether the hardware and driver support tiled resources. The runtime sets this member to a <strong><see cref="SharpDX.Direct3D12.TiledResourcesTier"/></strong>-typed value that indicates if the hardware and driver support tiled resources and at what tier level. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_D3D12_OPTIONS::TiledResourcesTier']/*"/>	
        /// <msdn-id>dn770364</msdn-id>	
        /// <unmanaged>D3D12_TILED_RESOURCES_TIER TiledResourcesTier</unmanaged>	
        /// <unmanaged-short>D3D12_TILED_RESOURCES_TIER TiledResourcesTier</unmanaged-short>	
        public SharpDX.Direct3D12.TiledResourcesTier TiledResourcesTier;
        
        /// <summary>	
        /// <dd> <p> Specifies the level at which the hardware and driver support resource binding. The runtime sets this member to a <strong><see cref="SharpDX.Direct3D12.ResourceBindingTier"/></strong>-typed value that indicates the tier level. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_D3D12_OPTIONS::ResourceBindingTier']/*"/>	
        /// <msdn-id>dn770364</msdn-id>	
        /// <unmanaged>D3D12_RESOURCE_BINDING_TIER ResourceBindingTier</unmanaged>	
        /// <unmanaged-short>D3D12_RESOURCE_BINDING_TIER ResourceBindingTier</unmanaged-short>	
        public SharpDX.Direct3D12.ResourceBindingTier ResourceBindingTier;
        
        /// <summary>	
        /// <dd> <p> Specifies whether pixel shader stencil ref is supported. If <strong>TRUE</strong>, it's supported; otherwise <strong><see cref="SharpDX.Result.False"/></strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_D3D12_OPTIONS::PSSpecifiedStencilRefSupported']/*"/>	
        /// <msdn-id>dn770364</msdn-id>	
        /// <unmanaged>BOOL PSSpecifiedStencilRefSupported</unmanaged>	
        /// <unmanaged-short>BOOL PSSpecifiedStencilRefSupported</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool PSSpecifiedStencilRefSupported;
        
        /// <summary>	
        /// <dd> <p> Specifies whether the loading of additional formats for typed unordered-access views (UAVs) is supported. If <strong>TRUE</strong>, it's supported; otherwise <strong><see cref="SharpDX.Result.False"/></strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_D3D12_OPTIONS::TypedUAVLoadAdditionalFormats']/*"/>	
        /// <msdn-id>dn770364</msdn-id>	
        /// <unmanaged>BOOL TypedUAVLoadAdditionalFormats</unmanaged>	
        /// <unmanaged-short>BOOL TypedUAVLoadAdditionalFormats</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool TypedUAVLoadAdditionalFormats;
        
        /// <summary>	
        /// <dd> <p> Specifies whether <em>Rasterizer Order Views</em> (ROVs) are supported. If <strong>TRUE</strong>, they're supported; otherwise <strong><see cref="SharpDX.Result.False"/></strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_D3D12_OPTIONS::ROVsSupported']/*"/>	
        /// <msdn-id>dn770364</msdn-id>	
        /// <unmanaged>BOOL ROVsSupported</unmanaged>	
        /// <unmanaged-short>BOOL ROVsSupported</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool ROVsSupported;
        
        /// <summary>	
        /// <dd> <p> Specifies the level at which the hardware and driver support conservative rasterization. The runtime sets this member to a <strong><see cref="SharpDX.Direct3D12.ConservativeRasterizationTier"/></strong>-typed value that indicates the tier level. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_D3D12_OPTIONS::ConservativeRasterizationTier']/*"/>	
        /// <msdn-id>dn770364</msdn-id>	
        /// <unmanaged>D3D12_CONSERVATIVE_RASTERIZATION_TIER ConservativeRasterizationTier</unmanaged>	
        /// <unmanaged-short>D3D12_CONSERVATIVE_RASTERIZATION_TIER ConservativeRasterizationTier</unmanaged-short>	
        public SharpDX.Direct3D12.ConservativeRasterizationTier ConservativeRasterizationTier;
        
        /// <summary>	
        /// <dd> <p> Don't use this field; instead, use the <strong><see cref="SharpDX.Direct3D12.FeatureDataGpuVirtualAddressSupport"/></strong> query (a structure with a <strong>MaxGPUVirtualAddressBitsPerResource</strong> member), which is more accurate. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_D3D12_OPTIONS::MaxGPUVirtualAddressBitsPerResource']/*"/>	
        /// <msdn-id>dn770364</msdn-id>	
        /// <unmanaged>unsigned int MaxGPUVirtualAddressBitsPerResource</unmanaged>	
        /// <unmanaged-short>unsigned int MaxGPUVirtualAddressBitsPerResource</unmanaged-short>	
        public int MaxGPUVirtualAddressBitsPerResource;
        
        /// <summary>	
        /// <dd> <p> TRUE if the hardware supports textures with the 64KB standard swizzle pattern. Support for this pattern enables zero-copy texture optimizations while providing near-equilateral locality for each dimension within the texture. For texture swizzle options and restrictions, see <strong><see cref="SharpDX.Direct3D12.TextureLayout"/></strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_D3D12_OPTIONS::StandardSwizzle64KBSupported']/*"/>	
        /// <msdn-id>dn770364</msdn-id>	
        /// <unmanaged>BOOL StandardSwizzle64KBSupported</unmanaged>	
        /// <unmanaged-short>BOOL StandardSwizzle64KBSupported</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool StandardSwizzle64KBSupported;
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.CrossNodeSharingTier"/></strong> enumeration constant that specifies the level of sharing across nodes of an adapter that has multiple nodes, such as Tier 1 Emulated, Tier 1, or Tier 2. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_D3D12_OPTIONS::CrossNodeSharingTier']/*"/>	
        /// <msdn-id>dn770364</msdn-id>	
        /// <unmanaged>D3D12_CROSS_NODE_SHARING_TIER CrossNodeSharingTier</unmanaged>	
        /// <unmanaged-short>D3D12_CROSS_NODE_SHARING_TIER CrossNodeSharingTier</unmanaged-short>	
        public SharpDX.Direct3D12.CrossNodeSharingTier CrossNodeSharingTier;
        
        /// <summary>	
        /// <dd> <p> <see cref="SharpDX.Result.False"/> means the device only supports copy operations to and from cross-adapter row-major textures. TRUE means the device supports shader resource views, unordered access views, and render target views of cross-adapter row-major textures. "Cross-adapter" means between multiple adapters (even from different IHVs). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_D3D12_OPTIONS::CrossAdapterRowMajorTextureSupported']/*"/>	
        /// <msdn-id>dn770364</msdn-id>	
        /// <unmanaged>BOOL CrossAdapterRowMajorTextureSupported</unmanaged>	
        /// <unmanaged-short>BOOL CrossAdapterRowMajorTextureSupported</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool CrossAdapterRowMajorTextureSupported;
        
        /// <summary>	
        /// <dd> <p> Whether the viewport (VP) and Render Target (RT) array index from any shader feeding the rasterizer are supported without geometry shader emulation. Compare the <strong>VPAndRTArrayIndexFromAnyShaderFeedingRasterizer</strong> member of the <strong><see cref="SharpDX.Direct3D11.FeatureDataD3D11Options3"/></strong> structure. In <strong>ID3D12ShaderReflection::GetRequiresFlags</strong>, see the #define <see cref="SharpDX.D3DCompiler.ShaderRequiresFlags.ShaderRequiresViewportAndRtArrayIndexFromAnyShaderFeedingRasterizer"/>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_D3D12_OPTIONS::VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation']/*"/>	
        /// <msdn-id>dn770364</msdn-id>	
        /// <unmanaged>BOOL VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation</unmanaged>	
        /// <unmanaged-short>BOOL VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation;
        
        /// <summary>	
        /// <dd> <p> Specifies the level at which the hardware and driver require heap attribution related to resource type. The runtime sets this member to a <strong><see cref="SharpDX.Direct3D12.ResourceHeapTier"/></strong> enumeration constant. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_D3D12_OPTIONS::ResourceHeapTier']/*"/>	
        /// <msdn-id>dn770364</msdn-id>	
        /// <unmanaged>D3D12_RESOURCE_HEAP_TIER ResourceHeapTier</unmanaged>	
        /// <unmanaged-short>D3D12_RESOURCE_HEAP_TIER ResourceHeapTier</unmanaged-short>	
        public SharpDX.Direct3D12.ResourceHeapTier ResourceHeapTier;
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_FEATURE_LEVELS']/*"/>	
    /// <unmanaged>D3D12_FEATURE_DATA_FEATURE_LEVELS</unmanaged>	
    /// <unmanaged-short>D3D12_FEATURE_DATA_FEATURE_LEVELS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct FeatureDataFeatureLevels {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_FEATURE_LEVELS::NumFeatureLevels']/*"/>	
        /// <unmanaged>unsigned int NumFeatureLevels</unmanaged>	
        /// <unmanaged-short>unsigned int NumFeatureLevels</unmanaged-short>	
        public int FeatureLevelCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_FEATURE_LEVELS::pFeatureLevelsRequested']/*"/>	
        /// <unmanaged>const D3D_FEATURE_LEVEL* pFeatureLevelsRequested</unmanaged>	
        /// <unmanaged-short>D3D_FEATURE_LEVEL pFeatureLevelsRequested</unmanaged-short>	
        public System.IntPtr FeatureLevelsRequestedPointer;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_FEATURE_LEVELS::MaxSupportedFeatureLevel']/*"/>	
        /// <unmanaged>D3D_FEATURE_LEVEL MaxSupportedFeatureLevel</unmanaged>	
        /// <unmanaged-short>D3D_FEATURE_LEVEL MaxSupportedFeatureLevel</unmanaged-short>	
        public SharpDX.Direct3D.FeatureLevel MaxSupportedFeatureLevel;
    }
    
    /// <summary>	
    /// <p> Describes the DXGI data format. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> See <strong><see cref="SharpDX.Direct3D12.Feature"/></strong>. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_FORMAT_INFO']/*"/>	
    /// <msdn-id>dn986728</msdn-id>	
    /// <unmanaged>D3D12_FEATURE_DATA_FORMAT_INFO</unmanaged>	
    /// <unmanaged-short>D3D12_FEATURE_DATA_FORMAT_INFO</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct FeatureDataFormatInformation {	
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.DXGI.Format"/></strong>-typed value for the format to return info about. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_FORMAT_INFO::Format']/*"/>	
        /// <msdn-id>dn986728</msdn-id>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        public SharpDX.DXGI.Format Format;
        
        /// <summary>	
        /// <dd> <p> The number of planes to provide information about. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_FORMAT_INFO::PlaneCount']/*"/>	
        /// <msdn-id>dn986728</msdn-id>	
        /// <unmanaged>unsigned char PlaneCount</unmanaged>	
        /// <unmanaged-short>unsigned char PlaneCount</unmanaged-short>	
        public byte PlaneCount;
    }
    
    /// <summary>	
    /// <p> Describes which resources are supported by the current graphics driver for a given format. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> Refer to the enum <strong><see cref="SharpDX.Direct3D12.Feature"/></strong>. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_FORMAT_SUPPORT']/*"/>	
    /// <msdn-id>dn859386</msdn-id>	
    /// <unmanaged>D3D12_FEATURE_DATA_FORMAT_SUPPORT</unmanaged>	
    /// <unmanaged-short>D3D12_FEATURE_DATA_FORMAT_SUPPORT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct FeatureDataFormatSupport {	
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.DXGI.Format"/></strong>-typed value for the format to return info about. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_FORMAT_SUPPORT::Format']/*"/>	
        /// <msdn-id>dn859386</msdn-id>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        public SharpDX.DXGI.Format Format;
        
        /// <summary>	
        /// <dd> <p> A combination of <strong><see cref="SharpDX.Direct3D12.FormatSupport1"/></strong>-typed values that are combined by using a bitwise OR operation. The resulting value specifies which resources are supported. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_FORMAT_SUPPORT::Support1']/*"/>	
        /// <msdn-id>dn859386</msdn-id>	
        /// <unmanaged>D3D12_FORMAT_SUPPORT1 Support1</unmanaged>	
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT1 Support1</unmanaged-short>	
        public SharpDX.Direct3D12.FormatSupport1 Support1;
        
        /// <summary>	
        /// <dd> <p> A combination of <strong><see cref="SharpDX.Direct3D12.FormatSupport2"/></strong>-typed values that are combined by using a bitwise OR operation. The resulting value specifies which unordered resource options are supported. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_FORMAT_SUPPORT::Support2']/*"/>	
        /// <msdn-id>dn859386</msdn-id>	
        /// <unmanaged>D3D12_FORMAT_SUPPORT2 Support2</unmanaged>	
        /// <unmanaged-short>D3D12_FORMAT_SUPPORT2 Support2</unmanaged-short>	
        public SharpDX.Direct3D12.FormatSupport2 Support2;
    }
    
    /// <summary>	
    /// <p> Details the adapter's GPU virtual address space limitations, including maximum address bits per resource and per process. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> See the enumeration constant <see cref="SharpDX.Direct3D12.Feature.GpuVirtualAddressSupport"/> in the <strong><see cref="SharpDX.Direct3D12.Feature"/></strong> enumeration. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT']/*"/>	
    /// <msdn-id>mt186607</msdn-id>	
    /// <unmanaged>D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT</unmanaged>	
    /// <unmanaged-short>D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct FeatureDataGpuVirtualAddressSupport {	
        
        /// <summary>	
        /// <dd> <p>The maximum GPU virtual address bits per resource.</p> <p>Some adapters have significantly less bits available per resource than per process, while other adapters have significantly greater bits available per resource than per process. The latter scenario tends to happen in less common scenarios, like when running a 32-bit process on certain UMA adapters.	
        /// When per resource capabilities are greater than per process, the greater per resource capabilities can only be leveraged by reserved resources or <c>null</c> mapped pages.	
        /// </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT::MaxGPUVirtualAddressBitsPerResource']/*"/>	
        /// <msdn-id>mt186607</msdn-id>	
        /// <unmanaged>unsigned int MaxGPUVirtualAddressBitsPerResource</unmanaged>	
        /// <unmanaged-short>unsigned int MaxGPUVirtualAddressBitsPerResource</unmanaged-short>	
        public int MaxGPUVirtualAddressBitsPerResource;
        
        /// <summary>	
        /// <dd> <p> The maximum GPU virtual address bits per process.</p> <p>When this value is nearly equal to the available residency budget, <strong>Evict</strong> will not be a feasible option to manage residency. See <strong>MakeResident</strong> for more details.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT::MaxGPUVirtualAddressBitsPerProcess']/*"/>	
        /// <msdn-id>mt186607</msdn-id>	
        /// <unmanaged>unsigned int MaxGPUVirtualAddressBitsPerProcess</unmanaged>	
        /// <unmanaged-short>unsigned int MaxGPUVirtualAddressBitsPerProcess</unmanaged-short>	
        public int MaxGPUVirtualAddressBitsPerProcess;
    }
    
    /// <summary>	
    /// <p> Describes the image quality levels for a given format and sample count. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> See <strong><see cref="SharpDX.Direct3D12.Feature"/></strong>. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS']/*"/>	
    /// <msdn-id>dn859387</msdn-id>	
    /// <unmanaged>D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS</unmanaged>	
    /// <unmanaged-short>D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct FeatureDataMultisampleQualityLevels {	
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.DXGI.Format"/></strong>-typed value for the format to return info about. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS::Format']/*"/>	
        /// <msdn-id>dn859387</msdn-id>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        public SharpDX.DXGI.Format Format;
        
        /// <summary>	
        /// <dd> <p> The number of multi-samples per pixel to return info about. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS::SampleCount']/*"/>	
        /// <msdn-id>dn859387</msdn-id>	
        /// <unmanaged>unsigned int SampleCount</unmanaged>	
        /// <unmanaged-short>unsigned int SampleCount</unmanaged-short>	
        public int SampleCount;
        
        /// <summary>	
        /// <dd> <p> Flags to control quality levels, as a bitwise-OR'd combination of <strong><see cref="SharpDX.Direct3D12.MultisampleQualityLevelFlags"/></strong> enumeration constants. The resulting value specifies options for determining quality levels. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS::Flags']/*"/>	
        /// <msdn-id>dn859387</msdn-id>	
        /// <unmanaged>D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS Flags</unmanaged>	
        /// <unmanaged-short>D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS Flags</unmanaged-short>	
        public SharpDX.Direct3D12.MultisampleQualityLevelFlags Flags;
        
        /// <summary>	
        /// <dd> <p> The number of quality levels. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS::NumQualityLevels']/*"/>	
        /// <msdn-id>dn859387</msdn-id>	
        /// <unmanaged>unsigned int NumQualityLevels</unmanaged>	
        /// <unmanaged-short>unsigned int NumQualityLevels</unmanaged-short>	
        public int QualityLevelCount;
    }
    
    /// <summary>	
    /// <p> Describes a GPU descriptor handle. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> This structure is returned by <strong><see cref="SharpDX.Direct3D12.DescriptorHeap.GetGPUDescriptorHandleForHeapStart"/></strong>. </p><p> This structure is passed into the following methods: </p><ul> <li> <strong><see cref="SharpDX.Direct3D12.GraphicsCommandList.ClearUnorderedAccessViewFloat"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D12.GraphicsCommandList.ClearUnorderedAccessViewUint"/></strong> </li> <li> <strong>ID3D12GraphicsCommandList:SetComputeRootDescriptorTable</strong> </li> <li> <strong><see cref="SharpDX.Direct3D12.GraphicsCommandList.SetGraphicsRootDescriptorTable"/></strong> </li> </ul>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_GPU_DESCRIPTOR_HANDLE']/*"/>	
    /// <msdn-id>dn859391</msdn-id>	
    /// <unmanaged>D3D12_GPU_DESCRIPTOR_HANDLE</unmanaged>	
    /// <unmanaged-short>D3D12_GPU_DESCRIPTOR_HANDLE</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct GpuDescriptorHandle {	
        
        /// <summary>	
        /// <dd> <p> The address of the descriptor. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_GPU_DESCRIPTOR_HANDLE::ptr']/*"/>	
        /// <msdn-id>dn859391</msdn-id>	
        /// <unmanaged>unsigned longlong ptr</unmanaged>	
        /// <unmanaged-short>unsigned longlong ptr</unmanaged-short>	
        public long Ptr;
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_GRAPHICS_PIPELINE_STATE_DESC']/*"/>	
    /// <unmanaged>D3D12_GRAPHICS_PIPELINE_STATE_DESC</unmanaged>	
    /// <unmanaged-short>D3D12_GRAPHICS_PIPELINE_STATE_DESC</unmanaged-short>	
    public  partial class GraphicsPipelineStateDescription {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_GRAPHICS_PIPELINE_STATE_DESC::pRootSignature']/*"/>	
        /// <unmanaged>ID3D12RootSignature* pRootSignature</unmanaged>	
        /// <unmanaged-short>ID3D12RootSignature pRootSignature</unmanaged-short>	
        private System.IntPtr RootSignaturePointer;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_GRAPHICS_PIPELINE_STATE_DESC::VS']/*"/>	
        /// <unmanaged>D3D12_SHADER_BYTECODE VS</unmanaged>	
        /// <unmanaged-short>D3D12_SHADER_BYTECODE VS</unmanaged-short>	
        public SharpDX.Direct3D12.ShaderBytecode VertexShader;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_GRAPHICS_PIPELINE_STATE_DESC::PS']/*"/>	
        /// <unmanaged>D3D12_SHADER_BYTECODE PS</unmanaged>	
        /// <unmanaged-short>D3D12_SHADER_BYTECODE PS</unmanaged-short>	
        public SharpDX.Direct3D12.ShaderBytecode PixelShader;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_GRAPHICS_PIPELINE_STATE_DESC::DS']/*"/>	
        /// <unmanaged>D3D12_SHADER_BYTECODE DS</unmanaged>	
        /// <unmanaged-short>D3D12_SHADER_BYTECODE DS</unmanaged-short>	
        public SharpDX.Direct3D12.ShaderBytecode DomainShader;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_GRAPHICS_PIPELINE_STATE_DESC::HS']/*"/>	
        /// <unmanaged>D3D12_SHADER_BYTECODE HS</unmanaged>	
        /// <unmanaged-short>D3D12_SHADER_BYTECODE HS</unmanaged-short>	
        public SharpDX.Direct3D12.ShaderBytecode HullShader;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_GRAPHICS_PIPELINE_STATE_DESC::GS']/*"/>	
        /// <unmanaged>D3D12_SHADER_BYTECODE GS</unmanaged>	
        /// <unmanaged-short>D3D12_SHADER_BYTECODE GS</unmanaged-short>	
        public SharpDX.Direct3D12.ShaderBytecode GeometryShader;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_GRAPHICS_PIPELINE_STATE_DESC::StreamOutput']/*"/>	
        /// <unmanaged>D3D12_STREAM_OUTPUT_DESC StreamOutput</unmanaged>	
        /// <unmanaged-short>D3D12_STREAM_OUTPUT_DESC StreamOutput</unmanaged-short>	
        public SharpDX.Direct3D12.StreamOutputDescription StreamOutput;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_GRAPHICS_PIPELINE_STATE_DESC::BlendState']/*"/>	
        /// <unmanaged>D3D12_BLEND_DESC BlendState</unmanaged>	
        /// <unmanaged-short>D3D12_BLEND_DESC BlendState</unmanaged-short>	
        public SharpDX.Direct3D12.BlendStateDescription BlendState;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_GRAPHICS_PIPELINE_STATE_DESC::SampleMask']/*"/>	
        /// <unmanaged>unsigned int SampleMask</unmanaged>	
        /// <unmanaged-short>unsigned int SampleMask</unmanaged-short>	
        public int SampleMask;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_GRAPHICS_PIPELINE_STATE_DESC::RasterizerState']/*"/>	
        /// <unmanaged>D3D12_RASTERIZER_DESC RasterizerState</unmanaged>	
        /// <unmanaged-short>D3D12_RASTERIZER_DESC RasterizerState</unmanaged-short>	
        public SharpDX.Direct3D12.RasterizerStateDescription RasterizerState;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_GRAPHICS_PIPELINE_STATE_DESC::DepthStencilState']/*"/>	
        /// <unmanaged>D3D12_DEPTH_STENCIL_DESC DepthStencilState</unmanaged>	
        /// <unmanaged-short>D3D12_DEPTH_STENCIL_DESC DepthStencilState</unmanaged-short>	
        public SharpDX.Direct3D12.DepthStencilStateDescription DepthStencilState;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_GRAPHICS_PIPELINE_STATE_DESC::InputLayout']/*"/>	
        /// <unmanaged>D3D12_INPUT_LAYOUT_DESC InputLayout</unmanaged>	
        /// <unmanaged-short>D3D12_INPUT_LAYOUT_DESC InputLayout</unmanaged-short>	
        public SharpDX.Direct3D12.InputLayoutDescription InputLayout;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_GRAPHICS_PIPELINE_STATE_DESC::IBStripCutValue']/*"/>	
        /// <unmanaged>D3D12_INDEX_BUFFER_STRIP_CUT_VALUE IBStripCutValue</unmanaged>	
        /// <unmanaged-short>D3D12_INDEX_BUFFER_STRIP_CUT_VALUE IBStripCutValue</unmanaged-short>	
        public SharpDX.Direct3D12.IndexBufferStripCutValue IBStripCutValue;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_GRAPHICS_PIPELINE_STATE_DESC::PrimitiveTopologyType']/*"/>	
        /// <unmanaged>D3D12_PRIMITIVE_TOPOLOGY_TYPE PrimitiveTopologyType</unmanaged>	
        /// <unmanaged-short>D3D12_PRIMITIVE_TOPOLOGY_TYPE PrimitiveTopologyType</unmanaged-short>	
        public SharpDX.Direct3D12.PrimitiveTopologyType PrimitiveTopologyType;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_GRAPHICS_PIPELINE_STATE_DESC::NumRenderTargets']/*"/>	
        /// <unmanaged>unsigned int NumRenderTargets</unmanaged>	
        /// <unmanaged-short>unsigned int NumRenderTargets</unmanaged-short>	
        public int RenderTargetCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_GRAPHICS_PIPELINE_STATE_DESC::RTVFormats']/*"/>	
        /// <unmanaged>DXGI_FORMAT RTVFormats[8]</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT RTVFormats</unmanaged-short>	
        public SharpDX.DXGI.Format[] RenderTargetFormats { 
            get { return _RenderTargetFormats ?? (_RenderTargetFormats = new SharpDX.DXGI.Format[8]);}
        }
        internal SharpDX.DXGI.Format[] _RenderTargetFormats;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_GRAPHICS_PIPELINE_STATE_DESC::DSVFormat']/*"/>	
        /// <unmanaged>DXGI_FORMAT DSVFormat</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT DSVFormat</unmanaged-short>	
        public SharpDX.DXGI.Format DepthStencilFormat;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_GRAPHICS_PIPELINE_STATE_DESC::SampleDesc']/*"/>	
        /// <unmanaged>DXGI_SAMPLE_DESC SampleDesc</unmanaged>	
        /// <unmanaged-short>DXGI_SAMPLE_DESC SampleDesc</unmanaged-short>	
        public SharpDX.DXGI.SampleDescription SampleDescription;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_GRAPHICS_PIPELINE_STATE_DESC::NodeMask']/*"/>	
        /// <unmanaged>unsigned int NodeMask</unmanaged>	
        /// <unmanaged-short>unsigned int NodeMask</unmanaged-short>	
        public int NodeMask;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_GRAPHICS_PIPELINE_STATE_DESC::CachedPSO']/*"/>	
        /// <unmanaged>D3D12_CACHED_PIPELINE_STATE CachedPSO</unmanaged>	
        /// <unmanaged-short>D3D12_CACHED_PIPELINE_STATE CachedPSO</unmanaged-short>	
        public SharpDX.Direct3D12.CachedPipelineState CachedPSO;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_GRAPHICS_PIPELINE_STATE_DESC::Flags']/*"/>	
        /// <unmanaged>D3D12_PIPELINE_STATE_FLAGS Flags</unmanaged>	
        /// <unmanaged-short>D3D12_PIPELINE_STATE_FLAGS Flags</unmanaged-short>	
        public SharpDX.Direct3D12.PipelineStateFlags Flags;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public System.IntPtr RootSignaturePointer;
            public SharpDX.Direct3D12.ShaderBytecode.__Native VertexShader;
            public SharpDX.Direct3D12.ShaderBytecode.__Native PixelShader;
            public SharpDX.Direct3D12.ShaderBytecode.__Native DomainShader;
            public SharpDX.Direct3D12.ShaderBytecode.__Native HullShader;
            public SharpDX.Direct3D12.ShaderBytecode.__Native GeometryShader;
            public SharpDX.Direct3D12.StreamOutputDescription.__Native StreamOutput;
            public SharpDX.Direct3D12.BlendStateDescription.__Native BlendState;
            public int SampleMask;
            public SharpDX.Direct3D12.RasterizerStateDescription RasterizerState;
            public SharpDX.Direct3D12.DepthStencilStateDescription DepthStencilState;
            public SharpDX.Direct3D12.InputLayoutDescription.__Native InputLayout;
            public SharpDX.Direct3D12.IndexBufferStripCutValue IBStripCutValue;
            public SharpDX.Direct3D12.PrimitiveTopologyType PrimitiveTopologyType;
            public int RenderTargetCount;
            public int RenderTargetFormats;
            int __RenderTargetFormats1;
            int __RenderTargetFormats2;
            int __RenderTargetFormats3;
            int __RenderTargetFormats4;
            int __RenderTargetFormats5;
            int __RenderTargetFormats6;
            int __RenderTargetFormats7;
            public SharpDX.DXGI.Format DepthStencilFormat;
            public SharpDX.DXGI.SampleDescription SampleDescription;
            public int NodeMask;
            public SharpDX.Direct3D12.CachedPipelineState CachedPSO;
            public SharpDX.Direct3D12.PipelineStateFlags Flags;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                this.VertexShader.__MarshalFree();
                this.PixelShader.__MarshalFree();
                this.DomainShader.__MarshalFree();
                this.HullShader.__MarshalFree();
                this.GeometryShader.__MarshalFree();
                this.StreamOutput.__MarshalFree();
                this.BlendState.__MarshalFree();
                this.InputLayout.__MarshalFree();
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.RootSignaturePointer = @ref.RootSignaturePointer;
            this.VertexShader = new SharpDX.Direct3D12.ShaderBytecode();
			this.VertexShader.__MarshalFrom(ref @ref.VertexShader);
            this.PixelShader = new SharpDX.Direct3D12.ShaderBytecode();
			this.PixelShader.__MarshalFrom(ref @ref.PixelShader);
            this.DomainShader = new SharpDX.Direct3D12.ShaderBytecode();
			this.DomainShader.__MarshalFrom(ref @ref.DomainShader);
            this.HullShader = new SharpDX.Direct3D12.ShaderBytecode();
			this.HullShader.__MarshalFrom(ref @ref.HullShader);
            this.GeometryShader = new SharpDX.Direct3D12.ShaderBytecode();
			this.GeometryShader.__MarshalFrom(ref @ref.GeometryShader);
            this.StreamOutput = new SharpDX.Direct3D12.StreamOutputDescription();
			this.StreamOutput.__MarshalFrom(ref @ref.StreamOutput);
            this.BlendState = new SharpDX.Direct3D12.BlendStateDescription();
			this.BlendState.__MarshalFrom(ref @ref.BlendState);
            this.SampleMask = @ref.SampleMask;
            this.RasterizerState = @ref.RasterizerState;
            this.DepthStencilState = @ref.DepthStencilState;
            this.InputLayout = new SharpDX.Direct3D12.InputLayoutDescription();
			this.InputLayout.__MarshalFrom(ref @ref.InputLayout);
            this.IBStripCutValue = @ref.IBStripCutValue;
            this.PrimitiveTopologyType = @ref.PrimitiveTopologyType;
            this.RenderTargetCount = @ref.RenderTargetCount;
            fixed (void* __to = &this.RenderTargetFormats[0]) fixed (void* __from = &@ref.RenderTargetFormats) SharpDX.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, 8*sizeof ( int));
            this.DepthStencilFormat = @ref.DepthStencilFormat;
            this.SampleDescription = @ref.SampleDescription;
            this.NodeMask = @ref.NodeMask;
            this.CachedPSO = @ref.CachedPSO;
            this.Flags = @ref.Flags;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.RootSignaturePointer = this.RootSignaturePointer;
			@ref.VertexShader = new SharpDX.Direct3D12.ShaderBytecode.__Native();
						
                this.VertexShader.__MarshalTo(ref @ref.VertexShader);
			@ref.PixelShader = new SharpDX.Direct3D12.ShaderBytecode.__Native();
						
                this.PixelShader.__MarshalTo(ref @ref.PixelShader);
			@ref.DomainShader = new SharpDX.Direct3D12.ShaderBytecode.__Native();
						
                this.DomainShader.__MarshalTo(ref @ref.DomainShader);
			@ref.HullShader = new SharpDX.Direct3D12.ShaderBytecode.__Native();
						
                this.HullShader.__MarshalTo(ref @ref.HullShader);
			@ref.GeometryShader = new SharpDX.Direct3D12.ShaderBytecode.__Native();
						
                this.GeometryShader.__MarshalTo(ref @ref.GeometryShader);
			@ref.StreamOutput = new SharpDX.Direct3D12.StreamOutputDescription.__Native();
						
						if (this.StreamOutput != null) 						
                this.StreamOutput.__MarshalTo(ref @ref.StreamOutput);
			@ref.BlendState = new SharpDX.Direct3D12.BlendStateDescription.__Native();
						
                this.BlendState.__MarshalTo(ref @ref.BlendState);
            @ref.SampleMask = this.SampleMask;
            @ref.RasterizerState = this.RasterizerState;
            @ref.DepthStencilState = this.DepthStencilState;
			@ref.InputLayout = new SharpDX.Direct3D12.InputLayoutDescription.__Native();
						
						if (this.InputLayout != null) 						
                this.InputLayout.__MarshalTo(ref @ref.InputLayout);
            @ref.IBStripCutValue = this.IBStripCutValue;
            @ref.PrimitiveTopologyType = this.PrimitiveTopologyType;
            @ref.RenderTargetCount = this.RenderTargetCount;
            fixed (void* __to = &@ref.RenderTargetFormats) fixed (void* __from = &this.RenderTargetFormats[0]) SharpDX.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, 8*sizeof ( int));
            @ref.DepthStencilFormat = this.DepthStencilFormat;
            @ref.SampleDescription = this.SampleDescription;
            @ref.NodeMask = this.NodeMask;
            @ref.CachedPSO = this.CachedPSO;
            @ref.Flags = this.Flags;
		
		}
    }
    
    /// <summary>	
    /// <p> Describes the purpose of a query heap.  A query heap contains an array of individual queries. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> Use this structure with <strong>CreateQueryHeap</strong>. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_HEAP_DESC']/*"/>	
    /// <msdn-id>dn903810</msdn-id>	
    /// <unmanaged>D3D12_HEAP_DESC</unmanaged>	
    /// <unmanaged-short>D3D12_HEAP_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct HeapDescription {	
        
        /// <summary>	
        /// <dd> <p> Specifies one member of <strong><see cref="SharpDX.Direct3D12.QueryHeapType"/></strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_HEAP_DESC::SizeInBytes']/*"/>	
        /// <msdn-id>dn903810</msdn-id>	
        /// <unmanaged>unsigned longlong SizeInBytes</unmanaged>	
        /// <unmanaged-short>unsigned longlong SizeInBytes</unmanaged-short>	
        public long SizeInBytes;
        
        /// <summary>	
        /// <dd> <p> Specifies the number of queries the heap should contain. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_HEAP_DESC::Properties']/*"/>	
        /// <msdn-id>dn903810</msdn-id>	
        /// <unmanaged>D3D12_HEAP_PROPERTIES Properties</unmanaged>	
        /// <unmanaged-short>D3D12_HEAP_PROPERTIES Properties</unmanaged-short>	
        public SharpDX.Direct3D12.HeapProperties Properties;
        
        /// <summary>	
        /// <dd> <p> For single GPU operation, set this to zero. If there are multiple GPU nodes, set a bit to identify the node (the  device's physical adapter) to which the query heap applies. Each bit in the mask corresponds to a single node. Only 1 bit must be set. Refer to Multi-Adapter.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_HEAP_DESC::Alignment']/*"/>	
        /// <msdn-id>dn903810</msdn-id>	
        /// <unmanaged>unsigned longlong Alignment</unmanaged>	
        /// <unmanaged-short>unsigned longlong Alignment</unmanaged-short>	
        public long Alignment;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_HEAP_DESC::Flags']/*"/>	
        /// <msdn-id>dn903810</msdn-id>	
        /// <unmanaged>D3D12_HEAP_FLAGS Flags</unmanaged>	
        /// <unmanaged-short>D3D12_HEAP_FLAGS Flags</unmanaged-short>	
        public SharpDX.Direct3D12.HeapFlags Flags;
    }
    
    /// <summary>	
    /// <p>Describes heap properties.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> This structure is used by the following: </p><ul> <li> <strong><see cref="SharpDX.Direct3D12.HeapDescription"/></strong> structure </li> <li> <strong><see cref="SharpDX.Direct3D12.Resource.GetHeapProperties"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D12.Device.GetCustomHeapProperties"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D12.Device.CreateCommittedResource"/></strong> </li> </ul><p> Valid combinations of struct member values: </p><ul> <li> When <strong>Type</strong> is <strong><see cref="SharpDX.Direct3D12.HeapType"/></strong>_CUSTOM, <strong>CPUPageProperty</strong> and <strong>MemoryPoolPreference</strong> must not be ..._UNKNOWN. </li> <li> When <strong>Type</strong> is not <see cref="SharpDX.Direct3D12.HeapType.Custom"/>, <strong>CPUPageProperty</strong> and <strong>MemoryPoolPreference</strong> must be ..._UNKNOWN. </li> <li> When using <see cref="SharpDX.Direct3D12.HeapType.Custom"/> and <strong><see cref="SharpDX.Direct3D12.MemoryPool"/></strong>_L1, on NUMA adapters, <strong>CPUPageProperty</strong> must be <strong><see cref="SharpDX.Direct3D12.CpuPageProperty"/></strong>_NOT_AVAILABLE. To differentiate NUMA from UMA adapters, see <strong><see cref="SharpDX.Direct3D12.Feature"/></strong>_ARCHITECTURE and <strong><see cref="SharpDX.Direct3D12.FeatureDataArchitecture"/></strong>. </li> </ul>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_HEAP_PROPERTIES']/*"/>	
    /// <msdn-id>dn770373</msdn-id>	
    /// <unmanaged>D3D12_HEAP_PROPERTIES</unmanaged>	
    /// <unmanaged-short>D3D12_HEAP_PROPERTIES</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct HeapProperties {	
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.HeapType"/></strong>-typed value that specifies the type of heap. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_HEAP_PROPERTIES::Type']/*"/>	
        /// <msdn-id>dn770373</msdn-id>	
        /// <unmanaged>D3D12_HEAP_TYPE Type</unmanaged>	
        /// <unmanaged-short>D3D12_HEAP_TYPE Type</unmanaged-short>	
        public SharpDX.Direct3D12.HeapType Type;
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.CpuPageProperty"/></strong>-typed value that specifies the CPU-page properties for the heap. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_HEAP_PROPERTIES::CPUPageProperty']/*"/>	
        /// <msdn-id>dn770373</msdn-id>	
        /// <unmanaged>D3D12_CPU_PAGE_PROPERTY CPUPageProperty</unmanaged>	
        /// <unmanaged-short>D3D12_CPU_PAGE_PROPERTY CPUPageProperty</unmanaged-short>	
        public SharpDX.Direct3D12.CpuPageProperty CPUPageProperty;
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.MemoryPool"/></strong>-typed value that specifies the memory pool for the heap. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_HEAP_PROPERTIES::MemoryPoolPreference']/*"/>	
        /// <msdn-id>dn770373</msdn-id>	
        /// <unmanaged>D3D12_MEMORY_POOL MemoryPoolPreference</unmanaged>	
        /// <unmanaged-short>D3D12_MEMORY_POOL MemoryPoolPreference</unmanaged-short>	
        public SharpDX.Direct3D12.MemoryPool MemoryPoolPreference;
        
        /// <summary>	
        /// <dd> <p> For multi-adapter operation, this indicates the node where the resource should be created. Exactly one bit of this UINT must be set. See Multi-Adapter. </p> <p> Passing zero is equivalent to passing one, in order to simplify the usage of single-GPU adapters. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_HEAP_PROPERTIES::CreationNodeMask']/*"/>	
        /// <msdn-id>dn770373</msdn-id>	
        /// <unmanaged>unsigned int CreationNodeMask</unmanaged>	
        /// <unmanaged-short>unsigned int CreationNodeMask</unmanaged-short>	
        public int CreationNodeMask;
        
        /// <summary>	
        /// <dd> <p> For multi-adapter operation, this indicates the set of nodes where the resource is visible. <em>VisibleNodeMask</em> must have the same bits set as <em>CreationNodeMask</em> has. See Multi-Adapter. </p> <p> Passing zero is equivalent to passing one, in order to simplify the usage of single-GPU adapters. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_HEAP_PROPERTIES::VisibleNodeMask']/*"/>	
        /// <msdn-id>dn770373</msdn-id>	
        /// <unmanaged>unsigned int VisibleNodeMask</unmanaged>	
        /// <unmanaged-short>unsigned int VisibleNodeMask</unmanaged-short>	
        public int VisibleNodeMask;
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INDEX_BUFFER_VIEW']/*"/>	
    /// <unmanaged>D3D12_INDEX_BUFFER_VIEW</unmanaged>	
    /// <unmanaged-short>D3D12_INDEX_BUFFER_VIEW</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct IndexBufferView {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INDEX_BUFFER_VIEW::BufferLocation']/*"/>	
        /// <unmanaged>unsigned longlong BufferLocation</unmanaged>	
        /// <unmanaged-short>unsigned longlong BufferLocation</unmanaged-short>	
        public long BufferLocation;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INDEX_BUFFER_VIEW::SizeInBytes']/*"/>	
        /// <unmanaged>unsigned int SizeInBytes</unmanaged>	
        /// <unmanaged-short>unsigned int SizeInBytes</unmanaged-short>	
        public int SizeInBytes;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INDEX_BUFFER_VIEW::Format']/*"/>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        public SharpDX.DXGI.Format Format;
    }
    
    /// <summary>	
    /// <p> Describes an indirect argument (an indirect parameter), for use with a command signature. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> Use this structure with the <strong><see cref="SharpDX.Direct3D12.CommandSignatureDescription"/></strong> structure. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INDIRECT_ARGUMENT_DESC']/*"/>	
    /// <msdn-id>dn986733</msdn-id>	
    /// <unmanaged>D3D12_INDIRECT_ARGUMENT_DESC</unmanaged>	
    /// <unmanaged-short>D3D12_INDIRECT_ARGUMENT_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Explicit)]
    public  partial struct IndirectArgumentDescription {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INDIRECT_ARGUMENT_DESC_INNER_0_INNER_0']/*"/>	
        /// <unmanaged>D3D12_INDIRECT_ARGUMENT_DESC_INNER_0_INNER_0</unmanaged>	
        /// <unmanaged-short>D3D12_INDIRECT_ARGUMENT_DESC_INNER_0_INNER_0</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct VertexBufferArgument {	
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INDIRECT_ARGUMENT_DESC_INNER_0_INNER_0::Slot']/*"/>	
            /// <unmanaged>unsigned int Slot</unmanaged>	
            /// <unmanaged-short>unsigned int Slot</unmanaged-short>	
            public int Slot;
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INDIRECT_ARGUMENT_DESC_INNER_0_INNER_1']/*"/>	
        /// <unmanaged>D3D12_INDIRECT_ARGUMENT_DESC_INNER_0_INNER_1</unmanaged>	
        /// <unmanaged-short>D3D12_INDIRECT_ARGUMENT_DESC_INNER_0_INNER_1</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct ConstantArgument {	
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INDIRECT_ARGUMENT_DESC_INNER_0_INNER_1::RootParameterIndex']/*"/>	
            /// <unmanaged>unsigned int RootParameterIndex</unmanaged>	
            /// <unmanaged-short>unsigned int RootParameterIndex</unmanaged-short>	
            public int RootParameterIndex;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INDIRECT_ARGUMENT_DESC_INNER_0_INNER_1::DestOffsetIn32BitValues']/*"/>	
            /// <unmanaged>unsigned int DestOffsetIn32BitValues</unmanaged>	
            /// <unmanaged-short>unsigned int DestOffsetIn32BitValues</unmanaged-short>	
            public int DestOffsetIn32BitValues;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INDIRECT_ARGUMENT_DESC_INNER_0_INNER_1::Num32BitValuesToSet']/*"/>	
            /// <unmanaged>unsigned int Num32BitValuesToSet</unmanaged>	
            /// <unmanaged-short>unsigned int Num32BitValuesToSet</unmanaged-short>	
            public int Num32BitValuesToSet;
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INDIRECT_ARGUMENT_DESC_INNER_0_INNER_2']/*"/>	
        /// <unmanaged>D3D12_INDIRECT_ARGUMENT_DESC_INNER_0_INNER_2</unmanaged>	
        /// <unmanaged-short>D3D12_INDIRECT_ARGUMENT_DESC_INNER_0_INNER_2</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct ConstantBufferArgument {	
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INDIRECT_ARGUMENT_DESC_INNER_0_INNER_2::RootParameterIndex']/*"/>	
            /// <unmanaged>unsigned int RootParameterIndex</unmanaged>	
            /// <unmanaged-short>unsigned int RootParameterIndex</unmanaged-short>	
            public int RootParameterIndex;
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INDIRECT_ARGUMENT_DESC_INNER_0_INNER_3']/*"/>	
        /// <unmanaged>D3D12_INDIRECT_ARGUMENT_DESC_INNER_0_INNER_3</unmanaged>	
        /// <unmanaged-short>D3D12_INDIRECT_ARGUMENT_DESC_INNER_0_INNER_3</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct ShaderResourceViewArgument {	
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INDIRECT_ARGUMENT_DESC_INNER_0_INNER_3::RootParameterIndex']/*"/>	
            /// <unmanaged>unsigned int RootParameterIndex</unmanaged>	
            /// <unmanaged-short>unsigned int RootParameterIndex</unmanaged-short>	
            public int RootParameterIndex;
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INDIRECT_ARGUMENT_DESC_INNER_0_INNER_4']/*"/>	
        /// <unmanaged>D3D12_INDIRECT_ARGUMENT_DESC_INNER_0_INNER_4</unmanaged>	
        /// <unmanaged-short>D3D12_INDIRECT_ARGUMENT_DESC_INNER_0_INNER_4</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct UnorderedAccessViewArgument {	
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INDIRECT_ARGUMENT_DESC_INNER_0_INNER_4::RootParameterIndex']/*"/>	
            /// <unmanaged>unsigned int RootParameterIndex</unmanaged>	
            /// <unmanaged-short>unsigned int RootParameterIndex</unmanaged-short>	
            public int RootParameterIndex;
        }
        
        /// <summary>	
        /// <dd> <p> A single <strong><see cref="SharpDX.Direct3D12.IndirectArgumentType"/></strong> enumeration constant. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INDIRECT_ARGUMENT_DESC::Type']/*"/>	
        /// <msdn-id>dn986733</msdn-id>	
        /// <unmanaged>D3D12_INDIRECT_ARGUMENT_TYPE Type</unmanaged>	
        /// <unmanaged-short>D3D12_INDIRECT_ARGUMENT_TYPE Type</unmanaged-short>	
        [FieldOffset(0)]
        public SharpDX.Direct3D12.IndirectArgumentType Type;
        
        /// <summary>	
        /// <dd> <dl> <dt><strong>Slot</strong></dt> <dd> <p> Specifies the slot containing the vertex buffer address. </p> </dd> </dl> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INDIRECT_ARGUMENT_DESC::VertexBuffer']/*"/>	
        /// <msdn-id>dn986733</msdn-id>	
        /// <unmanaged>D3D12_INDIRECT_ARGUMENT_DESC_INNER_0_INNER_0 VertexBuffer</unmanaged>	
        /// <unmanaged-short>D3D12_INDIRECT_ARGUMENT_DESC_INNER_0_INNER_0 VertexBuffer</unmanaged-short>	
        [FieldOffset(4)]
        public SharpDX.Direct3D12.IndirectArgumentDescription.VertexBufferArgument VertexBuffer;
        
        /// <summary>	
        /// <dd> <dl> <dt><strong>RootParameterIndex</strong></dt> <dd> <p> Specifies the root index of the constant. </p> </dd> <dt><strong>DestOffsetIn32BitValues</strong></dt> <dd> <p> The offset, in 32-bit values, to set the first constant of the group. Supports multi-value constants at a given root index. Root constant entries must be sorted from smallest to largest DestOffsetIn32BitValues. </p> </dd> <dt><strong>Num32BitValuesToSet</strong></dt> <dd> <p> The number of 32-bit constants that are set at the given root index. Supports multi-value constants at a given root index. </p> </dd> </dl> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INDIRECT_ARGUMENT_DESC::Constant']/*"/>	
        /// <msdn-id>dn986733</msdn-id>	
        /// <unmanaged>D3D12_INDIRECT_ARGUMENT_DESC_INNER_0_INNER_1 Constant</unmanaged>	
        /// <unmanaged-short>D3D12_INDIRECT_ARGUMENT_DESC_INNER_0_INNER_1 Constant</unmanaged-short>	
        [FieldOffset(4)]
        public SharpDX.Direct3D12.IndirectArgumentDescription.ConstantArgument Constant;
        
        /// <summary>	
        /// <dd> <dl> <dt><strong>RootParameterIndex</strong></dt> <dd> <p> Specifies the root index of the CBV. </p> </dd> </dl> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INDIRECT_ARGUMENT_DESC::ConstantBufferView']/*"/>	
        /// <msdn-id>dn986733</msdn-id>	
        /// <unmanaged>D3D12_INDIRECT_ARGUMENT_DESC_INNER_0_INNER_2 ConstantBufferView</unmanaged>	
        /// <unmanaged-short>D3D12_INDIRECT_ARGUMENT_DESC_INNER_0_INNER_2 ConstantBufferView</unmanaged-short>	
        [FieldOffset(4)]
        public SharpDX.Direct3D12.IndirectArgumentDescription.ConstantBufferArgument ConstantBufferView;
        
        /// <summary>	
        /// <dd> <dl> <dt><strong>RootParameterIndex</strong></dt> <dd> <p> Specifies the root index of the SRV. </p> </dd> </dl> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INDIRECT_ARGUMENT_DESC::ShaderResourceView']/*"/>	
        /// <msdn-id>dn986733</msdn-id>	
        /// <unmanaged>D3D12_INDIRECT_ARGUMENT_DESC_INNER_0_INNER_3 ShaderResourceView</unmanaged>	
        /// <unmanaged-short>D3D12_INDIRECT_ARGUMENT_DESC_INNER_0_INNER_3 ShaderResourceView</unmanaged-short>	
        [FieldOffset(4)]
        public SharpDX.Direct3D12.IndirectArgumentDescription.ShaderResourceViewArgument ShaderResourceView;
        
        /// <summary>	
        /// <dd> <dl> <dt><strong>RootParameterIndex</strong></dt> <dd> <p> Specifies the root index of the UAV. </p> </dd> </dl> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INDIRECT_ARGUMENT_DESC::UnorderedAccessView']/*"/>	
        /// <msdn-id>dn986733</msdn-id>	
        /// <unmanaged>D3D12_INDIRECT_ARGUMENT_DESC_INNER_0_INNER_4 UnorderedAccessView</unmanaged>	
        /// <unmanaged-short>D3D12_INDIRECT_ARGUMENT_DESC_INNER_0_INNER_4 UnorderedAccessView</unmanaged-short>	
        [FieldOffset(4)]
        public SharpDX.Direct3D12.IndirectArgumentDescription.UnorderedAccessViewArgument UnorderedAccessView;
    }
    
    /// <summary>	
    /// <p> Debug message filter; contains a lists of message types to allow or deny.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> For use with an <strong><see cref="SharpDX.Direct3D12.InfoQueue"/></strong> Interface.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INFO_QUEUE_FILTER']/*"/>	
    /// <msdn-id>dn950142</msdn-id>	
    /// <unmanaged>D3D12_INFO_QUEUE_FILTER</unmanaged>	
    /// <unmanaged-short>D3D12_INFO_QUEUE_FILTER</unmanaged-short>	
    public  partial class InfoQueueFilter {	
        
        /// <summary>	
        /// <dd> <p> Specifies types of messages that you want to allow. See <strong><see cref="SharpDX.Direct3D12.InfoQueueFilterDescription"/></strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INFO_QUEUE_FILTER::AllowList']/*"/>	
        /// <msdn-id>dn950142</msdn-id>	
        /// <unmanaged>D3D12_INFO_QUEUE_FILTER_DESC AllowList</unmanaged>	
        /// <unmanaged-short>D3D12_INFO_QUEUE_FILTER_DESC AllowList</unmanaged-short>	
        public SharpDX.Direct3D12.InfoQueueFilterDescription AllowList;
        
        /// <summary>	
        /// <dd> <p> Specifies types of messages that you want to deny. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INFO_QUEUE_FILTER::DenyList']/*"/>	
        /// <msdn-id>dn950142</msdn-id>	
        /// <unmanaged>D3D12_INFO_QUEUE_FILTER_DESC DenyList</unmanaged>	
        /// <unmanaged-short>D3D12_INFO_QUEUE_FILTER_DESC DenyList</unmanaged-short>	
        public SharpDX.Direct3D12.InfoQueueFilterDescription DenyList;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public SharpDX.Direct3D12.InfoQueueFilterDescription.__Native AllowList;
            public SharpDX.Direct3D12.InfoQueueFilterDescription.__Native DenyList;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                this.AllowList.__MarshalFree();
                this.DenyList.__MarshalFree();
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.AllowList = new SharpDX.Direct3D12.InfoQueueFilterDescription();
			this.AllowList.__MarshalFrom(ref @ref.AllowList);
            this.DenyList = new SharpDX.Direct3D12.InfoQueueFilterDescription();
			this.DenyList.__MarshalFrom(ref @ref.DenyList);
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
			@ref.AllowList = new SharpDX.Direct3D12.InfoQueueFilterDescription.__Native();
						
						if (this.AllowList != null) 						
                this.AllowList.__MarshalTo(ref @ref.AllowList);
			@ref.DenyList = new SharpDX.Direct3D12.InfoQueueFilterDescription.__Native();
						
						if (this.DenyList != null) 						
                this.DenyList.__MarshalTo(ref @ref.DenyList);
		
		}
    }
    
    /// <summary>	
    /// <p> Allow or deny certain types of messages to pass through a filter.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> For use with an <strong><see cref="SharpDX.Direct3D12.InfoQueue"/></strong> Interface.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INFO_QUEUE_FILTER_DESC']/*"/>	
    /// <msdn-id>dn950143</msdn-id>	
    /// <unmanaged>D3D12_INFO_QUEUE_FILTER_DESC</unmanaged>	
    /// <unmanaged-short>D3D12_INFO_QUEUE_FILTER_DESC</unmanaged-short>	
    public  partial class InfoQueueFilterDescription {	
        
        /// <summary>	
        /// <dd> <p>Number of message categories to allow or deny. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INFO_QUEUE_FILTER_DESC::NumCategories']/*"/>	
        /// <msdn-id>dn950143</msdn-id>	
        /// <unmanaged>unsigned int NumCategories</unmanaged>	
        /// <unmanaged-short>unsigned int NumCategories</unmanaged-short>	
        internal int CategorieCount;
        
        /// <summary>	
        /// <dd> <p> Array of message categories to allow or deny. Array must have at least <em>NumCategories</em> members (see <strong><see cref="SharpDX.Direct3D12.MessageCategory"/></strong>). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INFO_QUEUE_FILTER_DESC::pCategoryList']/*"/>	
        /// <msdn-id>dn950143</msdn-id>	
        /// <unmanaged>D3D12_MESSAGE_CATEGORY* pCategoryList</unmanaged>	
        /// <unmanaged-short>D3D12_MESSAGE_CATEGORY pCategoryList</unmanaged-short>	
        public System.IntPtr CategoryListPointer;
        
        /// <summary>	
        /// <dd> <p> Number of message severity levels to allow or deny. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INFO_QUEUE_FILTER_DESC::NumSeverities']/*"/>	
        /// <msdn-id>dn950143</msdn-id>	
        /// <unmanaged>unsigned int NumSeverities</unmanaged>	
        /// <unmanaged-short>unsigned int NumSeverities</unmanaged-short>	
        internal int SeveritieCount;
        
        /// <summary>	
        /// <dd> <p> Array of message severity levels to allow or deny. Array must have at least <em>NumSeverities</em> members (see <strong><see cref="SharpDX.Direct3D12.MessageSeverity"/></strong>). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INFO_QUEUE_FILTER_DESC::pSeverityList']/*"/>	
        /// <msdn-id>dn950143</msdn-id>	
        /// <unmanaged>D3D12_MESSAGE_SEVERITY* pSeverityList</unmanaged>	
        /// <unmanaged-short>D3D12_MESSAGE_SEVERITY pSeverityList</unmanaged-short>	
        public System.IntPtr SeverityListPointer;
        
        /// <summary>	
        /// <dd> <p> Number of message IDs to allow or deny. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INFO_QUEUE_FILTER_DESC::NumIDs']/*"/>	
        /// <msdn-id>dn950143</msdn-id>	
        /// <unmanaged>unsigned int NumIDs</unmanaged>	
        /// <unmanaged-short>unsigned int NumIDs</unmanaged-short>	
        internal int IDCount;
        
        /// <summary>	
        /// <dd> <p> Array of message IDs to allow or deny. Array must have at least <em>NumIDs</em> members (see <strong><see cref="SharpDX.Direct3D12.MessageId"/></strong>). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INFO_QUEUE_FILTER_DESC::pIDList']/*"/>	
        /// <msdn-id>dn950143</msdn-id>	
        /// <unmanaged>D3D12_MESSAGE_ID* pIDList</unmanaged>	
        /// <unmanaged-short>D3D12_MESSAGE_ID pIDList</unmanaged-short>	
        public System.IntPtr IDListPointer;
    }
    
    /// <summary>	
    /// <p>A description of a single element for the input-assembler stage.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>An input-layout object contains an array of structures, each structure defines one element being read from an input slot. Create an input-layout  object by calling <strong><see cref="SharpDX.Direct3D11.Device.CreateInputLayout"/></strong>. For an example, see the "Create the Input-Layout Object" subtopic under the  Getting Started with the Input-Assembler Stage topic.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INPUT_ELEMENT_DESC']/*"/>	
    /// <msdn-id>ff476180</msdn-id>	
    /// <unmanaged>D3D12_INPUT_ELEMENT_DESC</unmanaged>	
    /// <unmanaged-short>D3D12_INPUT_ELEMENT_DESC</unmanaged-short>	
    public  partial struct InputElement {	
        
        /// <summary>	
        /// <dd> <p>The HLSL semantic associated with this element in a shader input-signature.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INPUT_ELEMENT_DESC::SemanticName']/*"/>	
        /// <msdn-id>ff476180</msdn-id>	
        /// <unmanaged>const char* SemanticName</unmanaged>	
        /// <unmanaged-short>char SemanticName</unmanaged-short>	
        public string SemanticName;
        
        /// <summary>	
        /// <dd> <p>The semantic index for the element. A semantic index modifies a semantic, with an integer index number. A semantic index is only needed in a  case where there is more than one element with the same semantic. For example, a 4x4 matrix would have four components each with the semantic  name </p>  <pre>matrix</pre>  <p>, however each of the four component would have different semantic indices (0, 1, 2, and 3).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INPUT_ELEMENT_DESC::SemanticIndex']/*"/>	
        /// <msdn-id>ff476180</msdn-id>	
        /// <unmanaged>unsigned int SemanticIndex</unmanaged>	
        /// <unmanaged-short>unsigned int SemanticIndex</unmanaged-short>	
        public int SemanticIndex;
        
        /// <summary>	
        /// <dd> <p>The data type of the element data. See <strong><see cref="SharpDX.DXGI.Format"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INPUT_ELEMENT_DESC::Format']/*"/>	
        /// <msdn-id>ff476180</msdn-id>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        public SharpDX.DXGI.Format Format;
        
        /// <summary>	
        /// <dd> <p>An integer value that identifies the input-assembler (see input slot). Valid values are between 0 and 15, defined in D3D11.h.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INPUT_ELEMENT_DESC::InputSlot']/*"/>	
        /// <msdn-id>ff476180</msdn-id>	
        /// <unmanaged>unsigned int InputSlot</unmanaged>	
        /// <unmanaged-short>unsigned int InputSlot</unmanaged-short>	
        public int Slot;
        
        /// <summary>	
        /// <dd> <p>Optional. Offset (in bytes) between each element. Use D3D11_APPEND_ALIGNED_ELEMENT for convenience to define the current element directly  after the previous one, including any packing if necessary.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INPUT_ELEMENT_DESC::AlignedByteOffset']/*"/>	
        /// <msdn-id>ff476180</msdn-id>	
        /// <unmanaged>unsigned int AlignedByteOffset</unmanaged>	
        /// <unmanaged-short>unsigned int AlignedByteOffset</unmanaged-short>	
        public int AlignedByteOffset;
        
        /// <summary>	
        /// <dd> <p>Identifies the input data class for a single input slot (see <strong><see cref="SharpDX.Direct3D11.InputClassification"/></strong>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INPUT_ELEMENT_DESC::InputSlotClass']/*"/>	
        /// <msdn-id>ff476180</msdn-id>	
        /// <unmanaged>D3D12_INPUT_CLASSIFICATION InputSlotClass</unmanaged>	
        /// <unmanaged-short>D3D12_INPUT_CLASSIFICATION InputSlotClass</unmanaged-short>	
        public SharpDX.Direct3D12.InputClassification Classification;
        
        /// <summary>	
        /// <dd> <p>The number of instances to draw using the same per-instance data before advancing in the buffer by one element. This value must be 0 for an  element that contains per-vertex data (the slot class is set to <see cref="SharpDX.Direct3D11.InputClassification.PerVertexData"/>).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INPUT_ELEMENT_DESC::InstanceDataStepRate']/*"/>	
        /// <msdn-id>ff476180</msdn-id>	
        /// <unmanaged>unsigned int InstanceDataStepRate</unmanaged>	
        /// <unmanaged-short>unsigned int InstanceDataStepRate</unmanaged-short>	
        public int InstanceDataStepRate;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public System.IntPtr SemanticName;
            public int SemanticIndex;
            public SharpDX.DXGI.Format Format;
            public int Slot;
            public int AlignedByteOffset;
            public SharpDX.Direct3D12.InputClassification Classification;
            public int InstanceDataStepRate;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                if (this.SemanticName != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.SemanticName);		
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.SemanticName = ( @ref.SemanticName == IntPtr.Zero )?null:Marshal.PtrToStringAnsi(@ref.SemanticName);
            this.SemanticIndex = @ref.SemanticIndex;
            this.Format = @ref.Format;
            this.Slot = @ref.Slot;
            this.AlignedByteOffset = @ref.AlignedByteOffset;
            this.Classification = @ref.Classification;
            this.InstanceDataStepRate = @ref.InstanceDataStepRate;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.SemanticName = ( this.SemanticName == null )?IntPtr.Zero : Utilities.StringToHGlobalAnsi(this.SemanticName);
            @ref.SemanticIndex = this.SemanticIndex;
            @ref.Format = this.Format;
            @ref.Slot = this.Slot;
            @ref.AlignedByteOffset = this.AlignedByteOffset;
            @ref.Classification = this.Classification;
            @ref.InstanceDataStepRate = this.InstanceDataStepRate;
		
		}
    }
    
    /// <summary>	
    /// <p>Describes the input-buffer data for the input-assembler stage.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> This structure is a member of the <strong><see cref="SharpDX.Direct3D12.GraphicsPipelineStateDescription"/></strong> structure.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INPUT_LAYOUT_DESC']/*"/>	
    /// <msdn-id>dn770378</msdn-id>	
    /// <unmanaged>D3D12_INPUT_LAYOUT_DESC</unmanaged>	
    /// <unmanaged-short>D3D12_INPUT_LAYOUT_DESC</unmanaged-short>	
    public  partial class InputLayoutDescription {	
        
        /// <summary>	
        /// <dd> <p> An array of <strong><see cref="SharpDX.Direct3D12.InputElement"/></strong> structures that describe the data types of the input-assembler stage. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INPUT_LAYOUT_DESC::pInputElementDescs']/*"/>	
        /// <msdn-id>dn770378</msdn-id>	
        /// <unmanaged>const D3D12_INPUT_ELEMENT_DESC* pInputElementDescs</unmanaged>	
        /// <unmanaged-short>D3D12_INPUT_ELEMENT_DESC pInputElementDescs</unmanaged-short>	
        private System.IntPtr InputElementsPointer;
        
        /// <summary>	
        /// <dd> <p> The number of input-data types in the array of input elements that the <strong>pInputElementDescs</strong> member points to. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_INPUT_LAYOUT_DESC::NumElements']/*"/>	
        /// <msdn-id>dn770378</msdn-id>	
        /// <unmanaged>unsigned int NumElements</unmanaged>	
        /// <unmanaged-short>unsigned int NumElements</unmanaged-short>	
        private int ElementCount;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public System.IntPtr InputElementsPointer;
            public int ElementCount;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.InputElementsPointer = @ref.InputElementsPointer;
            this.ElementCount = @ref.ElementCount;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.InputElementsPointer = this.InputElementsPointer;
            @ref.ElementCount = this.ElementCount;
		
		}
    }
    
    /// <summary>	
    /// <p> A debug message in the Information Queue.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> This structure is returned from <strong><see cref="SharpDX.Direct3D12.InfoQueue.GetMessage"/></strong> as part of the Information Queue feature (see <strong><see cref="SharpDX.Direct3D12.InfoQueue"/></strong>). </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_MESSAGE']/*"/>	
    /// <msdn-id>dn950144</msdn-id>	
    /// <unmanaged>D3D12_MESSAGE</unmanaged>	
    /// <unmanaged-short>D3D12_MESSAGE</unmanaged-short>	
    public  partial struct Message {	
        
        /// <summary>	
        /// <dd> <p> The category of the message. See <strong><see cref="SharpDX.Direct3D12.MessageCategory"/></strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_MESSAGE::Category']/*"/>	
        /// <msdn-id>dn950144</msdn-id>	
        /// <unmanaged>D3D12_MESSAGE_CATEGORY Category</unmanaged>	
        /// <unmanaged-short>D3D12_MESSAGE_CATEGORY Category</unmanaged-short>	
        public SharpDX.Direct3D12.MessageCategory Category;
        
        /// <summary>	
        /// <dd> <p> The severity of the message. See  <strong><see cref="SharpDX.Direct3D12.MessageSeverity"/></strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_MESSAGE::Severity']/*"/>	
        /// <msdn-id>dn950144</msdn-id>	
        /// <unmanaged>D3D12_MESSAGE_SEVERITY Severity</unmanaged>	
        /// <unmanaged-short>D3D12_MESSAGE_SEVERITY Severity</unmanaged-short>	
        public SharpDX.Direct3D12.MessageSeverity Severity;
        
        /// <summary>	
        /// <dd> <p> The ID of the message. See <strong><see cref="SharpDX.Direct3D12.MessageId"/></strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_MESSAGE::ID']/*"/>	
        /// <msdn-id>dn950144</msdn-id>	
        /// <unmanaged>D3D12_MESSAGE_ID ID</unmanaged>	
        /// <unmanaged-short>D3D12_MESSAGE_ID ID</unmanaged-short>	
        public SharpDX.Direct3D12.MessageId Id;
        
        /// <summary>	
        /// <dd> <p> The message string. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_MESSAGE::pDescription']/*"/>	
        /// <msdn-id>dn950144</msdn-id>	
        /// <unmanaged>const char* pDescription</unmanaged>	
        /// <unmanaged-short>char pDescription</unmanaged-short>	
        public string Description;
        
        /// <summary>	
        /// <dd> <p> The length of <em>pDescription</em>, in bytes. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_MESSAGE::DescriptionByteLength']/*"/>	
        /// <msdn-id>dn950144</msdn-id>	
        /// <unmanaged>SIZE_T DescriptionByteLength</unmanaged>	
        /// <unmanaged-short>SIZE_T DescriptionByteLength</unmanaged-short>	
        internal SharpDX.PointerSize DescriptionByteLength;
    }
    
    /// <summary>	
    /// <p> Describes the tile structure of a tiled resource with mipmaps. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> This structure is used by the <strong>GetResourceTiling</strong> method. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_PACKED_MIP_INFO']/*"/>	
    /// <msdn-id>dn986736</msdn-id>	
    /// <unmanaged>D3D12_PACKED_MIP_INFO</unmanaged>	
    /// <unmanaged-short>D3D12_PACKED_MIP_INFO</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct PackedMipInformation {	
        
        /// <summary>	
        /// <dd> <p> The number of standard mipmaps in the tiled resource. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_PACKED_MIP_INFO::NumStandardMips']/*"/>	
        /// <msdn-id>dn986736</msdn-id>	
        /// <unmanaged>unsigned char NumStandardMips</unmanaged>	
        /// <unmanaged-short>unsigned char NumStandardMips</unmanaged-short>	
        public byte StandardMipCount;
        
        /// <summary>	
        /// <dd> <p> The number of packed mipmaps in the tiled resource. </p> <p> This number starts from the least detailed mipmap (either sharing tiles or using non standard tile layout). This number is 0 if no such packing is in the resource. For array surfaces, this value is the number of mipmaps that are packed for a given array slice where each array slice repeats the same packing. </p> <p> On Tier_2 tiled resources hardware, mipmaps that fill at least one standard shaped tile in all dimensions are not allowed to be included in the set of packed mipmaps. On Tier_1 hardware, mipmaps that are an integer multiple of one standard shaped tile in all dimensions are not allowed to be included in the set of packed mipmaps. Mipmaps with at least one dimension less than the standard tile shape may or may not be packed. When a given mipmap needs to be packed, all coarser mipmaps for a given array slice are considered packed as well. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_PACKED_MIP_INFO::NumPackedMips']/*"/>	
        /// <msdn-id>dn986736</msdn-id>	
        /// <unmanaged>unsigned char NumPackedMips</unmanaged>	
        /// <unmanaged-short>unsigned char NumPackedMips</unmanaged-short>	
        public byte PackedMipCount;
        
        /// <summary>	
        /// <dd> <p> The number of tiles for the packed mipmaps in the tiled resource. </p> <p> If there is no packing, this value is meaningless and is set to 0. Otherwise, it is set to the number of tiles that are needed to represent the set of packed mipmaps. The pixel layout within the packed mipmaps is hardware specific. If apps define only partial mappings for the set of tiles in packed mipmaps, read and write behavior is vendor specific and undefined. For arrays, this value is only the count of packed mipmaps within the subresources for each array slice. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_PACKED_MIP_INFO::NumTilesForPackedMips']/*"/>	
        /// <msdn-id>dn986736</msdn-id>	
        /// <unmanaged>unsigned int NumTilesForPackedMips</unmanaged>	
        /// <unmanaged-short>unsigned int NumTilesForPackedMips</unmanaged-short>	
        public int TilesForPackedMipCount;
        
        /// <summary>	
        /// <dd> <p> The offset of the first packed tile for the resource in the overall range of tiles. If <strong>NumPackedMips</strong> is 0, this value is meaningless and is 0. Otherwise, it is the offset of the first packed tile for the resource in the overall range of tiles for the resource. A value of 0 for <strong>StartTileIndexInOverallResource</strong> means the entire resource is packed. For array surfaces, this is the offset for the tiles that contain the packed mipmaps for the first array slice. Packed mipmaps for each array slice in arrayed surfaces are at this offset past the beginning of the tiles for each array slice. </p> <strong>Note</strong>?? The number of overall tiles, packed or not, for a given array slice is simply the total number of tiles for the resource divided by the resource's array size,  so it is easy to locate the range of tiles for any given array slice, out of which <strong>StartTileIndexInOverallResource</strong> identifies which of those are packed.  ? </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_PACKED_MIP_INFO::StartTileIndexInOverallResource']/*"/>	
        /// <msdn-id>dn986736</msdn-id>	
        /// <unmanaged>unsigned int StartTileIndexInOverallResource</unmanaged>	
        /// <unmanaged-short>unsigned int StartTileIndexInOverallResource</unmanaged-short>	
        public int StartTileIndexInOverallResource;
    }
    
    /// <summary>	
    /// <p> Describes the footprint of a placed subresource, including the offset and the <see cref="SharpDX.Direct3D12.SubResourceFootprint"/>. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> This structure is used in the <strong><see cref="SharpDX.Direct3D12.TextureCopyLocation"/></strong> structure, and by <strong><see cref="SharpDX.Direct3D12.Device.GetCopyableFootprints"/></strong>. </p><p> Height times depth times row-pitch plus offset must fit within the bounds of the parent resource. </p><p> This structure is used by the <strong><see cref="SharpDX.Direct3D12.Device.GetCopyableFootprints"/></strong> method  and a number of helper functions, refer to Helper Structures and Functions for D3D12.</p><p> When copying textures, use this structure along with <strong><see cref="SharpDX.Direct3D12.TextureCopyLocation"/></strong>. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_PLACED_SUBRESOURCE_FOOTPRINT']/*"/>	
    /// <msdn-id>dn986738</msdn-id>	
    /// <unmanaged>D3D12_PLACED_SUBRESOURCE_FOOTPRINT</unmanaged>	
    /// <unmanaged-short>D3D12_PLACED_SUBRESOURCE_FOOTPRINT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct PlacedSubResourceFootprint {	
        
        /// <summary>	
        /// <dd> <p> The offset of the subresource within the parent resource, in bytes. The offset between the start of the parent resource and this subresource. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_PLACED_SUBRESOURCE_FOOTPRINT::Offset']/*"/>	
        /// <msdn-id>dn986738</msdn-id>	
        /// <unmanaged>unsigned longlong Offset</unmanaged>	
        /// <unmanaged-short>unsigned longlong Offset</unmanaged-short>	
        public long Offset;
        
        /// <summary>	
        /// <dd> <p> The format, width, height, depth, and row-pitch of the subresource, as a <strong><see cref="SharpDX.Direct3D12.SubResourceFootprint"/></strong> structure. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_PLACED_SUBRESOURCE_FOOTPRINT::Footprint']/*"/>	
        /// <msdn-id>dn986738</msdn-id>	
        /// <unmanaged>D3D12_SUBRESOURCE_FOOTPRINT Footprint</unmanaged>	
        /// <unmanaged-short>D3D12_SUBRESOURCE_FOOTPRINT Footprint</unmanaged-short>	
        public SharpDX.Direct3D12.SubResourceFootprint Footprint;
    }
    
    /// <summary>	
    /// <p>Query information about graphics-pipeline activity in between calls to <strong>BeginQuery</strong> and <strong>EndQuery</strong>.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Use this structure with <strong><see cref="SharpDX.Direct3D12.QueryHeapType"/></strong> and <strong>CreateQueryHeap</strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_QUERY_DATA_PIPELINE_STATISTICS']/*"/>	
    /// <msdn-id>dn903808</msdn-id>	
    /// <unmanaged>D3D12_QUERY_DATA_PIPELINE_STATISTICS</unmanaged>	
    /// <unmanaged-short>D3D12_QUERY_DATA_PIPELINE_STATISTICS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct QueryDataPipelineStatistics {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_QUERY_DATA_PIPELINE_STATISTICS::IAVertices']/*"/>	
        /// <msdn-id>dn903808</msdn-id>	
        /// <unmanaged>unsigned longlong IAVertices</unmanaged>	
        /// <unmanaged-short>unsigned longlong IAVertices</unmanaged-short>	
        public long IAVerticeCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_QUERY_DATA_PIPELINE_STATISTICS::IAPrimitives']/*"/>	
        /// <msdn-id>dn903808</msdn-id>	
        /// <unmanaged>unsigned longlong IAPrimitives</unmanaged>	
        /// <unmanaged-short>unsigned longlong IAPrimitives</unmanaged-short>	
        public long IAPrimitiveCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_QUERY_DATA_PIPELINE_STATISTICS::VSInvocations']/*"/>	
        /// <msdn-id>dn903808</msdn-id>	
        /// <unmanaged>unsigned longlong VSInvocations</unmanaged>	
        /// <unmanaged-short>unsigned longlong VSInvocations</unmanaged-short>	
        public long VSInvocationCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_QUERY_DATA_PIPELINE_STATISTICS::GSInvocations']/*"/>	
        /// <msdn-id>dn903808</msdn-id>	
        /// <unmanaged>unsigned longlong GSInvocations</unmanaged>	
        /// <unmanaged-short>unsigned longlong GSInvocations</unmanaged-short>	
        public long GSInvocationCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_QUERY_DATA_PIPELINE_STATISTICS::GSPrimitives']/*"/>	
        /// <msdn-id>dn903808</msdn-id>	
        /// <unmanaged>unsigned longlong GSPrimitives</unmanaged>	
        /// <unmanaged-short>unsigned longlong GSPrimitives</unmanaged-short>	
        public long GSPrimitiveCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_QUERY_DATA_PIPELINE_STATISTICS::CInvocations']/*"/>	
        /// <msdn-id>dn903808</msdn-id>	
        /// <unmanaged>unsigned longlong CInvocations</unmanaged>	
        /// <unmanaged-short>unsigned longlong CInvocations</unmanaged-short>	
        public long CInvocationCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_QUERY_DATA_PIPELINE_STATISTICS::CPrimitives']/*"/>	
        /// <msdn-id>dn903808</msdn-id>	
        /// <unmanaged>unsigned longlong CPrimitives</unmanaged>	
        /// <unmanaged-short>unsigned longlong CPrimitives</unmanaged-short>	
        public long CPrimitiveCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_QUERY_DATA_PIPELINE_STATISTICS::PSInvocations']/*"/>	
        /// <msdn-id>dn903808</msdn-id>	
        /// <unmanaged>unsigned longlong PSInvocations</unmanaged>	
        /// <unmanaged-short>unsigned longlong PSInvocations</unmanaged-short>	
        public long PSInvocationCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_QUERY_DATA_PIPELINE_STATISTICS::HSInvocations']/*"/>	
        /// <msdn-id>dn903808</msdn-id>	
        /// <unmanaged>unsigned longlong HSInvocations</unmanaged>	
        /// <unmanaged-short>unsigned longlong HSInvocations</unmanaged-short>	
        public long HSInvocationCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_QUERY_DATA_PIPELINE_STATISTICS::DSInvocations']/*"/>	
        /// <msdn-id>dn903808</msdn-id>	
        /// <unmanaged>unsigned longlong DSInvocations</unmanaged>	
        /// <unmanaged-short>unsigned longlong DSInvocations</unmanaged-short>	
        public long DSInvocationCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_QUERY_DATA_PIPELINE_STATISTICS::CSInvocations']/*"/>	
        /// <msdn-id>dn903808</msdn-id>	
        /// <unmanaged>unsigned longlong CSInvocations</unmanaged>	
        /// <unmanaged-short>unsigned longlong CSInvocations</unmanaged-short>	
        public long CSInvocationCount;
    }
    
    /// <summary>	
    /// <p> Describes the purpose of a query heap.  A query heap contains an array of individual queries. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> Use this structure with <strong>CreateQueryHeap</strong>. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_QUERY_HEAP_DESC']/*"/>	
    /// <msdn-id>dn903810</msdn-id>	
    /// <unmanaged>D3D12_QUERY_HEAP_DESC</unmanaged>	
    /// <unmanaged-short>D3D12_QUERY_HEAP_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct QueryHeapDescription {	
        
        /// <summary>	
        /// <dd> <p> Specifies one member of <strong><see cref="SharpDX.Direct3D12.QueryHeapType"/></strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_QUERY_HEAP_DESC::Type']/*"/>	
        /// <msdn-id>dn903810</msdn-id>	
        /// <unmanaged>D3D12_QUERY_HEAP_TYPE Type</unmanaged>	
        /// <unmanaged-short>D3D12_QUERY_HEAP_TYPE Type</unmanaged-short>	
        public SharpDX.Direct3D12.QueryHeapType Type;
        
        /// <summary>	
        /// <dd> <p> Specifies the number of queries the heap should contain. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_QUERY_HEAP_DESC::Count']/*"/>	
        /// <msdn-id>dn903810</msdn-id>	
        /// <unmanaged>unsigned int Count</unmanaged>	
        /// <unmanaged-short>unsigned int Count</unmanaged-short>	
        public int Count;
        
        /// <summary>	
        /// <dd> <p> For single GPU operation, set this to zero. If there are multiple GPU nodes, set a bit to identify the node (the  device's physical adapter) to which the query heap applies. Each bit in the mask corresponds to a single node. Only 1 bit must be set. Refer to Multi-Adapter.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_QUERY_HEAP_DESC::NodeMask']/*"/>	
        /// <msdn-id>dn903810</msdn-id>	
        /// <unmanaged>unsigned int NodeMask</unmanaged>	
        /// <unmanaged-short>unsigned int NodeMask</unmanaged-short>	
        public int NodeMask;
    }
    
    /// <summary>	
    /// <p>Describes a memory range.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p><strong>End</strong> is one-past-the-end. When <strong>Begin</strong> equals <strong>End</strong>, the range is empty. The size of the range is (<strong>End</strong> - <strong>Begin</strong>). </p><p> This structure is used by the <strong>Map</strong> and <strong>Unmap</strong> methods. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RANGE']/*"/>	
    /// <msdn-id>dn770386</msdn-id>	
    /// <unmanaged>D3D12_RANGE</unmanaged>	
    /// <unmanaged-short>D3D12_RANGE</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct Range {	
        
        /// <summary>	
        /// <dd> <p> The offset, in bytes, denoting the beginning of a memory range. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RANGE::Begin']/*"/>	
        /// <msdn-id>dn770386</msdn-id>	
        /// <unmanaged>SIZE_T Begin</unmanaged>	
        /// <unmanaged-short>SIZE_T Begin</unmanaged-short>	
        public SharpDX.PointerSize Begin;
        
        /// <summary>	
        /// <dd> <p> The offset, in bytes, denoting the end of a memory range. <strong>End</strong> is one-past-the-end. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RANGE::End']/*"/>	
        /// <msdn-id>dn770386</msdn-id>	
        /// <unmanaged>SIZE_T End</unmanaged>	
        /// <unmanaged-short>SIZE_T End</unmanaged-short>	
        public SharpDX.PointerSize End;
    }
    
    /// <summary>	
    /// <p>Describes rasterizer state.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> A <strong><see cref="SharpDX.Direct3D12.GraphicsPipelineStateDescription"/></strong> contains a rasterizer-state structure. </p><p> Rasterizer state defines the behavior of the rasterizer stage. </p><p> If you do not specify some rasterizer state,  the Direct3D runtime uses the following default values for rasterizer state. </p><table> <tr><th>State</th><th>Default Value</th></tr> <tr><td><strong>FillMode</strong></td><td><see cref="SharpDX.Direct3D12.FillMode.Solid"/></td></tr> <tr><td><strong>CullMode</strong></td><td><see cref="SharpDX.Direct3D12.CullMode.Back"/></td></tr> <tr><td><strong>FrontCounterClockwise</strong></td><td><strong><see cref="SharpDX.Result.False"/></strong></td></tr> <tr><td><strong>DepthBias</strong></td><td>0</td></tr> <tr><td><strong>DepthBiasClamp</strong></td><td>0.0f</td></tr> <tr><td><strong>SlopeScaledDepthBias</strong></td><td>0.0f</td></tr> <tr><td><strong>DepthClipEnable</strong></td><td><strong>TRUE</strong></td></tr> <tr><td><strong>MultisampleEnable</strong></td><td><strong><see cref="SharpDX.Result.False"/></strong></td></tr> <tr><td><strong>AntialiasedLineEnable</strong></td><td><strong><see cref="SharpDX.Result.False"/></strong></td></tr> <tr><td><strong>ForcedSampleCount</strong></td><td>0</td></tr> <tr><td><strong>ConservativeRaster</strong></td><td><strong><see cref="SharpDX.Direct3D12.ConservativeRasterizationMode.Off"/></strong></td></tr> </table><p>?</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RASTERIZER_DESC']/*"/>	
    /// <msdn-id>dn770387</msdn-id>	
    /// <unmanaged>D3D12_RASTERIZER_DESC</unmanaged>	
    /// <unmanaged-short>D3D12_RASTERIZER_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct RasterizerStateDescription {	
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.FillMode"/></strong>-typed value that specifies the fill mode to use when rendering. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RASTERIZER_DESC::FillMode']/*"/>	
        /// <msdn-id>dn770387</msdn-id>	
        /// <unmanaged>D3D12_FILL_MODE FillMode</unmanaged>	
        /// <unmanaged-short>D3D12_FILL_MODE FillMode</unmanaged-short>	
        public SharpDX.Direct3D12.FillMode FillMode;
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.CullMode"/></strong>-typed value that specifies that triangles facing the specified direction are not drawn. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RASTERIZER_DESC::CullMode']/*"/>	
        /// <msdn-id>dn770387</msdn-id>	
        /// <unmanaged>D3D12_CULL_MODE CullMode</unmanaged>	
        /// <unmanaged-short>D3D12_CULL_MODE CullMode</unmanaged-short>	
        public SharpDX.Direct3D12.CullMode CullMode;
        
        /// <summary>	
        /// <dd> <p> Determines if a triangle is front- or back-facing. If this member is <strong>TRUE</strong>, a triangle will be considered front-facing if its vertices are counter-clockwise on the render target and considered back-facing if they are clockwise. If this parameter is <strong><see cref="SharpDX.Result.False"/></strong>, the opposite is true. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RASTERIZER_DESC::FrontCounterClockwise']/*"/>	
        /// <msdn-id>dn770387</msdn-id>	
        /// <unmanaged>BOOL FrontCounterClockwise</unmanaged>	
        /// <unmanaged-short>BOOL FrontCounterClockwise</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IsFrontCounterClockwise;
        
        /// <summary>	
        /// <dd> <p> Depth value added to a given pixel. For info about depth bias, see Depth Bias. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RASTERIZER_DESC::DepthBias']/*"/>	
        /// <msdn-id>dn770387</msdn-id>	
        /// <unmanaged>int DepthBias</unmanaged>	
        /// <unmanaged-short>int DepthBias</unmanaged-short>	
        public int DepthBias;
        
        /// <summary>	
        /// <dd> <p> Maximum depth bias of a pixel. For info about depth bias, see Depth Bias. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RASTERIZER_DESC::DepthBiasClamp']/*"/>	
        /// <msdn-id>dn770387</msdn-id>	
        /// <unmanaged>float DepthBiasClamp</unmanaged>	
        /// <unmanaged-short>float DepthBiasClamp</unmanaged-short>	
        public float DepthBiasClamp;
        
        /// <summary>	
        /// <dd> <p> Scalar on a given pixel's slope. For info about depth bias, see Depth Bias. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RASTERIZER_DESC::SlopeScaledDepthBias']/*"/>	
        /// <msdn-id>dn770387</msdn-id>	
        /// <unmanaged>float SlopeScaledDepthBias</unmanaged>	
        /// <unmanaged-short>float SlopeScaledDepthBias</unmanaged-short>	
        public float SlopeScaledDepthBias;
        
        /// <summary>	
        /// <dd> <p> Specifies whether to enable clipping based on distance. </p> <p> The hardware always performs x and y clipping of rasterized coordinates. When <strong>DepthClipEnable</strong> is set to the default?<strong>TRUE</strong>, the hardware also clips the z value (that is, the hardware performs the last step of the following algorithm). </p> <code> 0 &lt; w	
        /// -w &lt;= x &lt;= w (or arbitrarily wider range if implementation uses a guard band to reduce clipping burden)	
        /// -w &lt;= y &lt;= w (or arbitrarily wider range if implementation uses a guard band to reduce clipping burden)	
        /// 0 &lt;= z &lt;= w	
        /// </code> <p> When you set <strong>DepthClipEnable</strong> to <strong><see cref="SharpDX.Result.False"/></strong>, the hardware skips the z clipping (that is, the last step in the preceding algorithm). However, the hardware still performs the "0 &lt; w" clipping. When z clipping is disabled, improper depth ordering at the pixel level might result. However, when z clipping is disabled, stencil shadow implementations are simplified. In other words, you can avoid complex special-case handling for geometry that goes beyond the back clipping plane. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RASTERIZER_DESC::DepthClipEnable']/*"/>	
        /// <msdn-id>dn770387</msdn-id>	
        /// <unmanaged>BOOL DepthClipEnable</unmanaged>	
        /// <unmanaged-short>BOOL DepthClipEnable</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IsDepthClipEnabled;
        
        /// <summary>	
        /// <dd> <p> Specifies whether to use the quadrilateral or alpha line anti-aliasing algorithm on multisample antialiasing (MSAA) render targets. Set to <strong>TRUE</strong> to use the quadrilateral line anti-aliasing algorithm and to <strong><see cref="SharpDX.Result.False"/></strong> to use the alpha line anti-aliasing algorithm. For more info about this member, see Remarks. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RASTERIZER_DESC::MultisampleEnable']/*"/>	
        /// <msdn-id>dn770387</msdn-id>	
        /// <unmanaged>BOOL MultisampleEnable</unmanaged>	
        /// <unmanaged-short>BOOL MultisampleEnable</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IsMultisampleEnabled;
        
        /// <summary>	
        /// <dd> <p> Specifies whether to enable line antialiasing; only applies if doing line drawing and <strong>MultisampleEnable</strong> is <strong><see cref="SharpDX.Result.False"/></strong>. For more info about this member, see Remarks. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RASTERIZER_DESC::AntialiasedLineEnable']/*"/>	
        /// <msdn-id>dn770387</msdn-id>	
        /// <unmanaged>BOOL AntialiasedLineEnable</unmanaged>	
        /// <unmanaged-short>BOOL AntialiasedLineEnable</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IsAntialiasedLineEnabled;
        
        /// <summary>	
        /// <dd> <p> The sample count that is forced while UAV rendering or rasterizing. Valid values are 0, 1, 2, 4, 8, and optionally 16. 0 indicates that the sample count is not forced. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RASTERIZER_DESC::ForcedSampleCount']/*"/>	
        /// <msdn-id>dn770387</msdn-id>	
        /// <unmanaged>unsigned int ForcedSampleCount</unmanaged>	
        /// <unmanaged-short>unsigned int ForcedSampleCount</unmanaged-short>	
        public int ForcedSampleCount;
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.ConservativeRasterizationMode"/></strong>-typed value that identifies whether conservative rasterization is on or off. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RASTERIZER_DESC::ConservativeRaster']/*"/>	
        /// <msdn-id>dn770387</msdn-id>	
        /// <unmanaged>D3D12_CONSERVATIVE_RASTERIZATION_MODE ConservativeRaster</unmanaged>	
        /// <unmanaged-short>D3D12_CONSERVATIVE_RASTERIZATION_MODE ConservativeRaster</unmanaged-short>	
        public SharpDX.Direct3D12.ConservativeRasterizationMode ConservativeRaster;
    }
    
    /// <summary>	
    /// <p>Describes the blend state for a render target.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>You specify an array of <strong><see cref="SharpDX.Direct3D12.RenderTargetBlendDescription"/></strong> structures in the <strong>RenderTarget</strong> member of the <strong><see cref="SharpDX.Direct3D12.BlendStateDescription"/></strong> structure to describe the blend states for render targets; you can bind up to eight render targets to the output-merger stage at one time.</p><p>For info about how blending is done, see the output-merger stage.</p><p>Here are the default values for blend state.</p><table> <tr><th>State</th><th>Default Value</th></tr> <tr><td>BlendEnable</td><td><see cref="SharpDX.Result.False"/></td></tr> <tr><td>LogicOpEnable</td><td><see cref="SharpDX.Result.False"/></td></tr> <tr><td>SrcBlend</td><td><see cref="SharpDX.Direct3D12.BlendOption.One"/></td></tr> <tr><td>DestBlend</td><td><see cref="SharpDX.Direct3D12.BlendOption.Zero"/></td></tr> <tr><td>BlendOp</td><td><see cref="SharpDX.Direct3D12.BlendOperation.Add"/></td></tr> <tr><td>SrcBlendAlpha</td><td><see cref="SharpDX.Direct3D12.BlendOption.One"/></td></tr> <tr><td>DestBlendAlpha</td><td><see cref="SharpDX.Direct3D12.BlendOption.Zero"/></td></tr> <tr><td>BlendOpAlpha</td><td><see cref="SharpDX.Direct3D12.BlendOperation.Add"/></td></tr> <tr><td>LogicOp</td><td><see cref="SharpDX.Direct3D12.LogicOperation.Noop"/></td></tr> <tr><td>RenderTargetWriteMask</td><td><see cref="SharpDX.Direct3D12.ColorWriteMaskFlags.All"/></td></tr> </table><p>?</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RENDER_TARGET_BLEND_DESC']/*"/>	
    /// <msdn-id>dn770388</msdn-id>	
    /// <unmanaged>D3D12_RENDER_TARGET_BLEND_DESC</unmanaged>	
    /// <unmanaged-short>D3D12_RENDER_TARGET_BLEND_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct RenderTargetBlendDescription {	
        
        /// <summary>	
        /// <dd> <p>Specifies whether to enable (or disable) blending. Set to <strong>TRUE</strong> to enable blending.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RENDER_TARGET_BLEND_DESC::BlendEnable']/*"/>	
        /// <msdn-id>dn770388</msdn-id>	
        /// <unmanaged>BOOL BlendEnable</unmanaged>	
        /// <unmanaged-short>BOOL BlendEnable</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool IsBlendEnabled;
        
        /// <summary>	
        /// <dd> <p>Specifies whether to enable (or disable) a logical operation. Set to <strong>TRUE</strong> to enable a logical operation.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RENDER_TARGET_BLEND_DESC::LogicOpEnable']/*"/>	
        /// <msdn-id>dn770388</msdn-id>	
        /// <unmanaged>BOOL LogicOpEnable</unmanaged>	
        /// <unmanaged-short>BOOL LogicOpEnable</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool LogicOpEnable;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D12.BlendOption"/></strong>-typed value that specifies the operation to perform on the RGB value that the pixel shader outputs. The <strong>BlendOp</strong> member defines how to combine the <strong>SrcBlend</strong> and <strong>DestBlend</strong> operations.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RENDER_TARGET_BLEND_DESC::SrcBlend']/*"/>	
        /// <msdn-id>dn770388</msdn-id>	
        /// <unmanaged>D3D12_BLEND SrcBlend</unmanaged>	
        /// <unmanaged-short>D3D12_BLEND SrcBlend</unmanaged-short>	
        public SharpDX.Direct3D12.BlendOption SourceBlend;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D12.BlendOption"/></strong>-typed value that specifies the operation to perform on the current RGB value in the render target. The <strong>BlendOp</strong> member defines how to combine the <strong>SrcBlend</strong> and <strong>DestBlend</strong> operations.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RENDER_TARGET_BLEND_DESC::DestBlend']/*"/>	
        /// <msdn-id>dn770388</msdn-id>	
        /// <unmanaged>D3D12_BLEND DestBlend</unmanaged>	
        /// <unmanaged-short>D3D12_BLEND DestBlend</unmanaged-short>	
        public SharpDX.Direct3D12.BlendOption DestinationBlend;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D12.BlendOperation"/></strong>-typed value that defines how to combine the <strong>SrcBlend</strong> and <strong>DestBlend</strong> operations.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RENDER_TARGET_BLEND_DESC::BlendOp']/*"/>	
        /// <msdn-id>dn770388</msdn-id>	
        /// <unmanaged>D3D12_BLEND_OP BlendOp</unmanaged>	
        /// <unmanaged-short>D3D12_BLEND_OP BlendOp</unmanaged-short>	
        public SharpDX.Direct3D12.BlendOperation BlendOperation;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D12.BlendOption"/></strong>-typed value that specifies the operation to perform on the alpha value that the pixel shader outputs. Blend options that end in _COLOR are not allowed. The <strong>BlendOpAlpha</strong> member defines how to combine the <strong>SrcBlendAlpha</strong> and <strong>DestBlendAlpha</strong> operations.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RENDER_TARGET_BLEND_DESC::SrcBlendAlpha']/*"/>	
        /// <msdn-id>dn770388</msdn-id>	
        /// <unmanaged>D3D12_BLEND SrcBlendAlpha</unmanaged>	
        /// <unmanaged-short>D3D12_BLEND SrcBlendAlpha</unmanaged-short>	
        public SharpDX.Direct3D12.BlendOption SourceAlphaBlend;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D12.BlendOption"/></strong>-typed value that specifies the operation to perform on the current alpha value in the render target. Blend options that end in _COLOR are not allowed. The <strong>BlendOpAlpha</strong> member defines how to combine the <strong>SrcBlendAlpha</strong> and <strong>DestBlendAlpha</strong> operations.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RENDER_TARGET_BLEND_DESC::DestBlendAlpha']/*"/>	
        /// <msdn-id>dn770388</msdn-id>	
        /// <unmanaged>D3D12_BLEND DestBlendAlpha</unmanaged>	
        /// <unmanaged-short>D3D12_BLEND DestBlendAlpha</unmanaged-short>	
        public SharpDX.Direct3D12.BlendOption DestinationAlphaBlend;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D12.BlendOperation"/></strong>-typed value that defines how to combine the <strong>SrcBlendAlpha</strong> and <strong>DestBlendAlpha</strong> operations.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RENDER_TARGET_BLEND_DESC::BlendOpAlpha']/*"/>	
        /// <msdn-id>dn770388</msdn-id>	
        /// <unmanaged>D3D12_BLEND_OP BlendOpAlpha</unmanaged>	
        /// <unmanaged-short>D3D12_BLEND_OP BlendOpAlpha</unmanaged-short>	
        public SharpDX.Direct3D12.BlendOperation AlphaBlendOperation;
        
        /// <summary>	
        /// <dd> <p>A  <strong><see cref="SharpDX.Direct3D12.LogicOperation"/></strong>-typed value that specifies the logical operation to configure for the render target.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RENDER_TARGET_BLEND_DESC::LogicOp']/*"/>	
        /// <msdn-id>dn770388</msdn-id>	
        /// <unmanaged>D3D12_LOGIC_OP LogicOp</unmanaged>	
        /// <unmanaged-short>D3D12_LOGIC_OP LogicOp</unmanaged-short>	
        public SharpDX.Direct3D12.LogicOperation LogicOp;
        
        /// <summary>	
        /// <dd> <p>A combination of <strong><see cref="SharpDX.Direct3D12.ColorWriteMaskFlags"/></strong>-typed values that are combined by using a bitwise OR operation. The resulting value specifies a write mask.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RENDER_TARGET_BLEND_DESC::RenderTargetWriteMask']/*"/>	
        /// <msdn-id>dn770388</msdn-id>	
        /// <unmanaged>D3D12_COLOR_WRITE_ENABLE RenderTargetWriteMask</unmanaged>	
        /// <unmanaged-short>D3D12_COLOR_WRITE_ENABLE RenderTargetWriteMask</unmanaged-short>	
        public SharpDX.Direct3D12.ColorWriteMaskFlags RenderTargetWriteMask;
    }
    
    /// <summary>	
    /// <p>Describes the subresources from a resource that are accessible by using a render-target view.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Pass a render-target-view description into <strong><see cref="SharpDX.Direct3D12.Device.CreateRenderTargetView"/></strong> to create a render-target view.</p><p>A render-target view can't use the following formats:</p><ul> <li>Any typeless format.</li> <li>DXGI_FORMAT_R32G32B32 if the view will be used to bind a buffer (vertex, index, constant, or stream-output).</li> </ul><p>If the format is set to <see cref="SharpDX.DXGI.Format.Unknown"/>, then the format of the resource that the view binds to the pipeline will be used.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RENDER_TARGET_VIEW_DESC']/*"/>	
    /// <msdn-id>dn770389</msdn-id>	
    /// <unmanaged>D3D12_RENDER_TARGET_VIEW_DESC</unmanaged>	
    /// <unmanaged-short>D3D12_RENDER_TARGET_VIEW_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Explicit)]
    public  partial struct RenderTargetViewDescription {	
        
        /// <summary>	
        /// <p>Describes the subresources from a 3D texture to use in a render-target view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>Use this structure with a <strong><see cref="SharpDX.Direct3D12.RenderTargetViewDescription"/></strong> structure to view the resource as a 3D texture.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX3D_RTV']/*"/>	
        /// <msdn-id>dn770436</msdn-id>	
        /// <unmanaged>D3D12_TEX3D_RTV</unmanaged>	
        /// <unmanaged-short>D3D12_TEX3D_RTV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture3DResource {	
            
            /// <summary>	
            /// <dd> <p>The index of the mipmap level to use mip slice.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX3D_RTV::MipSlice']/*"/>	
            /// <msdn-id>dn770436</msdn-id>	
            /// <unmanaged>unsigned int MipSlice</unmanaged>	
            /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
            public int MipSlice;
            
            /// <summary>	
            /// <dd> <p>First depth level to use.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX3D_RTV::FirstWSlice']/*"/>	
            /// <msdn-id>dn770436</msdn-id>	
            /// <unmanaged>unsigned int FirstWSlice</unmanaged>	
            /// <unmanaged-short>unsigned int FirstWSlice</unmanaged-short>	
            public int FirstDepthSlice;
            
            /// <summary>	
            /// <dd> <p>Number of depth levels to use in the render-target view, starting from <strong>FirstWSlice</strong>. A value of -1 indicates all of the slices along the w axis, starting from <strong>FirstWSlice</strong>.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX3D_RTV::WSize']/*"/>	
            /// <msdn-id>dn770436</msdn-id>	
            /// <unmanaged>unsigned int WSize</unmanaged>	
            /// <unmanaged-short>unsigned int WSize</unmanaged-short>	
            public int DepthSliceCount;
        }
        
        /// <summary>	
        /// <p>Describes the elements in a buffer resource to use in a render-target view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>Use this structure with a <strong><see cref="SharpDX.Direct3D12.RenderTargetViewDescription"/></strong> structure to view the resource as a buffer.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_BUFFER_RTV']/*"/>	
        /// <msdn-id>dn770342</msdn-id>	
        /// <unmanaged>D3D12_BUFFER_RTV</unmanaged>	
        /// <unmanaged-short>D3D12_BUFFER_RTV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct BufferResource {	
            
            /// <summary>	
            /// <dd> <p>Number of bytes between the beginning of the buffer and the first element to access.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_BUFFER_RTV::FirstElement']/*"/>	
            /// <msdn-id>dn770342</msdn-id>	
            /// <unmanaged>unsigned longlong FirstElement</unmanaged>	
            /// <unmanaged-short>unsigned longlong FirstElement</unmanaged-short>	
            public long FirstElement;
            
            /// <summary>	
            /// <dd> <p>The total number of elements in the view.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_BUFFER_RTV::NumElements']/*"/>	
            /// <msdn-id>dn770342</msdn-id>	
            /// <unmanaged>unsigned int NumElements</unmanaged>	
            /// <unmanaged-short>unsigned int NumElements</unmanaged-short>	
            public int ElementCount;
        }
        
        /// <summary>	
        /// <p>Describes the subresource from a 1D texture to use in a render-target view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>Use this structure with a <strong><see cref="SharpDX.Direct3D12.RenderTargetViewDescription"/></strong> structure to view the resource as a 1D texture.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX1D_RTV']/*"/>	
        /// <msdn-id>dn770419</msdn-id>	
        /// <unmanaged>D3D12_TEX1D_RTV</unmanaged>	
        /// <unmanaged-short>D3D12_TEX1D_RTV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture1DResource {	
            
            /// <summary>	
            /// <dd> <p>The index of the mipmap level to use mip slice.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX1D_RTV::MipSlice']/*"/>	
            /// <msdn-id>dn770419</msdn-id>	
            /// <unmanaged>unsigned int MipSlice</unmanaged>	
            /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
            public int MipSlice;
        }
        
        /// <summary>	
        /// <p>Describes the subresources from an array of 1D textures to use in a render-target view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>Use this structure with a <strong><see cref="SharpDX.Direct3D12.RenderTargetViewDescription"/></strong> structure to view the resource as an array of 1D textures.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX1D_ARRAY_RTV']/*"/>	
        /// <msdn-id>dn770415</msdn-id>	
        /// <unmanaged>D3D12_TEX1D_ARRAY_RTV</unmanaged>	
        /// <unmanaged-short>D3D12_TEX1D_ARRAY_RTV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture1DArrayResource {	
            
            /// <summary>	
            /// <dd> <p>The index of the mipmap level to use mip slice.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX1D_ARRAY_RTV::MipSlice']/*"/>	
            /// <msdn-id>dn770415</msdn-id>	
            /// <unmanaged>unsigned int MipSlice</unmanaged>	
            /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
            public int MipSlice;
            
            /// <summary>	
            /// <dd> <p>The index of the first texture to use in an array of textures.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX1D_ARRAY_RTV::FirstArraySlice']/*"/>	
            /// <msdn-id>dn770415</msdn-id>	
            /// <unmanaged>unsigned int FirstArraySlice</unmanaged>	
            /// <unmanaged-short>unsigned int FirstArraySlice</unmanaged-short>	
            public int FirstArraySlice;
            
            /// <summary>	
            /// <dd> <p>Number of textures to use.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX1D_ARRAY_RTV::ArraySize']/*"/>	
            /// <msdn-id>dn770415</msdn-id>	
            /// <unmanaged>unsigned int ArraySize</unmanaged>	
            /// <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
            public int ArraySize;
        }
        
        /// <summary>	
        /// <p>Describes the subresource from a 2D texture to use in a render-target view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p> Use this structure with a <strong><see cref="SharpDX.Direct3D12.RenderTargetViewDescription"/></strong> structure to view the resource as a 2D texture. </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_RTV']/*"/>	
        /// <msdn-id>dn770433</msdn-id>	
        /// <unmanaged>D3D12_TEX2D_RTV</unmanaged>	
        /// <unmanaged-short>D3D12_TEX2D_RTV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DResource {	
            
            /// <summary>	
            /// <dd> <p>The index of the mipmap level to use.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_RTV::MipSlice']/*"/>	
            /// <msdn-id>dn770433</msdn-id>	
            /// <unmanaged>unsigned int MipSlice</unmanaged>	
            /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
            public int MipSlice;
            
            /// <summary>	
            /// <dd> <p> The index (plane slice number) of the plane to use in the texture. </p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_RTV::PlaneSlice']/*"/>	
            /// <msdn-id>dn770433</msdn-id>	
            /// <unmanaged>unsigned int PlaneSlice</unmanaged>	
            /// <unmanaged-short>unsigned int PlaneSlice</unmanaged-short>	
            public int PlaneSlice;
        }
        
        /// <summary>	
        /// <p>Describes the subresources from an array of 2D textures to use in a render-target view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p> Use this structure with a <strong><see cref="SharpDX.Direct3D12.RenderTargetViewDescription"/></strong> structure to view the resource as an array of 2D textures. </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_ARRAY_RTV']/*"/>	
        /// <msdn-id>dn770429</msdn-id>	
        /// <unmanaged>D3D12_TEX2D_ARRAY_RTV</unmanaged>	
        /// <unmanaged-short>D3D12_TEX2D_ARRAY_RTV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DArrayResource {	
            
            /// <summary>	
            /// <dd> <p>The index of the mipmap level to use mip slice.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_ARRAY_RTV::MipSlice']/*"/>	
            /// <msdn-id>dn770429</msdn-id>	
            /// <unmanaged>unsigned int MipSlice</unmanaged>	
            /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
            public int MipSlice;
            
            /// <summary>	
            /// <dd> <p>The index of the first texture to use in an array of textures.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_ARRAY_RTV::FirstArraySlice']/*"/>	
            /// <msdn-id>dn770429</msdn-id>	
            /// <unmanaged>unsigned int FirstArraySlice</unmanaged>	
            /// <unmanaged-short>unsigned int FirstArraySlice</unmanaged-short>	
            public int FirstArraySlice;
            
            /// <summary>	
            /// <dd> <p> Number of textures in the array to use in the render target view, starting from <strong>FirstArraySlice</strong>. </p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_ARRAY_RTV::ArraySize']/*"/>	
            /// <msdn-id>dn770429</msdn-id>	
            /// <unmanaged>unsigned int ArraySize</unmanaged>	
            /// <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
            public int ArraySize;
            
            /// <summary>	
            /// <dd> <p> The index (plane slice number) of the plane to use in an array of textures. </p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_ARRAY_RTV::PlaneSlice']/*"/>	
            /// <msdn-id>dn770429</msdn-id>	
            /// <unmanaged>unsigned int PlaneSlice</unmanaged>	
            /// <unmanaged-short>unsigned int PlaneSlice</unmanaged-short>	
            public int PlaneSlice;
        }
        
        /// <summary>	
        /// <p>Describes the subresource from a multi sampled 2D texture to use in a render-target view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is a member of the <strong><see cref="SharpDX.Direct3D12.RenderTargetViewDescription"/></strong> structure.</p><p>Because a multi sampled 2D texture contains a single subresource, there is actually nothing to specify in <strong><see cref="SharpDX.Direct3D12.RenderTargetViewDescription.Texture2DMultisampledResource"/></strong>. Consequently, <strong>UnusedField_NothingToDefine</strong> is included so that this structure will compile in C. </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2DMS_RTV']/*"/>	
        /// <msdn-id>dn770426</msdn-id>	
        /// <unmanaged>D3D12_TEX2DMS_RTV</unmanaged>	
        /// <unmanaged-short>D3D12_TEX2DMS_RTV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DMultisampledResource {	
            
            /// <summary>	
            /// <dd> <p>Integer of any value. See remarks.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2DMS_RTV::UnusedField_NothingToDefine']/*"/>	
            /// <msdn-id>dn770426</msdn-id>	
            /// <unmanaged>unsigned int UnusedField_NothingToDefine</unmanaged>	
            /// <unmanaged-short>unsigned int UnusedField_NothingToDefine</unmanaged-short>	
            public int UnusedFieldNothingToDefine;
        }
        
        /// <summary>	
        /// <p> Describes the subresources from an array of multi sampled 2D textures to use in a render-target view. </p>	
        /// </summary>	
        /// <remarks>	
        /// <p> Use this structure with a <strong><see cref="SharpDX.Direct3D12.RenderTargetViewDescription"/></strong> structure to view the resource as an array of multi sampled 2D textures. </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2DMS_ARRAY_RTV']/*"/>	
        /// <msdn-id>dn770423</msdn-id>	
        /// <unmanaged>D3D12_TEX2DMS_ARRAY_RTV</unmanaged>	
        /// <unmanaged-short>D3D12_TEX2DMS_ARRAY_RTV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DMultisampledArrayResource {	
            
            /// <summary>	
            /// <dd> <p> The index of the first texture to use in an array of textures. </p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2DMS_ARRAY_RTV::FirstArraySlice']/*"/>	
            /// <msdn-id>dn770423</msdn-id>	
            /// <unmanaged>unsigned int FirstArraySlice</unmanaged>	
            /// <unmanaged-short>unsigned int FirstArraySlice</unmanaged-short>	
            public int FirstArraySlice;
            
            /// <summary>	
            /// <dd> <p> The number of textures to use. </p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2DMS_ARRAY_RTV::ArraySize']/*"/>	
            /// <msdn-id>dn770423</msdn-id>	
            /// <unmanaged>unsigned int ArraySize</unmanaged>	
            /// <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
            public int ArraySize;
        }
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.DXGI.Format"/></strong>-typed value that specifies the viewing format.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RENDER_TARGET_VIEW_DESC::Format']/*"/>	
        /// <msdn-id>dn770389</msdn-id>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        [FieldOffset(0)]
        public SharpDX.DXGI.Format Format;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D12.RenderTargetViewDimension"/></strong>-typed value that specifies how the render-target resource will be accessed. This type specifies how the resource will be accessed. This member also determines which _RTV to use in the following union.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RENDER_TARGET_VIEW_DESC::ViewDimension']/*"/>	
        /// <msdn-id>dn770389</msdn-id>	
        /// <unmanaged>D3D12_RTV_DIMENSION ViewDimension</unmanaged>	
        /// <unmanaged-short>D3D12_RTV_DIMENSION ViewDimension</unmanaged-short>	
        [FieldOffset(4)]
        public SharpDX.Direct3D12.RenderTargetViewDimension Dimension;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D12.RenderTargetViewDescription.BufferResource"/></strong> structure that specifies which buffer elements can be accessed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RENDER_TARGET_VIEW_DESC::Buffer']/*"/>	
        /// <msdn-id>dn770389</msdn-id>	
        /// <unmanaged>D3D12_BUFFER_RTV Buffer</unmanaged>	
        /// <unmanaged-short>D3D12_BUFFER_RTV Buffer</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D12.RenderTargetViewDescription.BufferResource Buffer;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D12.RenderTargetViewDescription.Texture1DResource"/></strong> structure that specifies the subresources in a 1D texture that can be accessed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RENDER_TARGET_VIEW_DESC::Texture1D']/*"/>	
        /// <msdn-id>dn770389</msdn-id>	
        /// <unmanaged>D3D12_TEX1D_RTV Texture1D</unmanaged>	
        /// <unmanaged-short>D3D12_TEX1D_RTV Texture1D</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D12.RenderTargetViewDescription.Texture1DResource Texture1D;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D12.RenderTargetViewDescription.Texture1DArrayResource"/></strong> structure that specifies the subresources in a 1D texture array that can be accessed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RENDER_TARGET_VIEW_DESC::Texture1DArray']/*"/>	
        /// <msdn-id>dn770389</msdn-id>	
        /// <unmanaged>D3D12_TEX1D_ARRAY_RTV Texture1DArray</unmanaged>	
        /// <unmanaged-short>D3D12_TEX1D_ARRAY_RTV Texture1DArray</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D12.RenderTargetViewDescription.Texture1DArrayResource Texture1DArray;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D12.RenderTargetViewDescription.Texture2DResource"/></strong> structure that specifies the subresources in a 2D texture that can be accessed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RENDER_TARGET_VIEW_DESC::Texture2D']/*"/>	
        /// <msdn-id>dn770389</msdn-id>	
        /// <unmanaged>D3D12_TEX2D_RTV Texture2D</unmanaged>	
        /// <unmanaged-short>D3D12_TEX2D_RTV Texture2D</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D12.RenderTargetViewDescription.Texture2DResource Texture2D;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D12.RenderTargetViewDescription.Texture2DArrayResource"/></strong> structure that specifies the subresources in a 2D texture array that can be accessed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RENDER_TARGET_VIEW_DESC::Texture2DArray']/*"/>	
        /// <msdn-id>dn770389</msdn-id>	
        /// <unmanaged>D3D12_TEX2D_ARRAY_RTV Texture2DArray</unmanaged>	
        /// <unmanaged-short>D3D12_TEX2D_ARRAY_RTV Texture2DArray</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D12.RenderTargetViewDescription.Texture2DArrayResource Texture2DArray;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D12.RenderTargetViewDescription.Texture2DMultisampledResource"/></strong> structure that specifies a single subresource because a multisampled 2D texture only contains one subresource.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RENDER_TARGET_VIEW_DESC::Texture2DMS']/*"/>	
        /// <msdn-id>dn770389</msdn-id>	
        /// <unmanaged>D3D12_TEX2DMS_RTV Texture2DMS</unmanaged>	
        /// <unmanaged-short>D3D12_TEX2DMS_RTV Texture2DMS</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D12.RenderTargetViewDescription.Texture2DMultisampledResource Texture2DMS;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D12.RenderTargetViewDescription.Texture2DMultisampledArrayResource"/></strong> structure that specifies the subresources in a multisampled 2D texture array that can be accessed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RENDER_TARGET_VIEW_DESC::Texture2DMSArray']/*"/>	
        /// <msdn-id>dn770389</msdn-id>	
        /// <unmanaged>D3D12_TEX2DMS_ARRAY_RTV Texture2DMSArray</unmanaged>	
        /// <unmanaged-short>D3D12_TEX2DMS_ARRAY_RTV Texture2DMSArray</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D12.RenderTargetViewDescription.Texture2DMultisampledArrayResource Texture2DMSArray;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D12.RenderTargetViewDescription.Texture3DResource"/></strong> structure that specifies subresources in a 3D texture that can be accessed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RENDER_TARGET_VIEW_DESC::Texture3D']/*"/>	
        /// <msdn-id>dn770389</msdn-id>	
        /// <unmanaged>D3D12_TEX3D_RTV Texture3D</unmanaged>	
        /// <unmanaged-short>D3D12_TEX3D_RTV Texture3D</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D12.RenderTargetViewDescription.Texture3DResource Texture3D;
    }
    
    /// <summary>	
    /// <p> Describes the transition between usages of two different resources that have mappings into the same heap. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> This structure is a member of the <strong><see cref="SharpDX.Direct3D12.ResourceBarrier"/></strong> structure. </p><p> Both the before and the after resources can be specified or one or both resources can be <strong><c>null</c></strong>, which indicates that any placed or reserved resource could cause aliasing. </p><p>Refer to the usage models described in <strong>CreatePlacedResource</strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RESOURCE_ALIASING_BARRIER']/*"/>	
    /// <msdn-id>dn986739</msdn-id>	
    /// <unmanaged>D3D12_RESOURCE_ALIASING_BARRIER</unmanaged>	
    /// <unmanaged-short>D3D12_RESOURCE_ALIASING_BARRIER</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct ResourceAliasingBarrier {	
        
        /// <summary>	
        /// <dd> <p> A reference to the <strong><see cref="SharpDX.Direct3D12.Resource"/></strong> object that represents the before resource used in the transition. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RESOURCE_ALIASING_BARRIER::pResourceBefore']/*"/>	
        /// <msdn-id>dn986739</msdn-id>	
        /// <unmanaged>ID3D12Resource* pResourceBefore</unmanaged>	
        /// <unmanaged-short>ID3D12Resource pResourceBefore</unmanaged-short>	
        private System.IntPtr ResourceBeforePointer;
        
        /// <summary>	
        /// <dd> <p> A reference to the <strong><see cref="SharpDX.Direct3D12.Resource"/></strong> object that represents the after resource used in the transition. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RESOURCE_ALIASING_BARRIER::pResourceAfter']/*"/>	
        /// <msdn-id>dn986739</msdn-id>	
        /// <unmanaged>ID3D12Resource* pResourceAfter</unmanaged>	
        /// <unmanaged-short>ID3D12Resource pResourceAfter</unmanaged-short>	
        private System.IntPtr ResourceAfterPointer;
    }
    
    /// <summary>	
    /// <p>Describes parameters needed to allocate resources.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> This structure is used by the <strong>GetResourceAllocationInfo</strong> method. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RESOURCE_ALLOCATION_INFO']/*"/>	
    /// <msdn-id>dn770391</msdn-id>	
    /// <unmanaged>D3D12_RESOURCE_ALLOCATION_INFO</unmanaged>	
    /// <unmanaged-short>D3D12_RESOURCE_ALLOCATION_INFO</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct ResourceAllocationInformation {	
        
        /// <summary>	
        /// <dd> <p>The size, in bytes, of the resource.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RESOURCE_ALLOCATION_INFO::SizeInBytes']/*"/>	
        /// <msdn-id>dn770391</msdn-id>	
        /// <unmanaged>unsigned longlong SizeInBytes</unmanaged>	
        /// <unmanaged-short>unsigned longlong SizeInBytes</unmanaged-short>	
        public long SizeInBytes;
        
        /// <summary>	
        /// <dd> <p>The alignment value for the resource; one of 4KB (4096), 64KB (65536) and 4MB (4194304) alignment.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RESOURCE_ALLOCATION_INFO::Alignment']/*"/>	
        /// <msdn-id>dn770391</msdn-id>	
        /// <unmanaged>unsigned longlong Alignment</unmanaged>	
        /// <unmanaged-short>unsigned longlong Alignment</unmanaged-short>	
        public long Alignment;
    }
    
    /// <summary>	
    /// <p>Specifies a type of resource barrier (transition in resource use) description.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This enum is used in the <strong><see cref="SharpDX.Direct3D12.ResourceBarrierType"/></strong> structure. Use these values with the <strong><see cref="SharpDX.Direct3D12.GraphicsCommandList.ResourceBarrier"/></strong> method.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RESOURCE_BARRIER']/*"/>	
    /// <msdn-id>dn770393</msdn-id>	
    /// <unmanaged>D3D12_RESOURCE_BARRIER</unmanaged>	
    /// <unmanaged-short>D3D12_RESOURCE_BARRIER</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct ResourceBarrier {	
    }
    
    /// <summary>	
    /// <p> Describes a resource, such as a texture. This structure is used extensively. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> Use this structure with:</p><ul> <li> <strong><see cref="SharpDX.Direct3D12.Resource.GetDescription"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D12.Device.GetResourceAllocationInfo"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D12.Device.CreateCommittedResource"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D12.Device.CreatePlacedResource"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D12.Device.CreateReservedResource"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D12.Device.GetCopyableFootprints"/></strong> </li> <li> A number of the helper functions, refer to Helper Structures and Functions for D3D12.</li> </ul><p>Two common resources are buffers and textures, which both use this structure, but with quite different uses of the fields.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RESOURCE_DESC']/*"/>	
    /// <msdn-id>dn903813</msdn-id>	
    /// <unmanaged>D3D12_RESOURCE_DESC</unmanaged>	
    /// <unmanaged-short>D3D12_RESOURCE_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct ResourceDescription {	
        
        /// <summary>	
        /// <dd> <p> One member of <strong><see cref="SharpDX.Direct3D12.ResourceDimension"/></strong>, specifying the dimensions of the resource (for example, <see cref="SharpDX.Direct3D12.ResourceDimension.Texture1D"/>), or whether it is a buffer ((<see cref="SharpDX.Direct3D12.ResourceDimension.Buffer"/>). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RESOURCE_DESC::Dimension']/*"/>	
        /// <msdn-id>dn903813</msdn-id>	
        /// <unmanaged>D3D12_RESOURCE_DIMENSION Dimension</unmanaged>	
        /// <unmanaged-short>D3D12_RESOURCE_DIMENSION Dimension</unmanaged-short>	
        public SharpDX.Direct3D12.ResourceDimension Dimension;
        
        /// <summary>	
        /// <dd> <p> Specifies the alignment. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RESOURCE_DESC::Alignment']/*"/>	
        /// <msdn-id>dn903813</msdn-id>	
        /// <unmanaged>unsigned longlong Alignment</unmanaged>	
        /// <unmanaged-short>unsigned longlong Alignment</unmanaged-short>	
        public long Alignment;
        
        /// <summary>	
        /// <dd> <p> Specifies the width of the resource. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RESOURCE_DESC::Width']/*"/>	
        /// <msdn-id>dn903813</msdn-id>	
        /// <unmanaged>unsigned longlong Width</unmanaged>	
        /// <unmanaged-short>unsigned longlong Width</unmanaged-short>	
        public long Width;
        
        /// <summary>	
        /// <dd> <p> Specifies the height of the resource. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RESOURCE_DESC::Height']/*"/>	
        /// <msdn-id>dn903813</msdn-id>	
        /// <unmanaged>unsigned int Height</unmanaged>	
        /// <unmanaged-short>unsigned int Height</unmanaged-short>	
        public int Height;
        
        /// <summary>	
        /// <dd> <p> Specifies the depth of the resource, if it is 3D, or the array size if it is an array of 1D or 2D resources. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RESOURCE_DESC::DepthOrArraySize']/*"/>	
        /// <msdn-id>dn903813</msdn-id>	
        /// <unmanaged>unsigned short DepthOrArraySize</unmanaged>	
        /// <unmanaged-short>unsigned short DepthOrArraySize</unmanaged-short>	
        public short DepthOrArraySize;
        
        /// <summary>	
        /// <dd> <p> Specifies the number of MIP levels. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RESOURCE_DESC::MipLevels']/*"/>	
        /// <msdn-id>dn903813</msdn-id>	
        /// <unmanaged>unsigned short MipLevels</unmanaged>	
        /// <unmanaged-short>unsigned short MipLevels</unmanaged-short>	
        public short MipLevels;
        
        /// <summary>	
        /// <dd> <p> Specifies one member of  <strong><see cref="SharpDX.DXGI.Format"/></strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RESOURCE_DESC::Format']/*"/>	
        /// <msdn-id>dn903813</msdn-id>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        public SharpDX.DXGI.Format Format;
        
        /// <summary>	
        /// <dd> <p> Specifies a <strong><see cref="SharpDX.DXGI.SampleDescription"/></strong> structure. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RESOURCE_DESC::SampleDesc']/*"/>	
        /// <msdn-id>dn903813</msdn-id>	
        /// <unmanaged>DXGI_SAMPLE_DESC SampleDesc</unmanaged>	
        /// <unmanaged-short>DXGI_SAMPLE_DESC SampleDesc</unmanaged-short>	
        public SharpDX.DXGI.SampleDescription SampleDescription;
        
        /// <summary>	
        /// <dd> <p> Specifies one member of <strong><see cref="SharpDX.Direct3D12.TextureLayout"/></strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RESOURCE_DESC::Layout']/*"/>	
        /// <msdn-id>dn903813</msdn-id>	
        /// <unmanaged>D3D12_TEXTURE_LAYOUT Layout</unmanaged>	
        /// <unmanaged-short>D3D12_TEXTURE_LAYOUT Layout</unmanaged-short>	
        public SharpDX.Direct3D12.TextureLayout Layout;
        
        /// <summary>	
        /// <dd> <p> Bitwise-OR'd flags, as <strong><see cref="SharpDX.Direct3D12.ResourceFlags"/></strong> enumeration constants. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RESOURCE_DESC::Flags']/*"/>	
        /// <msdn-id>dn903813</msdn-id>	
        /// <unmanaged>D3D12_RESOURCE_FLAGS Flags</unmanaged>	
        /// <unmanaged-short>D3D12_RESOURCE_FLAGS Flags</unmanaged-short>	
        public SharpDX.Direct3D12.ResourceFlags Flags;
    }
    
    /// <summary>	
    /// <p>Describes a 3D box.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> This structure is used by the methods <strong>WriteToSubresource</strong>, <strong>ReadFromSubresource</strong> and <strong>CopyTextureRegion</strong>. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_BOX']/*"/>	
    /// <msdn-id>dn770341</msdn-id>	
    /// <unmanaged>D3D12_BOX</unmanaged>	
    /// <unmanaged-short>D3D12_BOX</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct ResourceRegion {	
        
        /// <summary>	
        /// <dd> <p>The x position of the left hand side of the box.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_BOX::left']/*"/>	
        /// <msdn-id>dn770341</msdn-id>	
        /// <unmanaged>unsigned int left</unmanaged>	
        /// <unmanaged-short>unsigned int left</unmanaged-short>	
        public int Left;
        
        /// <summary>	
        /// <dd> <p>The y position of the top of the box.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_BOX::top']/*"/>	
        /// <msdn-id>dn770341</msdn-id>	
        /// <unmanaged>unsigned int top</unmanaged>	
        /// <unmanaged-short>unsigned int top</unmanaged-short>	
        public int Top;
        
        /// <summary>	
        /// <dd> <p>The z position of the front of the box.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_BOX::front']/*"/>	
        /// <msdn-id>dn770341</msdn-id>	
        /// <unmanaged>unsigned int front</unmanaged>	
        /// <unmanaged-short>unsigned int front</unmanaged-short>	
        public int Front;
        
        /// <summary>	
        /// <dd> <p>The x position of the right hand side of the box, plus 1. This means that <code>right - left</code> equals the width of the box.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_BOX::right']/*"/>	
        /// <msdn-id>dn770341</msdn-id>	
        /// <unmanaged>unsigned int right</unmanaged>	
        /// <unmanaged-short>unsigned int right</unmanaged-short>	
        public int Right;
        
        /// <summary>	
        /// <dd> <p>The y position of the bottom of the box, plus 1. This means that <code>top - bottom</code> equals the height of the box.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_BOX::bottom']/*"/>	
        /// <msdn-id>dn770341</msdn-id>	
        /// <unmanaged>unsigned int bottom</unmanaged>	
        /// <unmanaged-short>unsigned int bottom</unmanaged-short>	
        public int Bottom;
        
        /// <summary>	
        /// <dd> <p>The z position of the back of the box, plus 1. This means that <code>front - back</code> equals the depth of the box.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_BOX::back']/*"/>	
        /// <msdn-id>dn770341</msdn-id>	
        /// <unmanaged>unsigned int back</unmanaged>	
        /// <unmanaged-short>unsigned int back</unmanaged-short>	
        public int Back;
    }
    
    /// <summary>	
    /// <p> Describes the transition of subresources between different usages. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> This struct is used by the <strong>Transition</strong> member of the <strong><see cref="SharpDX.Direct3D12.ResourceBarrier"/></strong> struct. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RESOURCE_TRANSITION_BARRIER']/*"/>	
    /// <msdn-id>dn986745</msdn-id>	
    /// <unmanaged>D3D12_RESOURCE_TRANSITION_BARRIER</unmanaged>	
    /// <unmanaged-short>D3D12_RESOURCE_TRANSITION_BARRIER</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct ResourceTransitionBarrier {	
        
        /// <summary>	
        /// <dd> <p> A reference to the <strong><see cref="SharpDX.Direct3D12.Resource"/></strong> object that represents the resource used in the transition. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RESOURCE_TRANSITION_BARRIER::pResource']/*"/>	
        /// <msdn-id>dn986745</msdn-id>	
        /// <unmanaged>ID3D12Resource* pResource</unmanaged>	
        /// <unmanaged-short>ID3D12Resource pResource</unmanaged-short>	
        private System.IntPtr ResourcePointer;
        
        /// <summary>	
        /// <dd> <p> The index of the subresource for the transition. Use the <strong>D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES</strong> flag ( 0xffffffff ) to transition all subresources in a resource at the same time. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RESOURCE_TRANSITION_BARRIER::Subresource']/*"/>	
        /// <msdn-id>dn986745</msdn-id>	
        /// <unmanaged>unsigned int Subresource</unmanaged>	
        /// <unmanaged-short>unsigned int Subresource</unmanaged-short>	
        public int Subresource;
        
        /// <summary>	
        /// <dd> <p> The "before" usages of the subresources, as a bitwise-OR'd combination of <strong><see cref="SharpDX.Direct3D12.ResourceStates"/></strong> enumeration constants. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RESOURCE_TRANSITION_BARRIER::StateBefore']/*"/>	
        /// <msdn-id>dn986745</msdn-id>	
        /// <unmanaged>D3D12_RESOURCE_STATES StateBefore</unmanaged>	
        /// <unmanaged-short>D3D12_RESOURCE_STATES StateBefore</unmanaged-short>	
        public SharpDX.Direct3D12.ResourceStates StateBefore;
        
        /// <summary>	
        /// <dd> <p> The "after" usages of the subresources, as a bitwise-OR'd combination of <strong><see cref="SharpDX.Direct3D12.ResourceStates"/></strong> enumeration constants. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RESOURCE_TRANSITION_BARRIER::StateAfter']/*"/>	
        /// <msdn-id>dn986745</msdn-id>	
        /// <unmanaged>D3D12_RESOURCE_STATES StateAfter</unmanaged>	
        /// <unmanaged-short>D3D12_RESOURCE_STATES StateAfter</unmanaged-short>	
        public SharpDX.Direct3D12.ResourceStates StateAfter;
    }
    
    /// <summary>	
    /// <p> Represents a resource in which all UAV accesses must complete before any future UAV accesses can begin. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> This struct represents a resource in which all unordered access view (UAV) accesses (reads or writes) must complete before any future UAV accesses (read or write) can begin. </p><p> This structure is a member of the <strong><see cref="SharpDX.Direct3D12.ResourceBarrier"/></strong> structure. </p><p> You don't need to insert a UAV barrier between 2 draw or dispatch calls that only read a UAV. Additionally, you don't need to insert a UAV barrier between 2 draw or dispatch calls that write to the same UAV if you know that it's safe to execute the UAV accesses in any order. The resource can be <strong><c>null</c></strong>, which indicates that any UAV access could require the barrier. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RESOURCE_UAV_BARRIER']/*"/>	
    /// <msdn-id>dn986746</msdn-id>	
    /// <unmanaged>D3D12_RESOURCE_UAV_BARRIER</unmanaged>	
    /// <unmanaged-short>D3D12_RESOURCE_UAV_BARRIER</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct ResourceUnorderedAccessViewBarrier {	
        
        /// <summary>	
        /// <dd> <p> The resource used in the transition, as a reference to <strong><see cref="SharpDX.Direct3D12.Resource"/></strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_RESOURCE_UAV_BARRIER::pResource']/*"/>	
        /// <msdn-id>dn986746</msdn-id>	
        /// <unmanaged>ID3D12Resource* pResource</unmanaged>	
        /// <unmanaged-short>ID3D12Resource pResource</unmanaged-short>	
        public System.IntPtr ResourcePointer;
    }
    
    /// <summary>	
    /// <p> Describes constants inline in the root signature that appear in shaders as one constant buffer. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Refer to Resource Binding in HLSL for more information on shader registers and spaces. </p><p><strong><see cref="SharpDX.Direct3D12.RootConstants"/></strong> is the data type of the <strong>Constants</strong> member of <strong><see cref="SharpDX.Direct3D12.RootParameter"/></strong>.  Use a <strong><see cref="SharpDX.Direct3D12.RootConstants"/></strong> when you set <strong><see cref="SharpDX.Direct3D12.RootParameter"/></strong>'s <strong>SlotType</strong> field to the <see cref="SharpDX.Direct3D12.RootParameterType.Constant32Bits"/> member of <strong><see cref="SharpDX.Direct3D12.RootParameterType"/></strong>. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_ROOT_CONSTANTS']/*"/>	
    /// <msdn-id>dn879475</msdn-id>	
    /// <unmanaged>D3D12_ROOT_CONSTANTS</unmanaged>	
    /// <unmanaged-short>D3D12_ROOT_CONSTANTS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct RootConstants {	
        
        /// <summary>	
        /// <dd> <p> The shader register. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_ROOT_CONSTANTS::ShaderRegister']/*"/>	
        /// <msdn-id>dn879475</msdn-id>	
        /// <unmanaged>unsigned int ShaderRegister</unmanaged>	
        /// <unmanaged-short>unsigned int ShaderRegister</unmanaged-short>	
        public int ShaderRegister;
        
        /// <summary>	
        /// <dd> <p> The register space. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_ROOT_CONSTANTS::RegisterSpace']/*"/>	
        /// <msdn-id>dn879475</msdn-id>	
        /// <unmanaged>unsigned int RegisterSpace</unmanaged>	
        /// <unmanaged-short>unsigned int RegisterSpace</unmanaged-short>	
        public int RegisterSpace;
        
        /// <summary>	
        /// <dd> <p> The number of constants that occupy a single shader slot (these constants appear like a single constant buffer).  All constants occupy a single root signature bind slot. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_ROOT_CONSTANTS::Num32BitValues']/*"/>	
        /// <msdn-id>dn879475</msdn-id>	
        /// <unmanaged>unsigned int Num32BitValues</unmanaged>	
        /// <unmanaged-short>unsigned int Num32BitValues</unmanaged-short>	
        public int Value32BitCount;
    }
    
    /// <summary>	
    /// <p> Describes descriptors inline in the root signature that appear in shaders. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p><strong><see cref="SharpDX.Direct3D12.RootDescriptor"/></strong> is the data type of the <strong>Descriptor</strong> member of <strong><see cref="SharpDX.Direct3D12.RootParameter"/></strong>. Use a <strong><see cref="SharpDX.Direct3D12.RootDescriptor"/></strong> when you set <strong><see cref="SharpDX.Direct3D12.RootParameter"/></strong>'s <strong>SlotType</strong> field to the <see cref="SharpDX.Direct3D12.RootParameterType.ConstantBufferView"/>, <see cref="SharpDX.Direct3D12.RootParameterType.ShaderResourceView"/>, or <see cref="SharpDX.Direct3D12.RootParameterType.UnorderedAccessView"/> members of <strong><see cref="SharpDX.Direct3D12.RootParameterType"/></strong>. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_ROOT_DESCRIPTOR']/*"/>	
    /// <msdn-id>dn879476</msdn-id>	
    /// <unmanaged>D3D12_ROOT_DESCRIPTOR</unmanaged>	
    /// <unmanaged-short>D3D12_ROOT_DESCRIPTOR</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct RootDescriptor {	
        
        /// <summary>	
        /// <dd> <p>The shader register.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_ROOT_DESCRIPTOR::ShaderRegister']/*"/>	
        /// <msdn-id>dn879476</msdn-id>	
        /// <unmanaged>unsigned int ShaderRegister</unmanaged>	
        /// <unmanaged-short>unsigned int ShaderRegister</unmanaged-short>	
        public int ShaderRegister;
        
        /// <summary>	
        /// <dd> <p>The register space.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_ROOT_DESCRIPTOR::RegisterSpace']/*"/>	
        /// <msdn-id>dn879476</msdn-id>	
        /// <unmanaged>unsigned int RegisterSpace</unmanaged>	
        /// <unmanaged-short>unsigned int RegisterSpace</unmanaged-short>	
        public int RegisterSpace;
    }
    
    /// <summary>	
    /// <p> Describes the layout of a descriptor table as a collection of descriptor ranges that appear one after the other in a descriptor heap. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> Samplers are not allowed in the same descriptor table as constant-buffer views (CBVs), unordered-access views (UAVs), and shader-resource views (SRVs). </p><p><strong><see cref="SharpDX.Direct3D12.RootDescriptorTable"/></strong> is the data type of the <strong>DescriptorTable</strong> member of <strong><see cref="SharpDX.Direct3D12.RootParameter"/></strong>. Use a <strong><see cref="SharpDX.Direct3D12.RootDescriptorTable"/></strong> when you set <strong><see cref="SharpDX.Direct3D12.RootParameter"/></strong>'s <strong>SlotType</strong> member to <strong><see cref="SharpDX.Direct3D12.RootParameterType.DescriptorTable"/></strong>. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_ROOT_DESCRIPTOR_TABLE']/*"/>	
    /// <msdn-id>dn859382</msdn-id>	
    /// <unmanaged>D3D12_ROOT_DESCRIPTOR_TABLE</unmanaged>	
    /// <unmanaged-short>D3D12_ROOT_DESCRIPTOR_TABLE</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct RootDescriptorTable {	
        
        /// <summary>	
        /// <dd> <p> The number of descriptor ranges in the table layout. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_ROOT_DESCRIPTOR_TABLE::NumDescriptorRanges']/*"/>	
        /// <msdn-id>dn859382</msdn-id>	
        /// <unmanaged>unsigned int NumDescriptorRanges</unmanaged>	
        /// <unmanaged-short>unsigned int NumDescriptorRanges</unmanaged-short>	
        public int DescriptorRangeCount;
        
        /// <summary>	
        /// <dd> <p> An array of <strong><see cref="SharpDX.Direct3D12.DescriptorRange"/></strong> structures that describe the descriptor ranges. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_ROOT_DESCRIPTOR_TABLE::pDescriptorRanges']/*"/>	
        /// <msdn-id>dn859382</msdn-id>	
        /// <unmanaged>const D3D12_DESCRIPTOR_RANGE* pDescriptorRanges</unmanaged>	
        /// <unmanaged-short>D3D12_DESCRIPTOR_RANGE pDescriptorRanges</unmanaged-short>	
        public System.IntPtr DescriptorRangesPointer;
    }
    
    /// <summary>	
    /// <p> Specifies the type of root signature slot. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> This enum is used by the <strong><see cref="SharpDX.Direct3D12.RootParameter"/></strong> structure. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_ROOT_PARAMETER']/*"/>	
    /// <msdn-id>dn879478</msdn-id>	
    /// <unmanaged>D3D12_ROOT_PARAMETER</unmanaged>	
    /// <unmanaged-short>D3D12_ROOT_PARAMETER</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct RootParameter {	
    }
    
    /// <summary>	
    /// <p> Describes the layout of a root signature. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> This structure is used by the <strong><see cref="SharpDX.Direct3D12.D3D12.SerializeRootSignature"/></strong> function and is returned by the <strong><see cref="SharpDX.Direct3D12.RootSignatureDeserializer.GetRootSignatureDescription"/></strong> method. </p><p> There is one graphics root signature, and one compute root signature. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_ROOT_SIGNATURE_DESC']/*"/>	
    /// <msdn-id>dn986747</msdn-id>	
    /// <unmanaged>D3D12_ROOT_SIGNATURE_DESC</unmanaged>	
    /// <unmanaged-short>D3D12_ROOT_SIGNATURE_DESC</unmanaged-short>	
    public  partial class RootSignatureDescription {	

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
        }
    }
    
    /// <summary>	
    /// <p>Describes a sampler state.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>These are the default values for sampler state.</p><table> <tr><th>State</th><th>Default Value</th></tr> <tr><td>Filter</td><td><see cref="SharpDX.Direct3D11.Filter.MinMagMipLinear"/></td></tr> <tr><td>AddressU</td><td><see cref="SharpDX.Direct3D11.TextureAddressMode.Clamp"/></td></tr> <tr><td>AddressV</td><td><see cref="SharpDX.Direct3D11.TextureAddressMode.Clamp"/></td></tr> <tr><td>AddressW</td><td><see cref="SharpDX.Direct3D11.TextureAddressMode.Clamp"/></td></tr> <tr><td>MinLOD</td><td>-3.402823466e+38F (-FLT_MAX)</td></tr> <tr><td>MaxLOD</td><td>3.402823466e+38F (FLT_MAX)</td></tr> <tr><td>MipMapLODBias</td><td>0.0f</td></tr> <tr><td>MaxAnisotropy</td><td>1</td></tr> <tr><td>ComparisonFunc</td><td><see cref="SharpDX.Direct3D11.Comparison.Never"/></td></tr> <tr><td>BorderColor</td><td>float4(1.0f,1.0f,1.0f,1.0f)</td></tr> <tr><td>Texture</td><td>N/A</td></tr> </table><p>?</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SAMPLER_DESC']/*"/>	
    /// <msdn-id>ff476207</msdn-id>	
    /// <unmanaged>D3D12_SAMPLER_DESC</unmanaged>	
    /// <unmanaged-short>D3D12_SAMPLER_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct SamplerStateDescription {	
        
        /// <summary>	
        /// <dd> <p> Filtering method to use when sampling a texture (see <strong><see cref="SharpDX.Direct3D11.Filter"/></strong>). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SAMPLER_DESC::Filter']/*"/>	
        /// <msdn-id>ff476207</msdn-id>	
        /// <unmanaged>D3D12_FILTER Filter</unmanaged>	
        /// <unmanaged-short>D3D12_FILTER Filter</unmanaged-short>	
        public SharpDX.Direct3D12.Filter Filter;
        
        /// <summary>	
        /// <dd> <p> Method to use for resolving a u texture coordinate that is outside the 0 to 1 range (see <strong><see cref="SharpDX.Direct3D11.TextureAddressMode"/></strong>). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SAMPLER_DESC::AddressU']/*"/>	
        /// <msdn-id>ff476207</msdn-id>	
        /// <unmanaged>D3D12_TEXTURE_ADDRESS_MODE AddressU</unmanaged>	
        /// <unmanaged-short>D3D12_TEXTURE_ADDRESS_MODE AddressU</unmanaged-short>	
        public SharpDX.Direct3D12.TextureAddressMode AddressU;
        
        /// <summary>	
        /// <dd> <p>Method to use for resolving a v texture coordinate that is outside the 0 to 1 range.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SAMPLER_DESC::AddressV']/*"/>	
        /// <msdn-id>ff476207</msdn-id>	
        /// <unmanaged>D3D12_TEXTURE_ADDRESS_MODE AddressV</unmanaged>	
        /// <unmanaged-short>D3D12_TEXTURE_ADDRESS_MODE AddressV</unmanaged-short>	
        public SharpDX.Direct3D12.TextureAddressMode AddressV;
        
        /// <summary>	
        /// <dd> <p>Method to use for resolving a w texture coordinate that is outside the 0 to 1 range.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SAMPLER_DESC::AddressW']/*"/>	
        /// <msdn-id>ff476207</msdn-id>	
        /// <unmanaged>D3D12_TEXTURE_ADDRESS_MODE AddressW</unmanaged>	
        /// <unmanaged-short>D3D12_TEXTURE_ADDRESS_MODE AddressW</unmanaged-short>	
        public SharpDX.Direct3D12.TextureAddressMode AddressW;
        
        /// <summary>	
        /// <dd> <p>Offset from the calculated mipmap level. For example, if Direct3D calculates that a texture should be sampled at mipmap level 3 and MipLODBias is 2, then the texture will be sampled at mipmap level 5.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SAMPLER_DESC::MipLODBias']/*"/>	
        /// <msdn-id>ff476207</msdn-id>	
        /// <unmanaged>float MipLODBias</unmanaged>	
        /// <unmanaged-short>float MipLODBias</unmanaged-short>	
        public float MipLodBias;
        
        /// <summary>	
        /// <dd> <p>Clamping value used if <see cref="SharpDX.Direct3D11.Filter.Anisotropic"/> or <see cref="SharpDX.Direct3D11.Filter.ComparisonAnisotropic"/> is specified in Filter. Valid values are between 1 and 16.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SAMPLER_DESC::MaxAnisotropy']/*"/>	
        /// <msdn-id>ff476207</msdn-id>	
        /// <unmanaged>unsigned int MaxAnisotropy</unmanaged>	
        /// <unmanaged-short>unsigned int MaxAnisotropy</unmanaged-short>	
        public int MaximumAnisotropy;
        
        /// <summary>	
        /// <dd> <p> A function that compares sampled data against existing sampled data. The function options are listed in <strong><see cref="SharpDX.Direct3D11.Comparison"/></strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SAMPLER_DESC::ComparisonFunc']/*"/>	
        /// <msdn-id>ff476207</msdn-id>	
        /// <unmanaged>D3D12_COMPARISON_FUNC ComparisonFunc</unmanaged>	
        /// <unmanaged-short>D3D12_COMPARISON_FUNC ComparisonFunc</unmanaged-short>	
        public SharpDX.Direct3D12.Comparison ComparisonFunction;
        
        /// <summary>	
        /// <dd> <p>Border color to use if <see cref="SharpDX.Direct3D11.TextureAddressMode.Border"/> is specified for AddressU, AddressV, or AddressW. Range must be between 0.0 and 1.0 inclusive.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SAMPLER_DESC::BorderColor']/*"/>	
        /// <msdn-id>ff476207</msdn-id>	
        /// <unmanaged>SHARPDX_COLOR4 BorderColor</unmanaged>	
        /// <unmanaged-short>SHARPDX_COLOR4 BorderColor</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawColor4 BorderColor;
        
        /// <summary>	
        /// <dd> <p>Lower end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SAMPLER_DESC::MinLOD']/*"/>	
        /// <msdn-id>ff476207</msdn-id>	
        /// <unmanaged>float MinLOD</unmanaged>	
        /// <unmanaged-short>float MinLOD</unmanaged-short>	
        public float MinimumLod;
        
        /// <summary>	
        /// <dd> <p>Upper end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed. This value must be greater than or equal to MinLOD. To have no upper limit on LOD set this to a large value such as D3D11_FLOAT32_MAX.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SAMPLER_DESC::MaxLOD']/*"/>	
        /// <msdn-id>ff476207</msdn-id>	
        /// <unmanaged>float MaxLOD</unmanaged>	
        /// <unmanaged-short>float MaxLOD</unmanaged-short>	
        public float MaximumLod;
    }
    
    /// <summary>	
    /// <p>Describes shader data.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> The <strong><see cref="SharpDX.Direct3D12.GraphicsPipelineStateDescription"/></strong> and <strong><see cref="SharpDX.Direct3D12.ComputePipelineStateDescription"/></strong> objects contain <strong><see cref="SharpDX.Direct3D12.ShaderBytecode"/></strong> structures that describe various shader types. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SHADER_BYTECODE']/*"/>	
    /// <msdn-id>dn770405</msdn-id>	
    /// <unmanaged>D3D12_SHADER_BYTECODE</unmanaged>	
    /// <unmanaged-short>D3D12_SHADER_BYTECODE</unmanaged-short>	
    public  partial struct ShaderBytecode {	
        
        /// <summary>	
        /// <dd> <p> A reference to a memory block that contains the shader data. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SHADER_BYTECODE::pShaderBytecode']/*"/>	
        /// <msdn-id>dn770405</msdn-id>	
        /// <unmanaged>const void* pShaderBytecode</unmanaged>	
        /// <unmanaged-short>void pShaderBytecode</unmanaged-short>	
        private System.IntPtr Pointer;
        
        /// <summary>	
        /// <dd> <p> The size, in bytes, of the shader data that the <strong>pShaderBytecode</strong> member points to. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SHADER_BYTECODE::BytecodeLength']/*"/>	
        /// <msdn-id>dn770405</msdn-id>	
        /// <unmanaged>SIZE_T BytecodeLength</unmanaged>	
        /// <unmanaged-short>SIZE_T BytecodeLength</unmanaged-short>	
        private SharpDX.PointerSize Size;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public System.IntPtr Pointer;
            public SharpDX.PointerSize Size;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Pointer = @ref.Pointer;
            this.Size = @ref.Size;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Pointer = this.Pointer;
            @ref.Size = this.Size;
		
		}
    }
    
    /// <summary>	
    /// <p>Describes a shader-resource view.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> A view is a format-specific way to look at the data in a resource. The view determines what data to look at, and how it is cast when read. </p><p> When viewing a resource, the resource-view description must specify a typed format, that is compatible with the resource format. So that means that you can't create a resource-view description using any format with _TYPELESS in the name. You can however view a typeless resource by specifying a typed format for the view. For example, a <see cref="SharpDX.DXGI.Format.R32G32B32_Typeless"/> resource can be viewed with one of these typed formats: <see cref="SharpDX.DXGI.Format.R32G32B32_Float"/>, <see cref="SharpDX.DXGI.Format.R32G32B32_UInt"/>, and <see cref="SharpDX.DXGI.Format.R32G32B32_SInt"/>, since these typed formats are compatible with the typeless resource. </p><p> Create a shader-resource-view description by calling <strong><see cref="SharpDX.Direct3D12.Device.CreateShaderResourceView"/></strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SHADER_RESOURCE_VIEW_DESC']/*"/>	
    /// <msdn-id>dn770406</msdn-id>	
    /// <unmanaged>D3D12_SHADER_RESOURCE_VIEW_DESC</unmanaged>	
    /// <unmanaged-short>D3D12_SHADER_RESOURCE_VIEW_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Explicit)]
    public  partial struct ShaderResourceViewDescription {	
        
        /// <summary>	
        /// <p>Identifies how to view a buffer resource.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p> This enumeration is used by <strong><see cref="SharpDX.Direct3D12.ShaderResourceViewDescription.BufferResource"/></strong>. </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_BUFFER_SRV']/*"/>	
        /// <msdn-id>dn986719</msdn-id>	
        /// <unmanaged>D3D12_BUFFER_SRV</unmanaged>	
        /// <unmanaged-short>D3D12_BUFFER_SRV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct BufferResource {	
            
            /// <summary>	
            /// <dd> <p> Indicates a default view. </p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_BUFFER_SRV::FirstElement']/*"/>	
            /// <msdn-id>dn986719</msdn-id>	
            /// <unmanaged>unsigned longlong FirstElement</unmanaged>	
            /// <unmanaged-short>unsigned longlong FirstElement</unmanaged-short>	
            public long FirstElement;
            
            /// <summary>	
            /// <dd> <p> View the buffer as raw. For more info about raw viewing of buffers, see Raw Views of Buffers. </p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_BUFFER_SRV::NumElements']/*"/>	
            /// <msdn-id>dn986719</msdn-id>	
            /// <unmanaged>unsigned int NumElements</unmanaged>	
            /// <unmanaged-short>unsigned int NumElements</unmanaged-short>	
            public int ElementCount;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_BUFFER_SRV::StructureByteStride']/*"/>	
            /// <msdn-id>dn986719</msdn-id>	
            /// <unmanaged>unsigned int StructureByteStride</unmanaged>	
            /// <unmanaged-short>unsigned int StructureByteStride</unmanaged-short>	
            public int StructureByteStride;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_BUFFER_SRV::Flags']/*"/>	
            /// <msdn-id>dn986719</msdn-id>	
            /// <unmanaged>D3D12_BUFFER_SRV_FLAGS Flags</unmanaged>	
            /// <unmanaged-short>D3D12_BUFFER_SRV_FLAGS Flags</unmanaged-short>	
            public SharpDX.Direct3D12.BufferShaderResourceViewFlags Flags;
        }
        
        /// <summary>	
        /// <p>Specifies the subresource from a 1D texture to use in a shader-resource view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is one member of a shader-resource-view description, <strong><see cref="SharpDX.Direct3D12.ShaderResourceViewDescription"/></strong>.</p><p>As an example, assuming <strong>MostDetailedMip</strong> = 6 and <strong>MipLevels</strong> = 2, the view will have access to 2 mipmap levels, 6 and 7, of the original texture for which <strong><see cref="SharpDX.Direct3D12.Device.CreateShaderResourceView"/></strong> creates the view. In this situation, <strong>MostDetailedMip</strong> is greater than the <strong>MipLevels</strong> in the view. However, <strong>MostDetailedMip</strong> is not greater than the <strong>MipLevels</strong> in the original resource.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX1D_SRV']/*"/>	
        /// <msdn-id>dn770420</msdn-id>	
        /// <unmanaged>D3D12_TEX1D_SRV</unmanaged>	
        /// <unmanaged-short>D3D12_TEX1D_SRV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture1DResource {	
            
            /// <summary>	
            /// <dd> <p>Index of the most detailed mipmap level to use; this number is between 0 and <strong>MipLevels</strong> (from the original Texture1D for which <strong><see cref="SharpDX.Direct3D12.Device.CreateShaderResourceView"/></strong> creates a view) -1.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX1D_SRV::MostDetailedMip']/*"/>	
            /// <msdn-id>dn770420</msdn-id>	
            /// <unmanaged>unsigned int MostDetailedMip</unmanaged>	
            /// <unmanaged-short>unsigned int MostDetailedMip</unmanaged-short>	
            public int MostDetailedMip;
            
            /// <summary>	
            /// <dd> <p>The maximum number of mipmap levels for the view  of the texture. See the remarks.</p> <p>Set to -1 to indicate all the mipmap levels from <strong>MostDetailedMip</strong> on down to least detailed.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX1D_SRV::MipLevels']/*"/>	
            /// <msdn-id>dn770420</msdn-id>	
            /// <unmanaged>unsigned int MipLevels</unmanaged>	
            /// <unmanaged-short>unsigned int MipLevels</unmanaged-short>	
            public int MipLevels;
            
            /// <summary>	
            /// <dd> <p>A value to clamp sample LOD values to. For example, if you specify 2.0f for the clamp value, you ensure that no individual sample accesses a mip level less than 2.0f.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX1D_SRV::ResourceMinLODClamp']/*"/>	
            /// <msdn-id>dn770420</msdn-id>	
            /// <unmanaged>float ResourceMinLODClamp</unmanaged>	
            /// <unmanaged-short>float ResourceMinLODClamp</unmanaged-short>	
            public float ResourceMinLODClamp;
        }
        
        /// <summary>	
        /// <p>Describes the subresources from an array of 1D textures to use in a shader-resource view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is one member of a shader-resource-view description, <strong><see cref="SharpDX.Direct3D12.ShaderResourceViewDescription"/></strong>.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX1D_ARRAY_SRV']/*"/>	
        /// <msdn-id>dn770416</msdn-id>	
        /// <unmanaged>D3D12_TEX1D_ARRAY_SRV</unmanaged>	
        /// <unmanaged-short>D3D12_TEX1D_ARRAY_SRV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture1DArrayResource {	
            
            /// <summary>	
            /// <dd> <p>Index of the most detailed mipmap level to use; this number is between 0 and <strong>MipLevels</strong> (from the original Texture1D for which <strong><see cref="SharpDX.Direct3D12.Device.CreateShaderResourceView"/></strong> creates a view) -1.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX1D_ARRAY_SRV::MostDetailedMip']/*"/>	
            /// <msdn-id>dn770416</msdn-id>	
            /// <unmanaged>unsigned int MostDetailedMip</unmanaged>	
            /// <unmanaged-short>unsigned int MostDetailedMip</unmanaged-short>	
            public int MostDetailedMip;
            
            /// <summary>	
            /// <dd> <p>The maximum number of mipmap levels for the view of the texture. See the remarks in <strong><see cref="SharpDX.Direct3D12.ShaderResourceViewDescription.Texture1DResource"/></strong>.</p> <p>Set to -1 to indicate all the mipmap levels from <strong>MostDetailedMip</strong> on down to least detailed.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX1D_ARRAY_SRV::MipLevels']/*"/>	
            /// <msdn-id>dn770416</msdn-id>	
            /// <unmanaged>unsigned int MipLevels</unmanaged>	
            /// <unmanaged-short>unsigned int MipLevels</unmanaged-short>	
            public int MipLevels;
            
            /// <summary>	
            /// <dd> <p>The index of the first texture to use in an array of textures.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX1D_ARRAY_SRV::FirstArraySlice']/*"/>	
            /// <msdn-id>dn770416</msdn-id>	
            /// <unmanaged>unsigned int FirstArraySlice</unmanaged>	
            /// <unmanaged-short>unsigned int FirstArraySlice</unmanaged-short>	
            public int FirstArraySlice;
            
            /// <summary>	
            /// <dd> <p>Number of textures in the array.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX1D_ARRAY_SRV::ArraySize']/*"/>	
            /// <msdn-id>dn770416</msdn-id>	
            /// <unmanaged>unsigned int ArraySize</unmanaged>	
            /// <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
            public int ArraySize;
            
            /// <summary>	
            /// <dd> <p>A value to clamp sample LOD values to. For example, if you specify 2.0f for the clamp value, you ensure that no individual sample accesses a mip level less than 2.0f.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX1D_ARRAY_SRV::ResourceMinLODClamp']/*"/>	
            /// <msdn-id>dn770416</msdn-id>	
            /// <unmanaged>float ResourceMinLODClamp</unmanaged>	
            /// <unmanaged-short>float ResourceMinLODClamp</unmanaged-short>	
            public float ResourceMinLODClamp;
        }
        
        /// <summary>	
        /// <p>Describes the subresource from a 2D texture to use in a shader-resource view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p> This structure is one member of a shader-resource-view description, <strong><see cref="SharpDX.Direct3D12.ShaderResourceViewDescription"/></strong>. </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_SRV']/*"/>	
        /// <msdn-id>dn770434</msdn-id>	
        /// <unmanaged>D3D12_TEX2D_SRV</unmanaged>	
        /// <unmanaged-short>D3D12_TEX2D_SRV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DResource {	
            
            /// <summary>	
            /// <dd> <p> Index of the most detailed mipmap level to use; this number is between 0 and <strong>MipLevels</strong> (from the original Texture2D for which <strong><see cref="SharpDX.Direct3D12.Device.CreateShaderResourceView"/></strong> creates a view) -1. </p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_SRV::MostDetailedMip']/*"/>	
            /// <msdn-id>dn770434</msdn-id>	
            /// <unmanaged>unsigned int MostDetailedMip</unmanaged>	
            /// <unmanaged-short>unsigned int MostDetailedMip</unmanaged-short>	
            public int MostDetailedMip;
            
            /// <summary>	
            /// <dd> <p> The maximum number of mipmap levels for the view of the texture. See the remarks in <strong><see cref="SharpDX.Direct3D12.ShaderResourceViewDescription.Texture1DResource"/></strong>. </p> <p> Set to -1 to indicate all the mipmap levels from <strong>MostDetailedMip</strong> on down to least detailed. </p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_SRV::MipLevels']/*"/>	
            /// <msdn-id>dn770434</msdn-id>	
            /// <unmanaged>unsigned int MipLevels</unmanaged>	
            /// <unmanaged-short>unsigned int MipLevels</unmanaged-short>	
            public int MipLevels;
            
            /// <summary>	
            /// <dd> <p> The index (plane slice number) of the plane to use in the texture. </p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_SRV::PlaneSlice']/*"/>	
            /// <msdn-id>dn770434</msdn-id>	
            /// <unmanaged>unsigned int PlaneSlice</unmanaged>	
            /// <unmanaged-short>unsigned int PlaneSlice</unmanaged-short>	
            public int PlaneSlice;
            
            /// <summary>	
            /// <dd> <p>A value to clamp sample LOD values to. For example, if you specify 2.0f for the clamp value, you ensure that no individual sample accesses a mip level less than 2.0f.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_SRV::ResourceMinLODClamp']/*"/>	
            /// <msdn-id>dn770434</msdn-id>	
            /// <unmanaged>float ResourceMinLODClamp</unmanaged>	
            /// <unmanaged-short>float ResourceMinLODClamp</unmanaged-short>	
            public float ResourceMinLODClamp;
        }
        
        /// <summary>	
        /// <p>Describes the subresources from an array of 2D textures to use in a shader-resource view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p> This structure is one member of a shader-resource-view description, <strong><see cref="SharpDX.Direct3D12.ShaderResourceViewDescription"/></strong>. </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_ARRAY_SRV']/*"/>	
        /// <msdn-id>dn770430</msdn-id>	
        /// <unmanaged>D3D12_TEX2D_ARRAY_SRV</unmanaged>	
        /// <unmanaged-short>D3D12_TEX2D_ARRAY_SRV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DArrayResource {	
            
            /// <summary>	
            /// <dd> <p> Index of the most detailed mipmap level to use; this number is between 0 and <strong>MipLevels</strong> -1 (where <strong>MipLevels</strong> is from the original Texture2D for which <strong><see cref="SharpDX.Direct3D12.Device.CreateShaderResourceView"/></strong> creates a view). </p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_ARRAY_SRV::MostDetailedMip']/*"/>	
            /// <msdn-id>dn770430</msdn-id>	
            /// <unmanaged>unsigned int MostDetailedMip</unmanaged>	
            /// <unmanaged-short>unsigned int MostDetailedMip</unmanaged-short>	
            public int MostDetailedMip;
            
            /// <summary>	
            /// <dd> <p> The maximum number of mipmap levels for the view of the texture. See the remarks in <strong><see cref="SharpDX.Direct3D12.ShaderResourceViewDescription.Texture1DResource"/></strong>. </p> <p> Set to -1 to indicate all the mipmap levels from <strong>MostDetailedMip</strong> on down to least detailed. </p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_ARRAY_SRV::MipLevels']/*"/>	
            /// <msdn-id>dn770430</msdn-id>	
            /// <unmanaged>unsigned int MipLevels</unmanaged>	
            /// <unmanaged-short>unsigned int MipLevels</unmanaged-short>	
            public int MipLevels;
            
            /// <summary>	
            /// <dd> <p>The index of the first texture to use in an array of textures.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_ARRAY_SRV::FirstArraySlice']/*"/>	
            /// <msdn-id>dn770430</msdn-id>	
            /// <unmanaged>unsigned int FirstArraySlice</unmanaged>	
            /// <unmanaged-short>unsigned int FirstArraySlice</unmanaged-short>	
            public int FirstArraySlice;
            
            /// <summary>	
            /// <dd> <p>Number of textures in the array.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_ARRAY_SRV::ArraySize']/*"/>	
            /// <msdn-id>dn770430</msdn-id>	
            /// <unmanaged>unsigned int ArraySize</unmanaged>	
            /// <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
            public int ArraySize;
            
            /// <summary>	
            /// <dd> <p> The index (plane slice number) of the plane to use in an array of textures. </p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_ARRAY_SRV::PlaneSlice']/*"/>	
            /// <msdn-id>dn770430</msdn-id>	
            /// <unmanaged>unsigned int PlaneSlice</unmanaged>	
            /// <unmanaged-short>unsigned int PlaneSlice</unmanaged-short>	
            public int PlaneSlice;
            
            /// <summary>	
            /// <dd> <p>A value to clamp sample LOD values to. For example, if you specify 2.0f for the clamp value, you ensure that no individual sample accesses a mip level less than 2.0f.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_ARRAY_SRV::ResourceMinLODClamp']/*"/>	
            /// <msdn-id>dn770430</msdn-id>	
            /// <unmanaged>float ResourceMinLODClamp</unmanaged>	
            /// <unmanaged-short>float ResourceMinLODClamp</unmanaged-short>	
            public float ResourceMinLODClamp;
        }
        
        /// <summary>	
        /// <p>Describes the subresources from a multi sampled 2D texture to use in a shader-resource view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is a member of the <strong><see cref="SharpDX.Direct3D12.ShaderResourceViewDescription"/></strong> structure.</p><p>Since a multi sampled 2D texture contains a single subresource, there is actually nothing to specify in <strong><see cref="SharpDX.Direct3D12.ShaderResourceViewDescription.Texture2DMultisampledResource"/></strong>. Consequently, <strong>UnusedField_NothingToDefine</strong> is included so that this structure will compile in C.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2DMS_SRV']/*"/>	
        /// <msdn-id>dn770427</msdn-id>	
        /// <unmanaged>D3D12_TEX2DMS_SRV</unmanaged>	
        /// <unmanaged-short>D3D12_TEX2DMS_SRV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DMultisampledResource {	
            
            /// <summary>	
            /// <dd> <p>Integer of any value. See remarks.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2DMS_SRV::UnusedField_NothingToDefine']/*"/>	
            /// <msdn-id>dn770427</msdn-id>	
            /// <unmanaged>unsigned int UnusedField_NothingToDefine</unmanaged>	
            /// <unmanaged-short>unsigned int UnusedField_NothingToDefine</unmanaged-short>	
            public int UnusedFieldNothingToDefine;
        }
        
        /// <summary>	
        /// <p>Describes the subresources from an array of multi sampled 2D textures to use in a shader-resource view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is one member of a shader-resource-view description, <strong><see cref="SharpDX.Direct3D12.ShaderResourceViewDescription"/></strong>.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2DMS_ARRAY_SRV']/*"/>	
        /// <msdn-id>dn770424</msdn-id>	
        /// <unmanaged>D3D12_TEX2DMS_ARRAY_SRV</unmanaged>	
        /// <unmanaged-short>D3D12_TEX2DMS_ARRAY_SRV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DMultisampledArrayResource {	
            
            /// <summary>	
            /// <dd> <p>The index of the first texture to use in an array of textures.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2DMS_ARRAY_SRV::FirstArraySlice']/*"/>	
            /// <msdn-id>dn770424</msdn-id>	
            /// <unmanaged>unsigned int FirstArraySlice</unmanaged>	
            /// <unmanaged-short>unsigned int FirstArraySlice</unmanaged-short>	
            public int FirstArraySlice;
            
            /// <summary>	
            /// <dd> <p>Number of textures to use.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2DMS_ARRAY_SRV::ArraySize']/*"/>	
            /// <msdn-id>dn770424</msdn-id>	
            /// <unmanaged>unsigned int ArraySize</unmanaged>	
            /// <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
            public int ArraySize;
        }
        
        /// <summary>	
        /// <p>Describes the subresources from a 3D texture to use in a shader-resource view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is one member of a shader-resource-view description, <strong><see cref="SharpDX.Direct3D12.ShaderResourceViewDescription"/></strong>.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX3D_SRV']/*"/>	
        /// <msdn-id>dn770437</msdn-id>	
        /// <unmanaged>D3D12_TEX3D_SRV</unmanaged>	
        /// <unmanaged-short>D3D12_TEX3D_SRV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture3DResource {	
            
            /// <summary>	
            /// <dd> <p>Index of the most detailed mipmap level to use; this number is between 0 and <strong>MipLevels</strong> (from the original Texture3D for which <strong><see cref="SharpDX.Direct3D12.Device.CreateShaderResourceView"/></strong> creates a view) -1.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX3D_SRV::MostDetailedMip']/*"/>	
            /// <msdn-id>dn770437</msdn-id>	
            /// <unmanaged>unsigned int MostDetailedMip</unmanaged>	
            /// <unmanaged-short>unsigned int MostDetailedMip</unmanaged-short>	
            public int MostDetailedMip;
            
            /// <summary>	
            /// <dd> <p>The maximum number of mipmap levels for the view of the texture. See the remarks in <strong><see cref="SharpDX.Direct3D12.ShaderResourceViewDescription.Texture1DResource"/></strong>.</p> <p>Set to -1 to indicate all the mipmap levels from <strong>MostDetailedMip</strong> on down to least detailed.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX3D_SRV::MipLevels']/*"/>	
            /// <msdn-id>dn770437</msdn-id>	
            /// <unmanaged>unsigned int MipLevels</unmanaged>	
            /// <unmanaged-short>unsigned int MipLevels</unmanaged-short>	
            public int MipLevels;
            
            /// <summary>	
            /// <dd> <p>A value to clamp sample LOD values to. For example, if you specify 2.0f for the clamp value, you ensure that no individual sample accesses a mip level less than 2.0f.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX3D_SRV::ResourceMinLODClamp']/*"/>	
            /// <msdn-id>dn770437</msdn-id>	
            /// <unmanaged>float ResourceMinLODClamp</unmanaged>	
            /// <unmanaged-short>float ResourceMinLODClamp</unmanaged-short>	
            public float ResourceMinLODClamp;
        }
        
        /// <summary>	
        /// <p>Describes the subresource from a cube texture to use in a shader-resource view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is one member of a shader-resource-view description, <strong><see cref="SharpDX.Direct3D12.ShaderResourceViewDescription"/></strong>.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEXCUBE_SRV']/*"/>	
        /// <msdn-id>dn770440</msdn-id>	
        /// <unmanaged>D3D12_TEXCUBE_SRV</unmanaged>	
        /// <unmanaged-short>D3D12_TEXCUBE_SRV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct TextureCubeResource {	
            
            /// <summary>	
            /// <dd> <p>Index of the most detailed mipmap level to use; this number is between 0 and <strong>MipLevels</strong> (from the original TextureCube for which <strong><see cref="SharpDX.Direct3D12.Device.CreateShaderResourceView"/></strong> creates a view) -1.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEXCUBE_SRV::MostDetailedMip']/*"/>	
            /// <msdn-id>dn770440</msdn-id>	
            /// <unmanaged>unsigned int MostDetailedMip</unmanaged>	
            /// <unmanaged-short>unsigned int MostDetailedMip</unmanaged-short>	
            public int MostDetailedMip;
            
            /// <summary>	
            /// <dd> <p>The maximum number of mipmap levels for the view of the texture. See the remarks in <strong><see cref="SharpDX.Direct3D12.ShaderResourceViewDescription.Texture1DResource"/></strong>.</p> <p>Set to -1 to indicate all the mipmap levels from <strong>MostDetailedMip</strong> on down to least detailed.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEXCUBE_SRV::MipLevels']/*"/>	
            /// <msdn-id>dn770440</msdn-id>	
            /// <unmanaged>unsigned int MipLevels</unmanaged>	
            /// <unmanaged-short>unsigned int MipLevels</unmanaged-short>	
            public int MipLevels;
            
            /// <summary>	
            /// <dd> <p>A value to clamp sample LOD values to. For example, if you specify 2.0f for the clamp value, you ensure that no individual sample accesses a mip level less than 2.0f.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEXCUBE_SRV::ResourceMinLODClamp']/*"/>	
            /// <msdn-id>dn770440</msdn-id>	
            /// <unmanaged>float ResourceMinLODClamp</unmanaged>	
            /// <unmanaged-short>float ResourceMinLODClamp</unmanaged-short>	
            public float ResourceMinLODClamp;
        }
        
        /// <summary>	
        /// <p>Describes the subresources from an array of cube textures to use in a shader-resource view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This structure is one member of a shader-resource-view description, <strong><see cref="SharpDX.Direct3D12.ShaderResourceViewDescription"/></strong>.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEXCUBE_ARRAY_SRV']/*"/>	
        /// <msdn-id>dn770439</msdn-id>	
        /// <unmanaged>D3D12_TEXCUBE_ARRAY_SRV</unmanaged>	
        /// <unmanaged-short>D3D12_TEXCUBE_ARRAY_SRV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct TextureCubeArrayResource {	
            
            /// <summary>	
            /// <dd> <p>Index of the most detailed mipmap level to use; this number is between 0 and <strong>MipLevels</strong> (from the original TextureCube for which <strong><see cref="SharpDX.Direct3D12.Device.CreateShaderResourceView"/></strong> creates a view) -1.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEXCUBE_ARRAY_SRV::MostDetailedMip']/*"/>	
            /// <msdn-id>dn770439</msdn-id>	
            /// <unmanaged>unsigned int MostDetailedMip</unmanaged>	
            /// <unmanaged-short>unsigned int MostDetailedMip</unmanaged-short>	
            public int MostDetailedMip;
            
            /// <summary>	
            /// <dd> <p>The maximum number of mipmap levels for the view of the texture. See the remarks in <strong><see cref="SharpDX.Direct3D12.ShaderResourceViewDescription.Texture1DResource"/></strong>.</p> <p>Set to -1 to indicate all the mipmap levels from <strong>MostDetailedMip</strong> on down to least detailed.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEXCUBE_ARRAY_SRV::MipLevels']/*"/>	
            /// <msdn-id>dn770439</msdn-id>	
            /// <unmanaged>unsigned int MipLevels</unmanaged>	
            /// <unmanaged-short>unsigned int MipLevels</unmanaged-short>	
            public int MipLevels;
            
            /// <summary>	
            /// <dd> <p>Index of the first 2D texture to use.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEXCUBE_ARRAY_SRV::First2DArrayFace']/*"/>	
            /// <msdn-id>dn770439</msdn-id>	
            /// <unmanaged>unsigned int First2DArrayFace</unmanaged>	
            /// <unmanaged-short>unsigned int First2DArrayFace</unmanaged-short>	
            public int First2DArrayFace;
            
            /// <summary>	
            /// <dd> <p>Number of cube textures in the array.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEXCUBE_ARRAY_SRV::NumCubes']/*"/>	
            /// <msdn-id>dn770439</msdn-id>	
            /// <unmanaged>unsigned int NumCubes</unmanaged>	
            /// <unmanaged-short>unsigned int NumCubes</unmanaged-short>	
            public int CubeCount;
            
            /// <summary>	
            /// <dd> <p>A value to clamp sample LOD values to. For example, if you specify 2.0f for the clamp value, you ensure that no individual sample accesses a mip level less than 2.0f.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEXCUBE_ARRAY_SRV::ResourceMinLODClamp']/*"/>	
            /// <msdn-id>dn770439</msdn-id>	
            /// <unmanaged>float ResourceMinLODClamp</unmanaged>	
            /// <unmanaged-short>float ResourceMinLODClamp</unmanaged-short>	
            public float ResourceMinLODClamp;
        }
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.DXGI.Format"/></strong>-typed value that  specifies the viewing format. See remarks. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SHADER_RESOURCE_VIEW_DESC::Format']/*"/>	
        /// <msdn-id>dn770406</msdn-id>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        [FieldOffset(0)]
        public SharpDX.DXGI.Format Format;
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.ShaderResourceViewDimension"/></strong>-typed value that  specifies the resource type of the view.  This type is the same as the resource type of the underlying resource.  This member also determines which _SRV to use in the union below. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SHADER_RESOURCE_VIEW_DESC::ViewDimension']/*"/>	
        /// <msdn-id>dn770406</msdn-id>	
        /// <unmanaged>D3D12_SRV_DIMENSION ViewDimension</unmanaged>	
        /// <unmanaged-short>D3D12_SRV_DIMENSION ViewDimension</unmanaged-short>	
        [FieldOffset(4)]
        public SharpDX.Direct3D12.ShaderResourceViewDimension Dimension;
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.ShaderComponentMapping"/></strong> enumeration constant, such as return component 0 (red) from memory, or force the resulting value to 0. This mapping enables the shader resource view (SRV) to choose how memory gets routed to the 4 return components in a shader after a memory fetch.   </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SHADER_RESOURCE_VIEW_DESC::Shader4ComponentMapping']/*"/>	
        /// <msdn-id>dn770406</msdn-id>	
        /// <unmanaged>unsigned int Shader4ComponentMapping</unmanaged>	
        /// <unmanaged-short>unsigned int Shader4ComponentMapping</unmanaged-short>	
        [FieldOffset(8)]
        public int Shader4ComponentMapping;
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.ShaderResourceViewDescription.BufferResource"/></strong> structure that views the resource as a buffer. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SHADER_RESOURCE_VIEW_DESC::Buffer']/*"/>	
        /// <msdn-id>dn770406</msdn-id>	
        /// <unmanaged>D3D12_BUFFER_SRV Buffer</unmanaged>	
        /// <unmanaged-short>D3D12_BUFFER_SRV Buffer</unmanaged-short>	
        [FieldOffset(16)]
        public SharpDX.Direct3D12.ShaderResourceViewDescription.BufferResource Buffer;
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.ShaderResourceViewDescription.Texture1DResource"/></strong> structure that views the resource as a 1D texture. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SHADER_RESOURCE_VIEW_DESC::Texture1D']/*"/>	
        /// <msdn-id>dn770406</msdn-id>	
        /// <unmanaged>D3D12_TEX1D_SRV Texture1D</unmanaged>	
        /// <unmanaged-short>D3D12_TEX1D_SRV Texture1D</unmanaged-short>	
        [FieldOffset(16)]
        public SharpDX.Direct3D12.ShaderResourceViewDescription.Texture1DResource Texture1D;
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.ShaderResourceViewDescription.Texture1DArrayResource"/></strong> structure that views the resource as a 1D-texture array. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SHADER_RESOURCE_VIEW_DESC::Texture1DArray']/*"/>	
        /// <msdn-id>dn770406</msdn-id>	
        /// <unmanaged>D3D12_TEX1D_ARRAY_SRV Texture1DArray</unmanaged>	
        /// <unmanaged-short>D3D12_TEX1D_ARRAY_SRV Texture1DArray</unmanaged-short>	
        [FieldOffset(16)]
        public SharpDX.Direct3D12.ShaderResourceViewDescription.Texture1DArrayResource Texture1DArray;
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.ShaderResourceViewDescription.Texture2DResource"/></strong> structure that views the resource as a 2D-texture. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SHADER_RESOURCE_VIEW_DESC::Texture2D']/*"/>	
        /// <msdn-id>dn770406</msdn-id>	
        /// <unmanaged>D3D12_TEX2D_SRV Texture2D</unmanaged>	
        /// <unmanaged-short>D3D12_TEX2D_SRV Texture2D</unmanaged-short>	
        [FieldOffset(16)]
        public SharpDX.Direct3D12.ShaderResourceViewDescription.Texture2DResource Texture2D;
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.ShaderResourceViewDescription.Texture2DArrayResource"/></strong> structure that views the resource as a 2D-texture array. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SHADER_RESOURCE_VIEW_DESC::Texture2DArray']/*"/>	
        /// <msdn-id>dn770406</msdn-id>	
        /// <unmanaged>D3D12_TEX2D_ARRAY_SRV Texture2DArray</unmanaged>	
        /// <unmanaged-short>D3D12_TEX2D_ARRAY_SRV Texture2DArray</unmanaged-short>	
        [FieldOffset(16)]
        public SharpDX.Direct3D12.ShaderResourceViewDescription.Texture2DArrayResource Texture2DArray;
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.ShaderResourceViewDescription.Texture2DMultisampledResource"/></strong> structure that views the resource as a 2D-multisampled texture. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SHADER_RESOURCE_VIEW_DESC::Texture2DMS']/*"/>	
        /// <msdn-id>dn770406</msdn-id>	
        /// <unmanaged>D3D12_TEX2DMS_SRV Texture2DMS</unmanaged>	
        /// <unmanaged-short>D3D12_TEX2DMS_SRV Texture2DMS</unmanaged-short>	
        [FieldOffset(16)]
        public SharpDX.Direct3D12.ShaderResourceViewDescription.Texture2DMultisampledResource Texture2DMS;
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.ShaderResourceViewDescription.Texture2DMultisampledArrayResource"/></strong> structure that views the resource as a 2D-multisampled-texture array. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SHADER_RESOURCE_VIEW_DESC::Texture2DMSArray']/*"/>	
        /// <msdn-id>dn770406</msdn-id>	
        /// <unmanaged>D3D12_TEX2DMS_ARRAY_SRV Texture2DMSArray</unmanaged>	
        /// <unmanaged-short>D3D12_TEX2DMS_ARRAY_SRV Texture2DMSArray</unmanaged-short>	
        [FieldOffset(16)]
        public SharpDX.Direct3D12.ShaderResourceViewDescription.Texture2DMultisampledArrayResource Texture2DMSArray;
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.ShaderResourceViewDescription.Texture3DResource"/></strong> structure that views the resource as a 3D texture. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SHADER_RESOURCE_VIEW_DESC::Texture3D']/*"/>	
        /// <msdn-id>dn770406</msdn-id>	
        /// <unmanaged>D3D12_TEX3D_SRV Texture3D</unmanaged>	
        /// <unmanaged-short>D3D12_TEX3D_SRV Texture3D</unmanaged-short>	
        [FieldOffset(16)]
        public SharpDX.Direct3D12.ShaderResourceViewDescription.Texture3DResource Texture3D;
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.ShaderResourceViewDescription.TextureCubeResource"/></strong> structure that views the resource as a 3D-cube texture. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SHADER_RESOURCE_VIEW_DESC::TextureCube']/*"/>	
        /// <msdn-id>dn770406</msdn-id>	
        /// <unmanaged>D3D12_TEXCUBE_SRV TextureCube</unmanaged>	
        /// <unmanaged-short>D3D12_TEXCUBE_SRV TextureCube</unmanaged-short>	
        [FieldOffset(16)]
        public SharpDX.Direct3D12.ShaderResourceViewDescription.TextureCubeResource TextureCube;
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.ShaderResourceViewDescription.TextureCubeArrayResource"/></strong> structure that views the resource as a 3D-cube-texture array. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SHADER_RESOURCE_VIEW_DESC::TextureCubeArray']/*"/>	
        /// <msdn-id>dn770406</msdn-id>	
        /// <unmanaged>D3D12_TEXCUBE_ARRAY_SRV TextureCubeArray</unmanaged>	
        /// <unmanaged-short>D3D12_TEXCUBE_ARRAY_SRV TextureCubeArray</unmanaged-short>	
        [FieldOffset(16)]
        public SharpDX.Direct3D12.ShaderResourceViewDescription.TextureCubeArrayResource TextureCubeArray;
    }
    
    /// <summary>	
    /// <p> Describes a static sampler. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> Use this structure with the <strong><see cref="SharpDX.Direct3D12.RootSignatureDescription"/></strong> structure. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_STATIC_SAMPLER_DESC']/*"/>	
    /// <msdn-id>dn986748</msdn-id>	
    /// <unmanaged>D3D12_STATIC_SAMPLER_DESC</unmanaged>	
    /// <unmanaged-short>D3D12_STATIC_SAMPLER_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct StaticSamplerDescription {	
        
        /// <summary>	
        /// <dd> <p> The filtering method to use when sampling a texture, as a <strong><see cref="SharpDX.Direct3D12.Filter"/></strong> enumeration constant. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_STATIC_SAMPLER_DESC::Filter']/*"/>	
        /// <msdn-id>dn986748</msdn-id>	
        /// <unmanaged>D3D12_FILTER Filter</unmanaged>	
        /// <unmanaged-short>D3D12_FILTER Filter</unmanaged-short>	
        public SharpDX.Direct3D12.Filter Filter;
        
        /// <summary>	
        /// <dd> <p> Specifies the <strong><see cref="SharpDX.Direct3D12.TextureAddressMode"/></strong> mode to use for resolving a <em>u</em> texture coordinate that is outside the 0 to 1 range. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_STATIC_SAMPLER_DESC::AddressU']/*"/>	
        /// <msdn-id>dn986748</msdn-id>	
        /// <unmanaged>D3D12_TEXTURE_ADDRESS_MODE AddressU</unmanaged>	
        /// <unmanaged-short>D3D12_TEXTURE_ADDRESS_MODE AddressU</unmanaged-short>	
        public SharpDX.Direct3D12.TextureAddressMode AddressU;
        
        /// <summary>	
        /// <dd> <p> Specifies the <strong><see cref="SharpDX.Direct3D12.TextureAddressMode"/></strong> mode to use for resolving a <em>v</em> texture coordinate that is outside the 0 to 1 range. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_STATIC_SAMPLER_DESC::AddressV']/*"/>	
        /// <msdn-id>dn986748</msdn-id>	
        /// <unmanaged>D3D12_TEXTURE_ADDRESS_MODE AddressV</unmanaged>	
        /// <unmanaged-short>D3D12_TEXTURE_ADDRESS_MODE AddressV</unmanaged-short>	
        public SharpDX.Direct3D12.TextureAddressMode AddressV;
        
        /// <summary>	
        /// <dd> <p> Specifies the <strong><see cref="SharpDX.Direct3D12.TextureAddressMode"/></strong> mode to use for resolving a <em>w</em> texture coordinate that is outside the 0 to 1 range. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_STATIC_SAMPLER_DESC::AddressW']/*"/>	
        /// <msdn-id>dn986748</msdn-id>	
        /// <unmanaged>D3D12_TEXTURE_ADDRESS_MODE AddressW</unmanaged>	
        /// <unmanaged-short>D3D12_TEXTURE_ADDRESS_MODE AddressW</unmanaged-short>	
        public SharpDX.Direct3D12.TextureAddressMode AddressW;
        
        /// <summary>	
        /// <dd> <p> Offset from the calculated mipmap level. For example, if Direct3D calculates that a texture should be sampled at mipmap level 3 and MipLODBias is 2, then the texture will be sampled at mipmap level 5. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_STATIC_SAMPLER_DESC::MipLODBias']/*"/>	
        /// <msdn-id>dn986748</msdn-id>	
        /// <unmanaged>float MipLODBias</unmanaged>	
        /// <unmanaged-short>float MipLODBias</unmanaged-short>	
        public float MipLODBias;
        
        /// <summary>	
        /// <dd> <p> Clamping value used if <see cref="SharpDX.Direct3D12.Filter.Anisotropic"/> or <see cref="SharpDX.Direct3D12.Filter.ComparisonAnisotropic"/> is specified as the filter. Valid values are between 1 and 16. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_STATIC_SAMPLER_DESC::MaxAnisotropy']/*"/>	
        /// <msdn-id>dn986748</msdn-id>	
        /// <unmanaged>unsigned int MaxAnisotropy</unmanaged>	
        /// <unmanaged-short>unsigned int MaxAnisotropy</unmanaged-short>	
        public int MaxAnisotropy;
        
        /// <summary>	
        /// <dd> <p> A function that compares sampled data against existing sampled data.  The function options are listed in <strong><see cref="SharpDX.Direct3D12.Comparison"/></strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_STATIC_SAMPLER_DESC::ComparisonFunc']/*"/>	
        /// <msdn-id>dn986748</msdn-id>	
        /// <unmanaged>D3D12_COMPARISON_FUNC ComparisonFunc</unmanaged>	
        /// <unmanaged-short>D3D12_COMPARISON_FUNC ComparisonFunc</unmanaged-short>	
        public SharpDX.Direct3D12.Comparison ComparisonFunc;
        
        /// <summary>	
        /// <dd> <p> One member of <strong><see cref="SharpDX.Direct3D12.StaticBorderColor"/></strong>, the border color to use if <see cref="SharpDX.Direct3D12.TextureAddressMode.Border"/> is specified for AddressU, AddressV, or AddressW.  Range must be between 0.0 and 1.0 inclusive. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_STATIC_SAMPLER_DESC::BorderColor']/*"/>	
        /// <msdn-id>dn986748</msdn-id>	
        /// <unmanaged>D3D12_STATIC_BORDER_COLOR BorderColor</unmanaged>	
        /// <unmanaged-short>D3D12_STATIC_BORDER_COLOR BorderColor</unmanaged-short>	
        public SharpDX.Direct3D12.StaticBorderColor BorderColor;
        
        /// <summary>	
        /// <dd> <p> Lower end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_STATIC_SAMPLER_DESC::MinLOD']/*"/>	
        /// <msdn-id>dn986748</msdn-id>	
        /// <unmanaged>float MinLOD</unmanaged>	
        /// <unmanaged-short>float MinLOD</unmanaged-short>	
        public float MinLOD;
        
        /// <summary>	
        /// <dd> <p> Upper end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed. This value must be greater than or equal to MinLOD. To have no upper limit on LOD set this to a large value such as D3D12_FLOAT32_MAX. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_STATIC_SAMPLER_DESC::MaxLOD']/*"/>	
        /// <msdn-id>dn986748</msdn-id>	
        /// <unmanaged>float MaxLOD</unmanaged>	
        /// <unmanaged-short>float MaxLOD</unmanaged-short>	
        public float MaxLOD;
        
        /// <summary>	
        /// <dd> <p> The <em>ShaderRegister</em> and <em>RegisterSpace</em> parameters correspond to the binding syntax of HLSL.  For example, in HLSL: </p> <code>Texture2D&lt;float4&gt; a : register(t2, space3);</code> <p> This corresponds to a  <em>ShaderRegister</em> of 2 (indicating the type is SRV), and <em>RegisterSpace</em> is 3. </p> <p> The  <em>ShaderRegister</em> and <em>RegisterSpace</em> pair is needed to establish correspondence between shader resources and runtime heap descriptors, using the root signature data structure. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_STATIC_SAMPLER_DESC::ShaderRegister']/*"/>	
        /// <msdn-id>dn986748</msdn-id>	
        /// <unmanaged>unsigned int ShaderRegister</unmanaged>	
        /// <unmanaged-short>unsigned int ShaderRegister</unmanaged-short>	
        public int ShaderRegister;
        
        /// <summary>	
        /// <dd> <p> See the description for <em>ShaderRegister</em>. Register space is optional; the default register space is 0. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_STATIC_SAMPLER_DESC::RegisterSpace']/*"/>	
        /// <msdn-id>dn986748</msdn-id>	
        /// <unmanaged>unsigned int RegisterSpace</unmanaged>	
        /// <unmanaged-short>unsigned int RegisterSpace</unmanaged-short>	
        public int RegisterSpace;
        
        /// <summary>	
        /// <dd> <p> Specifies the visibility of the sampler to the pipeline shaders, one member of <strong><see cref="SharpDX.Direct3D12.ShaderVisibility"/></strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_STATIC_SAMPLER_DESC::ShaderVisibility']/*"/>	
        /// <msdn-id>dn986748</msdn-id>	
        /// <unmanaged>D3D12_SHADER_VISIBILITY ShaderVisibility</unmanaged>	
        /// <unmanaged-short>D3D12_SHADER_VISIBILITY ShaderVisibility</unmanaged-short>	
        public SharpDX.Direct3D12.ShaderVisibility ShaderVisibility;
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_STREAM_OUTPUT_BUFFER_VIEW']/*"/>	
    /// <unmanaged>D3D12_STREAM_OUTPUT_BUFFER_VIEW</unmanaged>	
    /// <unmanaged-short>D3D12_STREAM_OUTPUT_BUFFER_VIEW</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct StreamOutputBufferView {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_STREAM_OUTPUT_BUFFER_VIEW::BufferLocation']/*"/>	
        /// <unmanaged>unsigned longlong BufferLocation</unmanaged>	
        /// <unmanaged-short>unsigned longlong BufferLocation</unmanaged-short>	
        public long BufferLocation;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_STREAM_OUTPUT_BUFFER_VIEW::SizeInBytes']/*"/>	
        /// <unmanaged>unsigned longlong SizeInBytes</unmanaged>	
        /// <unmanaged-short>unsigned longlong SizeInBytes</unmanaged-short>	
        public long SizeInBytes;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_STREAM_OUTPUT_BUFFER_VIEW::BufferFilledSizeLocation']/*"/>	
        /// <unmanaged>unsigned longlong BufferFilledSizeLocation</unmanaged>	
        /// <unmanaged-short>unsigned longlong BufferFilledSizeLocation</unmanaged-short>	
        public long BufferFilledSizeLocation;
    }
    
    /// <summary>	
    /// <p>Describes a streaming output buffer.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> A <strong><see cref="SharpDX.Direct3D12.GraphicsPipelineStateDescription"/></strong> object contains a <strong><see cref="SharpDX.Direct3D12.StreamOutputDescription"/></strong> structure. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_STREAM_OUTPUT_DESC']/*"/>	
    /// <msdn-id>dn770410</msdn-id>	
    /// <unmanaged>D3D12_STREAM_OUTPUT_DESC</unmanaged>	
    /// <unmanaged-short>D3D12_STREAM_OUTPUT_DESC</unmanaged-short>	
    public  partial class StreamOutputDescription {	
        
        /// <summary>	
        /// <dd> <p> An array of <strong><see cref="SharpDX.Direct3D12.StreamOutputElement"/></strong> structures. Can't be <strong><c>null</c></strong> if <strong>NumEntries</strong> &gt; 0. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_STREAM_OUTPUT_DESC::pSODeclaration']/*"/>	
        /// <msdn-id>dn770410</msdn-id>	
        /// <unmanaged>const D3D12_SO_DECLARATION_ENTRY* pSODeclaration</unmanaged>	
        /// <unmanaged-short>D3D12_SO_DECLARATION_ENTRY pSODeclaration</unmanaged-short>	
        private System.IntPtr StreamOutputEntriesPointer;
        
        /// <summary>	
        /// <dd> <p> The number of entries in the stream output declaration array that the <strong>pSODeclaration</strong> member points to. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_STREAM_OUTPUT_DESC::NumEntries']/*"/>	
        /// <msdn-id>dn770410</msdn-id>	
        /// <unmanaged>unsigned int NumEntries</unmanaged>	
        /// <unmanaged-short>unsigned int NumEntries</unmanaged-short>	
        private int EntrieCount;
        
        /// <summary>	
        /// <dd> <p> An array of buffer strides; each stride is the size of an element for that buffer. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_STREAM_OUTPUT_DESC::pBufferStrides']/*"/>	
        /// <msdn-id>dn770410</msdn-id>	
        /// <unmanaged>const unsigned int* pBufferStrides</unmanaged>	
        /// <unmanaged-short>unsigned int pBufferStrides</unmanaged-short>	
        public System.IntPtr BufferStridesPointer;
        
        /// <summary>	
        /// <dd> <p> The number of strides (or buffers) that the <strong>pBufferStrides</strong> member points to. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_STREAM_OUTPUT_DESC::NumStrides']/*"/>	
        /// <msdn-id>dn770410</msdn-id>	
        /// <unmanaged>unsigned int NumStrides</unmanaged>	
        /// <unmanaged-short>unsigned int NumStrides</unmanaged-short>	
        public int StrideCount;
        
        /// <summary>	
        /// <dd> <p> The index number of the stream to be sent to the rasterizer stage. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_STREAM_OUTPUT_DESC::RasterizedStream']/*"/>	
        /// <msdn-id>dn770410</msdn-id>	
        /// <unmanaged>unsigned int RasterizedStream</unmanaged>	
        /// <unmanaged-short>unsigned int RasterizedStream</unmanaged-short>	
        public int RasterizedStream;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public System.IntPtr StreamOutputEntriesPointer;
            public int EntrieCount;
            public System.IntPtr BufferStridesPointer;
            public int StrideCount;
            public int RasterizedStream;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.StreamOutputEntriesPointer = @ref.StreamOutputEntriesPointer;
            this.EntrieCount = @ref.EntrieCount;
            this.BufferStridesPointer = @ref.BufferStridesPointer;
            this.StrideCount = @ref.StrideCount;
            this.RasterizedStream = @ref.RasterizedStream;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.StreamOutputEntriesPointer = this.StreamOutputEntriesPointer;
            @ref.EntrieCount = this.EntrieCount;
            @ref.BufferStridesPointer = this.BufferStridesPointer;
            @ref.StrideCount = this.StrideCount;
            @ref.RasterizedStream = this.RasterizedStream;
		
		}
    }
    
    /// <summary>	
    /// <p>Describes a vertex element in a vertex buffer in an output slot.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Specify an array of <strong><see cref="SharpDX.Direct3D12.StreamOutputElement"/></strong> structures in the <strong>pSODeclaration</strong> member of a <strong><see cref="SharpDX.Direct3D12.StreamOutputDescription"/></strong> structure. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SO_DECLARATION_ENTRY']/*"/>	
    /// <msdn-id>dn879483</msdn-id>	
    /// <unmanaged>D3D12_SO_DECLARATION_ENTRY</unmanaged>	
    /// <unmanaged-short>D3D12_SO_DECLARATION_ENTRY</unmanaged-short>	
    public  partial struct StreamOutputElement {	
        
        /// <summary>	
        /// <dd> <p>Zero-based, stream number.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SO_DECLARATION_ENTRY::Stream']/*"/>	
        /// <msdn-id>dn879483</msdn-id>	
        /// <unmanaged>unsigned int Stream</unmanaged>	
        /// <unmanaged-short>unsigned int Stream</unmanaged-short>	
        public int Stream;
        
        /// <summary>	
        /// <dd> <p>Type of output element; possible values include: <strong>"POSITION"</strong>, <strong>"NORMAL"</strong>, or <strong>"TEXCOORD0"</strong>. Note that if <strong>SemanticName</strong> is <strong><c>null</c></strong> then  <strong>ComponentCount</strong> can be greater than 4 and the described entry will be a gap in the stream out where no data will be written. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SO_DECLARATION_ENTRY::SemanticName']/*"/>	
        /// <msdn-id>dn879483</msdn-id>	
        /// <unmanaged>const char* SemanticName</unmanaged>	
        /// <unmanaged-short>char SemanticName</unmanaged-short>	
        public string SemanticName;
        
        /// <summary>	
        /// <dd> <p>Output element's zero-based index. Use, for example, if you have more than one texture coordinate stored in each vertex.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SO_DECLARATION_ENTRY::SemanticIndex']/*"/>	
        /// <msdn-id>dn879483</msdn-id>	
        /// <unmanaged>unsigned int SemanticIndex</unmanaged>	
        /// <unmanaged-short>unsigned int SemanticIndex</unmanaged-short>	
        public int SemanticIndex;
        
        /// <summary>	
        /// <dd> <p>The component of the entry to begin writing out to. Valid values are 0 to 3. For example, if you only wish to output to the y and z components  of a position, <strong>StartComponent</strong> is 1 and <strong>ComponentCount</strong> is 2.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SO_DECLARATION_ENTRY::StartComponent']/*"/>	
        /// <msdn-id>dn879483</msdn-id>	
        /// <unmanaged>unsigned char StartComponent</unmanaged>	
        /// <unmanaged-short>unsigned char StartComponent</unmanaged-short>	
        public byte StartComponent;
        
        /// <summary>	
        /// <dd> <p>The number of components of the entry to write out to. Valid values are 1 to 4. For example, if you only wish to output to the y and z components  of a position, <strong>StartComponent</strong> is 1 and <strong>ComponentCount</strong> is 2.  Note that if <strong>SemanticName</strong> is <strong><c>null</c></strong> then  <strong>ComponentCount</strong> can be greater than 4 and the described entry will be a gap in the stream out where no data will be written.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SO_DECLARATION_ENTRY::ComponentCount']/*"/>	
        /// <msdn-id>dn879483</msdn-id>	
        /// <unmanaged>unsigned char ComponentCount</unmanaged>	
        /// <unmanaged-short>unsigned char ComponentCount</unmanaged-short>	
        public byte ComponentCount;
        
        /// <summary>	
        /// <dd> <p>The associated stream output buffer that is bound to the pipeline.  The valid range for <strong>OutputSlot</strong> is 0 to 3.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SO_DECLARATION_ENTRY::OutputSlot']/*"/>	
        /// <msdn-id>dn879483</msdn-id>	
        /// <unmanaged>unsigned char OutputSlot</unmanaged>	
        /// <unmanaged-short>unsigned char OutputSlot</unmanaged-short>	
        public byte OutputSlot;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public int Stream;
            public System.IntPtr SemanticName;
            public int SemanticIndex;
            public byte StartComponent;
            public byte ComponentCount;
            public byte OutputSlot;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                if (this.SemanticName != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.SemanticName);		
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Stream = @ref.Stream;
            this.SemanticName = ( @ref.SemanticName == IntPtr.Zero )?null:Marshal.PtrToStringAnsi(@ref.SemanticName);
            this.SemanticIndex = @ref.SemanticIndex;
            this.StartComponent = @ref.StartComponent;
            this.ComponentCount = @ref.ComponentCount;
            this.OutputSlot = @ref.OutputSlot;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Stream = this.Stream;
            @ref.SemanticName = ( this.SemanticName == null )?IntPtr.Zero : Utilities.StringToHGlobalAnsi(this.SemanticName);
            @ref.SemanticIndex = this.SemanticIndex;
            @ref.StartComponent = this.StartComponent;
            @ref.ComponentCount = this.ComponentCount;
            @ref.OutputSlot = this.OutputSlot;
		
		}
    }
    
    /// <summary>	
    /// <p>Describes query data for stream output.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Use this structure with <strong><see cref="SharpDX.Direct3D12.QueryHeapType"/></strong> and <strong>CreateQueryHeap</strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_QUERY_DATA_SO_STATISTICS']/*"/>	
    /// <msdn-id>dn903809</msdn-id>	
    /// <unmanaged>D3D12_QUERY_DATA_SO_STATISTICS</unmanaged>	
    /// <unmanaged-short>D3D12_QUERY_DATA_SO_STATISTICS</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct StreamOutputStatistics {	
        
        /// <summary>	
        /// <dd> <p>Specifies the number of primitives written.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_QUERY_DATA_SO_STATISTICS::NumPrimitivesWritten']/*"/>	
        /// <msdn-id>dn903809</msdn-id>	
        /// <unmanaged>unsigned longlong NumPrimitivesWritten</unmanaged>	
        /// <unmanaged-short>unsigned longlong NumPrimitivesWritten</unmanaged-short>	
        public long NumPrimitivesWritten;
        
        /// <summary>	
        /// <dd> <p>Specifies the total amount of storage needed by the primitives.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_QUERY_DATA_SO_STATISTICS::PrimitivesStorageNeeded']/*"/>	
        /// <msdn-id>dn903809</msdn-id>	
        /// <unmanaged>unsigned longlong PrimitivesStorageNeeded</unmanaged>	
        /// <unmanaged-short>unsigned longlong PrimitivesStorageNeeded</unmanaged-short>	
        public long PrimitivesStorageNeeded;
    }
    
    /// <summary>	
    /// <p> Describes subresource data. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This structure is used by a number of the helper functions, refer to Helper Structures and Functions for D3D12.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SUBRESOURCE_DATA']/*"/>	
    /// <msdn-id>dn879485</msdn-id>	
    /// <unmanaged>D3D12_SUBRESOURCE_DATA</unmanaged>	
    /// <unmanaged-short>D3D12_SUBRESOURCE_DATA</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    internal  partial struct SubResourceData {	
        
        /// <summary>	
        /// <dd> <p> A reference to a memory block that contains the subresource data. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SUBRESOURCE_DATA::pData']/*"/>	
        /// <msdn-id>dn879485</msdn-id>	
        /// <unmanaged>const void* pData</unmanaged>	
        /// <unmanaged-short>void pData</unmanaged-short>	
        public System.IntPtr DataPointer;
        
        /// <summary>	
        /// <dd> <p> The row pitch, or width, or physical size, in bytes, of the subresource data. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SUBRESOURCE_DATA::RowPitch']/*"/>	
        /// <msdn-id>dn879485</msdn-id>	
        /// <unmanaged>LONG_PTR RowPitch</unmanaged>	
        /// <unmanaged-short>LONG_PTR RowPitch</unmanaged-short>	
        public System.IntPtr RowPitch;
        
        /// <summary>	
        /// <dd> <p> The depth pitch, or width, or physical size, in bytes, of the subresource data. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SUBRESOURCE_DATA::SlicePitch']/*"/>	
        /// <msdn-id>dn879485</msdn-id>	
        /// <unmanaged>LONG_PTR SlicePitch</unmanaged>	
        /// <unmanaged-short>LONG_PTR SlicePitch</unmanaged-short>	
        public System.IntPtr SlicePitch;
    }
    
    /// <summary>	
    /// <p> Describes the format, width, height, depth, and row-pitch of the subresource into the parent resource. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> Use this structure in the <strong><see cref="SharpDX.Direct3D12.PlacedSubResourceFootprint"/></strong> structure. </p><p> The helper structure is <strong>CD3DX12_SUBRESOURCE_FOOTPRINT</strong>. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SUBRESOURCE_FOOTPRINT']/*"/>	
    /// <msdn-id>dn986749</msdn-id>	
    /// <unmanaged>D3D12_SUBRESOURCE_FOOTPRINT</unmanaged>	
    /// <unmanaged-short>D3D12_SUBRESOURCE_FOOTPRINT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct SubResourceFootprint {	
        
        /// <summary>	
        /// <dd> <p> A <strong><see cref="SharpDX.DXGI.Format"/></strong>-typed value that  specifies the viewing format. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SUBRESOURCE_FOOTPRINT::Format']/*"/>	
        /// <msdn-id>dn986749</msdn-id>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        public SharpDX.DXGI.Format Format;
        
        /// <summary>	
        /// <dd> <p> The width of the subresource. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SUBRESOURCE_FOOTPRINT::Width']/*"/>	
        /// <msdn-id>dn986749</msdn-id>	
        /// <unmanaged>unsigned int Width</unmanaged>	
        /// <unmanaged-short>unsigned int Width</unmanaged-short>	
        public int Width;
        
        /// <summary>	
        /// <dd> <p> The height of the subresource. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SUBRESOURCE_FOOTPRINT::Height']/*"/>	
        /// <msdn-id>dn986749</msdn-id>	
        /// <unmanaged>unsigned int Height</unmanaged>	
        /// <unmanaged-short>unsigned int Height</unmanaged-short>	
        public int Height;
        
        /// <summary>	
        /// <dd> <p> The depth of the subresource. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SUBRESOURCE_FOOTPRINT::Depth']/*"/>	
        /// <msdn-id>dn986749</msdn-id>	
        /// <unmanaged>unsigned int Depth</unmanaged>	
        /// <unmanaged-short>unsigned int Depth</unmanaged-short>	
        public int Depth;
        
        /// <summary>	
        /// <dd> <p> The row pitch, or width, or physical size, in bytes, of the subresource data. This must be a multiple of D3D12_TEXTURE_DATA_PITCH_ALIGNMENT (256), and must be greater than or equal to the size of the data within a row. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SUBRESOURCE_FOOTPRINT::RowPitch']/*"/>	
        /// <msdn-id>dn986749</msdn-id>	
        /// <unmanaged>unsigned int RowPitch</unmanaged>	
        /// <unmanaged-short>unsigned int RowPitch</unmanaged-short>	
        public int RowPitch;
    }
    
    /// <summary>	
    /// <p>Describes subresource data.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SUBRESOURCE_INFO']/*"/>	
    /// <msdn-id>dn770411</msdn-id>	
    /// <unmanaged>D3D12_SUBRESOURCE_INFO</unmanaged>	
    /// <unmanaged-short>D3D12_SUBRESOURCE_INFO</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct SubResourceInformation {	
        
        /// <summary>	
        /// <dd> <p>Offset, in bytes, between the start of the parent resource and this subresource.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SUBRESOURCE_INFO::Offset']/*"/>	
        /// <msdn-id>dn770411</msdn-id>	
        /// <unmanaged>unsigned longlong Offset</unmanaged>	
        /// <unmanaged-short>unsigned longlong Offset</unmanaged-short>	
        public long Offset;
        
        /// <summary>	
        /// <dd> <p>The row pitch, or width, or physical size, in bytes, of the subresource data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SUBRESOURCE_INFO::RowPitch']/*"/>	
        /// <msdn-id>dn770411</msdn-id>	
        /// <unmanaged>unsigned int RowPitch</unmanaged>	
        /// <unmanaged-short>unsigned int RowPitch</unmanaged-short>	
        public int RowPitch;
        
        /// <summary>	
        /// <dd> <p>The depth pitch, or width, or physical size, in bytes, of the subresource data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SUBRESOURCE_INFO::DepthPitch']/*"/>	
        /// <msdn-id>dn770411</msdn-id>	
        /// <unmanaged>unsigned int DepthPitch</unmanaged>	
        /// <unmanaged-short>unsigned int DepthPitch</unmanaged-short>	
        public int DepthPitch;
    }
    
    /// <summary>	
    /// <p>Describes a tiled subresource volume.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> This structure is used by the <strong>GetResourceTiling</strong> method. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SUBRESOURCE_TILING']/*"/>	
    /// <msdn-id>dn770412</msdn-id>	
    /// <unmanaged>D3D12_SUBRESOURCE_TILING</unmanaged>	
    /// <unmanaged-short>D3D12_SUBRESOURCE_TILING</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct SubResourceTiling {	
        
        /// <summary>	
        /// <dd> <p>The width in tiles of the subresource.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SUBRESOURCE_TILING::WidthInTiles']/*"/>	
        /// <msdn-id>dn770412</msdn-id>	
        /// <unmanaged>unsigned int WidthInTiles</unmanaged>	
        /// <unmanaged-short>unsigned int WidthInTiles</unmanaged-short>	
        public int WidthInTiles;
        
        /// <summary>	
        /// <dd> <p>The height in tiles of the subresource.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SUBRESOURCE_TILING::HeightInTiles']/*"/>	
        /// <msdn-id>dn770412</msdn-id>	
        /// <unmanaged>unsigned short HeightInTiles</unmanaged>	
        /// <unmanaged-short>unsigned short HeightInTiles</unmanaged-short>	
        public short HeightInTiles;
        
        /// <summary>	
        /// <dd> <p>The depth in tiles of the subresource.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SUBRESOURCE_TILING::DepthInTiles']/*"/>	
        /// <msdn-id>dn770412</msdn-id>	
        /// <unmanaged>unsigned short DepthInTiles</unmanaged>	
        /// <unmanaged-short>unsigned short DepthInTiles</unmanaged-short>	
        public short DepthInTiles;
        
        /// <summary>	
        /// <dd> <p>The index of the tile in the overall tiled subresource to start with. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_SUBRESOURCE_TILING::StartTileIndexInOverallResource']/*"/>	
        /// <msdn-id>dn770412</msdn-id>	
        /// <unmanaged>unsigned int StartTileIndexInOverallResource</unmanaged>	
        /// <unmanaged-short>unsigned int StartTileIndexInOverallResource</unmanaged-short>	
        public int StartTileIndexInOverallResource;
    }
    
    /// <summary>	
    /// <p>Describes a portion of a texture for the purpose of texture copies. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p> Use this structure with <strong>CopyTextureRegion</strong>. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEXTURE_COPY_LOCATION']/*"/>	
    /// <msdn-id>dn903818</msdn-id>	
    /// <unmanaged>D3D12_TEXTURE_COPY_LOCATION</unmanaged>	
    /// <unmanaged-short>D3D12_TEXTURE_COPY_LOCATION</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct TextureCopyLocation {	
    }
    
    /// <summary>	
    /// <p>Describes the coordinates of a tiled resource.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> This structure is used by the <strong>CopyTiles</strong>, <strong>CopyTileMappings</strong> and <strong>UpdateTileMappings</strong> methods. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TILED_RESOURCE_COORDINATE']/*"/>	
    /// <msdn-id>dn770443</msdn-id>	
    /// <unmanaged>D3D12_TILED_RESOURCE_COORDINATE</unmanaged>	
    /// <unmanaged-short>D3D12_TILED_RESOURCE_COORDINATE</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct TiledResourceCoordinate {	
        
        /// <summary>	
        /// <dd> <p>The x-coordinate of the tiled resource.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TILED_RESOURCE_COORDINATE::X']/*"/>	
        /// <msdn-id>dn770443</msdn-id>	
        /// <unmanaged>unsigned int X</unmanaged>	
        /// <unmanaged-short>unsigned int X</unmanaged-short>	
        public int X;
        
        /// <summary>	
        /// <dd> <p>The y-coordinate of the tiled resource.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TILED_RESOURCE_COORDINATE::Y']/*"/>	
        /// <msdn-id>dn770443</msdn-id>	
        /// <unmanaged>unsigned int Y</unmanaged>	
        /// <unmanaged-short>unsigned int Y</unmanaged-short>	
        public int Y;
        
        /// <summary>	
        /// <dd> <p>The z-coordinate of the tiled resource.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TILED_RESOURCE_COORDINATE::Z']/*"/>	
        /// <msdn-id>dn770443</msdn-id>	
        /// <unmanaged>unsigned int Z</unmanaged>	
        /// <unmanaged-short>unsigned int Z</unmanaged-short>	
        public int Z;
        
        /// <summary>	
        /// <dd> <p>The index of the subresource for the tiled resource.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TILED_RESOURCE_COORDINATE::Subresource']/*"/>	
        /// <msdn-id>dn770443</msdn-id>	
        /// <unmanaged>unsigned int Subresource</unmanaged>	
        /// <unmanaged-short>unsigned int Subresource</unmanaged-short>	
        public int Subresource;
    }
    
    /// <summary>	
    /// <p>Describes the size of a tiled region.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> This structure is used by the <strong>CopyTiles</strong>, <strong>CopyTileMappings</strong> and <strong>UpdateTileMappings</strong> methods. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TILE_REGION_SIZE']/*"/>	
    /// <msdn-id>dn770448</msdn-id>	
    /// <unmanaged>D3D12_TILE_REGION_SIZE</unmanaged>	
    /// <unmanaged-short>D3D12_TILE_REGION_SIZE</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct TileRegionSize {	
        
        /// <summary>	
        /// <dd> <p>The number of tiles in the tiled region.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TILE_REGION_SIZE::NumTiles']/*"/>	
        /// <msdn-id>dn770448</msdn-id>	
        /// <unmanaged>unsigned int NumTiles</unmanaged>	
        /// <unmanaged-short>unsigned int NumTiles</unmanaged-short>	
        public int TileCount;
        
        /// <summary>	
        /// <dd> <p> Specifies whether the runtime uses the <strong>Width</strong>, <strong>Height</strong>, and <strong>Depth</strong> members to define the region. </p> <p> If <strong>TRUE</strong>, the runtime uses the <strong>Width</strong>, <strong>Height</strong>, and <strong>Depth</strong> members to define the region. In this case,  <strong>NumTiles</strong> should be equal to <strong>Width</strong> *  <strong>Height</strong> * <strong>Depth</strong>.</p> <p> If <strong><see cref="SharpDX.Result.False"/></strong>, the runtime ignores the <strong>Width</strong>, <strong>Height</strong>, and <strong>Depth</strong> members and uses the <strong>NumTiles</strong> member to traverse tiles in the resource linearly across x, then y, then z (as applicable) and then spills over mipmaps/arrays in subresource order.  For example, use this technique to map an entire resource at once. </p> <p> Regardless of whether you specify <strong>TRUE</strong> or <strong><see cref="SharpDX.Result.False"/></strong> for <strong>UseBox</strong>, you use a <strong><see cref="SharpDX.Direct3D12.TiledResourceCoordinate"/></strong> structure to specify the starting location for the region within the resource as a separate parameter outside of this structure by using x, y, and z coordinates. </p> <p> When the region includes mipmaps that are packed with nonstandard tiling, <strong>UseBox</strong> must be <strong><see cref="SharpDX.Result.False"/></strong> because tile dimensions are not standard and the app only knows a count of how many tiles are consumed by the packed area, which is per array slice.  The corresponding (separate) starting location parameter uses x to offset into the flat range of tiles in this case, and y and z coordinates must each be 0. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TILE_REGION_SIZE::UseBox']/*"/>	
        /// <msdn-id>dn770448</msdn-id>	
        /// <unmanaged>BOOL UseBox</unmanaged>	
        /// <unmanaged-short>BOOL UseBox</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool UseBox;
        
        /// <summary>	
        /// <dd> <p> The width of the tiled region, in tiles. Used for buffer and 1D, 2D, and 3D textures. For more info, see Tile and toast image sizes. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TILE_REGION_SIZE::Width']/*"/>	
        /// <msdn-id>dn770448</msdn-id>	
        /// <unmanaged>unsigned int Width</unmanaged>	
        /// <unmanaged-short>unsigned int Width</unmanaged-short>	
        public int Width;
        
        /// <summary>	
        /// <dd> <p> The height of the tiled region, in tiles. Used for 2D and 3D textures. For more info, see Tile and toast image sizes. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TILE_REGION_SIZE::Height']/*"/>	
        /// <msdn-id>dn770448</msdn-id>	
        /// <unmanaged>unsigned short Height</unmanaged>	
        /// <unmanaged-short>unsigned short Height</unmanaged-short>	
        public short Height;
        
        /// <summary>	
        /// <dd> <p>The depth of the tiled region, in tiles. Used for 3D textures or arrays. For arrays, used for advancing in depth jumps to next slice of same mipmap size, which isn't contiguous in the subresource counting space if there are multiple mipmaps.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TILE_REGION_SIZE::Depth']/*"/>	
        /// <msdn-id>dn770448</msdn-id>	
        /// <unmanaged>unsigned short Depth</unmanaged>	
        /// <unmanaged-short>unsigned short Depth</unmanaged-short>	
        public short Depth;
    }
    
    /// <summary>	
    /// <p>Describes the shape of a tile by specifying its dimensions.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> This structure is used by the <strong>GetResourceTiling</strong> method. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TILE_SHAPE']/*"/>	
    /// <msdn-id>dn770449</msdn-id>	
    /// <unmanaged>D3D12_TILE_SHAPE</unmanaged>	
    /// <unmanaged-short>D3D12_TILE_SHAPE</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct TileShape {	
        
        /// <summary>	
        /// <dd> <p>The width in texels of the tile.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TILE_SHAPE::WidthInTexels']/*"/>	
        /// <msdn-id>dn770449</msdn-id>	
        /// <unmanaged>unsigned int WidthInTexels</unmanaged>	
        /// <unmanaged-short>unsigned int WidthInTexels</unmanaged-short>	
        public int WidthInTexels;
        
        /// <summary>	
        /// <dd> <p>The height in texels of the tile.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TILE_SHAPE::HeightInTexels']/*"/>	
        /// <msdn-id>dn770449</msdn-id>	
        /// <unmanaged>unsigned int HeightInTexels</unmanaged>	
        /// <unmanaged-short>unsigned int HeightInTexels</unmanaged-short>	
        public int HeightInTexels;
        
        /// <summary>	
        /// <dd> <p>The depth in texels of the tile.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TILE_SHAPE::DepthInTexels']/*"/>	
        /// <msdn-id>dn770449</msdn-id>	
        /// <unmanaged>unsigned int DepthInTexels</unmanaged>	
        /// <unmanaged-short>unsigned int DepthInTexels</unmanaged-short>	
        public int DepthInTexels;
    }
    
    /// <summary>	
    /// <p>Describes the subresources from a resource that are accessible by using an unordered-access view.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Pass an unordered-access-view description into <strong><see cref="SharpDX.Direct3D12.Device.CreateUnorderedAccessView"/></strong> to create a view.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_UNORDERED_ACCESS_VIEW_DESC']/*"/>	
    /// <msdn-id>dn770451</msdn-id>	
    /// <unmanaged>D3D12_UNORDERED_ACCESS_VIEW_DESC</unmanaged>	
    /// <unmanaged-short>D3D12_UNORDERED_ACCESS_VIEW_DESC</unmanaged-short>	
    [StructLayout(LayoutKind.Explicit)]
    public  partial struct UnorderedAccessViewDescription {	
        
        /// <summary>	
        /// <p>Describes the elements in a buffer to use in a unordered-access view.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p> Use this structure with a <strong><see cref="SharpDX.Direct3D12.UnorderedAccessViewDescription"/></strong> structure to view the resource as a buffer. </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_BUFFER_UAV']/*"/>	
        /// <msdn-id>dn770345</msdn-id>	
        /// <unmanaged>D3D12_BUFFER_UAV</unmanaged>	
        /// <unmanaged-short>D3D12_BUFFER_UAV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct BufferResource {	
            
            /// <summary>	
            /// <dd> <p>The zero-based index of the first element to be accessed.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_BUFFER_UAV::FirstElement']/*"/>	
            /// <msdn-id>dn770345</msdn-id>	
            /// <unmanaged>unsigned longlong FirstElement</unmanaged>	
            /// <unmanaged-short>unsigned longlong FirstElement</unmanaged-short>	
            public long FirstElement;
            
            /// <summary>	
            /// <dd> <p>The number of elements in the resource. For structured buffers, this is the number of structures in the buffer.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_BUFFER_UAV::NumElements']/*"/>	
            /// <msdn-id>dn770345</msdn-id>	
            /// <unmanaged>unsigned int NumElements</unmanaged>	
            /// <unmanaged-short>unsigned int NumElements</unmanaged-short>	
            public int ElementCount;
            
            /// <summary>	
            /// <dd> <p>The size of each element in the buffer structure (in bytes) when the buffer represents a structured buffer.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_BUFFER_UAV::StructureByteStride']/*"/>	
            /// <msdn-id>dn770345</msdn-id>	
            /// <unmanaged>unsigned int StructureByteStride</unmanaged>	
            /// <unmanaged-short>unsigned int StructureByteStride</unmanaged-short>	
            public int StructureByteStride;
            
            /// <summary>	
            /// <dd> <p> The counter offset, in bytes. </p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_BUFFER_UAV::CounterOffsetInBytes']/*"/>	
            /// <msdn-id>dn770345</msdn-id>	
            /// <unmanaged>unsigned longlong CounterOffsetInBytes</unmanaged>	
            /// <unmanaged-short>unsigned longlong CounterOffsetInBytes</unmanaged-short>	
            public long CounterOffsetInBytes;
            
            /// <summary>	
            /// <dd> <p> A <strong><see cref="SharpDX.Direct3D12.BufferUnorderedAccessViewFlags"/></strong>-typed value that specifies the view options for the resource. </p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_BUFFER_UAV::Flags']/*"/>	
            /// <msdn-id>dn770345</msdn-id>	
            /// <unmanaged>D3D12_BUFFER_UAV_FLAGS Flags</unmanaged>	
            /// <unmanaged-short>D3D12_BUFFER_UAV_FLAGS Flags</unmanaged-short>	
            public SharpDX.Direct3D12.BufferUnorderedAccessViewFlags Flags;
        }
        
        /// <summary>	
        /// <p>Describes a unordered-access 1D texture resource.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>Use this structure with a <strong><see cref="SharpDX.Direct3D12.UnorderedAccessViewDescription"/></strong> structure to view the resource as a 1D texture.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX1D_UAV']/*"/>	
        /// <msdn-id>dn770421</msdn-id>	
        /// <unmanaged>D3D12_TEX1D_UAV</unmanaged>	
        /// <unmanaged-short>D3D12_TEX1D_UAV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture1DResource {	
            
            /// <summary>	
            /// <dd> <p>The mipmap slice index.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX1D_UAV::MipSlice']/*"/>	
            /// <msdn-id>dn770421</msdn-id>	
            /// <unmanaged>unsigned int MipSlice</unmanaged>	
            /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
            public int MipSlice;
        }
        
        /// <summary>	
        /// <p>Describes an array of unordered-access 1D texture resources. </p>	
        /// </summary>	
        /// <remarks>	
        /// <p>Use this structure with a <strong><see cref="SharpDX.Direct3D12.UnorderedAccessViewDescription"/></strong> structure to view the resource as an array of 1D textures.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX1D_ARRAY_UAV']/*"/>	
        /// <msdn-id>dn770417</msdn-id>	
        /// <unmanaged>D3D12_TEX1D_ARRAY_UAV</unmanaged>	
        /// <unmanaged-short>D3D12_TEX1D_ARRAY_UAV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture1DArrayResource {	
            
            /// <summary>	
            /// <dd> <p>The mipmap slice index.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX1D_ARRAY_UAV::MipSlice']/*"/>	
            /// <msdn-id>dn770417</msdn-id>	
            /// <unmanaged>unsigned int MipSlice</unmanaged>	
            /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
            public int MipSlice;
            
            /// <summary>	
            /// <dd> <p>The zero-based index of the first array slice to be accessed.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX1D_ARRAY_UAV::FirstArraySlice']/*"/>	
            /// <msdn-id>dn770417</msdn-id>	
            /// <unmanaged>unsigned int FirstArraySlice</unmanaged>	
            /// <unmanaged-short>unsigned int FirstArraySlice</unmanaged-short>	
            public int FirstArraySlice;
            
            /// <summary>	
            /// <dd> <p>The number of slices in the array.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX1D_ARRAY_UAV::ArraySize']/*"/>	
            /// <msdn-id>dn770417</msdn-id>	
            /// <unmanaged>unsigned int ArraySize</unmanaged>	
            /// <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
            public int ArraySize;
        }
        
        /// <summary>	
        /// <p>Describes a unordered-access 2D texture resource.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p> Use this structure with a <strong><see cref="SharpDX.Direct3D12.UnorderedAccessViewDescription"/></strong> structure to view the resource as a 2D texture. </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_UAV']/*"/>	
        /// <msdn-id>dn770435</msdn-id>	
        /// <unmanaged>D3D12_TEX2D_UAV</unmanaged>	
        /// <unmanaged-short>D3D12_TEX2D_UAV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DResource {	
            
            /// <summary>	
            /// <dd> <p>The mipmap slice index.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_UAV::MipSlice']/*"/>	
            /// <msdn-id>dn770435</msdn-id>	
            /// <unmanaged>unsigned int MipSlice</unmanaged>	
            /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
            public int MipSlice;
            
            /// <summary>	
            /// <dd> <p> The index (plane slice number) of the plane to use in the texture. </p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_UAV::PlaneSlice']/*"/>	
            /// <msdn-id>dn770435</msdn-id>	
            /// <unmanaged>unsigned int PlaneSlice</unmanaged>	
            /// <unmanaged-short>unsigned int PlaneSlice</unmanaged-short>	
            public int PlaneSlice;
        }
        
        /// <summary>	
        /// <p> Describes an array of unordered-access 2D texture resources. </p>	
        /// </summary>	
        /// <remarks>	
        /// <p> Use this structure with a <strong><see cref="SharpDX.Direct3D12.UnorderedAccessViewDescription"/></strong> structure to view the resource as an array of 2D textures. </p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_ARRAY_UAV']/*"/>	
        /// <msdn-id>dn770431</msdn-id>	
        /// <unmanaged>D3D12_TEX2D_ARRAY_UAV</unmanaged>	
        /// <unmanaged-short>D3D12_TEX2D_ARRAY_UAV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture2DArrayResource {	
            
            /// <summary>	
            /// <dd> <p>The mipmap slice index.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_ARRAY_UAV::MipSlice']/*"/>	
            /// <msdn-id>dn770431</msdn-id>	
            /// <unmanaged>unsigned int MipSlice</unmanaged>	
            /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
            public int MipSlice;
            
            /// <summary>	
            /// <dd> <p>The zero-based index of the first array slice to be accessed.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_ARRAY_UAV::FirstArraySlice']/*"/>	
            /// <msdn-id>dn770431</msdn-id>	
            /// <unmanaged>unsigned int FirstArraySlice</unmanaged>	
            /// <unmanaged-short>unsigned int FirstArraySlice</unmanaged-short>	
            public int FirstArraySlice;
            
            /// <summary>	
            /// <dd> <p>The number of slices in the array.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_ARRAY_UAV::ArraySize']/*"/>	
            /// <msdn-id>dn770431</msdn-id>	
            /// <unmanaged>unsigned int ArraySize</unmanaged>	
            /// <unmanaged-short>unsigned int ArraySize</unmanaged-short>	
            public int ArraySize;
            
            /// <summary>	
            /// <dd> <p> The index (plane slice number) of the plane to use in an array of textures. </p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX2D_ARRAY_UAV::PlaneSlice']/*"/>	
            /// <msdn-id>dn770431</msdn-id>	
            /// <unmanaged>unsigned int PlaneSlice</unmanaged>	
            /// <unmanaged-short>unsigned int PlaneSlice</unmanaged-short>	
            public int PlaneSlice;
        }
        
        /// <summary>	
        /// <p>Describes a unordered-access 3D texture resource.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>Use this structure with a <strong><see cref="SharpDX.Direct3D12.UnorderedAccessViewDescription"/></strong> structure to view the resource as a 3D texture.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX3D_UAV']/*"/>	
        /// <msdn-id>dn770438</msdn-id>	
        /// <unmanaged>D3D12_TEX3D_UAV</unmanaged>	
        /// <unmanaged-short>D3D12_TEX3D_UAV</unmanaged-short>	
        [StructLayout(LayoutKind.Sequential)]
        public  partial struct Texture3DResource {	
            
            /// <summary>	
            /// <dd> <p>The mipmap slice index.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX3D_UAV::MipSlice']/*"/>	
            /// <msdn-id>dn770438</msdn-id>	
            /// <unmanaged>unsigned int MipSlice</unmanaged>	
            /// <unmanaged-short>unsigned int MipSlice</unmanaged-short>	
            public int MipSlice;
            
            /// <summary>	
            /// <dd> <p>The zero-based index of the first depth slice to be accessed.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX3D_UAV::FirstWSlice']/*"/>	
            /// <msdn-id>dn770438</msdn-id>	
            /// <unmanaged>unsigned int FirstWSlice</unmanaged>	
            /// <unmanaged-short>unsigned int FirstWSlice</unmanaged-short>	
            public int FirstWSlice;
            
            /// <summary>	
            /// <dd> <p>The number of depth slices.</p> </dd>	
            /// </summary>	
            /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_TEX3D_UAV::WSize']/*"/>	
            /// <msdn-id>dn770438</msdn-id>	
            /// <unmanaged>unsigned int WSize</unmanaged>	
            /// <unmanaged-short>unsigned int WSize</unmanaged-short>	
            public int WSize;
        }
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.DXGI.Format"/></strong>-typed value that specifies the viewing format.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_UNORDERED_ACCESS_VIEW_DESC::Format']/*"/>	
        /// <msdn-id>dn770451</msdn-id>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>	
        /// <unmanaged-short>DXGI_FORMAT Format</unmanaged-short>	
        [FieldOffset(0)]
        public SharpDX.DXGI.Format Format;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D12.UnorderedAccessViewDimension"/></strong>-typed value that specifies the resource type of the view. This type specifies how the resource will be accessed. This member also determines which _UAV to use in the union below.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_UNORDERED_ACCESS_VIEW_DESC::ViewDimension']/*"/>	
        /// <msdn-id>dn770451</msdn-id>	
        /// <unmanaged>D3D12_UAV_DIMENSION ViewDimension</unmanaged>	
        /// <unmanaged-short>D3D12_UAV_DIMENSION ViewDimension</unmanaged-short>	
        [FieldOffset(4)]
        public SharpDX.Direct3D12.UnorderedAccessViewDimension Dimension;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D12.UnorderedAccessViewDescription.BufferResource"/></strong> structure that specifies which buffer elements can be accessed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_UNORDERED_ACCESS_VIEW_DESC::Buffer']/*"/>	
        /// <msdn-id>dn770451</msdn-id>	
        /// <unmanaged>D3D12_BUFFER_UAV Buffer</unmanaged>	
        /// <unmanaged-short>D3D12_BUFFER_UAV Buffer</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D12.UnorderedAccessViewDescription.BufferResource Buffer;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D12.UnorderedAccessViewDescription.Texture1DResource"/></strong> structure that specifies the subresources in a 1D texture that can be accessed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_UNORDERED_ACCESS_VIEW_DESC::Texture1D']/*"/>	
        /// <msdn-id>dn770451</msdn-id>	
        /// <unmanaged>D3D12_TEX1D_UAV Texture1D</unmanaged>	
        /// <unmanaged-short>D3D12_TEX1D_UAV Texture1D</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D12.UnorderedAccessViewDescription.Texture1DResource Texture1D;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D12.UnorderedAccessViewDescription.Texture1DArrayResource"/></strong> structure that specifies the subresources in a 1D texture array that can be accessed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_UNORDERED_ACCESS_VIEW_DESC::Texture1DArray']/*"/>	
        /// <msdn-id>dn770451</msdn-id>	
        /// <unmanaged>D3D12_TEX1D_ARRAY_UAV Texture1DArray</unmanaged>	
        /// <unmanaged-short>D3D12_TEX1D_ARRAY_UAV Texture1DArray</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D12.UnorderedAccessViewDescription.Texture1DArrayResource Texture1DArray;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D12.UnorderedAccessViewDescription.Texture2DResource"/></strong> structure that specifies the subresources in a 2D texture that can be accessed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_UNORDERED_ACCESS_VIEW_DESC::Texture2D']/*"/>	
        /// <msdn-id>dn770451</msdn-id>	
        /// <unmanaged>D3D12_TEX2D_UAV Texture2D</unmanaged>	
        /// <unmanaged-short>D3D12_TEX2D_UAV Texture2D</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D12.UnorderedAccessViewDescription.Texture2DResource Texture2D;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D12.UnorderedAccessViewDescription.Texture2DArrayResource"/></strong> structure that specifies the subresources in a 2D texture array that can be accessed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_UNORDERED_ACCESS_VIEW_DESC::Texture2DArray']/*"/>	
        /// <msdn-id>dn770451</msdn-id>	
        /// <unmanaged>D3D12_TEX2D_ARRAY_UAV Texture2DArray</unmanaged>	
        /// <unmanaged-short>D3D12_TEX2D_ARRAY_UAV Texture2DArray</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D12.UnorderedAccessViewDescription.Texture2DArrayResource Texture2DArray;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D12.UnorderedAccessViewDescription.Texture3DResource"/></strong> structure that specifies subresources in a 3D texture that can be accessed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_UNORDERED_ACCESS_VIEW_DESC::Texture3D']/*"/>	
        /// <msdn-id>dn770451</msdn-id>	
        /// <unmanaged>D3D12_TEX3D_UAV Texture3D</unmanaged>	
        /// <unmanaged-short>D3D12_TEX3D_UAV Texture3D</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.Direct3D12.UnorderedAccessViewDescription.Texture3DResource Texture3D;
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_VERTEX_BUFFER_VIEW']/*"/>	
    /// <unmanaged>D3D12_VERTEX_BUFFER_VIEW</unmanaged>	
    /// <unmanaged-short>D3D12_VERTEX_BUFFER_VIEW</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct VertexBufferView {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_VERTEX_BUFFER_VIEW::BufferLocation']/*"/>	
        /// <unmanaged>unsigned longlong BufferLocation</unmanaged>	
        /// <unmanaged-short>unsigned longlong BufferLocation</unmanaged-short>	
        public long BufferLocation;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_VERTEX_BUFFER_VIEW::SizeInBytes']/*"/>	
        /// <unmanaged>unsigned int SizeInBytes</unmanaged>	
        /// <unmanaged-short>unsigned int SizeInBytes</unmanaged-short>	
        public int SizeInBytes;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_VERTEX_BUFFER_VIEW::StrideInBytes']/*"/>	
        /// <unmanaged>unsigned int StrideInBytes</unmanaged>	
        /// <unmanaged-short>unsigned int StrideInBytes</unmanaged-short>	
        public int StrideInBytes;
    }
    
    /// <summary>	
    /// <p>Describes the dimensions of a viewport.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Pass an array of these structures to the <em>pViewports</em> parameter  in a call to  <strong><see cref="SharpDX.Direct3D12.GraphicsCommandList.SetViewports"/></strong> to set viewports for the display.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_VIEWPORT']/*"/>	
    /// <msdn-id>dn770454</msdn-id>	
    /// <unmanaged>D3D12_VIEWPORT</unmanaged>	
    /// <unmanaged-short>D3D12_VIEWPORT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    public  partial struct Viewport {	
        
        /// <summary>	
        /// <dd> <p>X position of the left hand side of the viewport. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_VIEWPORT::TopLeftX']/*"/>	
        /// <msdn-id>dn770454</msdn-id>	
        /// <unmanaged>float TopLeftX</unmanaged>	
        /// <unmanaged-short>float TopLeftX</unmanaged-short>	
        public float TopLeftX;
        
        /// <summary>	
        /// <dd> <p>Y position of the top of the viewport. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_VIEWPORT::TopLeftY']/*"/>	
        /// <msdn-id>dn770454</msdn-id>	
        /// <unmanaged>float TopLeftY</unmanaged>	
        /// <unmanaged-short>float TopLeftY</unmanaged-short>	
        public float TopLeftY;
        
        /// <summary>	
        /// <dd> <p>Width of the viewport.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_VIEWPORT::Width']/*"/>	
        /// <msdn-id>dn770454</msdn-id>	
        /// <unmanaged>float Width</unmanaged>	
        /// <unmanaged-short>float Width</unmanaged-short>	
        public float Width;
        
        /// <summary>	
        /// <dd> <p>Height of the viewport.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_VIEWPORT::Height']/*"/>	
        /// <msdn-id>dn770454</msdn-id>	
        /// <unmanaged>float Height</unmanaged>	
        /// <unmanaged-short>float Height</unmanaged-short>	
        public float Height;
        
        /// <summary>	
        /// <dd> <p>Minimum depth of the viewport. Ranges between 0 and 1.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_VIEWPORT::MinDepth']/*"/>	
        /// <msdn-id>dn770454</msdn-id>	
        /// <unmanaged>float MinDepth</unmanaged>	
        /// <unmanaged-short>float MinDepth</unmanaged-short>	
        public float MinDepth;
        
        /// <summary>	
        /// <dd> <p>Maximum depth of the viewport. Ranges between 0 and 1.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D12_VIEWPORT::MaxDepth']/*"/>	
        /// <msdn-id>dn770454</msdn-id>	
        /// <unmanaged>float MaxDepth</unmanaged>	
        /// <unmanaged-short>float MaxDepth</unmanaged-short>	
        public float MaxDepth;
    }
}
