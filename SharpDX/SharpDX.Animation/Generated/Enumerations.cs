// Copyright (c) 2010-2014 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Types declaration for SharpDX.Animation namespace.
//     This code was generated by a tool.
//     Date : 6/25/2016 10:38:06 PM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
namespace SharpDX.Animation {

#pragma warning disable 419
#pragma warning disable 1587
#pragma warning disable 1574
    
    /// <summary>	
    /// <p>Defines which aspects of an interpolator  depend on a given input.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Multiple <strong><see cref="SharpDX.Animation.Dependencies"/></strong> values can be combined using a bitwise-OR operation.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_DEPENDENCIES']/*"/>	
    /// <msdn-id>dd317034</msdn-id>	
    /// <unmanaged>UI_ANIMATION_DEPENDENCIES</unmanaged>	
    /// <unmanaged-short>UI_ANIMATION_DEPENDENCIES</unmanaged-short>	
    [Flags]
    public enum Dependencies : int {	
        
        /// <summary>	
        /// <dd> <p>No aspect depends on the input.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_DEPENDENCY_NONE']/*"/>	
        /// <msdn-id>dd317034</msdn-id>	
        /// <unmanaged>UI_ANIMATION_DEPENDENCY_NONE</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_DEPENDENCY_NONE</unmanaged-short>	
        None = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The intermediate values depend on the input.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_DEPENDENCY_INTERMEDIATE_VALUES']/*"/>	
        /// <msdn-id>dd317034</msdn-id>	
        /// <unmanaged>UI_ANIMATION_DEPENDENCY_INTERMEDIATE_VALUES</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_DEPENDENCY_INTERMEDIATE_VALUES</unmanaged-short>	
        IntermediateValues = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>The final value depends on the input.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_DEPENDENCY_FINAL_VALUE']/*"/>	
        /// <msdn-id>dd317034</msdn-id>	
        /// <unmanaged>UI_ANIMATION_DEPENDENCY_FINAL_VALUE</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_DEPENDENCY_FINAL_VALUE</unmanaged-short>	
        FinalValue = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>The final velocity depends on the input.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_DEPENDENCY_FINAL_VELOCITY']/*"/>	
        /// <msdn-id>dd317034</msdn-id>	
        /// <unmanaged>UI_ANIMATION_DEPENDENCY_FINAL_VELOCITY</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_DEPENDENCY_FINAL_VELOCITY</unmanaged-short>	
        FinalVelocity = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>The duration depends on the input.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_DEPENDENCY_DURATION']/*"/>	
        /// <msdn-id>dd317034</msdn-id>	
        /// <unmanaged>UI_ANIMATION_DEPENDENCY_DURATION</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_DEPENDENCY_DURATION</unmanaged-short>	
        Duration = unchecked((int)8),			
    }
    
    /// <summary>	
    /// <p> Defines the behavior of a timer when the animation manager is idle.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_IDLE_BEHAVIOR']/*"/>	
    /// <msdn-id>dd317036</msdn-id>	
    /// <unmanaged>UI_ANIMATION_IDLE_BEHAVIOR</unmanaged>	
    /// <unmanaged-short>UI_ANIMATION_IDLE_BEHAVIOR</unmanaged-short>	
    public enum IdleBehavior : int {	
        
        /// <summary>	
        /// <dd> <p> The timer continues to generate timer events (is enabled) when the animation manager is idle.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_IDLE_BEHAVIOR_CONTINUE']/*"/>	
        /// <msdn-id>dd317036</msdn-id>	
        /// <unmanaged>UI_ANIMATION_IDLE_BEHAVIOR_CONTINUE</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_IDLE_BEHAVIOR_CONTINUE</unmanaged-short>	
        Continue = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p> The timer is suspended (disabled) when the animation manager is idle. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_IDLE_BEHAVIOR_DISABLE']/*"/>	
        /// <msdn-id>dd317036</msdn-id>	
        /// <unmanaged>UI_ANIMATION_IDLE_BEHAVIOR_DISABLE</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_IDLE_BEHAVIOR_DISABLE</unmanaged-short>	
        Disable = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p> Defines the activity status of an animation manager.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_MANAGER_STATUS']/*"/>	
    /// <msdn-id>dd317043</msdn-id>	
    /// <unmanaged>UI_ANIMATION_MANAGER_STATUS</unmanaged>	
    /// <unmanaged-short>UI_ANIMATION_MANAGER_STATUS</unmanaged-short>	
    public enum ManagerStatus : int {	
        
        /// <summary>	
        /// <dd> <p> The animation manager is idle; no animations are currently playing.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_MANAGER_IDLE']/*"/>	
        /// <msdn-id>dd317043</msdn-id>	
        /// <unmanaged>UI_ANIMATION_MANAGER_IDLE</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_MANAGER_IDLE</unmanaged-short>	
        Idle = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p> The animation manager is busy; at least one animation is currently playing or scheduled.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_MANAGER_BUSY']/*"/>	
        /// <msdn-id>dd317043</msdn-id>	
        /// <unmanaged>UI_ANIMATION_MANAGER_BUSY</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_MANAGER_BUSY</unmanaged-short>	
        Busy = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p> Defines animation modes.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_MODE']/*"/>	
    /// <msdn-id>dd317046</msdn-id>	
    /// <unmanaged>UI_ANIMATION_MODE</unmanaged>	
    /// <unmanaged-short>UI_ANIMATION_MODE</unmanaged-short>	
    public enum Mode : int {	
        
        /// <summary>	
        /// <dd> <p> Animation is disabled.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_MODE_DISABLED']/*"/>	
        /// <msdn-id>dd317046</msdn-id>	
        /// <unmanaged>UI_ANIMATION_MODE_DISABLED</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_MODE_DISABLED</unmanaged-short>	
        Disabled = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p> The animation mode is managed by the system.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_MODE_SYSTEM_DEFAULT']/*"/>	
        /// <msdn-id>dd317046</msdn-id>	
        /// <unmanaged>UI_ANIMATION_MODE_SYSTEM_DEFAULT</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_MODE_SYSTEM_DEFAULT</unmanaged-short>	
        SystemDefault = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p> Animation is enabled.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_MODE_ENABLED']/*"/>	
        /// <msdn-id>dd317046</msdn-id>	
        /// <unmanaged>UI_ANIMATION_MODE_ENABLED</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_MODE_ENABLED</unmanaged-short>	
        Enabled = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p> Defines potential effects on a storyboard if a priority comparison returns false.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>This enumeration is used as the <em>priorityEffect</em> parameter of  <strong><see cref="SharpDX.Animation.PriorityComparison.HasPriority"/></strong>, informing the client of the potential effect on the storyboard to be scheduled when the return value is false (S_FALSE).  <see cref="SharpDX.Animation.PriorityEffect.Failure"/> means that the  attempt to schedule the storyboard might fail if the return value is false.   <see cref="SharpDX.Animation.PriorityEffect.Delay"/> means that the attempt to schedule the storyboard will succeed, but if the return value is false, the storyboard could play later than it would otherwise.</p><p> This enumeration can help an application decide how aggressive to be about reducing latency in the UI. For example, if the application returns true when the effect is <see cref="SharpDX.Animation.PriorityEffect.Delay"/>, then other animations might get canceled or compressed even though doing so was not strictly necessary to play a new animation within the application-specified longest acceptable delay.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_PRIORITY_EFFECT']/*"/>	
    /// <msdn-id>dd317049</msdn-id>	
    /// <unmanaged>UI_ANIMATION_PRIORITY_EFFECT</unmanaged>	
    /// <unmanaged-short>UI_ANIMATION_PRIORITY_EFFECT</unmanaged-short>	
    public enum PriorityEffect : int {	
        
        /// <summary>	
        /// <dd> <p> This storyboard might not be successfully scheduled.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_PRIORITY_EFFECT_FAILURE']/*"/>	
        /// <msdn-id>dd317049</msdn-id>	
        /// <unmanaged>UI_ANIMATION_PRIORITY_EFFECT_FAILURE</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_PRIORITY_EFFECT_FAILURE</unmanaged-short>	
        Failure = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p> The storyboard will be scheduled, but might start playing later.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_PRIORITY_EFFECT_DELAY']/*"/>	
        /// <msdn-id>dd317049</msdn-id>	
        /// <unmanaged>UI_ANIMATION_PRIORITY_EFFECT_DELAY</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_PRIORITY_EFFECT_DELAY</unmanaged-short>	
        Delay = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Defines the pattern for a loop iteration.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_REPEAT_MODE']/*"/>	
    /// <msdn-id>hh448672</msdn-id>	
    /// <unmanaged>UI_ANIMATION_REPEAT_MODE</unmanaged>	
    /// <unmanaged-short>UI_ANIMATION_REPEAT_MODE</unmanaged-short>	
    public enum RepeatMode : int {	
        
        /// <summary>	
        /// <dd> <p>The start of a  loop begins with the first value (v1-&gt;v2, v1-&gt;v2, v1-&gt;v2, and so on).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_REPEAT_MODE_NORMAL']/*"/>	
        /// <msdn-id>hh448672</msdn-id>	
        /// <unmanaged>UI_ANIMATION_REPEAT_MODE_NORMAL</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_REPEAT_MODE_NORMAL</unmanaged-short>	
        RepeatModeNormal = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>The  start of a loop alternates between values (v1-&gt;v2, v2-&gt;v1, v1-&gt;v2, and so on).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_REPEAT_MODE_ALTERNATE']/*"/>	
        /// <msdn-id>hh448672</msdn-id>	
        /// <unmanaged>UI_ANIMATION_REPEAT_MODE_ALTERNATE</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_REPEAT_MODE_ALTERNATE</unmanaged-short>	
        RepeatModeAlternate = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p> Defines the rounding modes to be used when the value of an animation variable is converted from a floating-point type to an integer type.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_ROUNDING_MODE']/*"/>	
    /// <msdn-id>dd371966</msdn-id>	
    /// <unmanaged>UI_ANIMATION_ROUNDING_MODE</unmanaged>	
    /// <unmanaged-short>UI_ANIMATION_ROUNDING_MODE</unmanaged-short>	
    public enum RoundingMode : int {	
        
        /// <summary>	
        /// <dd> <p> Round to the nearest integer.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_ROUNDING_NEAREST']/*"/>	
        /// <msdn-id>dd371966</msdn-id>	
        /// <unmanaged>UI_ANIMATION_ROUNDING_NEAREST</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_ROUNDING_NEAREST</unmanaged-short>	
        RoundingNearest = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p> Round down.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_ROUNDING_FLOOR']/*"/>	
        /// <msdn-id>dd371966</msdn-id>	
        /// <unmanaged>UI_ANIMATION_ROUNDING_FLOOR</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_ROUNDING_FLOOR</unmanaged-short>	
        RoundingFloor = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p> Round up.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_ROUNDING_CEILING']/*"/>	
        /// <msdn-id>dd371966</msdn-id>	
        /// <unmanaged>UI_ANIMATION_ROUNDING_CEILING</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_ROUNDING_CEILING</unmanaged-short>	
        RoundingCeiling = unchecked((int)2),			
    }
    
    /// <summary>	
    /// <p> Defines results for storyboard scheduling.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p> <strong><see cref="SharpDX.Animation.Storyboard.Schedule"/></strong> returns <see cref="SharpDX.Animation.SchedulingResult.Deferred"/> only if the application attempts to schedule a storyboard during a callback to <strong><see cref="SharpDX.Animation.StoryboardEventHandler.OnStoryboardStatusChanged"/></strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_SCHEDULING_RESULT']/*"/>	
    /// <msdn-id>dd371967</msdn-id>	
    /// <unmanaged>UI_ANIMATION_SCHEDULING_RESULT</unmanaged>	
    /// <unmanaged-short>UI_ANIMATION_SCHEDULING_RESULT</unmanaged-short>	
    public enum SchedulingResult : int {	
        
        /// <summary>	
        /// <dd> <p> Scheduling failed for an unexpected reason.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_SCHEDULING_UNEXPECTED_FAILURE']/*"/>	
        /// <msdn-id>dd371967</msdn-id>	
        /// <unmanaged>UI_ANIMATION_SCHEDULING_UNEXPECTED_FAILURE</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_SCHEDULING_UNEXPECTED_FAILURE</unmanaged-short>	
        UnexpectedFailure = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p> Scheduling failed because a scheduling conflict occurred and the currently scheduled storyboard has higher priority. For more information, see <strong><see cref="SharpDX.Animation.PriorityComparison.HasPriority"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_SCHEDULING_INSUFFICIENT_PRIORITY']/*"/>	
        /// <msdn-id>dd371967</msdn-id>	
        /// <unmanaged>UI_ANIMATION_SCHEDULING_INSUFFICIENT_PRIORITY</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_SCHEDULING_INSUFFICIENT_PRIORITY</unmanaged-short>	
        InsufficientPriority = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p> Scheduling failed because  the storyboard is already scheduled.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_SCHEDULING_ALREADY_SCHEDULED']/*"/>	
        /// <msdn-id>dd371967</msdn-id>	
        /// <unmanaged>UI_ANIMATION_SCHEDULING_ALREADY_SCHEDULED</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_SCHEDULING_ALREADY_SCHEDULED</unmanaged-short>	
        AlreadyScheduled = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p> Scheduling succeeded.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_SCHEDULING_SUCCEEDED']/*"/>	
        /// <msdn-id>dd371967</msdn-id>	
        /// <unmanaged>UI_ANIMATION_SCHEDULING_SUCCEEDED</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_SCHEDULING_SUCCEEDED</unmanaged-short>	
        Succeeded = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p> Scheduling is deferred and will be attempted when the current callback completes.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_SCHEDULING_DEFERRED']/*"/>	
        /// <msdn-id>dd371967</msdn-id>	
        /// <unmanaged>UI_ANIMATION_SCHEDULING_DEFERRED</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_SCHEDULING_DEFERRED</unmanaged-short>	
        Deferred = unchecked((int)4),			
    }
    
    /// <summary>	
    /// <p> Defines animation slope characteristics.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_SLOPE']/*"/>	
    /// <msdn-id>dd371969</msdn-id>	
    /// <unmanaged>UI_ANIMATION_SLOPE</unmanaged>	
    /// <unmanaged-short>UI_ANIMATION_SLOPE</unmanaged-short>	
    public enum Slope : int {	
        
        /// <summary>	
        /// <dd> <p> An increasing slope.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_SLOPE_INCREASING']/*"/>	
        /// <msdn-id>dd371969</msdn-id>	
        /// <unmanaged>UI_ANIMATION_SLOPE_INCREASING</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_SLOPE_INCREASING</unmanaged-short>	
        Increasing = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p> A decreasing slope.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_SLOPE_DECREASING']/*"/>	
        /// <msdn-id>dd371969</msdn-id>	
        /// <unmanaged>UI_ANIMATION_SLOPE_DECREASING</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_SLOPE_DECREASING</unmanaged-short>	
        Decreasing = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p> Defines  the status for a storyboard.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Unless <strong><see cref="SharpDX.Animation.Storyboard.GetStatus"/></strong> is called from a handler for <strong>OnStoryboardStatusChanged</strong> events, it returns only the following status values:</p><ul> <li><see cref="SharpDX.Animation.StoryboardStatus.Building"/></li> <li><see cref="SharpDX.Animation.StoryboardStatus.Scheduled"/></li> <li><see cref="SharpDX.Animation.StoryboardStatus.Playing"/></li> <li><see cref="SharpDX.Animation.StoryboardStatus.Ready"/></li> </ul><p>All status values can be passed to  <strong><see cref="SharpDX.Animation.StoryboardEventHandler.OnStoryboardStatusChanged"/></strong>.</p><p>The following diagram illustrates the transitions between these states.</p><p></p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_STORYBOARD_STATUS']/*"/>	
    /// <msdn-id>dd371971</msdn-id>	
    /// <unmanaged>UI_ANIMATION_STORYBOARD_STATUS</unmanaged>	
    /// <unmanaged-short>UI_ANIMATION_STORYBOARD_STATUS</unmanaged-short>	
    public enum StoryboardStatus : int {	
        
        /// <summary>	
        /// <dd> <p> The storyboard has never been scheduled.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_STORYBOARD_BUILDING']/*"/>	
        /// <msdn-id>dd371971</msdn-id>	
        /// <unmanaged>UI_ANIMATION_STORYBOARD_BUILDING</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_STORYBOARD_BUILDING</unmanaged-short>	
        Building = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p> The storyboard is scheduled to play.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_STORYBOARD_SCHEDULED']/*"/>	
        /// <msdn-id>dd371971</msdn-id>	
        /// <unmanaged>UI_ANIMATION_STORYBOARD_SCHEDULED</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_STORYBOARD_SCHEDULED</unmanaged-short>	
        Scheduled = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p> The storyboard was canceled.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_STORYBOARD_CANCELLED']/*"/>	
        /// <msdn-id>dd371971</msdn-id>	
        /// <unmanaged>UI_ANIMATION_STORYBOARD_CANCELLED</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_STORYBOARD_CANCELLED</unmanaged-short>	
        Cancelled = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p> The storyboard is currently playing.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_STORYBOARD_PLAYING']/*"/>	
        /// <msdn-id>dd371971</msdn-id>	
        /// <unmanaged>UI_ANIMATION_STORYBOARD_PLAYING</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_STORYBOARD_PLAYING</unmanaged-short>	
        Playing = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p> The storyboard was truncated.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_STORYBOARD_TRUNCATED']/*"/>	
        /// <msdn-id>dd371971</msdn-id>	
        /// <unmanaged>UI_ANIMATION_STORYBOARD_TRUNCATED</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_STORYBOARD_TRUNCATED</unmanaged-short>	
        Truncated = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p> The storyboard has finished playing.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_STORYBOARD_FINISHED']/*"/>	
        /// <msdn-id>dd371971</msdn-id>	
        /// <unmanaged>UI_ANIMATION_STORYBOARD_FINISHED</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_STORYBOARD_FINISHED</unmanaged-short>	
        Finished = unchecked((int)5),			
        
        /// <summary>	
        /// <dd> <p> The storyboard is built and ready for scheduling.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_STORYBOARD_READY']/*"/>	
        /// <msdn-id>dd371971</msdn-id>	
        /// <unmanaged>UI_ANIMATION_STORYBOARD_READY</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_STORYBOARD_READY</unmanaged-short>	
        Ready = unchecked((int)6),			
        
        /// <summary>	
        /// <dd> <p> Scheduling the storyboard failed because a scheduling conflict occurred and the currently scheduled storyboard has higher priority.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_STORYBOARD_INSUFFICIENT_PRIORITY']/*"/>	
        /// <msdn-id>dd371971</msdn-id>	
        /// <unmanaged>UI_ANIMATION_STORYBOARD_INSUFFICIENT_PRIORITY</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_STORYBOARD_INSUFFICIENT_PRIORITY</unmanaged-short>	
        InsufficientPriority = unchecked((int)7),			
    }
    
    /// <summary>	
    /// <p> Defines activity status for a timer's client.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_TIMER_CLIENT_STATUS']/*"/>	
    /// <msdn-id>dd371973</msdn-id>	
    /// <unmanaged>UI_ANIMATION_TIMER_CLIENT_STATUS</unmanaged>	
    /// <unmanaged-short>UI_ANIMATION_TIMER_CLIENT_STATUS</unmanaged-short>	
    public enum TimerClientStatus : int {	
        
        /// <summary>	
        /// <dd> <p> The client is idle.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_TIMER_CLIENT_IDLE']/*"/>	
        /// <msdn-id>dd371973</msdn-id>	
        /// <unmanaged>UI_ANIMATION_TIMER_CLIENT_IDLE</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_TIMER_CLIENT_IDLE</unmanaged-short>	
        Idle = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p> The client is busy.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_TIMER_CLIENT_BUSY']/*"/>	
        /// <msdn-id>dd371973</msdn-id>	
        /// <unmanaged>UI_ANIMATION_TIMER_CLIENT_BUSY</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_TIMER_CLIENT_BUSY</unmanaged-short>	
        Busy = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p> Defines results for animation updates.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_UPDATE_RESULT']/*"/>	
    /// <msdn-id>dd371974</msdn-id>	
    /// <unmanaged>UI_ANIMATION_UPDATE_RESULT</unmanaged>	
    /// <unmanaged-short>UI_ANIMATION_UPDATE_RESULT</unmanaged-short>	
    public enum UpdateResult : int {	
        
        /// <summary>	
        /// <dd> <p> No animation variables have changed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_UPDATE_NO_CHANGE']/*"/>	
        /// <msdn-id>dd371974</msdn-id>	
        /// <unmanaged>UI_ANIMATION_UPDATE_NO_CHANGE</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_UPDATE_NO_CHANGE</unmanaged-short>	
        NoChange = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p> One or more animation variables has changed.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='UI_ANIMATION_UPDATE_VARIABLES_CHANGED']/*"/>	
        /// <msdn-id>dd371974</msdn-id>	
        /// <unmanaged>UI_ANIMATION_UPDATE_VARIABLES_CHANGED</unmanaged>	
        /// <unmanaged-short>UI_ANIMATION_UPDATE_VARIABLES_CHANGED</unmanaged-short>	
        VariablesChanged = unchecked((int)1),			
    }
}
