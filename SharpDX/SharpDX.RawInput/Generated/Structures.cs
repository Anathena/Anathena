// Copyright (c) 2010-2014 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Types declaration for SharpDX.RawInput namespace.
//     This code was generated by a tool.
//     Date : 6/25/2016 10:38:10 PM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
namespace SharpDX.RawInput {

#pragma warning disable 282
#pragma warning disable 649
#pragma warning disable 419
#pragma warning disable 1587
#pragma warning disable 1574
    
    /// <summary>	
    /// <p>Defines the raw input data coming from any device. </p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RID_DEVICE_INFO']/*"/>	
    /// <msdn-id>ms645581</msdn-id>	
    /// <unmanaged>RID_DEVICE_INFO</unmanaged>	
    /// <unmanaged-short>RID_DEVICE_INFO</unmanaged-short>	
    [StructLayout(LayoutKind.Explicit)]
    internal  partial struct RawDeviceInformation {	
        
        /// <summary>	
        /// <dd> <p>The size, in bytes, of the <strong><see cref="SharpDX.RawInput.RawDeviceInformation"/></strong> structure. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RID_DEVICE_INFO::cbSize']/*"/>	
        /// <msdn-id>ms645581</msdn-id>	
        /// <unmanaged>unsigned int cbSize</unmanaged>	
        /// <unmanaged-short>unsigned int cbSize</unmanaged-short>	
        [FieldOffset(0)]
        public int Size;
        
        /// <summary>	
        /// <dd> <p>The type of raw input data. This member can be one of the following values. </p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.RawInput.DeviceType.HumanInputDevice"/></strong></dt> <dt>2</dt> </dl> </td><td> <p>Data comes from an HID that is not a keyboard or a mouse.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.RawInput.DeviceType.Keyboard"/></strong></dt> <dt>1</dt> </dl> </td><td> <p>Data comes from a keyboard.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.RawInput.DeviceType.Mouse"/></strong></dt> <dt>0</dt> </dl> </td><td> <p>Data comes from a mouse.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RID_DEVICE_INFO::dwType']/*"/>	
        /// <msdn-id>ms645581</msdn-id>	
        /// <unmanaged>RAW_DEVICE_TYPE dwType</unmanaged>	
        /// <unmanaged-short>RAW_DEVICE_TYPE dwType</unmanaged-short>	
        [FieldOffset(4)]
        public SharpDX.RawInput.DeviceType Type;
        
        /// <summary>	
        /// <dd> <p>If <strong>dwType</strong> is <strong><see cref="SharpDX.RawInput.DeviceType.Mouse"/></strong>, this is the <strong><see cref="SharpDX.RawInput.RawDeviceInformationMouse"/></strong> structure that defines the mouse. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RID_DEVICE_INFO::mouse']/*"/>	
        /// <msdn-id>ms645581</msdn-id>	
        /// <unmanaged>RID_DEVICE_INFO_MOUSE mouse</unmanaged>	
        /// <unmanaged-short>RID_DEVICE_INFO_MOUSE mouse</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.RawInput.RawDeviceInformationMouse Mouse;
        
        /// <summary>	
        /// <dd> <p>If <strong>dwType</strong> is <strong><see cref="SharpDX.RawInput.DeviceType.Keyboard"/></strong>, this is the <strong><see cref="SharpDX.RawInput.RawDeviceInformationKeyboard"/></strong> structure that defines the keyboard. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RID_DEVICE_INFO::keyboard']/*"/>	
        /// <msdn-id>ms645581</msdn-id>	
        /// <unmanaged>RID_DEVICE_INFO_KEYBOARD keyboard</unmanaged>	
        /// <unmanaged-short>RID_DEVICE_INFO_KEYBOARD keyboard</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.RawInput.RawDeviceInformationKeyboard Keyboard;
        
        /// <summary>	
        /// <dd> <p>If <strong>dwType</strong> is <strong><see cref="SharpDX.RawInput.DeviceType.HumanInputDevice"/></strong>, this is the <strong><see cref="SharpDX.RawInput.RawDeviceInformationHid"/></strong> structure that defines the HID device. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RID_DEVICE_INFO::hid']/*"/>	
        /// <msdn-id>ms645581</msdn-id>	
        /// <unmanaged>RID_DEVICE_INFO_HID hid</unmanaged>	
        /// <unmanaged-short>RID_DEVICE_INFO_HID hid</unmanaged-short>	
        [FieldOffset(8)]
        public SharpDX.RawInput.RawDeviceInformationHid Hid;
    }
    
    /// <summary>	
    /// <p>Defines the raw input data coming from the specified Human Interface Device (HID). </p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RID_DEVICE_INFO_HID']/*"/>	
    /// <msdn-id>ms645584</msdn-id>	
    /// <unmanaged>RID_DEVICE_INFO_HID</unmanaged>	
    /// <unmanaged-short>RID_DEVICE_INFO_HID</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    internal  partial struct RawDeviceInformationHid {	
        
        /// <summary>	
        /// <dd> <p>The vendor identifier for the HID. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RID_DEVICE_INFO_HID::dwVendorId']/*"/>	
        /// <msdn-id>ms645584</msdn-id>	
        /// <unmanaged>unsigned int dwVendorId</unmanaged>	
        /// <unmanaged-short>unsigned int dwVendorId</unmanaged-short>	
        public int VendorId;
        
        /// <summary>	
        /// <dd> <p>The product identifier for the HID. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RID_DEVICE_INFO_HID::dwProductId']/*"/>	
        /// <msdn-id>ms645584</msdn-id>	
        /// <unmanaged>unsigned int dwProductId</unmanaged>	
        /// <unmanaged-short>unsigned int dwProductId</unmanaged-short>	
        public int ProductId;
        
        /// <summary>	
        /// <dd> <p>The version number for the HID. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RID_DEVICE_INFO_HID::dwVersionNumber']/*"/>	
        /// <msdn-id>ms645584</msdn-id>	
        /// <unmanaged>unsigned int dwVersionNumber</unmanaged>	
        /// <unmanaged-short>unsigned int dwVersionNumber</unmanaged-short>	
        public int VersionNumber;
        
        /// <summary>	
        /// <dd> <p>The top-level collection Usage Page for the device. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RID_DEVICE_INFO_HID::usUsagePage']/*"/>	
        /// <msdn-id>ms645584</msdn-id>	
        /// <unmanaged>HID_USAGE_PAGE usUsagePage</unmanaged>	
        /// <unmanaged-short>HID_USAGE_PAGE usUsagePage</unmanaged-short>	
        public SharpDX.Multimedia.UsagePage UsagePage;
        
        /// <summary>	
        /// <dd> <p>The top-level collection Usage for the device. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RID_DEVICE_INFO_HID::usUsage']/*"/>	
        /// <msdn-id>ms645584</msdn-id>	
        /// <unmanaged>HID_USAGE_ID usUsage</unmanaged>	
        /// <unmanaged-short>HID_USAGE_ID usUsage</unmanaged-short>	
        public SharpDX.Multimedia.UsageId Usage;
    }
    
    /// <summary>	
    /// <p>Defines the raw input data coming from the specified keyboard. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>For the keyboard, the Usage Page is 1 and the Usage is 6. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RID_DEVICE_INFO_KEYBOARD']/*"/>	
    /// <msdn-id>ms645587</msdn-id>	
    /// <unmanaged>RID_DEVICE_INFO_KEYBOARD</unmanaged>	
    /// <unmanaged-short>RID_DEVICE_INFO_KEYBOARD</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    internal  partial struct RawDeviceInformationKeyboard {	
        
        /// <summary>	
        /// <dd> <p>The type of the keyboard. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RID_DEVICE_INFO_KEYBOARD::dwType']/*"/>	
        /// <msdn-id>ms645587</msdn-id>	
        /// <unmanaged>unsigned int dwType</unmanaged>	
        /// <unmanaged-short>unsigned int dwType</unmanaged-short>	
        public int Type;
        
        /// <summary>	
        /// <dd> <p>The subtype of the keyboard. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RID_DEVICE_INFO_KEYBOARD::dwSubType']/*"/>	
        /// <msdn-id>ms645587</msdn-id>	
        /// <unmanaged>unsigned int dwSubType</unmanaged>	
        /// <unmanaged-short>unsigned int dwSubType</unmanaged-short>	
        public int SubType;
        
        /// <summary>	
        /// <dd> <p>The  scan code mode. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RID_DEVICE_INFO_KEYBOARD::dwKeyboardMode']/*"/>	
        /// <msdn-id>ms645587</msdn-id>	
        /// <unmanaged>unsigned int dwKeyboardMode</unmanaged>	
        /// <unmanaged-short>unsigned int dwKeyboardMode</unmanaged-short>	
        public int KeyboardMode;
        
        /// <summary>	
        /// <dd> <p>The number of function keys on the keyboard.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RID_DEVICE_INFO_KEYBOARD::dwNumberOfFunctionKeys']/*"/>	
        /// <msdn-id>ms645587</msdn-id>	
        /// <unmanaged>unsigned int dwNumberOfFunctionKeys</unmanaged>	
        /// <unmanaged-short>unsigned int dwNumberOfFunctionKeys</unmanaged-short>	
        public int NumberOfFunctionKeys;
        
        /// <summary>	
        /// <dd> <p>The number of LED indicators on the keyboard.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RID_DEVICE_INFO_KEYBOARD::dwNumberOfIndicators']/*"/>	
        /// <msdn-id>ms645587</msdn-id>	
        /// <unmanaged>unsigned int dwNumberOfIndicators</unmanaged>	
        /// <unmanaged-short>unsigned int dwNumberOfIndicators</unmanaged-short>	
        public int NumberOfIndicators;
        
        /// <summary>	
        /// <dd> <p>The total number of keys on the keyboard. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RID_DEVICE_INFO_KEYBOARD::dwNumberOfKeysTotal']/*"/>	
        /// <msdn-id>ms645587</msdn-id>	
        /// <unmanaged>unsigned int dwNumberOfKeysTotal</unmanaged>	
        /// <unmanaged-short>unsigned int dwNumberOfKeysTotal</unmanaged-short>	
        public int NumberOfKeysTotal;
    }
    
    /// <summary>	
    /// <p>Defines the raw input data coming from the specified mouse.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>For the mouse, the Usage Page is 1 and the Usage is 2.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RID_DEVICE_INFO_MOUSE']/*"/>	
    /// <msdn-id>ms645589</msdn-id>	
    /// <unmanaged>RID_DEVICE_INFO_MOUSE</unmanaged>	
    /// <unmanaged-short>RID_DEVICE_INFO_MOUSE</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    internal  partial struct RawDeviceInformationMouse {	
        
        /// <summary>	
        /// <dd> <p>The identifier of the mouse device.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RID_DEVICE_INFO_MOUSE::dwId']/*"/>	
        /// <msdn-id>ms645589</msdn-id>	
        /// <unmanaged>unsigned int dwId</unmanaged>	
        /// <unmanaged-short>unsigned int dwId</unmanaged-short>	
        public int Id;
        
        /// <summary>	
        /// <dd> <p>The number of buttons for the mouse.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RID_DEVICE_INFO_MOUSE::dwNumberOfButtons']/*"/>	
        /// <msdn-id>ms645589</msdn-id>	
        /// <unmanaged>unsigned int dwNumberOfButtons</unmanaged>	
        /// <unmanaged-short>unsigned int dwNumberOfButtons</unmanaged-short>	
        public int NumberOfButtons;
        
        /// <summary>	
        /// <dd> <p>The number of data points per second. This information may not be applicable for every mouse device.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RID_DEVICE_INFO_MOUSE::dwSampleRate']/*"/>	
        /// <msdn-id>ms645589</msdn-id>	
        /// <unmanaged>unsigned int dwSampleRate</unmanaged>	
        /// <unmanaged-short>unsigned int dwSampleRate</unmanaged-short>	
        public int SampleRate;
        
        /// <summary>	
        /// <dd> <p><strong>TRUE</strong> if the mouse has a wheel for horizontal scrolling; otherwise, <strong><see cref="SharpDX.Result.False"/></strong>. </p> <p><strong>Windows?XP:??</strong>This member is only supported starting with Windows?Vista.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RID_DEVICE_INFO_MOUSE::fHasHorizontalWheel']/*"/>	
        /// <msdn-id>ms645589</msdn-id>	
        /// <unmanaged>BOOL fHasHorizontalWheel</unmanaged>	
        /// <unmanaged-short>BOOL fHasHorizontalWheel</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool HasHorizontalWheel;
    }
    
    /// <summary>	
    /// <p>Describes the format of the raw input from a Human Interface Device (HID). </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Each <strong>WM_INPUT</strong> can indicate several inputs, but all of the inputs come from the same HID. The size of the <strong>bRawData</strong> array is <strong>dwSizeHid</strong> *	<strong>dwCount</strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RAWHID']/*"/>	
    /// <msdn-id>ms645549</msdn-id>	
    /// <unmanaged>RAWHID</unmanaged>	
    /// <unmanaged-short>RAWHID</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    internal  partial struct RawHid {	
        
        /// <summary>	
        /// <dd> <p>The size, in bytes, of each HID input in <strong>bRawData</strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RAWHID::dwSizeHid']/*"/>	
        /// <msdn-id>ms645549</msdn-id>	
        /// <unmanaged>unsigned int dwSizeHid</unmanaged>	
        /// <unmanaged-short>unsigned int dwSizeHid</unmanaged-short>	
        public int SizeHid;
        
        /// <summary>	
        /// <dd> <p>The number of HID inputs in <strong>bRawData</strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RAWHID::dwCount']/*"/>	
        /// <msdn-id>ms645549</msdn-id>	
        /// <unmanaged>unsigned int dwCount</unmanaged>	
        /// <unmanaged-short>unsigned int dwCount</unmanaged-short>	
        public int Count;
        
        /// <summary>	
        /// <dd> <p>The raw input data, as an array of bytes. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RAWHID::bRawData']/*"/>	
        /// <msdn-id>ms645549</msdn-id>	
        /// <unmanaged>int bRawData</unmanaged>	
        /// <unmanaged-short>int bRawData</unmanaged-short>	
        public int RawData;
    }
    
    /// <summary>	
    /// <p>This section describes how the system provides raw input to your application and how an application receives and processes that input. Raw input is sometimes referred to as generic input. </p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RAWINPUT']/*"/>	
    /// <msdn-id>ms645536</msdn-id>	
    /// <unmanaged>RAWINPUT</unmanaged>	
    /// <unmanaged-short>RAWINPUT</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    internal  partial struct RawInput {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RAWINPUT::header']/*"/>	
        /// <msdn-id>ms645536</msdn-id>	
        /// <unmanaged>RAWINPUTHEADER header</unmanaged>	
        /// <unmanaged-short>RAWINPUTHEADER header</unmanaged-short>	
        public SharpDX.RawInput.RawInputHeader Header;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RAWINPUT::data']/*"/>	
        /// <msdn-id>ms645536</msdn-id>	
        /// <unmanaged>RAWINPUT_INNER_0 data</unmanaged>	
        /// <unmanaged-short>RAWINPUT_INNER_0 data</unmanaged-short>	
        public SharpDX.RawInput.RawInputInner0 Data;
    }
    
    /// <summary>	
    /// <p>Defines information for the raw input devices. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>If <strong><see cref="SharpDX.RawInput.DeviceFlags.NoLegacy"/></strong> is set for a mouse or a keyboard, the system does not generate any legacy message for that device for the application. For example, if the mouse TLC is set with <strong><see cref="SharpDX.RawInput.DeviceFlags.NoLegacy"/></strong>, <strong>WM_LBUTTONDOWN</strong> and related legacy mouse messages are not generated. Likewise, if the keyboard TLC is set with <strong><see cref="SharpDX.RawInput.DeviceFlags.NoLegacy"/></strong>, <strong><see cref="SharpDX.RawInput.KeyState.KeyDown"/></strong> and related legacy keyboard messages are not generated.</p><p>If <strong><see cref="SharpDX.RawInput.DeviceFlags.Remove"/></strong> is set and the <strong>hwndTarget</strong> member is not set to <strong><c>null</c></strong>, then parameter validation will fail.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RAWINPUTDEVICE']/*"/>	
    /// <msdn-id>ms645565</msdn-id>	
    /// <unmanaged>RAWINPUTDEVICE</unmanaged>	
    /// <unmanaged-short>RAWINPUTDEVICE</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    internal  partial struct RawInputDevice {	
        
        /// <summary>	
        /// <dd> <p>Top level collection Usage page for the raw input device. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RAWINPUTDEVICE::usUsagePage']/*"/>	
        /// <msdn-id>ms645565</msdn-id>	
        /// <unmanaged>unsigned short usUsagePage</unmanaged>	
        /// <unmanaged-short>unsigned short usUsagePage</unmanaged-short>	
        public short UsagePage;
        
        /// <summary>	
        /// <dd> <p>Top level collection Usage for the raw input device. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RAWINPUTDEVICE::usUsage']/*"/>	
        /// <msdn-id>ms645565</msdn-id>	
        /// <unmanaged>unsigned short usUsage</unmanaged>	
        /// <unmanaged-short>unsigned short usUsage</unmanaged-short>	
        public short Usage;
        
        /// <summary>	
        /// <dd> <p>Mode flag that specifies how to interpret the information provided by <strong>usUsagePage</strong> and <strong>usUsage</strong>. It can be zero (the default) or one of the following values. By default, the operating system sends raw input from devices with the specified top level collection (TLC) to the registered application as long as it has the window focus. </p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.RawInput.DeviceFlags.AppKeys"/></strong></dt> <dt>0x00000400</dt> </dl> </td><td> <p>If set, the application command keys are handled. <strong><see cref="SharpDX.RawInput.DeviceFlags.AppKeys"/></strong> can be specified only if <strong><see cref="SharpDX.RawInput.DeviceFlags.NoLegacy"/></strong> is specified for a keyboard device.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.RawInput.DeviceFlags.CaptureMouse"/></strong></dt> <dt>0x00000200</dt> </dl> </td><td> <p>If set, the mouse button click does not activate the other window.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.RawInput.DeviceFlags.DeviceNotify"/></strong></dt> <dt>0x00002000</dt> </dl> </td><td> <p>If set, this enables the caller to receive <strong>WM_INPUT_DEVICE_CHANGE</strong> notifications for device arrival and device removal.</p> <p><strong>Windows?XP:??</strong>This flag is not supported until Windows?Vista</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.RawInput.DeviceFlags.Exclude"/></strong></dt> <dt>0x00000010</dt> </dl> </td><td> <p>If set, this specifies the top level collections to exclude when reading a complete usage page. This flag only affects a TLC whose usage page is already specified with <strong><see cref="SharpDX.RawInput.DeviceFlags.PageOnly"/></strong>. </p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.RawInput.DeviceFlags.ExclusiveInputSink"/></strong></dt> <dt>0x00001000</dt> </dl> </td><td> <p>If set, this enables the caller to receive input in the background only if the foreground application does not process it. In other words, if the foreground application is not registered for raw input, then the background application that is registered will receive the input.</p> <p><strong>Windows?XP:??</strong>This flag is not supported until Windows?Vista</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.RawInput.DeviceFlags.InputSink"/></strong></dt> <dt>0x00000100</dt> </dl> </td><td> <p>If set, this enables the caller to receive the input even when the caller is not in the foreground.  Note that <strong>hwndTarget</strong> must be specified.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.RawInput.DeviceFlags.NoHotKeys"/></strong></dt> <dt>0x00000200</dt> </dl> </td><td> <p>If set, the application-defined keyboard device hotkeys are not handled. However, the system hotkeys; for example, ALT+TAB and CTRL+ALT+DEL, are still handled. By default, all keyboard hotkeys are handled. <strong><see cref="SharpDX.RawInput.DeviceFlags.NoHotKeys"/></strong> can be specified even if <strong><see cref="SharpDX.RawInput.DeviceFlags.NoLegacy"/></strong> is not specified and <strong>hwndTarget</strong> is <strong><c>null</c></strong>.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.RawInput.DeviceFlags.NoLegacy"/></strong></dt> <dt>0x00000030</dt> </dl> </td><td> <p>If set, this prevents any devices specified by <strong>usUsagePage</strong> or <strong>usUsage</strong> from generating legacy messages. This is only for the mouse and keyboard. See Remarks.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.RawInput.DeviceFlags.PageOnly"/></strong></dt> <dt>0x00000020</dt> </dl> </td><td> <p>If set, this specifies all devices whose top level collection is from the specified <strong>usUsagePage</strong>. Note that <strong>usUsage</strong> must be zero. To exclude a particular top level collection, use <strong><see cref="SharpDX.RawInput.DeviceFlags.Exclude"/></strong>.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.RawInput.DeviceFlags.Remove"/></strong></dt> <dt>0x00000001</dt> </dl> </td><td> <p>If set, this removes the top level collection from the inclusion list. This tells the operating system to stop reading from a device which matches the top level collection.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RAWINPUTDEVICE::dwFlags']/*"/>	
        /// <msdn-id>ms645565</msdn-id>	
        /// <unmanaged>unsigned int dwFlags</unmanaged>	
        /// <unmanaged-short>unsigned int dwFlags</unmanaged-short>	
        public int Flags;
        
        /// <summary>	
        /// <dd> <p>A handle to the target window. If <strong><c>null</c></strong> it follows the keyboard focus.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RAWINPUTDEVICE::hwndTarget']/*"/>	
        /// <msdn-id>ms645565</msdn-id>	
        /// <unmanaged>HWND hwndTarget</unmanaged>	
        /// <unmanaged-short>HWND hwndTarget</unmanaged-short>	
        public System.IntPtr Target;
    }
    
    /// <summary>	
    /// <p>Contains information about a raw input device.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RAWINPUTDEVICELIST']/*"/>	
    /// <msdn-id>ms645568</msdn-id>	
    /// <unmanaged>RAWINPUTDEVICELIST</unmanaged>	
    /// <unmanaged-short>RAWINPUTDEVICELIST</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    internal  partial struct RawInputDevicelist {	
        
        /// <summary>	
        /// <dd> <p>A handle to the raw input device. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RAWINPUTDEVICELIST::hDevice']/*"/>	
        /// <msdn-id>ms645568</msdn-id>	
        /// <unmanaged>void* hDevice</unmanaged>	
        /// <unmanaged-short>void hDevice</unmanaged-short>	
        public System.IntPtr Device;
        
        /// <summary>	
        /// <dd> <p>The type of device. This can be one of the following values. </p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.RawInput.DeviceType.HumanInputDevice"/></strong></dt> <dt>2</dt> </dl> </td><td> <p>The device is an HID that is not a keyboard and not a mouse.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.RawInput.DeviceType.Keyboard"/></strong></dt> <dt>1</dt> </dl> </td><td> <p>The device is a keyboard.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.RawInput.DeviceType.Mouse"/></strong></dt> <dt>0</dt> </dl> </td><td> <p>The device is a mouse.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RAWINPUTDEVICELIST::dwType']/*"/>	
        /// <msdn-id>ms645568</msdn-id>	
        /// <unmanaged>unsigned int dwType</unmanaged>	
        /// <unmanaged-short>unsigned int dwType</unmanaged-short>	
        public int Type;
    }
    
    /// <summary>	
    /// <p>Contains the header information that is part of the raw input data. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To get more information on the device, use <strong>hDevice</strong> in a call to <strong>GetRawInputDeviceInfo</strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RAWINPUTHEADER']/*"/>	
    /// <msdn-id>ms645571</msdn-id>	
    /// <unmanaged>RAWINPUTHEADER</unmanaged>	
    /// <unmanaged-short>RAWINPUTHEADER</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    internal  partial struct RawInputHeader {	
        
        /// <summary>	
        /// <dd> <p>The type of raw input. It can be one of the following values. </p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.RawInput.DeviceType.HumanInputDevice"/></strong></dt> <dt>2</dt> </dl> </td><td> <p>Raw input comes from some device that is not a keyboard or a mouse.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.RawInput.DeviceType.Keyboard"/></strong></dt> <dt>1</dt> </dl> </td><td> <p>Raw input comes from the keyboard.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.RawInput.DeviceType.Mouse"/></strong></dt> <dt>0</dt> </dl> </td><td> <p>Raw input comes from the mouse.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RAWINPUTHEADER::dwType']/*"/>	
        /// <msdn-id>ms645571</msdn-id>	
        /// <unmanaged>RAW_DEVICE_TYPE dwType</unmanaged>	
        /// <unmanaged-short>RAW_DEVICE_TYPE dwType</unmanaged-short>	
        public SharpDX.RawInput.DeviceType Type;
        
        /// <summary>	
        /// <dd> <p>The size, in bytes, of the entire input packet of data. This includes <strong><see cref="SharpDX.RawInput.RawInput"/></strong> plus possible extra input reports in the <strong><see cref="SharpDX.RawInput.RawHid"/></strong> variable length array. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RAWINPUTHEADER::dwSize']/*"/>	
        /// <msdn-id>ms645571</msdn-id>	
        /// <unmanaged>unsigned int dwSize</unmanaged>	
        /// <unmanaged-short>unsigned int dwSize</unmanaged-short>	
        public int Size;
        
        /// <summary>	
        /// <dd> <p>A handle to the device generating the raw input data. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RAWINPUTHEADER::hDevice']/*"/>	
        /// <msdn-id>ms645571</msdn-id>	
        /// <unmanaged>void* hDevice</unmanaged>	
        /// <unmanaged-short>void hDevice</unmanaged-short>	
        public System.IntPtr Device;
        
        /// <summary>	
        /// <dd> <p>The value passed in the  <em>wParam</em> parameter of the <strong>WM_INPUT</strong> message. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RAWINPUTHEADER::wParam']/*"/>	
        /// <msdn-id>ms645571</msdn-id>	
        /// <unmanaged>UINT_PTR wParam</unmanaged>	
        /// <unmanaged-short>UINT_PTR wParam</unmanaged-short>	
        public System.IntPtr Param;
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RAWINPUT_INNER_0']/*"/>	
    /// <unmanaged>RAWINPUT_INNER_0</unmanaged>	
    /// <unmanaged-short>RAWINPUT_INNER_0</unmanaged-short>	
    [StructLayout(LayoutKind.Explicit)]
    internal  partial struct RawInputInner0 {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RAWINPUT_INNER_0::mouse']/*"/>	
        /// <unmanaged>RAWMOUSE mouse</unmanaged>	
        /// <unmanaged-short>RAWMOUSE mouse</unmanaged-short>	
        [FieldOffset(0)]
        public SharpDX.RawInput.RawMouse Mouse;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RAWINPUT_INNER_0::keyboard']/*"/>	
        /// <unmanaged>RAWKEYBOARD keyboard</unmanaged>	
        /// <unmanaged-short>RAWKEYBOARD keyboard</unmanaged-short>	
        [FieldOffset(0)]
        public SharpDX.RawInput.RawKeyboard Keyboard;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RAWINPUT_INNER_0::hid']/*"/>	
        /// <unmanaged>RAWHID hid</unmanaged>	
        /// <unmanaged-short>RAWHID hid</unmanaged-short>	
        [FieldOffset(0)]
        public SharpDX.RawInput.RawHid Hid;
    }
    
    /// <summary>	
    /// <p>Contains information about the state of the keyboard. </p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RAWKEYBOARD']/*"/>	
    /// <msdn-id>ms645575</msdn-id>	
    /// <unmanaged>RAWKEYBOARD</unmanaged>	
    /// <unmanaged-short>RAWKEYBOARD</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    internal  partial struct RawKeyboard {	
        
        /// <summary>	
        /// <dd> <p>The scan code from the key depression. The scan code for keyboard overrun is <strong>KEYBOARD_OVERRUN_MAKE_CODE</strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RAWKEYBOARD::MakeCode']/*"/>	
        /// <msdn-id>ms645575</msdn-id>	
        /// <unmanaged>unsigned short MakeCode</unmanaged>	
        /// <unmanaged-short>unsigned short MakeCode</unmanaged-short>	
        public short MakeCode;
        
        /// <summary>	
        /// <dd> <p>Flags for scan code information. It can be one or more of the following.</p> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.RawInput.ScanCodeFlags.Break"/></strong></dt> <dt>1</dt> </dl> </td><td> <p>The key is up.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.RawInput.ScanCodeFlags.E0"/></strong></dt> <dt>2</dt> </dl> </td><td> <p>This is the left version of the key.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.RawInput.ScanCodeFlags.E1"/></strong></dt> <dt>4</dt> </dl> </td><td> <p>This is the right version of the key.</p> </td></tr> <tr><td><dl> <dt><strong><see cref="SharpDX.RawInput.ScanCodeFlags.Make"/></strong></dt> <dt>0</dt> </dl> </td><td> <p>The key is down.</p> </td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RAWKEYBOARD::Flags']/*"/>	
        /// <msdn-id>ms645575</msdn-id>	
        /// <unmanaged>RAW_SCAN_CODE_FLAGS Flags</unmanaged>	
        /// <unmanaged-short>RAW_SCAN_CODE_FLAGS Flags</unmanaged-short>	
        public SharpDX.RawInput.ScanCodeFlags Flags;
        
        /// <summary>	
        /// <dd> <p>Reserved; must be zero. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RAWKEYBOARD::Reserved']/*"/>	
        /// <msdn-id>ms645575</msdn-id>	
        /// <unmanaged>unsigned short Reserved</unmanaged>	
        /// <unmanaged-short>unsigned short Reserved</unmanaged-short>	
        public short Reserved;
        
        /// <summary>	
        /// <dd> <p>Windows message compatible virtual-key code. For more information, see Virtual Key Codes. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RAWKEYBOARD::VKey']/*"/>	
        /// <msdn-id>ms645575</msdn-id>	
        /// <unmanaged>unsigned short VKey</unmanaged>	
        /// <unmanaged-short>unsigned short VKey</unmanaged-short>	
        public short VKey;
        
        /// <summary>	
        /// <dd> <p>The corresponding window message, for example <strong><see cref="SharpDX.RawInput.KeyState.KeyDown"/></strong>, <strong><see cref="SharpDX.RawInput.KeyState.SystemKeyDown"/></strong>, and so forth. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RAWKEYBOARD::Message']/*"/>	
        /// <msdn-id>ms645575</msdn-id>	
        /// <unmanaged>RAW_KEY_STATE Message</unmanaged>	
        /// <unmanaged-short>RAW_KEY_STATE Message</unmanaged-short>	
        public SharpDX.RawInput.KeyState Message;
        
        /// <summary>	
        /// <dd> <p>The device-specific additional information for the event. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='RAWKEYBOARD::ExtraInformation']/*"/>	
        /// <msdn-id>ms645575</msdn-id>	
        /// <unmanaged>unsigned int ExtraInformation</unmanaged>	
        /// <unmanaged-short>unsigned int ExtraInformation</unmanaged-short>	
        public int ExtraInformation;
    }
}
