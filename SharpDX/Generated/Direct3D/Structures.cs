// Copyright (c) 2010-2014 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Types declaration for SharpDX.Direct3D namespace.
//     This code was generated by a tool.
//     Date : 6/25/2016 10:38:07 PM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
namespace SharpDX.Direct3D {

#pragma warning disable 282
#pragma warning disable 649
#pragma warning disable 419
#pragma warning disable 1587
#pragma warning disable 1574
    
    /// <summary>	
    /// <p>Defines a shader macro.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>You can use shader macros in your shaders. The <strong><see cref="SharpDX.Direct3D.ShaderMacro"/></strong> structure defines a single shader macro as shown in the following example:</p><pre> <see cref="SharpDX.Direct3D.ShaderMacro"/> Shader_Macros[1] = { "zero", "0"  };	
    /// </pre><p>The following shader or effect creation functions take an array of shader macros as an input parameter:</p><ul> <li> <strong>D3D10CompileShader</strong> </li> <li> <strong>D3DX10CreateEffectFromFile</strong> </li> <li> <strong>D3DX10PreprocessShaderFromFile</strong> </li> <li> <strong>D3DX11CreateAsyncShaderPreprocessProcessor</strong> </li> </ul>	
    /// </remarks>	
    /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D_SHADER_MACRO']/*"/>	
    /// <msdn-id>ff728732</msdn-id>	
    /// <unmanaged>D3D_SHADER_MACRO</unmanaged>	
    /// <unmanaged-short>D3D_SHADER_MACRO</unmanaged-short>	
    public  partial struct ShaderMacro {	
        
        /// <summary>	
        /// <dd> <p>The macro name.</p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D_SHADER_MACRO::Name']/*"/>	
        /// <msdn-id>ff728732</msdn-id>	
        /// <unmanaged>const char* Name</unmanaged>	
        /// <unmanaged-short>char Name</unmanaged-short>	
        public string Name;
        
        /// <summary>	
        /// <dd> <p>The macro definition.</p> </dd>	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D_SHADER_MACRO::Definition']/*"/>	
        /// <msdn-id>ff728732</msdn-id>	
        /// <unmanaged>const char* Definition</unmanaged>	
        /// <unmanaged-short>char Definition</unmanaged-short>	
        public string Definition;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public System.IntPtr Name;
            public System.IntPtr Definition;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                if (this.Name != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.Name);		
                if (this.Definition != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.Definition);		
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Name = ( @ref.Name == IntPtr.Zero )?null:Marshal.PtrToStringAnsi(@ref.Name);
            this.Definition = ( @ref.Definition == IntPtr.Zero )?null:Marshal.PtrToStringAnsi(@ref.Definition);
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Name = ( this.Name == null )?IntPtr.Zero : Utilities.StringToHGlobalAnsi(this.Name);
            @ref.Definition = ( this.Definition == null )?IntPtr.Zero : Utilities.StringToHGlobalAnsi(this.Definition);
		
		}
    }
}
