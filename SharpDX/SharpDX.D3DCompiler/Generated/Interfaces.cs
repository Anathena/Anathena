// Copyright (c) 2010-2014 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Types declaration for SharpDX.D3DCompiler namespace.
//     This code was generated by a tool.
//     Date : 6/25/2016 10:38:11 PM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
namespace SharpDX.D3DCompiler {

// Disable warning : XML comment is not placed on a valid language element
#pragma warning disable 419
#pragma warning disable 1587
#pragma warning disable 1574
    /// <summary>	
    /// <p>This shader-reflection interface provides access to a constant buffer.</p><ul> <li>Methods</li> </ul>	
    /// </summary>	
    /// <remarks>	
    /// <p>To create a constant-buffer interface, call <strong><see cref="SharpDX.D3DCompiler.ShaderReflection.GetConstantBuffer"/></strong> or <strong><see cref="SharpDX.D3DCompiler.ShaderReflection.GetConstantBuffer"/></strong>. This isn't a COM interface, so you don't need to worry about reference counts or releasing the interface when you're done with it.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflectionConstantBuffer']/*"/>	
    /// <msdn-id>ff476591</msdn-id>	
    /// <unmanaged>ID3D11ShaderReflectionConstantBuffer</unmanaged>	
    /// <unmanaged-short>ID3D11ShaderReflectionConstantBuffer</unmanaged-short>	
    [Guid("EB62D63D-93DD-4318-8AE8-C6F83AD371B8")]
    public partial class ConstantBuffer : SharpDX.CppObject {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.D3DCompiler.ConstantBuffer"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ConstantBuffer(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.D3DCompiler.ConstantBuffer"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.D3DCompiler.ConstantBuffer(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.D3DCompiler.ConstantBuffer(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Get a constant-buffer description.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflectionConstantBuffer::GetDesc']/*"/>	
        /// <msdn-id>ff476592</msdn-id>	
        /// <unmanaged>GetDesc</unmanaged>	
        /// <unmanaged-short>GetDesc</unmanaged-short>	
        /// <unmanaged>HRESULT ID3D11ShaderReflectionConstantBuffer::GetDesc([Out] D3D11_SHADER_BUFFER_DESC* pDesc)</unmanaged>
        public SharpDX.D3DCompiler.ConstantBufferDescription Description {
                get { SharpDX.D3DCompiler.ConstantBufferDescription __output__; GetDescription(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// <p>Get a constant-buffer description.</p>	
        /// </summary>	
        /// <param name="descRef"><dd>  <p>A reference to a <strong><see cref="SharpDX.D3DCompiler.ConstantBufferDescription"/></strong>, which represents a shader-buffer description.</p> </dd></param>	
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflectionConstantBuffer::GetDesc']/*"/>	
        /// <msdn-id>ff476592</msdn-id>	
        /// <unmanaged>HRESULT ID3D11ShaderReflectionConstantBuffer::GetDesc([Out] D3D11_SHADER_BUFFER_DESC* pDesc)</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflectionConstantBuffer::GetDesc</unmanaged-short>	
        internal void GetDescription(out SharpDX.D3DCompiler.ConstantBufferDescription descRef) {
            unsafe {
                var descRef_ = new SharpDX.D3DCompiler.ConstantBufferDescription.__Native();
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, &descRef_,((void**)(*(void**)_nativePointer))[0]);		
                descRef = new SharpDX.D3DCompiler.ConstantBufferDescription();
                descRef.__MarshalFrom(ref descRef_);
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Get a shader-reflection variable by index.</p>	
        /// </summary>	
        /// <param name="index"><dd>  <p>Zero-based index.</p> </dd></param>	
        /// <returns><p>A reference to a shader-reflection variable interface (see <strong><see cref="SharpDX.D3DCompiler.ShaderReflectionVariable"/> Interface</strong>).</p></returns>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflectionConstantBuffer::GetVariableByIndex']/*"/>	
        /// <msdn-id>ff476593</msdn-id>	
        /// <unmanaged>ID3D11ShaderReflectionVariable* ID3D11ShaderReflectionConstantBuffer::GetVariableByIndex([In] unsigned int Index)</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflectionConstantBuffer::GetVariableByIndex</unmanaged-short>	
        public SharpDX.D3DCompiler.ShaderReflectionVariable GetVariable(int index) {
            unsafe {
                SharpDX.D3DCompiler.ShaderReflectionVariable __result__;
                __result__= 
				new SharpDX.D3DCompiler.ShaderReflectionVariable((IntPtr)SharpDX.D3DCompiler.LocalInterop.CalliSystemIntPtr(_nativePointer, index,((void**)(*(void**)_nativePointer))[1]));		
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Get a shader-reflection variable by name.</p>	
        /// </summary>	
        /// <param name="name"><dd>  <p>Variable name.</p> </dd></param>	
        /// <returns><p>Returns a sentinel object (end of list marker). To determine if GetVariableByName successfully completed, call <strong><see cref="SharpDX.D3DCompiler.ShaderReflectionVariable.GetDescription"/></strong> and check the returned <strong><see cref="SharpDX.Result"/></strong>; any return value other than success means that GetVariableByName failed.</p></returns>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflectionConstantBuffer::GetVariableByName']/*"/>	
        /// <msdn-id>ff476594</msdn-id>	
        /// <unmanaged>ID3D11ShaderReflectionVariable* ID3D11ShaderReflectionConstantBuffer::GetVariableByName([In] const char* Name)</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflectionConstantBuffer::GetVariableByName</unmanaged-short>	
        public SharpDX.D3DCompiler.ShaderReflectionVariable GetVariable(string name) {
            unsafe {
                IntPtr name_ = Utilities.StringToHGlobalAnsi(name);
                SharpDX.D3DCompiler.ShaderReflectionVariable __result__;
                __result__= 
				new SharpDX.D3DCompiler.ShaderReflectionVariable((IntPtr)SharpDX.D3DCompiler.LocalInterop.CalliSystemIntPtr(_nativePointer, (void*)name_,((void**)(*(void**)_nativePointer))[2]));		
                Marshal.FreeHGlobal(name_ );
                return __result__;
            }
        }
    }
    /// <summary>	
    /// <p>A function-linking-graph interface is used for constructing shaders that consist of a sequence of precompiled function calls that pass values to each other. </p><p><strong>Note</strong>??This interface is part of the HLSL shader linking technology that you can use on all Direct3D?11 platforms to create precompiled HLSL functions, package them into libraries, and link them into full shaders at run time.	
    /// </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To get a function-linking-graph interface, call <strong><see cref="SharpDX.D3DCompiler.D3D.CreateFunctionLinkingGraph"/></strong>. </p><p>You can use the function-linking-graph (FLG) interface methods to construct shaders that consist of a sequence of precompiled function calls that pass values to each other. You don't need to write HLSL and then call the HLSL compiler. Instead, the shader structure is specified programmatically via a C++ API. FLG nodes represent input and output signatures and invocations of precompiled library functions. The order of registering the function-call nodes defines the sequence of invocations. You must specify the input signature node first and the output signature node last. FLG edges define how values are passed from one node to another. The data types of passed values must be the same; there is no implicit type conversion. Shape and swizzling rules follow the HLSL behavior. Values can only be passed forward in this sequence.</p><p><strong>Note</strong>??<strong><see cref="SharpDX.D3DCompiler.FunctionLinkingGraph"/></strong> requires the D3dcompiler_47.dll or a later version of the DLL. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11FunctionLinkingGraph']/*"/>	
    /// <msdn-id>dn280535</msdn-id>	
    /// <unmanaged>ID3D11FunctionLinkingGraph</unmanaged>	
    /// <unmanaged-short>ID3D11FunctionLinkingGraph</unmanaged-short>	
    [Guid("54133220-1CE8-43D3-8236-9855C5CEECFF")]
    public partial class FunctionLinkingGraph : SharpDX.ComObject {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.D3DCompiler.FunctionLinkingGraph"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public FunctionLinkingGraph(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.D3DCompiler.FunctionLinkingGraph"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.D3DCompiler.FunctionLinkingGraph(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.D3DCompiler.FunctionLinkingGraph(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Gets the error from the last function call of the function-linking-graph.</p>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11FunctionLinkingGraph::GetLastError']/*"/>	
        /// <msdn-id>dn280539</msdn-id>	
        /// <unmanaged>GetLastError</unmanaged>	
        /// <unmanaged-short>GetLastError</unmanaged-short>	
        /// <unmanaged>HRESULT ID3D11FunctionLinkingGraph::GetLastError([Out, Optional] ID3D10Blob** ppErrorBuffer)</unmanaged>
        public SharpDX.Direct3D.Blob LastError {
                get { SharpDX.Direct3D.Blob __output__; GetLastError(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// <p>Initializes a shader module from the function-linking-graph object.</p>	
        /// </summary>	
        /// <param name="moduleInstanceOut"><dd>  <p>The address of a reference to an <strong><see cref="SharpDX.D3DCompiler.ModuleInstance"/></strong> interface for the shader module to initialize.</p> </dd></param>	
        /// <param name="errorBufferOut"><dd>  <p>An optional reference to a variable that receives a reference to the <strong>ID3DBlob</strong> interface that you can use to access compiler error messages, or <strong><c>null</c></strong> if there are no errors.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; otherwise, returns one of the Direct3D 11 Return Codes.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11FunctionLinkingGraph::CreateModuleInstance']/*"/>	
        /// <msdn-id>dn280537</msdn-id>	
        /// <unmanaged>HRESULT ID3D11FunctionLinkingGraph::CreateModuleInstance([Out] ID3D11ModuleInstance** ppModuleInstance,[Out, Optional] ID3D10Blob** ppErrorBuffer)</unmanaged>	
        /// <unmanaged-short>ID3D11FunctionLinkingGraph::CreateModuleInstance</unmanaged-short>	
        internal SharpDX.Result CreateModuleInstance(out SharpDX.D3DCompiler.ModuleInstance moduleInstanceOut, out SharpDX.Direct3D.Blob errorBufferOut) {
            unsafe {
                IntPtr moduleInstanceOut_ = IntPtr.Zero;
                IntPtr errorBufferOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, &moduleInstanceOut_, &errorBufferOut_,((void**)(*(void**)_nativePointer))[3]);		
                moduleInstanceOut= (moduleInstanceOut_ == IntPtr.Zero)?null:new SharpDX.D3DCompiler.ModuleInstance(moduleInstanceOut_);	
                errorBufferOut= (errorBufferOut_ == IntPtr.Zero)?null:new SharpDX.Direct3D.Blob(errorBufferOut_);	
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Sets the input signature of the function-linking-graph.</p>	
        /// </summary>	
        /// <param name="inputParametersRef"><dd>  <p>An array of  <strong><see cref="SharpDX.D3DCompiler.ParameterDescription"/></strong> structures for the parameters of the input signature.</p> </dd></param>	
        /// <param name="cInputParameters"><dd>  <p>The number of input parameters in the <em>pInputParameters</em> array.</p> </dd></param>	
        /// <param name="inputNodeOut"><dd>  <p>A reference to a variable that receives a reference to the <strong><see cref="SharpDX.D3DCompiler.LinkingNode"/></strong> interface that represents the input signature of the function-linking-graph.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; otherwise, returns one of the Direct3D 11 Return Codes.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11FunctionLinkingGraph::SetInputSignature']/*"/>	
        /// <msdn-id>dn280542</msdn-id>	
        /// <unmanaged>HRESULT ID3D11FunctionLinkingGraph::SetInputSignature([In, Buffer] const D3D11_PARAMETER_DESC* pInputParameters,[In] unsigned int cInputParameters,[Out] ID3D11LinkingNode** ppInputNode)</unmanaged>	
        /// <unmanaged-short>ID3D11FunctionLinkingGraph::SetInputSignature</unmanaged-short>	
        internal void SetInputSignature(SharpDX.D3DCompiler.ParameterDescription[] inputParametersRef, int cInputParameters, out SharpDX.D3DCompiler.LinkingNode inputNodeOut) {
            unsafe {
                SharpDX.D3DCompiler.ParameterDescription.__Native[] inputParametersRef__ = new SharpDX.D3DCompiler.ParameterDescription.__Native[inputParametersRef.Length];
                for (int i = 0; i < inputParametersRef.Length; i++)
                    inputParametersRef[i].__MarshalTo(ref inputParametersRef__[i]);				
                IntPtr inputNodeOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                fixed (void* inputParametersRef_ = inputParametersRef__)
                    __result__= 
    				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, inputParametersRef_, cInputParameters, &inputNodeOut_,((void**)(*(void**)_nativePointer))[4]);		
                for (int i = 0; i < inputParametersRef.Length; i++)
                    inputParametersRef[i].__MarshalFree(ref inputParametersRef__[i]);
                inputNodeOut= (inputNodeOut_ == IntPtr.Zero)?null:new SharpDX.D3DCompiler.LinkingNode(inputNodeOut_);	
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Sets the output signature of the function-linking-graph.</p>	
        /// </summary>	
        /// <param name="outputParametersRef"><dd>  <p>An array of  <strong><see cref="SharpDX.D3DCompiler.ParameterDescription"/></strong> structures for the parameters of the output signature.</p> </dd></param>	
        /// <param name="cOutputParameters"><dd>  <p>The number of output parameters in the <em>pOutputParameters</em> array.</p> </dd></param>	
        /// <param name="outputNodeOut"><dd>  <p>A reference to a variable that receives a reference to the <strong><see cref="SharpDX.D3DCompiler.LinkingNode"/></strong> interface that represents the output signature of the function-linking-graph.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; otherwise, returns one of the Direct3D 11 Return Codes.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11FunctionLinkingGraph::SetOutputSignature']/*"/>	
        /// <msdn-id>dn280543</msdn-id>	
        /// <unmanaged>HRESULT ID3D11FunctionLinkingGraph::SetOutputSignature([In, Buffer] const D3D11_PARAMETER_DESC* pOutputParameters,[In] unsigned int cOutputParameters,[Out] ID3D11LinkingNode** ppOutputNode)</unmanaged>	
        /// <unmanaged-short>ID3D11FunctionLinkingGraph::SetOutputSignature</unmanaged-short>	
        public void SetOutputSignature(SharpDX.D3DCompiler.ParameterDescription[] outputParametersRef, int cOutputParameters, out SharpDX.D3DCompiler.LinkingNode outputNodeOut) {
            unsafe {
                SharpDX.D3DCompiler.ParameterDescription.__Native[] outputParametersRef__ = new SharpDX.D3DCompiler.ParameterDescription.__Native[outputParametersRef.Length];
                for (int i = 0; i < outputParametersRef.Length; i++)
                    outputParametersRef[i].__MarshalTo(ref outputParametersRef__[i]);				
                IntPtr outputNodeOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                fixed (void* outputParametersRef_ = outputParametersRef__)
                    __result__= 
    				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, outputParametersRef_, cOutputParameters, &outputNodeOut_,((void**)(*(void**)_nativePointer))[5]);		
                for (int i = 0; i < outputParametersRef.Length; i++)
                    outputParametersRef[i].__MarshalFree(ref outputParametersRef__[i]);
                outputNodeOut= (outputNodeOut_ == IntPtr.Zero)?null:new SharpDX.D3DCompiler.LinkingNode(outputNodeOut_);	
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Creates a call-function linking node to use in the function-linking-graph.</p>	
        /// </summary>	
        /// <param name="moduleInstanceNamespaceRef"><dd>  <p>The optional namespace for the function, or <strong><c>null</c></strong> if no namespace is needed.</p> </dd></param>	
        /// <param name="moduleWithFunctionPrototypeRef"><dd>  <p>A reference to the <strong><see cref="SharpDX.D3DCompiler.ModuleInstance"/></strong> interface for the library module that contains the function prototype.</p> </dd></param>	
        /// <param name="functionNameRef"><dd>  <p>The name of the function.</p> </dd></param>	
        /// <returns><dd>  <p>A reference to a variable that receives a reference to the <strong><see cref="SharpDX.D3DCompiler.LinkingNode"/></strong> interface that represents the function in the function-linking-graph.</p> </dd></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11FunctionLinkingGraph::CallFunction']/*"/>	
        /// <msdn-id>dn280536</msdn-id>	
        /// <unmanaged>HRESULT ID3D11FunctionLinkingGraph::CallFunction([In, Optional] const char* pModuleInstanceNamespace,[In] ID3D11Module* pModuleWithFunctionPrototype,[In] const char* pFunctionName,[Out] ID3D11LinkingNode** ppCallNode)</unmanaged>	
        /// <unmanaged-short>ID3D11FunctionLinkingGraph::CallFunction</unmanaged-short>	
        public SharpDX.D3DCompiler.LinkingNode CallFunction(string moduleInstanceNamespaceRef, SharpDX.D3DCompiler.Module moduleWithFunctionPrototypeRef, string functionNameRef) {
            unsafe {
                IntPtr moduleInstanceNamespaceRef_ = Utilities.StringToHGlobalAnsi(moduleInstanceNamespaceRef);
                IntPtr functionNameRef_ = Utilities.StringToHGlobalAnsi(functionNameRef);
                SharpDX.D3DCompiler.LinkingNode callNodeOut;
                IntPtr callNodeOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, (void*)moduleInstanceNamespaceRef_, (void*)((moduleWithFunctionPrototypeRef == null)?IntPtr.Zero:moduleWithFunctionPrototypeRef.NativePointer), (void*)functionNameRef_, &callNodeOut_,((void**)(*(void**)_nativePointer))[6]);		
                Marshal.FreeHGlobal(moduleInstanceNamespaceRef_ );
                Marshal.FreeHGlobal(functionNameRef_ );
                callNodeOut= (callNodeOut_ == IntPtr.Zero)?null:new SharpDX.D3DCompiler.LinkingNode(callNodeOut_);	
                __result__.CheckError();
                return callNodeOut;
            }
        }
        
        /// <summary>	
        /// <p>Passes a value from a source linking node to a destination linking node.</p>	
        /// </summary>	
        /// <param name="srcNodeRef"><dd>  <p>A reference to the <strong><see cref="SharpDX.D3DCompiler.LinkingNode"/></strong> interface for the source linking node.</p> </dd></param>	
        /// <param name="srcParameterIndex"><dd>  <p>The zero-based index of the source parameter.</p> </dd></param>	
        /// <param name="dstNodeRef"><dd>  <p>A reference to the <strong><see cref="SharpDX.D3DCompiler.LinkingNode"/></strong> interface for the destination linking node.</p> </dd></param>	
        /// <param name="dstParameterIndex"><dd>  <p>The zero-based index of the destination parameter.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; otherwise, returns one of the Direct3D 11 Return Codes.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11FunctionLinkingGraph::PassValue']/*"/>	
        /// <msdn-id>dn280540</msdn-id>	
        /// <unmanaged>HRESULT ID3D11FunctionLinkingGraph::PassValue([In] ID3D11LinkingNode* pSrcNode,[In] int SrcParameterIndex,[In] ID3D11LinkingNode* pDstNode,[In] int DstParameterIndex)</unmanaged>	
        /// <unmanaged-short>ID3D11FunctionLinkingGraph::PassValue</unmanaged-short>	
        public void PassValue(SharpDX.D3DCompiler.LinkingNode srcNodeRef, int srcParameterIndex, SharpDX.D3DCompiler.LinkingNode dstNodeRef, int dstParameterIndex) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, (void*)((srcNodeRef == null)?IntPtr.Zero:srcNodeRef.NativePointer), srcParameterIndex, (void*)((dstNodeRef == null)?IntPtr.Zero:dstNodeRef.NativePointer), dstParameterIndex,((void**)(*(void**)_nativePointer))[7]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Passes a value with swizzle from a source linking node to a destination linking node.</p>	
        /// </summary>	
        /// <param name="srcNodeRef"><dd>  <p>A reference to the <strong><see cref="SharpDX.D3DCompiler.LinkingNode"/></strong> interface for the source linking node.</p> </dd></param>	
        /// <param name="srcParameterIndex"><dd>  <p>The zero-based index of the source parameter.</p> </dd></param>	
        /// <param name="srcSwizzleRef"><dd>  <p>The name of the source swizzle.</p> </dd></param>	
        /// <param name="dstNodeRef"><dd>  <p>A reference to the <strong><see cref="SharpDX.D3DCompiler.LinkingNode"/></strong> interface for the destination linking node.</p> </dd></param>	
        /// <param name="dstParameterIndex"><dd>  <p>The zero-based index of the destination parameter.</p> </dd></param>	
        /// <param name="dstSwizzleRef"><dd>  <p>The name of the destination swizzle.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; otherwise, returns one of the Direct3D 11 Return Codes.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11FunctionLinkingGraph::PassValueWithSwizzle']/*"/>	
        /// <msdn-id>dn280541</msdn-id>	
        /// <unmanaged>HRESULT ID3D11FunctionLinkingGraph::PassValueWithSwizzle([In] ID3D11LinkingNode* pSrcNode,[In] int SrcParameterIndex,[In] const char* pSrcSwizzle,[In] ID3D11LinkingNode* pDstNode,[In] int DstParameterIndex,[In] const char* pDstSwizzle)</unmanaged>	
        /// <unmanaged-short>ID3D11FunctionLinkingGraph::PassValueWithSwizzle</unmanaged-short>	
        public void PassValueWithSwizzle(SharpDX.D3DCompiler.LinkingNode srcNodeRef, int srcParameterIndex, string srcSwizzleRef, SharpDX.D3DCompiler.LinkingNode dstNodeRef, int dstParameterIndex, string dstSwizzleRef) {
            unsafe {
                IntPtr srcSwizzleRef_ = Utilities.StringToHGlobalAnsi(srcSwizzleRef);
                IntPtr dstSwizzleRef_ = Utilities.StringToHGlobalAnsi(dstSwizzleRef);
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, (void*)((srcNodeRef == null)?IntPtr.Zero:srcNodeRef.NativePointer), srcParameterIndex, (void*)srcSwizzleRef_, (void*)((dstNodeRef == null)?IntPtr.Zero:dstNodeRef.NativePointer), dstParameterIndex, (void*)dstSwizzleRef_,((void**)(*(void**)_nativePointer))[8]);		
                Marshal.FreeHGlobal(srcSwizzleRef_ );
                Marshal.FreeHGlobal(dstSwizzleRef_ );
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Gets the error from the last function call of the function-linking-graph.</p>	
        /// </summary>	
        /// <param name="errorBufferOut"><dd>  <p>An reference to a variable that receives a reference to the <strong>ID3DBlob</strong> interface that you can use to access the error.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; otherwise, returns one of the Direct3D 11 Return Codes.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11FunctionLinkingGraph::GetLastError']/*"/>	
        /// <msdn-id>dn280539</msdn-id>	
        /// <unmanaged>HRESULT ID3D11FunctionLinkingGraph::GetLastError([Out, Optional] ID3D10Blob** ppErrorBuffer)</unmanaged>	
        /// <unmanaged-short>ID3D11FunctionLinkingGraph::GetLastError</unmanaged-short>	
        internal void GetLastError(out SharpDX.Direct3D.Blob errorBufferOut) {
            unsafe {
                IntPtr errorBufferOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, &errorBufferOut_,((void**)(*(void**)_nativePointer))[9]);		
                errorBufferOut= (errorBufferOut_ == IntPtr.Zero)?null:new SharpDX.Direct3D.Blob(errorBufferOut_);	
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Generates Microsoft High Level Shader Language (HLSL) shader code that represents the function-linking-graph.</p>	
        /// </summary>	
        /// <param name="uFlags"><dd>  <p>Reserved</p> </dd></param>	
        /// <param name="bufferOut"><dd>  <p>An reference to a variable that receives a reference to the <strong>ID3DBlob</strong> interface that you can use to access the HLSL shader source code that represents the function-linking-graph. You can compile this HLSL code, but first you must  add code or include statements for the functions called in the function-linking-graph.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; otherwise, returns one of the Direct3D 11 Return Codes.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11FunctionLinkingGraph::GenerateHlsl']/*"/>	
        /// <msdn-id>dn280538</msdn-id>	
        /// <unmanaged>HRESULT ID3D11FunctionLinkingGraph::GenerateHlsl([In] unsigned int uFlags,[Out] ID3D10Blob** ppBuffer)</unmanaged>	
        /// <unmanaged-short>ID3D11FunctionLinkingGraph::GenerateHlsl</unmanaged-short>	
        public void GenerateHlsl(int uFlags, out SharpDX.Direct3D.Blob bufferOut) {
            unsafe {
                IntPtr bufferOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, uFlags, &bufferOut_,((void**)(*(void**)_nativePointer))[10]);		
                bufferOut= (bufferOut_ == IntPtr.Zero)?null:new SharpDX.Direct3D.Blob(bufferOut_);	
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>A function-parameter-reflection interface accesses function-parameter info. </p><p><strong>Note</strong>??This interface is part of the HLSL shader linking technology that you can use on all Direct3D?11 platforms to create precompiled HLSL functions, package them into libraries, and link them into full shaders at run time.	
    /// </p><ul> <li>Methods</li> </ul>	
    /// </summary>	
    /// <remarks>	
    /// <p>To get a function-parameter-reflection interface, call <strong><see cref="SharpDX.D3DCompiler.FunctionReflection.GetFunctionParameter"/></strong>. This isn't a COM interface, so you don't need to worry about reference counts or releasing the interface when you're done with it.</p><p><strong>Note</strong>??<strong><see cref="SharpDX.D3DCompiler.FunctionParameterReflection"/></strong> requires the D3dcompiler_47.dll or a later version of the DLL. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11FunctionParameterReflection']/*"/>	
    /// <msdn-id>dn280544</msdn-id>	
    /// <unmanaged>ID3D11FunctionParameterReflection</unmanaged>	
    /// <unmanaged-short>ID3D11FunctionParameterReflection</unmanaged-short>	
    [Guid("42757488-334F-47FE-982E-1A65D08CC462")]
    public partial class FunctionParameterReflection : SharpDX.CppObject {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.D3DCompiler.FunctionParameterReflection"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public FunctionParameterReflection(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.D3DCompiler.FunctionParameterReflection"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.D3DCompiler.FunctionParameterReflection(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.D3DCompiler.FunctionParameterReflection(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Fills the parameter descriptor structure for the function's parameter.</p>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11FunctionParameterReflection::GetDesc']/*"/>	
        /// <msdn-id>dn280545</msdn-id>	
        /// <unmanaged>GetDesc</unmanaged>	
        /// <unmanaged-short>GetDesc</unmanaged-short>	
        /// <unmanaged>HRESULT ID3D11FunctionParameterReflection::GetDesc([Out] D3D11_PARAMETER_DESC* pDesc)</unmanaged>
        public SharpDX.D3DCompiler.ParameterDescription Description {
                get { SharpDX.D3DCompiler.ParameterDescription __output__; GetDescription(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// <p>Fills the parameter descriptor structure for the function's parameter.</p>	
        /// </summary>	
        /// <param name="descRef"><dd>  <p>A reference to a <strong><see cref="SharpDX.D3DCompiler.ParameterDescription"/></strong> structure that receives a description of the function's parameter. </p> </dd></param>	
        /// <returns><p>Returns one of the Direct3D 11 Return Codes.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11FunctionParameterReflection::GetDesc']/*"/>	
        /// <msdn-id>dn280545</msdn-id>	
        /// <unmanaged>HRESULT ID3D11FunctionParameterReflection::GetDesc([Out] D3D11_PARAMETER_DESC* pDesc)</unmanaged>	
        /// <unmanaged-short>ID3D11FunctionParameterReflection::GetDesc</unmanaged-short>	
        internal void GetDescription(out SharpDX.D3DCompiler.ParameterDescription descRef) {
            unsafe {
                var descRef_ = new SharpDX.D3DCompiler.ParameterDescription.__Native();
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, &descRef_,((void**)(*(void**)_nativePointer))[0]);		
                descRef = new SharpDX.D3DCompiler.ParameterDescription();
                descRef.__MarshalFrom(ref descRef_);
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>A function-reflection interface accesses function info. </p><p><strong>Note</strong>??This interface is part of the HLSL shader linking technology that you can use on all Direct3D?11 platforms to create precompiled HLSL functions, package them into libraries, and link them into full shaders at run time.	
    /// </p><ul> <li>Methods</li> </ul>	
    /// </summary>	
    /// <remarks>	
    /// <p>To get a function-reflection interface, call <strong><see cref="SharpDX.D3DCompiler.LibraryReflection.GetFunctionByIndex"/></strong>. This isn't a COM interface, so you don't need to worry about reference counts or releasing the interface when you're done with it.</p><p><strong>Note</strong>??<strong><see cref="SharpDX.D3DCompiler.FunctionReflection"/></strong> requires the D3dcompiler_47.dll or a later version of the DLL. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11FunctionReflection']/*"/>	
    /// <msdn-id>dn280546</msdn-id>	
    /// <unmanaged>ID3D11FunctionReflection</unmanaged>	
    /// <unmanaged-short>ID3D11FunctionReflection</unmanaged-short>	
    [Guid("207BCECB-D683-4A06-A8A3-9B149B9F73A4")]
    public partial class FunctionReflection : SharpDX.CppObject {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.D3DCompiler.FunctionReflection"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public FunctionReflection(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.D3DCompiler.FunctionReflection"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.D3DCompiler.FunctionReflection(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.D3DCompiler.FunctionReflection(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Fills the function descriptor structure for the function.</p>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11FunctionReflection::GetDesc']/*"/>	
        /// <msdn-id>dn280549</msdn-id>	
        /// <unmanaged>GetDesc</unmanaged>	
        /// <unmanaged-short>GetDesc</unmanaged-short>	
        /// <unmanaged>HRESULT ID3D11FunctionReflection::GetDesc([Out] D3D11_FUNCTION_DESC* pDesc)</unmanaged>
        public SharpDX.D3DCompiler.FunctionDescription Description {
                get { SharpDX.D3DCompiler.FunctionDescription __output__; GetDescription(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// <p>Fills the function descriptor structure for the function.</p>	
        /// </summary>	
        /// <param name="descRef"><dd>  <p>A reference to a <strong><see cref="SharpDX.D3DCompiler.FunctionDescription"/></strong> structure that receives a description of the function.</p> </dd></param>	
        /// <returns><p>Returns one of the Direct3D 11 Return Codes.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11FunctionReflection::GetDesc']/*"/>	
        /// <msdn-id>dn280549</msdn-id>	
        /// <unmanaged>HRESULT ID3D11FunctionReflection::GetDesc([Out] D3D11_FUNCTION_DESC* pDesc)</unmanaged>	
        /// <unmanaged-short>ID3D11FunctionReflection::GetDesc</unmanaged-short>	
        internal void GetDescription(out SharpDX.D3DCompiler.FunctionDescription descRef) {
            unsafe {
                var descRef_ = new SharpDX.D3DCompiler.FunctionDescription.__Native();
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, &descRef_,((void**)(*(void**)_nativePointer))[0]);		
                descRef = new SharpDX.D3DCompiler.FunctionDescription();
                descRef.__MarshalFrom(ref descRef_);
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Gets a constant buffer by index for a function.</p>	
        /// </summary>	
        /// <param name="bufferIndex"><dd>  <p>Zero-based index.</p> </dd></param>	
        /// <returns><p>A reference to a <strong><see cref="SharpDX.D3DCompiler.ConstantBuffer"/></strong> interface that represents the constant buffer.</p></returns>	
        /// <remarks>	
        /// <p>A constant buffer supplies either scalar constants or texture constants to a shader. A shader can use one or more constant buffers. For best performance, separate constants into buffers based on the frequency they are updated.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11FunctionReflection::GetConstantBufferByIndex']/*"/>	
        /// <msdn-id>dn280547</msdn-id>	
        /// <unmanaged>ID3D11ShaderReflectionConstantBuffer* ID3D11FunctionReflection::GetConstantBufferByIndex([In] unsigned int BufferIndex)</unmanaged>	
        /// <unmanaged-short>ID3D11FunctionReflection::GetConstantBufferByIndex</unmanaged-short>	
        public SharpDX.D3DCompiler.ConstantBuffer GetConstantBufferByIndex(int bufferIndex) {
            unsafe {
                SharpDX.D3DCompiler.ConstantBuffer __result__;
                __result__= 
				new SharpDX.D3DCompiler.ConstantBuffer((IntPtr)SharpDX.D3DCompiler.LocalInterop.CalliSystemIntPtr(_nativePointer, bufferIndex,((void**)(*(void**)_nativePointer))[1]));		
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Gets a constant buffer by name for a function.</p>	
        /// </summary>	
        /// <param name="name"><dd>  <p>The constant-buffer name.</p> </dd></param>	
        /// <returns><p>A reference to a <strong><see cref="SharpDX.D3DCompiler.ConstantBuffer"/></strong> interface that represents the constant buffer.</p></returns>	
        /// <remarks>	
        /// <p>A constant buffer supplies either scalar constants or texture constants to a shader. A shader can use one or more constant buffers. For best performance, separate constants into buffers based on the frequency they are updated.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11FunctionReflection::GetConstantBufferByName']/*"/>	
        /// <msdn-id>dn280548</msdn-id>	
        /// <unmanaged>ID3D11ShaderReflectionConstantBuffer* ID3D11FunctionReflection::GetConstantBufferByName([In] const char* Name)</unmanaged>	
        /// <unmanaged-short>ID3D11FunctionReflection::GetConstantBufferByName</unmanaged-short>	
        public SharpDX.D3DCompiler.ConstantBuffer GetConstantBufferByName(string name) {
            unsafe {
                IntPtr name_ = Utilities.StringToHGlobalAnsi(name);
                SharpDX.D3DCompiler.ConstantBuffer __result__;
                __result__= 
				new SharpDX.D3DCompiler.ConstantBuffer((IntPtr)SharpDX.D3DCompiler.LocalInterop.CalliSystemIntPtr(_nativePointer, (void*)name_,((void**)(*(void**)_nativePointer))[2]));		
                Marshal.FreeHGlobal(name_ );
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Gets a description of how a resource is bound to a function. </p>	
        /// </summary>	
        /// <param name="resourceIndex"><dd>  <p>A zero-based resource index.</p> </dd></param>	
        /// <param name="descRef"><dd>  <p>A reference to a <strong><see cref="SharpDX.D3DCompiler.InputBindingDescription"/></strong> structure that describes input binding of the resource. </p> </dd></param>	
        /// <returns><p>Returns one of the Direct3D 11 Return Codes.</p></returns>	
        /// <remarks>	
        /// <p>A shader consists of executable code (the compiled HLSL functions) and a set of resources that supply the shader with input data. <strong>GetResourceBindingDesc</strong> gets info about how one resource in the set is bound as an input to the shader. The  <em>ResourceIndex</em> parameter specifies the index for the resource.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11FunctionReflection::GetResourceBindingDesc']/*"/>	
        /// <msdn-id>dn280551</msdn-id>	
        /// <unmanaged>HRESULT ID3D11FunctionReflection::GetResourceBindingDesc([In] unsigned int ResourceIndex,[Out] D3D11_SHADER_INPUT_BIND_DESC* pDesc)</unmanaged>	
        /// <unmanaged-short>ID3D11FunctionReflection::GetResourceBindingDesc</unmanaged-short>	
        public void GetResourceBindingDescription(int resourceIndex, out SharpDX.D3DCompiler.InputBindingDescription descRef) {
            unsafe {
                var descRef_ = new SharpDX.D3DCompiler.InputBindingDescription.__Native();
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, resourceIndex, &descRef_,((void**)(*(void**)_nativePointer))[3]);		
                descRef = new SharpDX.D3DCompiler.InputBindingDescription();
                descRef.__MarshalFrom(ref descRef_);
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Gets a variable by name.</p>	
        /// </summary>	
        /// <param name="name"><dd>  <p>A reference to a string containing the variable name.</p> </dd></param>	
        /// <returns><p>Returns a <strong><see cref="SharpDX.D3DCompiler.ShaderReflectionVariable"/> Interface</strong> interface.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11FunctionReflection::GetVariableByName']/*"/>	
        /// <msdn-id>dn280553</msdn-id>	
        /// <unmanaged>ID3D11ShaderReflectionVariable* ID3D11FunctionReflection::GetVariableByName([In] const char* Name)</unmanaged>	
        /// <unmanaged-short>ID3D11FunctionReflection::GetVariableByName</unmanaged-short>	
        public SharpDX.D3DCompiler.ShaderReflectionVariable GetVariableByName(string name) {
            unsafe {
                IntPtr name_ = Utilities.StringToHGlobalAnsi(name);
                SharpDX.D3DCompiler.ShaderReflectionVariable __result__;
                __result__= 
				new SharpDX.D3DCompiler.ShaderReflectionVariable((IntPtr)SharpDX.D3DCompiler.LocalInterop.CalliSystemIntPtr(_nativePointer, (void*)name_,((void**)(*(void**)_nativePointer))[4]));		
                Marshal.FreeHGlobal(name_ );
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Gets a description of how a resource is bound to a function. </p>	
        /// </summary>	
        /// <param name="name"><dd>  <p>The constant-buffer name of the resource.</p> </dd></param>	
        /// <param name="descRef"><dd>  <p>A reference to a <strong><see cref="SharpDX.D3DCompiler.InputBindingDescription"/></strong> structure that describes input binding of the resource. </p> </dd></param>	
        /// <returns><p>Returns one of the Direct3D 11 Return Codes.</p></returns>	
        /// <remarks>	
        /// <p>A shader consists of executable code (the compiled HLSL functions) and a set of resources that supply the shader with input data. <strong>GetResourceBindingDescByName</strong> gets info about how one resource in the set is bound as an input to the shader. The  <em>Name</em> parameter specifies the name of the resource.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11FunctionReflection::GetResourceBindingDescByName']/*"/>	
        /// <msdn-id>dn280552</msdn-id>	
        /// <unmanaged>HRESULT ID3D11FunctionReflection::GetResourceBindingDescByName([In] const char* Name,[Out] D3D11_SHADER_INPUT_BIND_DESC* pDesc)</unmanaged>	
        /// <unmanaged-short>ID3D11FunctionReflection::GetResourceBindingDescByName</unmanaged-short>	
        public void GetResourceBindingDescByName(string name, out SharpDX.D3DCompiler.InputBindingDescription descRef) {
            unsafe {
                IntPtr name_ = Utilities.StringToHGlobalAnsi(name);
                var descRef_ = new SharpDX.D3DCompiler.InputBindingDescription.__Native();
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, (void*)name_, &descRef_,((void**)(*(void**)_nativePointer))[5]);		
                Marshal.FreeHGlobal(name_ );
                descRef = new SharpDX.D3DCompiler.InputBindingDescription();
                descRef.__MarshalFrom(ref descRef_);
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Gets the function parameter reflector.</p>	
        /// </summary>	
        /// <param name="parameterIndex"><dd>  <p>The zero-based index of the function parameter reflector to retrieve.</p> </dd></param>	
        /// <returns><p>A reference to a <strong><see cref="SharpDX.D3DCompiler.FunctionParameterReflection"/></strong> interface that represents the function parameter reflector.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11FunctionReflection::GetFunctionParameter']/*"/>	
        /// <msdn-id>dn280550</msdn-id>	
        /// <unmanaged>ID3D11FunctionParameterReflection* ID3D11FunctionReflection::GetFunctionParameter([In] int ParameterIndex)</unmanaged>	
        /// <unmanaged-short>ID3D11FunctionReflection::GetFunctionParameter</unmanaged-short>	
        public SharpDX.D3DCompiler.FunctionParameterReflection GetFunctionParameter(int parameterIndex) {
            unsafe {
                SharpDX.D3DCompiler.FunctionParameterReflection __result__;
                __result__= 
				new SharpDX.D3DCompiler.FunctionParameterReflection((IntPtr)SharpDX.D3DCompiler.LocalInterop.CalliSystemIntPtr(_nativePointer, parameterIndex,((void**)(*(void**)_nativePointer))[6]));		
                return __result__;
            }
        }
    }
    /// <summary>	
    /// <p><strong><see cref="SharpDX.D3DCompiler.Include"/></strong> is an include interface that the user implements to allow an application to call user-overridable methods for opening and closing shader #include files.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To use this interface, create an interface that inherits from <strong><see cref="SharpDX.D3DCompiler.Include"/></strong> and implement custom behavior for the methods.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DInclude']/*"/>	
    /// <msdn-id>ff728746</msdn-id>	
    /// <unmanaged>ID3DInclude</unmanaged>	
    /// <unmanaged-short>ID3DInclude</unmanaged-short>	
    public partial interface Include : SharpDX.ICallbackable {
        
        
        /// <summary>	
        /// <p>A user-implemented method for opening and reading the contents of a shader #include file.</p>	
        /// </summary>	
        /// <param name="includeType"><dd>  <p>A <strong><see cref="SharpDX.D3DCompiler.IncludeType"/></strong>-typed value that indicates the location of the #include file. </p> </dd></param>	
        /// <param name="fileNameRef"><dd>  <p>Name of the #include file.</p> </dd></param>	
        /// <param name="parentDataRef"><dd>  <p>Pointer to the container that includes the #include file. The compiler might pass <c>null</c> in <em>pParentData</em>. For more information, see the "Searching for Include Files" section in Compile an Effect (Direct3D 11).</p> </dd></param>	
        /// <param name="dataOut"><dd>  <p>Pointer to the buffer  that contains the include directives. This reference remains valid until you call<strong><see cref="SharpDX.D3DCompiler.Include.Close"/></strong>.</p> </dd></param>	
        /// <param name="bytesRef"><dd>  <p>Pointer to the number of bytes that <strong>Open</strong> returns in <em>ppData</em>.</p> </dd></param>	
        /// <returns><p>The user-implemented method must return <see cref="SharpDX.Result.Ok"/>. If <strong>Open</strong> fails when it reads the #include file, the application programming interface (API) that caused <strong>Open</strong> to be called fails. This failure can occur in one of the following situations:</p><ul> <li>The high-level shader language (HLSL) shader fails one of the <strong>D3D10CompileShader***</strong> functions.</li> <li>The effect fails one of the <strong>D3D10CreateEffect***</strong> functions.</li> </ul></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DInclude::Open']/*"/>	
        /// <msdn-id>ff728748</msdn-id>	
        /// <unmanaged>HRESULT ID3DInclude::Open([In] D3D_INCLUDE_TYPE IncludeType,[In] const char* pFileName,[In] const void* pParentData,[In] const void** ppData,[In] unsigned int* pBytes)</unmanaged>	
        /// <unmanaged-short>ID3DInclude::Open</unmanaged-short>	
        /* public void Open(SharpDX.D3DCompiler.IncludeType includeType, string fileNameRef, System.IntPtr parentDataRef, System.IntPtr dataOut, int bytesRef) */
        
        /// <summary>	
        /// <p>A user-implemented method for closing a shader #include file.</p>	
        /// </summary>	
        /// <param name="dataRef"><dd>  <p>Pointer to the buffer that contains the include directives. This is the reference that was returned by the corresponding <strong><see cref="SharpDX.D3DCompiler.Include.Open"/></strong> call.</p> </dd></param>	
        /// <returns><p>The user-implemented <strong>Close</strong> method should return <see cref="SharpDX.Result.Ok"/>. If <strong>Close</strong> fails when it closes the #include file, the application programming interface (API) that caused <strong>Close</strong> to be called fails. This failure can occur in one of the following situations:</p><ul> <li>The high-level shader language (HLSL) shader fails one of the <strong>D3D10CompileShader***</strong> functions.</li> <li>The effect fails one of the <strong>D3D10CreateEffect***</strong> functions.</li> </ul></returns>	
        /// <remarks>	
        /// <p>If <strong><see cref="SharpDX.D3DCompiler.Include.Open"/></strong> was successful, <strong>Close</strong> is guaranteed to be called before the API using the <strong><see cref="SharpDX.D3DCompiler.Include"/></strong> interface returns.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DInclude::Close']/*"/>	
        /// <msdn-id>ff728747</msdn-id>	
        /// <unmanaged>HRESULT ID3DInclude::Close([In] const void* pData)</unmanaged>	
        /// <unmanaged-short>ID3DInclude::Close</unmanaged-short>	
        /* public void Close(System.IntPtr dataRef) */
    }
    /// <summary>	
    /// <p>A library-reflection interface accesses library info. </p><p><strong>Note</strong>??This interface is part of the HLSL shader linking technology that you can use on all Direct3D?11 platforms to create precompiled HLSL functions, package them into libraries, and link them into full shaders at run time.	
    /// </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To get a library-reflection interface, call <strong><see cref="SharpDX.D3DCompiler.D3D.ReflectLibrary"/></strong>. </p><p><strong>Note</strong>??<strong><see cref="SharpDX.D3DCompiler.LibraryReflection"/></strong> requires the D3dcompiler_47.dll or a later version of the DLL. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11LibraryReflection']/*"/>	
    /// <msdn-id>dn280554</msdn-id>	
    /// <unmanaged>ID3D11LibraryReflection</unmanaged>	
    /// <unmanaged-short>ID3D11LibraryReflection</unmanaged-short>	
    [Guid("54384F1B-5B3E-4BB7-AE01-60BA3097CBB6")]
    public partial class LibraryReflection : SharpDX.ComObject {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.D3DCompiler.LibraryReflection"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public LibraryReflection(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.D3DCompiler.LibraryReflection"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.D3DCompiler.LibraryReflection(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.D3DCompiler.LibraryReflection(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Fills the library descriptor structure for the library reflection.</p>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11LibraryReflection::GetDesc']/*"/>	
        /// <msdn-id>dn280556</msdn-id>	
        /// <unmanaged>GetDesc</unmanaged>	
        /// <unmanaged-short>GetDesc</unmanaged-short>	
        /// <unmanaged>HRESULT ID3D11LibraryReflection::GetDesc([Out] D3D11_LIBRARY_DESC* pDesc)</unmanaged>
        public SharpDX.D3DCompiler.LibraryDescription Description {
                get { SharpDX.D3DCompiler.LibraryDescription __output__; GetDescription(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// <p>Fills the library descriptor structure for the library reflection.</p>	
        /// </summary>	
        /// <param name="descRef"><dd>  <p>A reference to a <strong><see cref="SharpDX.D3DCompiler.LibraryDescription"/></strong> structure that receives a description of the library reflection.</p> </dd></param>	
        /// <returns><p>Returns one of the Direct3D 11 Return Codes.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11LibraryReflection::GetDesc']/*"/>	
        /// <msdn-id>dn280556</msdn-id>	
        /// <unmanaged>HRESULT ID3D11LibraryReflection::GetDesc([Out] D3D11_LIBRARY_DESC* pDesc)</unmanaged>	
        /// <unmanaged-short>ID3D11LibraryReflection::GetDesc</unmanaged-short>	
        internal void GetDescription(out SharpDX.D3DCompiler.LibraryDescription descRef) {
            unsafe {
                var descRef_ = new SharpDX.D3DCompiler.LibraryDescription.__Native();
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, &descRef_,((void**)(*(void**)_nativePointer))[3]);		
                descRef = new SharpDX.D3DCompiler.LibraryDescription();
                descRef.__MarshalFrom(ref descRef_);
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Gets the function reflector.</p>	
        /// </summary>	
        /// <param name="functionIndex"><dd>  <p>The zero-based index of the function reflector to retrieve.</p> </dd></param>	
        /// <returns><p>A reference to a <strong><see cref="SharpDX.D3DCompiler.FunctionReflection"/></strong> interface that represents the function reflector.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11LibraryReflection::GetFunctionByIndex']/*"/>	
        /// <msdn-id>dn280557</msdn-id>	
        /// <unmanaged>ID3D11FunctionReflection* ID3D11LibraryReflection::GetFunctionByIndex([In] int FunctionIndex)</unmanaged>	
        /// <unmanaged-short>ID3D11LibraryReflection::GetFunctionByIndex</unmanaged-short>	
        public SharpDX.D3DCompiler.FunctionReflection GetFunctionByIndex(int functionIndex) {
            unsafe {
                SharpDX.D3DCompiler.FunctionReflection __result__;
                __result__= 
				new SharpDX.D3DCompiler.FunctionReflection((IntPtr)SharpDX.D3DCompiler.LocalInterop.CalliSystemIntPtr(_nativePointer, functionIndex,((void**)(*(void**)_nativePointer))[4]));		
                return __result__;
            }
        }
    }
    /// <summary>	
    /// <p>A linker interface is used to link a shader module. </p><p><strong>Note</strong>??This interface is part of the HLSL shader linking technology that you can use on all Direct3D?11 platforms to create precompiled HLSL functions, package them into libraries, and link them into full shaders at run time.	
    /// </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To get a linker interface, call <strong><see cref="SharpDX.D3DCompiler.D3D.CreateLinker"/></strong>. </p><p><strong>Note</strong>??<strong><see cref="SharpDX.D3DCompiler.Linker"/></strong> requires the D3dcompiler_47.dll or a later version of the DLL. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11Linker']/*"/>	
    /// <msdn-id>dn280558</msdn-id>	
    /// <unmanaged>ID3D11Linker</unmanaged>	
    /// <unmanaged-short>ID3D11Linker</unmanaged-short>	
    [Guid("59A6CD0E-E10D-4C1F-88C0-63ABA1DAF30E")]
    public partial class Linker : SharpDX.ComObject {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.D3DCompiler.Linker"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Linker(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.D3DCompiler.Linker"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.D3DCompiler.Linker(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.D3DCompiler.Linker(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Links the shader and produces a shader blob that the Direct3D runtime can use.</p>	
        /// </summary>	
        /// <param name="entryRef"><dd>  <p>A reference to the <strong><see cref="SharpDX.D3DCompiler.ModuleInstance"/></strong> interface for the shader module instance to link from.</p> </dd></param>	
        /// <param name="entryNameRef"><dd>  <p>The name of the shader module instance to link from.</p> </dd></param>	
        /// <param name="targetNameRef"><dd>  <p>The name for the shader blob that is produced.</p> </dd></param>	
        /// <param name="uFlags"><dd>  <p>Reserved</p> </dd></param>	
        /// <param name="shaderBlobOut"><dd>  <p>A reference to a variable that receives a reference to the <strong>ID3DBlob</strong> interface that you can use to access the compiled shader code.</p> </dd></param>	
        /// <param name="errorBufferOut"><dd>  <p>A reference to a variable that receives a reference to the <strong>ID3DBlob</strong> interface that you can use to access compiler error messages.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; otherwise, returns one of the Direct3D 11 Return Codes.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11Linker::Link']/*"/>	
        /// <msdn-id>dn280560</msdn-id>	
        /// <unmanaged>HRESULT ID3D11Linker::Link([In] ID3D11ModuleInstance* pEntry,[In] const char* pEntryName,[In] const char* pTargetName,[In] unsigned int uFlags,[Out] ID3D10Blob** ppShaderBlob,[Out, Optional] ID3D10Blob** ppErrorBuffer)</unmanaged>	
        /// <unmanaged-short>ID3D11Linker::Link</unmanaged-short>	
        internal SharpDX.Result Link(SharpDX.D3DCompiler.ModuleInstance entryRef, string entryNameRef, string targetNameRef, int uFlags, out SharpDX.Direct3D.Blob shaderBlobOut, out SharpDX.Direct3D.Blob errorBufferOut) {
            unsafe {
                IntPtr entryNameRef_ = Utilities.StringToHGlobalAnsi(entryNameRef);
                IntPtr targetNameRef_ = Utilities.StringToHGlobalAnsi(targetNameRef);
                IntPtr shaderBlobOut_ = IntPtr.Zero;
                IntPtr errorBufferOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, (void*)((entryRef == null)?IntPtr.Zero:entryRef.NativePointer), (void*)entryNameRef_, (void*)targetNameRef_, uFlags, &shaderBlobOut_, &errorBufferOut_,((void**)(*(void**)_nativePointer))[3]);		
                Marshal.FreeHGlobal(entryNameRef_ );
                Marshal.FreeHGlobal(targetNameRef_ );
                shaderBlobOut= (shaderBlobOut_ == IntPtr.Zero)?null:new SharpDX.Direct3D.Blob(shaderBlobOut_);	
                errorBufferOut= (errorBufferOut_ == IntPtr.Zero)?null:new SharpDX.Direct3D.Blob(errorBufferOut_);	
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Adds an instance of a library module to be used for linking.</p>	
        /// </summary>	
        /// <param name="libraryMIRef"><dd>  <p>A reference to the <strong><see cref="SharpDX.D3DCompiler.ModuleInstance"/></strong> interface for the library module instance.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; otherwise, returns one of the Direct3D 11 Return Codes.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11Linker::UseLibrary']/*"/>	
        /// <msdn-id>dn280561</msdn-id>	
        /// <unmanaged>HRESULT ID3D11Linker::UseLibrary([In] ID3D11ModuleInstance* pLibraryMI)</unmanaged>	
        /// <unmanaged-short>ID3D11Linker::UseLibrary</unmanaged-short>	
        public void UseLibrary(SharpDX.D3DCompiler.ModuleInstance libraryMIRef) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, (void*)((libraryMIRef == null)?IntPtr.Zero:libraryMIRef.NativePointer),((void**)(*(void**)_nativePointer))[4]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Adds a clip plane with the plane coefficients taken from a cbuffer entry for 10Level9 shaders.</p>	
        /// </summary>	
        /// <param name="uCBufferSlot">No documentation.</param>	
        /// <param name="uCBufferEntry">No documentation.</param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; otherwise, returns one of the Direct3D 11 Return Codes.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11Linker::AddClipPlaneFromCBuffer']/*"/>	
        /// <msdn-id>dn280559</msdn-id>	
        /// <unmanaged>HRESULT ID3D11Linker::AddClipPlaneFromCBuffer([In] unsigned int uCBufferSlot,[In] unsigned int uCBufferEntry)</unmanaged>	
        /// <unmanaged-short>ID3D11Linker::AddClipPlaneFromCBuffer</unmanaged-short>	
        public void AddClipPlaneFromCBuffer(int uCBufferSlot, int uCBufferEntry) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, uCBufferSlot, uCBufferEntry,((void**)(*(void**)_nativePointer))[5]);		
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>A linking-node interface is used for shader linking. </p><p><strong>Note</strong>??This interface is part of the HLSL shader linking technology that you can use on all Direct3D?11 platforms to create precompiled HLSL functions, package them into libraries, and link them into full shaders at run time.	
    /// </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To get a linking-node interface, call <strong><see cref="SharpDX.D3DCompiler.FunctionLinkingGraph.SetInputSignature"/></strong>, <strong><see cref="SharpDX.D3DCompiler.FunctionLinkingGraph.SetOutputSignature"/></strong>, or <strong><see cref="SharpDX.D3DCompiler.FunctionLinkingGraph.CallFunction"/></strong>. </p><p><strong>Note</strong>??<strong><see cref="SharpDX.D3DCompiler.LinkingNode"/></strong> requires the D3dcompiler_47.dll or a later version of the DLL. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11LinkingNode']/*"/>	
    /// <msdn-id>dn280562</msdn-id>	
    /// <unmanaged>ID3D11LinkingNode</unmanaged>	
    /// <unmanaged-short>ID3D11LinkingNode</unmanaged-short>	
    [Guid("D80DD70C-8D2F-4751-94A1-03C79B3556DB")]
    public partial class LinkingNode : SharpDX.ComObject {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.D3DCompiler.LinkingNode"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public LinkingNode(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.D3DCompiler.LinkingNode"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.D3DCompiler.LinkingNode(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.D3DCompiler.LinkingNode(nativePointer);
		}
        
    }
    /// <summary>	
    /// <p>A module interface creates an instance of a module that is used for resource rebinding. </p><p><strong>Note</strong>??This interface is part of the HLSL shader linking technology that you can use on all Direct3D?11 platforms to create precompiled HLSL functions, package them into libraries, and link them into full shaders at run time.	
    /// </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To get a module interface, call <strong><see cref="SharpDX.D3DCompiler.D3D.LoadModule"/></strong>. </p><p><strong>Note</strong>??<strong><see cref="SharpDX.D3DCompiler.Module"/></strong> requires the D3dcompiler_47.dll or a later version of the DLL. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11Module']/*"/>	
    /// <msdn-id>dn280563</msdn-id>	
    /// <unmanaged>ID3D11Module</unmanaged>	
    /// <unmanaged-short>ID3D11Module</unmanaged-short>	
    [Guid("CAC701EE-80FC-4122-8242-10B39C8CEC34")]
    public partial class Module : SharpDX.ComObject {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.D3DCompiler.Module"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public Module(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.D3DCompiler.Module"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.D3DCompiler.Module(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.D3DCompiler.Module(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Initializes an instance of a shader module that is used for resource rebinding.</p>	
        /// </summary>	
        /// <param name="namespaceRef"><dd>  <p>The name of a shader module to initialize. This can be <strong><c>null</c></strong> if you don't want to specify a name for the module.</p> </dd></param>	
        /// <param name="moduleInstanceOut"><dd>  <p>The address of a reference to an <strong><see cref="SharpDX.D3DCompiler.ModuleInstance"/></strong> interface to initialize.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if successful; otherwise, returns one of the Direct3D 11 Return Codes.</p></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11Module::CreateInstance']/*"/>	
        /// <msdn-id>dn280608</msdn-id>	
        /// <unmanaged>HRESULT ID3D11Module::CreateInstance([In, Optional] const char* pNamespace,[Out, Fast] ID3D11ModuleInstance** ppModuleInstance)</unmanaged>	
        /// <unmanaged-short>ID3D11Module::CreateInstance</unmanaged-short>	
        internal void CreateInstance(string namespaceRef, SharpDX.D3DCompiler.ModuleInstance moduleInstanceOut) {
            unsafe {
                IntPtr namespaceRef_ = Utilities.StringToHGlobalAnsi(namespaceRef);
                IntPtr moduleInstanceOut_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, (void*)namespaceRef_, &moduleInstanceOut_,((void**)(*(void**)_nativePointer))[3]);		
                Marshal.FreeHGlobal(namespaceRef_ );
                ((SharpDX.D3DCompiler.ModuleInstance)moduleInstanceOut).NativePointer = moduleInstanceOut_;
                __result__.CheckError();
            }
        }
    }
    /// <summary>	
    /// <p>A module-instance interface is used for resource rebinding. </p><p><strong>Note</strong>??This interface is part of the HLSL shader linking technology that you can use on all Direct3D?11 platforms to create precompiled HLSL functions, package them into libraries, and link them into full shaders at run time.	
    /// </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>To get a module-instance interface, call <strong><see cref="SharpDX.D3DCompiler.Module.CreateInstance"/></strong> or <strong><see cref="SharpDX.D3DCompiler.FunctionLinkingGraph.CreateModuleInstance"/></strong>. </p><p><strong>Note</strong>??<strong><see cref="SharpDX.D3DCompiler.ModuleInstance"/></strong> requires the D3dcompiler_47.dll or a later version of the DLL. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ModuleInstance']/*"/>	
    /// <msdn-id>dn280564</msdn-id>	
    /// <unmanaged>ID3D11ModuleInstance</unmanaged>	
    /// <unmanaged-short>ID3D11ModuleInstance</unmanaged-short>	
    [Guid("469E07F7-045A-48D5-AA12-68A478CDF75D")]
    public partial class ModuleInstance : SharpDX.ComObject {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.D3DCompiler.ModuleInstance"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ModuleInstance(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.D3DCompiler.ModuleInstance"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.D3DCompiler.ModuleInstance(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.D3DCompiler.ModuleInstance(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Rebinds a constant buffer from a source slot to a destination slot.</p>	
        /// </summary>	
        /// <param name="uSrcSlot"><dd>  <p>The source slot number for rebinding.</p> </dd></param>	
        /// <param name="uDstSlot"><dd>  <p>The destination slot number for rebinding.</p> </dd></param>	
        /// <param name="cbDstOffset"><dd>  <p>The offset in bytes of the destination slot for rebinding. The offset must have 16-byte alignment.</p> </dd></param>	
        /// <returns><p>Returns:</p><ul> <li><strong><see cref="SharpDX.Result.Ok"/></strong> for a valid rebinding</li> <li><strong>S_FALSE</strong> for rebinding a nonexistent slot; that is, for which the shader reflection doesn?t have any data</li> <li><strong>E_FAIL</strong> for an invalid rebinding, for example, the rebinding is out-of-bounds</li> <li>Possibly one of the other Direct3D 11 Return Codes </li> </ul></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ModuleInstance::BindConstantBuffer']/*"/>	
        /// <msdn-id>dn280565</msdn-id>	
        /// <unmanaged>HRESULT ID3D11ModuleInstance::BindConstantBuffer([In] unsigned int uSrcSlot,[In] unsigned int uDstSlot,[In] unsigned int cbDstOffset)</unmanaged>	
        /// <unmanaged-short>ID3D11ModuleInstance::BindConstantBuffer</unmanaged-short>	
        public SharpDX.Result BindConstantBuffer(int uSrcSlot, int uDstSlot, int cbDstOffset) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, uSrcSlot, uDstSlot, cbDstOffset,((void**)(*(void**)_nativePointer))[3]);		
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Rebinds a constant buffer by name to a destination slot.</p>	
        /// </summary>	
        /// <param name="nameRef"><dd>  <p>The name of the constant buffer for rebinding.</p> </dd></param>	
        /// <param name="uDstSlot"><dd>  <p>The destination slot number for rebinding.</p> </dd></param>	
        /// <param name="cbDstOffset"><dd>  <p>The offset in bytes of the destination slot for rebinding. The offset must have 16-byte alignment.</p> </dd></param>	
        /// <returns><p>Returns:</p><ul> <li><strong><see cref="SharpDX.Result.Ok"/></strong> for a valid rebinding</li> <li><strong>S_FALSE</strong> for rebinding a nonexistent slot; that is, for which the shader reflection doesn?t have any data</li> <li><strong>E_FAIL</strong> for an invalid rebinding, for example, the rebinding is out-of-bounds</li> <li>Possibly one of the other Direct3D 11 Return Codes </li> </ul></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ModuleInstance::BindConstantBufferByName']/*"/>	
        /// <msdn-id>dn280566</msdn-id>	
        /// <unmanaged>HRESULT ID3D11ModuleInstance::BindConstantBufferByName([In] const char* pName,[In] unsigned int uDstSlot,[In] unsigned int cbDstOffset)</unmanaged>	
        /// <unmanaged-short>ID3D11ModuleInstance::BindConstantBufferByName</unmanaged-short>	
        public SharpDX.Result BindConstantBufferByName(string nameRef, int uDstSlot, int cbDstOffset) {
            unsafe {
                IntPtr nameRef_ = Utilities.StringToHGlobalAnsi(nameRef);
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, (void*)nameRef_, uDstSlot, cbDstOffset,((void**)(*(void**)_nativePointer))[4]);		
                Marshal.FreeHGlobal(nameRef_ );
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Rebinds a texture or buffer from source slot to destination slot.</p>	
        /// </summary>	
        /// <param name="uSrcSlot"><dd>  <p>The first source slot number for rebinding.</p> </dd></param>	
        /// <param name="uDstSlot"><dd>  <p>The first destination slot number for rebinding.</p> </dd></param>	
        /// <param name="uCount"><dd>  <p>The number of slots for rebinding. </p> </dd></param>	
        /// <returns><p>Returns:</p><ul> <li><strong><see cref="SharpDX.Result.Ok"/></strong> for a valid rebinding</li> <li><strong>S_FALSE</strong> for rebinding a nonexistent slot; that is, for which the shader reflection doesn?t have any data</li> <li><strong>E_FAIL</strong> for an invalid rebinding, for example, the rebinding is out-of-bounds</li> <li>Possibly one of the other Direct3D 11 Return Codes </li> </ul></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ModuleInstance::BindResource']/*"/>	
        /// <msdn-id>dn280567</msdn-id>	
        /// <unmanaged>HRESULT ID3D11ModuleInstance::BindResource([In] unsigned int uSrcSlot,[In] unsigned int uDstSlot,[In] unsigned int uCount)</unmanaged>	
        /// <unmanaged-short>ID3D11ModuleInstance::BindResource</unmanaged-short>	
        public SharpDX.Result BindResource(int uSrcSlot, int uDstSlot, int uCount) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, uSrcSlot, uDstSlot, uCount,((void**)(*(void**)_nativePointer))[5]);		
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Rebinds a texture or buffer by name to destination slots.</p>	
        /// </summary>	
        /// <param name="nameRef"><dd>  <p>The name of the texture or buffer for rebinding.</p> </dd></param>	
        /// <param name="uDstSlot"><dd>  <p>The first destination slot number for rebinding.</p> </dd></param>	
        /// <param name="uCount"><dd>  <p>The number of slots for rebinding. </p> </dd></param>	
        /// <returns><p>Returns:</p><ul> <li><strong><see cref="SharpDX.Result.Ok"/></strong> for a valid rebinding</li> <li><strong>S_FALSE</strong> for rebinding a nonexistent slot; that is, for which the shader reflection doesn?t have any data</li> <li><strong>E_FAIL</strong> for an invalid rebinding, for example, the rebinding is out-of-bounds</li> <li>Possibly one of the other Direct3D 11 Return Codes </li> </ul></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ModuleInstance::BindResourceByName']/*"/>	
        /// <msdn-id>dn280570</msdn-id>	
        /// <unmanaged>HRESULT ID3D11ModuleInstance::BindResourceByName([In] const char* pName,[In] unsigned int uDstSlot,[In] unsigned int uCount)</unmanaged>	
        /// <unmanaged-short>ID3D11ModuleInstance::BindResourceByName</unmanaged-short>	
        public SharpDX.Result BindResourceByName(string nameRef, int uDstSlot, int uCount) {
            unsafe {
                IntPtr nameRef_ = Utilities.StringToHGlobalAnsi(nameRef);
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, (void*)nameRef_, uDstSlot, uCount,((void**)(*(void**)_nativePointer))[6]);		
                Marshal.FreeHGlobal(nameRef_ );
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Rebinds a sampler from source slot to destination slot.</p>	
        /// </summary>	
        /// <param name="uSrcSlot"><dd>  <p>The first source slot number for rebinding.</p> </dd></param>	
        /// <param name="uDstSlot"><dd>  <p>The first destination slot number for rebinding.</p> </dd></param>	
        /// <param name="uCount"><dd>  <p>The number of slots for rebinding. </p> </dd></param>	
        /// <returns><p>Returns:</p><ul> <li><strong><see cref="SharpDX.Result.Ok"/></strong> for a valid rebinding</li> <li><strong>S_FALSE</strong> for rebinding a nonexistent slot; that is, for which the shader reflection doesn?t have any data</li> <li><strong>E_FAIL</strong> for an invalid rebinding, for example, the rebinding is out-of-bounds</li> <li>Possibly one of the other Direct3D 11 Return Codes </li> </ul></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ModuleInstance::BindSampler']/*"/>	
        /// <msdn-id>dn280571</msdn-id>	
        /// <unmanaged>HRESULT ID3D11ModuleInstance::BindSampler([In] unsigned int uSrcSlot,[In] unsigned int uDstSlot,[In] unsigned int uCount)</unmanaged>	
        /// <unmanaged-short>ID3D11ModuleInstance::BindSampler</unmanaged-short>	
        public SharpDX.Result BindSampler(int uSrcSlot, int uDstSlot, int uCount) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, uSrcSlot, uDstSlot, uCount,((void**)(*(void**)_nativePointer))[7]);		
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Rebinds a sampler by name to destination slots.</p>	
        /// </summary>	
        /// <param name="nameRef"><dd>  <p>The name of the sampler for rebinding.</p> </dd></param>	
        /// <param name="uDstSlot"><dd>  <p>The first destination slot number for rebinding.</p> </dd></param>	
        /// <param name="uCount"><dd>  <p>The number of slots for rebinding. </p> </dd></param>	
        /// <returns><p>Returns:</p><ul> <li><strong><see cref="SharpDX.Result.Ok"/></strong> for a valid rebinding</li> <li><strong>S_FALSE</strong> for rebinding a nonexistent slot; that is, for which the shader reflection doesn?t have any data</li> <li><strong>E_FAIL</strong> for an invalid rebinding, for example, the rebinding is out-of-bounds</li> <li>Possibly one of the other Direct3D 11 Return Codes </li> </ul></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ModuleInstance::BindSamplerByName']/*"/>	
        /// <msdn-id>dn280605</msdn-id>	
        /// <unmanaged>HRESULT ID3D11ModuleInstance::BindSamplerByName([In] const char* pName,[In] unsigned int uDstSlot,[In] unsigned int uCount)</unmanaged>	
        /// <unmanaged-short>ID3D11ModuleInstance::BindSamplerByName</unmanaged-short>	
        public SharpDX.Result BindSamplerByName(string nameRef, int uDstSlot, int uCount) {
            unsafe {
                IntPtr nameRef_ = Utilities.StringToHGlobalAnsi(nameRef);
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, (void*)nameRef_, uDstSlot, uCount,((void**)(*(void**)_nativePointer))[8]);		
                Marshal.FreeHGlobal(nameRef_ );
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Rebinds an unordered access view (UAV) from source slot to destination slot.</p>	
        /// </summary>	
        /// <param name="uSrcSlot"><dd>  <p>The first source slot number for rebinding.</p> </dd></param>	
        /// <param name="uDstSlot"><dd>  <p>The first destination slot number for rebinding.</p> </dd></param>	
        /// <param name="uCount"><dd>  <p>The number of slots for rebinding. </p> </dd></param>	
        /// <returns><p>Returns:</p><ul> <li><strong><see cref="SharpDX.Result.Ok"/></strong> for a valid rebinding</li> <li><strong>S_FALSE</strong> for rebinding a nonexistent slot; that is, for which the shader reflection doesn?t have any data</li> <li><strong>E_FAIL</strong> for an invalid rebinding, for example, the rebinding is out-of-bounds</li> <li>Possibly one of the other Direct3D 11 Return Codes </li> </ul></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ModuleInstance::BindUnorderedAccessView']/*"/>	
        /// <msdn-id>dn280606</msdn-id>	
        /// <unmanaged>HRESULT ID3D11ModuleInstance::BindUnorderedAccessView([In] unsigned int uSrcSlot,[In] unsigned int uDstSlot,[In] unsigned int uCount)</unmanaged>	
        /// <unmanaged-short>ID3D11ModuleInstance::BindUnorderedAccessView</unmanaged-short>	
        public SharpDX.Result BindUnorderedAccessView(int uSrcSlot, int uDstSlot, int uCount) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, uSrcSlot, uDstSlot, uCount,((void**)(*(void**)_nativePointer))[9]);		
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Rebinds an unordered access view (UAV) by name to destination slots.</p>	
        /// </summary>	
        /// <param name="nameRef"><dd>  <p>The name of the UAV for rebinding.</p> </dd></param>	
        /// <param name="uDstSlot"><dd>  <p>The first destination slot number for rebinding.</p> </dd></param>	
        /// <param name="uCount"><dd>  <p>The number of slots for rebinding. </p> </dd></param>	
        /// <returns><p>Returns:</p><ul> <li><strong><see cref="SharpDX.Result.Ok"/></strong> for a valid rebinding</li> <li><strong>S_FALSE</strong> for rebinding a nonexistent slot; that is, for which the shader reflection doesn?t have any data</li> <li><strong>E_FAIL</strong> for an invalid rebinding, for example, the rebinding is out-of-bounds</li> <li>Possibly one of the other Direct3D 11 Return Codes </li> </ul></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ModuleInstance::BindUnorderedAccessViewByName']/*"/>	
        /// <msdn-id>dn280607</msdn-id>	
        /// <unmanaged>HRESULT ID3D11ModuleInstance::BindUnorderedAccessViewByName([In] const char* pName,[In] unsigned int uDstSlot,[In] unsigned int uCount)</unmanaged>	
        /// <unmanaged-short>ID3D11ModuleInstance::BindUnorderedAccessViewByName</unmanaged-short>	
        public SharpDX.Result BindUnorderedAccessViewByName(string nameRef, int uDstSlot, int uCount) {
            unsafe {
                IntPtr nameRef_ = Utilities.StringToHGlobalAnsi(nameRef);
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, (void*)nameRef_, uDstSlot, uCount,((void**)(*(void**)_nativePointer))[10]);		
                Marshal.FreeHGlobal(nameRef_ );
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Rebinds a resource as an unordered access view (UAV) from source slot to destination slot.</p>	
        /// </summary>	
        /// <param name="uSrcSrvSlot"><dd>  <p>The first source slot number for rebinding.</p> </dd></param>	
        /// <param name="uDstUavSlot"><dd>  <p>The first destination slot number for rebinding.</p> </dd></param>	
        /// <param name="uCount"><dd>  <p>The number of slots for rebinding. </p> </dd></param>	
        /// <returns><p>Returns:</p><ul> <li><strong><see cref="SharpDX.Result.Ok"/></strong> for a valid rebinding</li> <li><strong>S_FALSE</strong> for rebinding a nonexistent slot; that is, for which the shader reflection doesn?t have any data</li> <li><strong>E_FAIL</strong> for an invalid rebinding, for example, the rebinding is out-of-bounds</li> <li>Possibly one of the other Direct3D 11 Return Codes </li> </ul></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ModuleInstance::BindResourceAsUnorderedAccessView']/*"/>	
        /// <msdn-id>dn280568</msdn-id>	
        /// <unmanaged>HRESULT ID3D11ModuleInstance::BindResourceAsUnorderedAccessView([In] unsigned int uSrcSrvSlot,[In] unsigned int uDstUavSlot,[In] unsigned int uCount)</unmanaged>	
        /// <unmanaged-short>ID3D11ModuleInstance::BindResourceAsUnorderedAccessView</unmanaged-short>	
        public SharpDX.Result BindResourceAsUnorderedAccessView(int uSrcSrvSlot, int uDstUavSlot, int uCount) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, uSrcSrvSlot, uDstUavSlot, uCount,((void**)(*(void**)_nativePointer))[11]);		
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Rebinds a resource by name as an unordered access view (UAV) to destination slots.</p>	
        /// </summary>	
        /// <param name="srvNameRef"><dd>  <p>The name of the resource for rebinding.</p> </dd></param>	
        /// <param name="uDstUavSlot"><dd>  <p>The first destination slot number for rebinding.</p> </dd></param>	
        /// <param name="uCount"><dd>  <p>The number of slots for rebinding. </p> </dd></param>	
        /// <returns><p>Returns:</p><ul> <li><strong><see cref="SharpDX.Result.Ok"/></strong> for a valid rebinding</li> <li><strong>S_FALSE</strong> for rebinding a nonexistent slot; that is, for which the shader reflection doesn?t have any data</li> <li><strong>E_FAIL</strong> for an invalid rebinding, for example, the rebinding is out-of-bounds</li> <li>Possibly one of the other Direct3D 11 Return Codes </li> </ul></returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ModuleInstance::BindResourceAsUnorderedAccessViewByName']/*"/>	
        /// <msdn-id>dn280569</msdn-id>	
        /// <unmanaged>HRESULT ID3D11ModuleInstance::BindResourceAsUnorderedAccessViewByName([In] const char* pSrvName,[In] unsigned int uDstUavSlot,[In] unsigned int uCount)</unmanaged>	
        /// <unmanaged-short>ID3D11ModuleInstance::BindResourceAsUnorderedAccessViewByName</unmanaged-short>	
        public SharpDX.Result BindResourceAsUnorderedAccessViewByName(string srvNameRef, int uDstUavSlot, int uCount) {
            unsafe {
                IntPtr srvNameRef_ = Utilities.StringToHGlobalAnsi(srvNameRef);
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, (void*)srvNameRef_, uDstUavSlot, uCount,((void**)(*(void**)_nativePointer))[12]);		
                Marshal.FreeHGlobal(srvNameRef_ );
                return __result__;
            }
        }
    }
    /// <summary>	
    /// <p>A shader-reflection interface accesses shader information.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>An <strong><see cref="SharpDX.D3DCompiler.ShaderReflection"/></strong> interface can be retrieved for a shader by using  <strong><see cref="SharpDX.D3DCompiler.D3D.Reflect"/></strong>.  The following code illustrates retrieving a <strong><see cref="SharpDX.D3DCompiler.ShaderReflection"/></strong> from a shader.</p><pre> pd3dDevice-&gt;CreatePixelShader( pPixelShaderBuffer-&gt;GetBufferPointer(), pPixelShaderBuffer-&gt;GetBufferSize(), g_pPSClassLinkage, &amp;g_pPixelShader ); <see cref="SharpDX.D3DCompiler.ShaderReflection"/>* pReflector = <c>null</c>; 	
    /// <see cref="SharpDX.D3DCompiler.D3D.Reflect"/>( pPixelShaderBuffer-&gt;GetBufferPointer(), pPixelShaderBuffer-&gt;GetBufferSize(),  IID_ID3D11ShaderReflection, (void**) &amp;pReflector); </pre>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflection']/*"/>	
    /// <msdn-id>ff476590</msdn-id>	
    /// <unmanaged>ID3D11ShaderReflection</unmanaged>	
    /// <unmanaged-short>ID3D11ShaderReflection</unmanaged-short>	
    [Guid("8d536ca1-0cca-4956-a837-786963755584")]
    public partial class ShaderReflection : SharpDX.ComObject {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.D3DCompiler.ShaderReflection"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ShaderReflection(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.D3DCompiler.ShaderReflection"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.D3DCompiler.ShaderReflection(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.D3DCompiler.ShaderReflection(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Get a shader description.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflection::GetDesc']/*"/>	
        /// <msdn-id>ff476615</msdn-id>	
        /// <unmanaged>GetDesc</unmanaged>	
        /// <unmanaged-short>GetDesc</unmanaged-short>	
        /// <unmanaged>HRESULT ID3D11ShaderReflection::GetDesc([Out] D3D11_SHADER_DESC* pDesc)</unmanaged>
        public SharpDX.D3DCompiler.ShaderDescription Description {
                get { SharpDX.D3DCompiler.ShaderDescription __output__; GetDescription(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// <p>Gets the number of Mov instructions.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflection::GetMovInstructionCount']/*"/>	
        /// <msdn-id>ff476620</msdn-id>	
        /// <unmanaged>GetMovInstructionCount</unmanaged>	
        /// <unmanaged-short>GetMovInstructionCount</unmanaged-short>	
        /// <unmanaged>unsigned int ID3D11ShaderReflection::GetMovInstructionCount()</unmanaged>
        public int MoveInstructionCount {
                get { return GetMoveInstructionCount(); }
        }
        
        /// <summary>	
        /// <p>Gets the number of Movc instructions.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflection::GetMovcInstructionCount']/*"/>	
        /// <msdn-id>ff476619</msdn-id>	
        /// <unmanaged>GetMovcInstructionCount</unmanaged>	
        /// <unmanaged-short>GetMovcInstructionCount</unmanaged-short>	
        /// <unmanaged>unsigned int ID3D11ShaderReflection::GetMovcInstructionCount()</unmanaged>
        public int ConditionalMoveInstructionCount {
                get { return GetConditionalMoveInstructionCount(); }
        }
        
        /// <summary>	
        /// <p>Gets the number of conversion instructions.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflection::GetConversionInstructionCount']/*"/>	
        /// <msdn-id>ff476614</msdn-id>	
        /// <unmanaged>GetConversionInstructionCount</unmanaged>	
        /// <unmanaged-short>GetConversionInstructionCount</unmanaged-short>	
        /// <unmanaged>unsigned int ID3D11ShaderReflection::GetConversionInstructionCount()</unmanaged>
        public int ConversionInstructionCount {
                get { return GetConversionInstructionCount(); }
        }
        
        /// <summary>	
        /// <p>Gets the number of bitwise instructions.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflection::GetBitwiseInstructionCount']/*"/>	
        /// <msdn-id>ff476611</msdn-id>	
        /// <unmanaged>GetBitwiseInstructionCount</unmanaged>	
        /// <unmanaged-short>GetBitwiseInstructionCount</unmanaged-short>	
        /// <unmanaged>unsigned int ID3D11ShaderReflection::GetBitwiseInstructionCount()</unmanaged>
        public int BitwiseInstructionCount {
                get { return GetBitwiseInstructionCount(); }
        }
        
        /// <summary>	
        /// <p>Gets the geometry-shader input-primitive description.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflection::GetGSInputPrimitive']/*"/>	
        /// <msdn-id>ff476616</msdn-id>	
        /// <unmanaged>GetGSInputPrimitive</unmanaged>	
        /// <unmanaged-short>GetGSInputPrimitive</unmanaged-short>	
        /// <unmanaged>D3D_PRIMITIVE ID3D11ShaderReflection::GetGSInputPrimitive()</unmanaged>
        public SharpDX.D3DCompiler.InputPrimitive GeometryShaderSInputPrimitive {
                get { return GetGeometryShaderSInputPrimitive(); }
        }
        
        /// <summary>	
        /// <p>Indicates whether a shader is a sample frequency shader.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflection::IsSampleFrequencyShader']/*"/>	
        /// <msdn-id>ff476627</msdn-id>	
        /// <unmanaged>IsSampleFrequencyShader</unmanaged>	
        /// <unmanaged-short>IsSampleFrequencyShader</unmanaged-short>	
        /// <unmanaged>BOOL ID3D11ShaderReflection::IsSampleFrequencyShader()</unmanaged>
        public SharpDX.Mathematics.Interop.RawBool IsSampleFrequencyShader {
                get { return IsSampleFrequencyShader_(); }
        }
        
        /// <summary>	
        /// <p>Gets the number of interface slots in a shader.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflection::GetNumInterfaceSlots']/*"/>	
        /// <msdn-id>ff476621</msdn-id>	
        /// <unmanaged>GetNumInterfaceSlots</unmanaged>	
        /// <unmanaged-short>GetNumInterfaceSlots</unmanaged-short>	
        /// <unmanaged>unsigned int ID3D11ShaderReflection::GetNumInterfaceSlots()</unmanaged>
        public int InterfaceSlotCount {
                get { return GetInterfaceSlotCount(); }
        }
        
        /// <summary>	
        /// <p>Gets the minimum feature level.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflection::GetMinFeatureLevel']/*"/>	
        /// <msdn-id>ff476618</msdn-id>	
        /// <unmanaged>GetMinFeatureLevel</unmanaged>	
        /// <unmanaged-short>GetMinFeatureLevel</unmanaged-short>	
        /// <unmanaged>HRESULT ID3D11ShaderReflection::GetMinFeatureLevel([Out] D3D_FEATURE_LEVEL* pLevel)</unmanaged>
        public SharpDX.Direct3D.FeatureLevel MinFeatureLevel {
                get { SharpDX.Direct3D.FeatureLevel __output__; GetMinFeatureLevel(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// <p>Gets a group of flags that indicates the requirements of a shader.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>Here is how the D3D11Shader.h header defines the shader requirements flags:</p><pre> #define <see cref="SharpDX.D3DCompiler.ShaderRequiresFlags.ShaderRequiresDoubles"/>                         0x00000001	
        /// #define <see cref="SharpDX.D3DCompiler.ShaderRequiresFlags.ShaderRequiresEarlyDepthStencil"/>             0x00000002	
        /// #define <see cref="SharpDX.D3DCompiler.ShaderRequiresFlags.ShaderRequiresUnorderedAccessViewsAtEveryStage"/>             0x00000004	
        /// #define <see cref="SharpDX.D3DCompiler.ShaderRequiresFlags.ShaderRequires64UnorderedAccessViews"/>                         0x00000008	
        /// #define <see cref="SharpDX.D3DCompiler.ShaderRequiresFlags.ShaderRequiresMinimumPrecision"/>               0x00000010	
        /// #define <see cref="SharpDX.D3DCompiler.ShaderRequiresFlags.ShaderRequires111DoubleExtensionS"/>          0x00000020	
        /// #define <see cref="SharpDX.D3DCompiler.ShaderRequiresFlags.ShaderRequires111ShaderExtensionS"/>          0x00000040	
        /// #define <see cref="SharpDX.D3DCompiler.ShaderRequiresFlags.ShaderRequiresLevel9ComparisonFiltering"/>    0x00000080	
        /// </pre>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflection::GetRequiresFlags']/*"/>	
        /// <msdn-id>jj542458</msdn-id>	
        /// <unmanaged>GetRequiresFlags</unmanaged>	
        /// <unmanaged-short>GetRequiresFlags</unmanaged-short>	
        /// <unmanaged>unsigned longlong ID3D11ShaderReflection::GetRequiresFlags()</unmanaged>
        public SharpDX.D3DCompiler.ShaderRequiresFlags RequiresFlags {
                get { return GetRequiresFlags(); }
        }
        
        /// <summary>	
        /// <p>Get a shader description.</p>	
        /// </summary>	
        /// <param name="descRef"><dd>  <p>A reference to a shader description. See <strong><see cref="SharpDX.D3DCompiler.ShaderDescription"/></strong>.</p> </dd></param>	
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflection::GetDesc']/*"/>	
        /// <msdn-id>ff476615</msdn-id>	
        /// <unmanaged>HRESULT ID3D11ShaderReflection::GetDesc([Out] D3D11_SHADER_DESC* pDesc)</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflection::GetDesc</unmanaged-short>	
        internal void GetDescription(out SharpDX.D3DCompiler.ShaderDescription descRef) {
            unsafe {
                var descRef_ = new SharpDX.D3DCompiler.ShaderDescription.__Native();
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, &descRef_,((void**)(*(void**)_nativePointer))[3]);		
                descRef = new SharpDX.D3DCompiler.ShaderDescription();
                descRef.__MarshalFrom(ref descRef_);
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Get a constant buffer by index.</p>	
        /// </summary>	
        /// <param name="index"><dd>  <p>Zero-based index.</p> </dd></param>	
        /// <returns><p>A reference to a constant buffer (see <strong><see cref="SharpDX.D3DCompiler.ConstantBuffer"/> Interface</strong>).</p></returns>	
        /// <remarks>	
        /// <p>A constant buffer supplies either scalar constants or texture constants to a shader. A shader can use one or more constant buffers. For best performance, separate constants into buffers based on the frequency they are updated.</p><p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflection::GetConstantBufferByIndex']/*"/>	
        /// <msdn-id>ff476612</msdn-id>	
        /// <unmanaged>ID3D11ShaderReflectionConstantBuffer* ID3D11ShaderReflection::GetConstantBufferByIndex([In] unsigned int Index)</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflection::GetConstantBufferByIndex</unmanaged-short>	
        public SharpDX.D3DCompiler.ConstantBuffer GetConstantBuffer(int index) {
            unsafe {
                SharpDX.D3DCompiler.ConstantBuffer __result__;
                __result__= 
				new SharpDX.D3DCompiler.ConstantBuffer((IntPtr)SharpDX.D3DCompiler.LocalInterop.CalliSystemIntPtr(_nativePointer, index,((void**)(*(void**)_nativePointer))[4]));		
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Get a constant buffer by name.</p>	
        /// </summary>	
        /// <param name="name"><dd>  <p>The constant-buffer name.</p> </dd></param>	
        /// <returns><p>A reference to a constant buffer (see <strong><see cref="SharpDX.D3DCompiler.ConstantBuffer"/> Interface</strong>).</p></returns>	
        /// <remarks>	
        /// <p>A constant buffer supplies either scalar constants or texture constants to a shader. A shader can use one or more constant buffers. For best performance, separate constants into buffers based on the frequency they are updated.</p><p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflection::GetConstantBufferByName']/*"/>	
        /// <msdn-id>ff476613</msdn-id>	
        /// <unmanaged>ID3D11ShaderReflectionConstantBuffer* ID3D11ShaderReflection::GetConstantBufferByName([In] const char* Name)</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflection::GetConstantBufferByName</unmanaged-short>	
        public SharpDX.D3DCompiler.ConstantBuffer GetConstantBuffer(string name) {
            unsafe {
                IntPtr name_ = Utilities.StringToHGlobalAnsi(name);
                SharpDX.D3DCompiler.ConstantBuffer __result__;
                __result__= 
				new SharpDX.D3DCompiler.ConstantBuffer((IntPtr)SharpDX.D3DCompiler.LocalInterop.CalliSystemIntPtr(_nativePointer, (void*)name_,((void**)(*(void**)_nativePointer))[5]));		
                Marshal.FreeHGlobal(name_ );
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Get a description of how a resource is bound to a shader.</p>	
        /// </summary>	
        /// <param name="resourceIndex"><dd>  <p>A zero-based resource index.</p> </dd></param>	
        /// <returns><dd>  <p>A reference to an input-binding description. See <strong><see cref="SharpDX.D3DCompiler.InputBindingDescription"/></strong>.</p> </dd></returns>	
        /// <remarks>	
        /// <p>A shader consists of executable code (the compiled HLSL functions) and a set of resources that supply the shader with input data. <strong>GetResourceBindingDesc</strong> gets information about how one resource in the set is bound as an input to the shader. The  <em>ResourceIndex</em> parameter specifies the index for the resource.</p><p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflection::GetResourceBindingDesc']/*"/>	
        /// <msdn-id>ff476624</msdn-id>	
        /// <unmanaged>HRESULT ID3D11ShaderReflection::GetResourceBindingDesc([In] unsigned int ResourceIndex,[Out] D3D11_SHADER_INPUT_BIND_DESC* pDesc)</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflection::GetResourceBindingDesc</unmanaged-short>	
        public SharpDX.D3DCompiler.InputBindingDescription GetResourceBindingDescription(int resourceIndex) {
            unsafe {
                SharpDX.D3DCompiler.InputBindingDescription descRef;
                var descRef_ = new SharpDX.D3DCompiler.InputBindingDescription.__Native();
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, resourceIndex, &descRef_,((void**)(*(void**)_nativePointer))[6]);		
                descRef = new SharpDX.D3DCompiler.InputBindingDescription();
                descRef.__MarshalFrom(ref descRef_);
                __result__.CheckError();
                return descRef;
            }
        }
        
        /// <summary>	
        /// <p>Get an input-parameter description for a shader.</p>	
        /// </summary>	
        /// <param name="parameterIndex"><dd>  <p>A zero-based parameter index.</p> </dd></param>	
        /// <returns><dd>  <p>A reference to a shader-input-signature description. See <strong><see cref="SharpDX.D3DCompiler.ShaderParameterDescription"/></strong>.</p> </dd></returns>	
        /// <remarks>	
        /// <p>An input-parameter description is also called a shader signature. The shader signature contains information about the input parameters such as the order or parameters, their data type, and a parameter semantic.</p><p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflection::GetInputParameterDesc']/*"/>	
        /// <msdn-id>ff476617</msdn-id>	
        /// <unmanaged>HRESULT ID3D11ShaderReflection::GetInputParameterDesc([In] unsigned int ParameterIndex,[Out] D3D11_SIGNATURE_PARAMETER_DESC* pDesc)</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflection::GetInputParameterDesc</unmanaged-short>	
        public SharpDX.D3DCompiler.ShaderParameterDescription GetInputParameterDescription(int parameterIndex) {
            unsafe {
                SharpDX.D3DCompiler.ShaderParameterDescription descRef;
                var descRef_ = new SharpDX.D3DCompiler.ShaderParameterDescription.__Native();
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, parameterIndex, &descRef_,((void**)(*(void**)_nativePointer))[7]);		
                descRef = new SharpDX.D3DCompiler.ShaderParameterDescription();
                descRef.__MarshalFrom(ref descRef_);
                __result__.CheckError();
                return descRef;
            }
        }
        
        /// <summary>	
        /// <p>Get an output-parameter description for a shader.</p>	
        /// </summary>	
        /// <param name="parameterIndex"><dd>  <p>A zero-based parameter index.</p> </dd></param>	
        /// <returns><dd>  <p>A reference to a shader-output-parameter description. See <strong><see cref="SharpDX.D3DCompiler.ShaderParameterDescription"/></strong>.</p> </dd></returns>	
        /// <remarks>	
        /// <p>An output-parameter description is also called a shader signature. The shader signature contains information about the output parameters such as the order or parameters, their data type, and a parameter semantic.</p><p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflection::GetOutputParameterDesc']/*"/>	
        /// <msdn-id>ff476622</msdn-id>	
        /// <unmanaged>HRESULT ID3D11ShaderReflection::GetOutputParameterDesc([In] unsigned int ParameterIndex,[Out] D3D11_SIGNATURE_PARAMETER_DESC* pDesc)</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflection::GetOutputParameterDesc</unmanaged-short>	
        public SharpDX.D3DCompiler.ShaderParameterDescription GetOutputParameterDescription(int parameterIndex) {
            unsafe {
                SharpDX.D3DCompiler.ShaderParameterDescription descRef;
                var descRef_ = new SharpDX.D3DCompiler.ShaderParameterDescription.__Native();
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, parameterIndex, &descRef_,((void**)(*(void**)_nativePointer))[8]);		
                descRef = new SharpDX.D3DCompiler.ShaderParameterDescription();
                descRef.__MarshalFrom(ref descRef_);
                __result__.CheckError();
                return descRef;
            }
        }
        
        /// <summary>	
        /// <p>Get a patch-constant parameter description for a shader.</p>	
        /// </summary>	
        /// <param name="parameterIndex"><dd>  <p>A zero-based parameter index.</p> </dd></param>	
        /// <returns><dd>  <p>A reference to a shader-input-signature description. See <strong><see cref="SharpDX.D3DCompiler.ShaderParameterDescription"/></strong>.</p> </dd></returns>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflection::GetPatchConstantParameterDesc']/*"/>	
        /// <msdn-id>ff476623</msdn-id>	
        /// <unmanaged>HRESULT ID3D11ShaderReflection::GetPatchConstantParameterDesc([In] unsigned int ParameterIndex,[Out] D3D11_SIGNATURE_PARAMETER_DESC* pDesc)</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflection::GetPatchConstantParameterDesc</unmanaged-short>	
        public SharpDX.D3DCompiler.ShaderParameterDescription GetPatchConstantParameterDescription(int parameterIndex) {
            unsafe {
                SharpDX.D3DCompiler.ShaderParameterDescription descRef;
                var descRef_ = new SharpDX.D3DCompiler.ShaderParameterDescription.__Native();
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, parameterIndex, &descRef_,((void**)(*(void**)_nativePointer))[9]);		
                descRef = new SharpDX.D3DCompiler.ShaderParameterDescription();
                descRef.__MarshalFrom(ref descRef_);
                __result__.CheckError();
                return descRef;
            }
        }
        
        /// <summary>	
        /// <p>Gets a variable by name.</p>	
        /// </summary>	
        /// <param name="name"><dd>  <p>A reference to a string containing the variable name.</p> </dd></param>	
        /// <returns><p>Returns a <strong><see cref="SharpDX.D3DCompiler.ShaderReflectionVariable"/> Interface</strong> interface.</p></returns>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflection::GetVariableByName']/*"/>	
        /// <msdn-id>ff476626</msdn-id>	
        /// <unmanaged>ID3D11ShaderReflectionVariable* ID3D11ShaderReflection::GetVariableByName([In] const char* Name)</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflection::GetVariableByName</unmanaged-short>	
        public SharpDX.D3DCompiler.ShaderReflectionVariable GetVariable(string name) {
            unsafe {
                IntPtr name_ = Utilities.StringToHGlobalAnsi(name);
                SharpDX.D3DCompiler.ShaderReflectionVariable __result__;
                __result__= 
				new SharpDX.D3DCompiler.ShaderReflectionVariable((IntPtr)SharpDX.D3DCompiler.LocalInterop.CalliSystemIntPtr(_nativePointer, (void*)name_,((void**)(*(void**)_nativePointer))[10]));		
                Marshal.FreeHGlobal(name_ );
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Get a description of how a resource is bound to a shader. </p>	
        /// </summary>	
        /// <param name="name"><dd>  <p>The constant-buffer name of the resource.</p> </dd></param>	
        /// <returns><dd>  <p>A reference to an input-binding description. See <strong><see cref="SharpDX.D3DCompiler.InputBindingDescription"/></strong>.</p> </dd></returns>	
        /// <remarks>	
        /// <p>A shader consists of executable code (the compiled HLSL functions) and a set of resources that supply the shader with input data. <strong>GetResourceBindingDescByName</strong> gets information about how one resource in the set is bound as an input to the shader. The  <em>Name</em> parameter specifies the name of the resource.</p><p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflection::GetResourceBindingDescByName']/*"/>	
        /// <msdn-id>ff476625</msdn-id>	
        /// <unmanaged>HRESULT ID3D11ShaderReflection::GetResourceBindingDescByName([In] const char* Name,[Out] D3D11_SHADER_INPUT_BIND_DESC* pDesc)</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflection::GetResourceBindingDescByName</unmanaged-short>	
        public SharpDX.D3DCompiler.InputBindingDescription GetResourceBindingDescription(string name) {
            unsafe {
                IntPtr name_ = Utilities.StringToHGlobalAnsi(name);
                SharpDX.D3DCompiler.InputBindingDescription descRef;
                var descRef_ = new SharpDX.D3DCompiler.InputBindingDescription.__Native();
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, (void*)name_, &descRef_,((void**)(*(void**)_nativePointer))[11]);		
                Marshal.FreeHGlobal(name_ );
                descRef = new SharpDX.D3DCompiler.InputBindingDescription();
                descRef.__MarshalFrom(ref descRef_);
                __result__.CheckError();
                return descRef;
            }
        }
        
        /// <summary>	
        /// <p>Gets the number of Mov instructions.</p>	
        /// </summary>	
        /// <returns><p>Returns the number of Mov instructions.</p></returns>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflection::GetMovInstructionCount']/*"/>	
        /// <msdn-id>ff476620</msdn-id>	
        /// <unmanaged>unsigned int ID3D11ShaderReflection::GetMovInstructionCount()</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflection::GetMovInstructionCount</unmanaged-short>	
        internal int GetMoveInstructionCount() {
            unsafe {
                int __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer,((void**)(*(void**)_nativePointer))[12]);		
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Gets the number of Movc instructions.</p>	
        /// </summary>	
        /// <returns><p>Returns the number of Movc instructions.</p></returns>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflection::GetMovcInstructionCount']/*"/>	
        /// <msdn-id>ff476619</msdn-id>	
        /// <unmanaged>unsigned int ID3D11ShaderReflection::GetMovcInstructionCount()</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflection::GetMovcInstructionCount</unmanaged-short>	
        internal int GetConditionalMoveInstructionCount() {
            unsafe {
                int __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer,((void**)(*(void**)_nativePointer))[13]);		
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Gets the number of conversion instructions.</p>	
        /// </summary>	
        /// <returns><p>Returns the number of conversion instructions.</p></returns>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflection::GetConversionInstructionCount']/*"/>	
        /// <msdn-id>ff476614</msdn-id>	
        /// <unmanaged>unsigned int ID3D11ShaderReflection::GetConversionInstructionCount()</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflection::GetConversionInstructionCount</unmanaged-short>	
        internal int GetConversionInstructionCount() {
            unsafe {
                int __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer,((void**)(*(void**)_nativePointer))[14]);		
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Gets the number of bitwise instructions.</p>	
        /// </summary>	
        /// <returns><p>The number of bitwise instructions.</p></returns>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflection::GetBitwiseInstructionCount']/*"/>	
        /// <msdn-id>ff476611</msdn-id>	
        /// <unmanaged>unsigned int ID3D11ShaderReflection::GetBitwiseInstructionCount()</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflection::GetBitwiseInstructionCount</unmanaged-short>	
        internal int GetBitwiseInstructionCount() {
            unsafe {
                int __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer,((void**)(*(void**)_nativePointer))[15]);		
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Gets the geometry-shader input-primitive description.</p>	
        /// </summary>	
        /// <returns><p>The input-primitive description, see D3D10_PRIMITIVE_TOPOLOGY.</p></returns>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflection::GetGSInputPrimitive']/*"/>	
        /// <msdn-id>ff476616</msdn-id>	
        /// <unmanaged>D3D_PRIMITIVE ID3D11ShaderReflection::GetGSInputPrimitive()</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflection::GetGSInputPrimitive</unmanaged-short>	
        internal SharpDX.D3DCompiler.InputPrimitive GetGeometryShaderSInputPrimitive() {
            unsafe {
                SharpDX.D3DCompiler.InputPrimitive __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.CalliSharpDXD3DCompilerInputPrimitive(_nativePointer,((void**)(*(void**)_nativePointer))[16]);		
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Indicates whether a shader is a sample frequency shader.</p>	
        /// </summary>	
        /// <returns><p>Returns true if the shader is a sample frequency shader; otherwise returns false.</p></returns>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflection::IsSampleFrequencyShader']/*"/>	
        /// <msdn-id>ff476627</msdn-id>	
        /// <unmanaged>BOOL ID3D11ShaderReflection::IsSampleFrequencyShader()</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflection::IsSampleFrequencyShader</unmanaged-short>	
        internal SharpDX.Mathematics.Interop.RawBool IsSampleFrequencyShader_() {
            unsafe {
                SharpDX.Mathematics.Interop.RawBool __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.CalliSharpDXMathematicsInteropRawBool(_nativePointer,((void**)(*(void**)_nativePointer))[17]);		
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Gets the number of interface slots in a shader.</p>	
        /// </summary>	
        /// <returns><p>The number of interface slots in the shader.</p></returns>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflection::GetNumInterfaceSlots']/*"/>	
        /// <msdn-id>ff476621</msdn-id>	
        /// <unmanaged>unsigned int ID3D11ShaderReflection::GetNumInterfaceSlots()</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflection::GetNumInterfaceSlots</unmanaged-short>	
        internal int GetInterfaceSlotCount() {
            unsafe {
                int __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer,((void**)(*(void**)_nativePointer))[18]);		
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Gets the minimum feature level.</p>	
        /// </summary>	
        /// <param name="levelRef"><dd>  <p>A reference to one of the enumerated values in <strong><see cref="SharpDX.Direct3D.FeatureLevel"/></strong>, which represents the minimum feature level.</p> </dd></param>	
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflection::GetMinFeatureLevel']/*"/>	
        /// <msdn-id>ff476618</msdn-id>	
        /// <unmanaged>HRESULT ID3D11ShaderReflection::GetMinFeatureLevel([Out] D3D_FEATURE_LEVEL* pLevel)</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflection::GetMinFeatureLevel</unmanaged-short>	
        internal void GetMinFeatureLevel(out SharpDX.Direct3D.FeatureLevel levelRef) {
            unsafe {
                SharpDX.Result __result__;
                fixed (void* levelRef_ = &levelRef)
                    __result__= 
    				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, levelRef_,((void**)(*(void**)_nativePointer))[19]);		
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Retrieves the sizes, in thread groups, of the X, Y, and Z dimensions of the shader's thread-group grid.</p>	
        /// </summary>	
        /// <param name="sizeXRef"><dd>  <p>A reference to the size, in thread groups, of the x-dimension of the thread-group grid. The maximum size is 65535.</p> </dd></param>	
        /// <param name="sizeYRef"><dd>  <p>A reference to the size, in thread groups, of the y-dimension of the thread-group grid. The maximum size is 65535.</p> </dd></param>	
        /// <param name="sizeZRef"><dd>  <p>A reference to the size, in thread groups, of the z-dimension of the thread-group grid. The maximum size is 65535.</p> </dd></param>	
        /// <returns><p>Returns the total size, in thread groups, of the thread-group grid by calculating the product of the size of each dimension.</p><code> *pSizeX * *pSizeY * *pSizeZ;</code></returns>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflection::GetThreadGroupSize']/*"/>	
        /// <msdn-id>ff728742</msdn-id>	
        /// <unmanaged>unsigned int ID3D11ShaderReflection::GetThreadGroupSize([Out, Optional] unsigned int* pSizeX,[Out, Optional] unsigned int* pSizeY,[Out, Optional] unsigned int* pSizeZ)</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflection::GetThreadGroupSize</unmanaged-short>	
        public int GetThreadGroupSize(out int sizeXRef, out int sizeYRef, out int sizeZRef) {
            unsafe {
                int __result__;
                fixed (void* sizeXRef_ = &sizeXRef)
                    fixed (void* sizeYRef_ = &sizeYRef)
                        fixed (void* sizeZRef_ = &sizeZRef)
                            __result__= 
            				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, sizeXRef_, sizeYRef_, sizeZRef_,((void**)(*(void**)_nativePointer))[20]);		
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Gets a group of flags that indicates the requirements of a shader.</p>	
        /// </summary>	
        /// <returns><p>A value that contains a combination of one or more shader requirements flags; each flag specifies a requirement of the shader. A default value of 0 means there are no requirements. </p><table> <tr><th>Shader requirement flag</th><th>Description</th></tr> <tr><td><strong><see cref="SharpDX.D3DCompiler.ShaderRequiresFlags.ShaderRequiresDoubles"/></strong></td><td>Shader requires that the graphics driver and hardware support double data type. For more info, see <strong><see cref="SharpDX.Direct3D11.FeatureDataDoubles"/></strong>.</td></tr> <tr><td><strong><see cref="SharpDX.D3DCompiler.ShaderRequiresFlags.ShaderRequiresEarlyDepthStencil"/></strong></td><td>Shader requires an early depth stencil.</td></tr> <tr><td><strong><see cref="SharpDX.D3DCompiler.ShaderRequiresFlags.ShaderRequiresUnorderedAccessViewsAtEveryStage"/></strong></td><td>Shader requires unordered access views (UAVs) at every pipeline stage.</td></tr> <tr><td><strong><see cref="SharpDX.D3DCompiler.ShaderRequiresFlags.ShaderRequires64UnorderedAccessViews"/></strong></td><td>Shader requires 64 UAVs.</td></tr> <tr><td><strong><see cref="SharpDX.D3DCompiler.ShaderRequiresFlags.ShaderRequiresMinimumPrecision"/></strong></td><td>Shader requires the graphics driver and hardware to support minimum precision. For more info, see Using HLSL minimum precision.</td></tr> <tr><td><strong><see cref="SharpDX.D3DCompiler.ShaderRequiresFlags.ShaderRequires111DoubleExtensionS"/></strong></td><td>Shader requires that the graphics driver and hardware support extended doubles instructions. For more info, see the <strong>ExtendedDoublesShaderInstructions</strong> member of <strong><see cref="SharpDX.Direct3D11.FeatureDataD3D11Options"/></strong>.</td></tr> <tr><td><strong><see cref="SharpDX.D3DCompiler.ShaderRequiresFlags.ShaderRequires111ShaderExtensionS"/></strong></td><td>Shader requires that the graphics driver and hardware support the <strong>msad4</strong> intrinsic function in shaders. For more info, see the <strong>SAD4ShaderInstructions</strong> member of <strong><see cref="SharpDX.Direct3D11.FeatureDataD3D11Options"/></strong>.</td></tr> <tr><td><strong><see cref="SharpDX.D3DCompiler.ShaderRequiresFlags.ShaderRequiresLevel9ComparisonFiltering"/></strong></td><td>Shader requires that the graphics driver and hardware support Direct3D 9 shadow support. For more info, see <strong><see cref="SharpDX.Direct3D11.FeatureDataD3D9ShadowSupport"/></strong>.</td></tr> <tr><td><strong><see cref="SharpDX.D3DCompiler.ShaderRequiresFlags.ShaderRequiresTiledResources"/></strong></td><td>Shader requires that the graphics driver and hardware support tiled resources. For more info, see <strong>GetResourceTiling</strong>. </td></tr> </table><p>?</p></returns>	
        /// <remarks>	
        /// <p>Here is how the D3D11Shader.h header defines the shader requirements flags:</p><pre> #define <see cref="SharpDX.D3DCompiler.ShaderRequiresFlags.ShaderRequiresDoubles"/>                         0x00000001	
        /// #define <see cref="SharpDX.D3DCompiler.ShaderRequiresFlags.ShaderRequiresEarlyDepthStencil"/>             0x00000002	
        /// #define <see cref="SharpDX.D3DCompiler.ShaderRequiresFlags.ShaderRequiresUnorderedAccessViewsAtEveryStage"/>             0x00000004	
        /// #define <see cref="SharpDX.D3DCompiler.ShaderRequiresFlags.ShaderRequires64UnorderedAccessViews"/>                         0x00000008	
        /// #define <see cref="SharpDX.D3DCompiler.ShaderRequiresFlags.ShaderRequiresMinimumPrecision"/>               0x00000010	
        /// #define <see cref="SharpDX.D3DCompiler.ShaderRequiresFlags.ShaderRequires111DoubleExtensionS"/>          0x00000020	
        /// #define <see cref="SharpDX.D3DCompiler.ShaderRequiresFlags.ShaderRequires111ShaderExtensionS"/>          0x00000040	
        /// #define <see cref="SharpDX.D3DCompiler.ShaderRequiresFlags.ShaderRequiresLevel9ComparisonFiltering"/>    0x00000080	
        /// </pre>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflection::GetRequiresFlags']/*"/>	
        /// <msdn-id>jj542458</msdn-id>	
        /// <unmanaged>unsigned longlong ID3D11ShaderReflection::GetRequiresFlags()</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflection::GetRequiresFlags</unmanaged-short>	
        internal SharpDX.D3DCompiler.ShaderRequiresFlags GetRequiresFlags() {
            unsafe {
                SharpDX.D3DCompiler.ShaderRequiresFlags __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.CalliSharpDXD3DCompilerShaderRequiresFlags(_nativePointer,((void**)(*(void**)_nativePointer))[21]);		
                return __result__;
            }
        }
    }
    /// <summary>	
    /// <p>This shader-reflection interface provides access to variable type.</p><ul> <li>Methods</li> </ul>	
    /// </summary>	
    /// <remarks>	
    /// <p>The get a shader-reflection-type interface, call <strong><see cref="SharpDX.D3DCompiler.ShaderReflectionVariable.GetVariableType"/></strong>. This isn't a COM interface, so you don't need to worry about reference counts or releasing the interface when you're done with it.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflectionType']/*"/>	
    /// <msdn-id>ff476595</msdn-id>	
    /// <unmanaged>ID3D11ShaderReflectionType</unmanaged>	
    /// <unmanaged-short>ID3D11ShaderReflectionType</unmanaged-short>	
    [Guid("6E6FFA6A-9BAE-4613-A51E-91652D508C21")]
    public partial class ShaderReflectionType : SharpDX.CppObject {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.D3DCompiler.ShaderReflectionType"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ShaderReflectionType(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.D3DCompiler.ShaderReflectionType"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.D3DCompiler.ShaderReflectionType(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.D3DCompiler.ShaderReflectionType(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Get the description of a shader-reflection-variable type.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflectionType::GetDesc']/*"/>	
        /// <msdn-id>ff476597</msdn-id>	
        /// <unmanaged>GetDesc</unmanaged>	
        /// <unmanaged-short>GetDesc</unmanaged-short>	
        /// <unmanaged>HRESULT ID3D11ShaderReflectionType::GetDesc([Out] D3D11_SHADER_TYPE_DESC* pDesc)</unmanaged>
        public SharpDX.D3DCompiler.ShaderTypeDescription Description {
                get { SharpDX.D3DCompiler.ShaderTypeDescription __output__; GetDescription(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// <p>Gets the base class of a class.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflectionType::GetSubType']/*"/>	
        /// <msdn-id>ff476603</msdn-id>	
        /// <unmanaged>GetSubType</unmanaged>	
        /// <unmanaged-short>GetSubType</unmanaged-short>	
        /// <unmanaged>ID3D11ShaderReflectionType* ID3D11ShaderReflectionType::GetSubType()</unmanaged>
        public SharpDX.D3DCompiler.ShaderReflectionType SubType {
                get { return GetSubType(); }
        }
        
        /// <summary>	
        /// <p>Gets an <strong><see cref="SharpDX.D3DCompiler.ShaderReflectionType"/> Interface</strong> interface containing the variable base class type.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflectionType::GetBaseClass']/*"/>	
        /// <msdn-id>ff476596</msdn-id>	
        /// <unmanaged>GetBaseClass</unmanaged>	
        /// <unmanaged-short>GetBaseClass</unmanaged-short>	
        /// <unmanaged>ID3D11ShaderReflectionType* ID3D11ShaderReflectionType::GetBaseClass()</unmanaged>
        public SharpDX.D3DCompiler.ShaderReflectionType BaseClass {
                get { return GetBaseClass(); }
        }
        
        /// <summary>	
        /// <p>Gets the number of interfaces.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflectionType::GetNumInterfaces']/*"/>	
        /// <msdn-id>ff476602</msdn-id>	
        /// <unmanaged>GetNumInterfaces</unmanaged>	
        /// <unmanaged-short>GetNumInterfaces</unmanaged-short>	
        /// <unmanaged>unsigned int ID3D11ShaderReflectionType::GetNumInterfaces()</unmanaged>
        public int NumInterfaces {
                get { return GetNumInterfaces(); }
        }
        
        /// <summary>	
        /// <p>Get the description of a shader-reflection-variable type.</p>	
        /// </summary>	
        /// <param name="descRef"><dd>  <p>A reference to a shader-type description (see <strong><see cref="SharpDX.D3DCompiler.ShaderTypeDescription"/></strong>).</p> </dd></param>	
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflectionType::GetDesc']/*"/>	
        /// <msdn-id>ff476597</msdn-id>	
        /// <unmanaged>HRESULT ID3D11ShaderReflectionType::GetDesc([Out] D3D11_SHADER_TYPE_DESC* pDesc)</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflectionType::GetDesc</unmanaged-short>	
        internal void GetDescription(out SharpDX.D3DCompiler.ShaderTypeDescription descRef) {
            unsafe {
                var descRef_ = new SharpDX.D3DCompiler.ShaderTypeDescription.__Native();
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, &descRef_,((void**)(*(void**)_nativePointer))[0]);		
                descRef = new SharpDX.D3DCompiler.ShaderTypeDescription();
                descRef.__MarshalFrom(ref descRef_);
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Get a shader-reflection-variable type by index.</p>	
        /// </summary>	
        /// <param name="index"><dd>  <p>Zero-based index.</p> </dd></param>	
        /// <returns><p>A reference to a <strong><see cref="SharpDX.D3DCompiler.ShaderReflectionType"/> Interface</strong>.</p></returns>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflectionType::GetMemberTypeByIndex']/*"/>	
        /// <msdn-id>ff476599</msdn-id>	
        /// <unmanaged>ID3D11ShaderReflectionType* ID3D11ShaderReflectionType::GetMemberTypeByIndex([In] unsigned int Index)</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflectionType::GetMemberTypeByIndex</unmanaged-short>	
        public SharpDX.D3DCompiler.ShaderReflectionType GetMemberType(int index) {
            unsafe {
                SharpDX.D3DCompiler.ShaderReflectionType __result__;
                __result__= 
				new SharpDX.D3DCompiler.ShaderReflectionType((IntPtr)SharpDX.D3DCompiler.LocalInterop.CalliSystemIntPtr(_nativePointer, index,((void**)(*(void**)_nativePointer))[1]));		
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Get a shader-reflection-variable type by name.</p>	
        /// </summary>	
        /// <param name="name"><dd>  <p>Member name.</p> </dd></param>	
        /// <returns><p>A reference to a <strong><see cref="SharpDX.D3DCompiler.ShaderReflectionType"/> Interface</strong>.</p></returns>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflectionType::GetMemberTypeByName']/*"/>	
        /// <msdn-id>ff476600</msdn-id>	
        /// <unmanaged>ID3D11ShaderReflectionType* ID3D11ShaderReflectionType::GetMemberTypeByName([In] const char* Name)</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflectionType::GetMemberTypeByName</unmanaged-short>	
        public SharpDX.D3DCompiler.ShaderReflectionType GetMemberType(string name) {
            unsafe {
                IntPtr name_ = Utilities.StringToHGlobalAnsi(name);
                SharpDX.D3DCompiler.ShaderReflectionType __result__;
                __result__= 
				new SharpDX.D3DCompiler.ShaderReflectionType((IntPtr)SharpDX.D3DCompiler.LocalInterop.CalliSystemIntPtr(_nativePointer, (void*)name_,((void**)(*(void**)_nativePointer))[2]));		
                Marshal.FreeHGlobal(name_ );
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Get a shader-reflection-variable type.</p>	
        /// </summary>	
        /// <param name="index"><dd>  <p>Zero-based index.</p> </dd></param>	
        /// <returns><p>The variable type.</p></returns>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflectionType::GetMemberTypeName']/*"/>	
        /// <msdn-id>ff476601</msdn-id>	
        /// <unmanaged>const char* ID3D11ShaderReflectionType::GetMemberTypeName([In] unsigned int Index)</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflectionType::GetMemberTypeName</unmanaged-short>	
        public string GetMemberTypeName(int index) {
            unsafe {
                string __result__;
                __result__= 
				Marshal.PtrToStringAnsi(SharpDX.D3DCompiler.LocalInterop.CalliSystemIntPtr(_nativePointer, index,((void**)(*(void**)_nativePointer))[3]));		
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Indicates whether two <strong><see cref="SharpDX.D3DCompiler.ShaderReflectionType"/> Interface</strong> references have the same underlying type.</p>	
        /// </summary>	
        /// <param name="typeRef">No documentation.</param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if the references have the same underlying type; otherwise returns S_FALSE.</p></returns>	
        /// <remarks>	
        /// <p>IsEqual indicates whether the sources of the <strong><see cref="SharpDX.D3DCompiler.ShaderReflectionType"/> Interface</strong> references have the same underlying type. For example, if two <strong><see cref="SharpDX.D3DCompiler.ShaderReflectionType"/> Interface</strong> references were retrieved from variables, IsEqual can be used to see if  the variables have the same type.</p><p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflectionType::IsEqual']/*"/>	
        /// <msdn-id>ff476605</msdn-id>	
        /// <unmanaged>HRESULT ID3D11ShaderReflectionType::IsEqual([In] ID3D11ShaderReflectionType* pType)</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflectionType::IsEqual</unmanaged-short>	
        internal SharpDX.Result IsEqual_(SharpDX.D3DCompiler.ShaderReflectionType typeRef) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, (void*)((typeRef == null)?IntPtr.Zero:typeRef.NativePointer),((void**)(*(void**)_nativePointer))[4]);		
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Gets the base class of a class.</p>	
        /// </summary>	
        /// <returns><p>Returns a reference to a <strong><see cref="SharpDX.D3DCompiler.ShaderReflectionType"/> Interface</strong> containing the base class type.  Returns <strong><c>null</c></strong> if the class does not have a base class.</p></returns>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflectionType::GetSubType']/*"/>	
        /// <msdn-id>ff476603</msdn-id>	
        /// <unmanaged>ID3D11ShaderReflectionType* ID3D11ShaderReflectionType::GetSubType()</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflectionType::GetSubType</unmanaged-short>	
        internal SharpDX.D3DCompiler.ShaderReflectionType GetSubType() {
            unsafe {
                SharpDX.D3DCompiler.ShaderReflectionType __result__;
                __result__= 
				new SharpDX.D3DCompiler.ShaderReflectionType((IntPtr)SharpDX.D3DCompiler.LocalInterop.CalliSystemIntPtr(_nativePointer,((void**)(*(void**)_nativePointer))[5]));		
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Gets an <strong><see cref="SharpDX.D3DCompiler.ShaderReflectionType"/> Interface</strong> interface containing the variable base class type.</p>	
        /// </summary>	
        /// <returns><p>Returns A reference to a <strong><see cref="SharpDX.D3DCompiler.ShaderReflectionType"/> Interface</strong>.</p></returns>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflectionType::GetBaseClass']/*"/>	
        /// <msdn-id>ff476596</msdn-id>	
        /// <unmanaged>ID3D11ShaderReflectionType* ID3D11ShaderReflectionType::GetBaseClass()</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflectionType::GetBaseClass</unmanaged-short>	
        internal SharpDX.D3DCompiler.ShaderReflectionType GetBaseClass() {
            unsafe {
                SharpDX.D3DCompiler.ShaderReflectionType __result__;
                __result__= 
				new SharpDX.D3DCompiler.ShaderReflectionType((IntPtr)SharpDX.D3DCompiler.LocalInterop.CalliSystemIntPtr(_nativePointer,((void**)(*(void**)_nativePointer))[6]));		
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Gets the number of interfaces.</p>	
        /// </summary>	
        /// <returns><p>Returns the number of interfaces.</p></returns>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflectionType::GetNumInterfaces']/*"/>	
        /// <msdn-id>ff476602</msdn-id>	
        /// <unmanaged>unsigned int ID3D11ShaderReflectionType::GetNumInterfaces()</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflectionType::GetNumInterfaces</unmanaged-short>	
        internal int GetNumInterfaces() {
            unsafe {
                int __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer,((void**)(*(void**)_nativePointer))[7]);		
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Get an interface by index.</p>	
        /// </summary>	
        /// <param name="uIndex"><dd>  <p>Zero-based index.</p> </dd></param>	
        /// <returns><p>A reference to a <strong><see cref="SharpDX.D3DCompiler.ShaderReflectionType"/> Interface</strong>.</p></returns>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflectionType::GetInterfaceByIndex']/*"/>	
        /// <msdn-id>ff476598</msdn-id>	
        /// <unmanaged>ID3D11ShaderReflectionType* ID3D11ShaderReflectionType::GetInterfaceByIndex([In] unsigned int uIndex)</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflectionType::GetInterfaceByIndex</unmanaged-short>	
        public SharpDX.D3DCompiler.ShaderReflectionType GetInterface(int uIndex) {
            unsafe {
                SharpDX.D3DCompiler.ShaderReflectionType __result__;
                __result__= 
				new SharpDX.D3DCompiler.ShaderReflectionType((IntPtr)SharpDX.D3DCompiler.LocalInterop.CalliSystemIntPtr(_nativePointer, uIndex,((void**)(*(void**)_nativePointer))[8]));		
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Indicates whether a variable is of the specified type.</p>	
        /// </summary>	
        /// <param name="typeRef"><dd>  <p>A reference to a <strong><see cref="SharpDX.D3DCompiler.ShaderReflectionType"/> Interface</strong>.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if object being queried is equal to or inherits from the type in the <em>pType</em> parameter; otherwise returns S_FALSE.</p></returns>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflectionType::IsOfType']/*"/>	
        /// <msdn-id>ff476606</msdn-id>	
        /// <unmanaged>HRESULT ID3D11ShaderReflectionType::IsOfType([In] ID3D11ShaderReflectionType* pType)</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflectionType::IsOfType</unmanaged-short>	
        internal SharpDX.Result IsOfType_(SharpDX.D3DCompiler.ShaderReflectionType typeRef) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, (void*)((typeRef == null)?IntPtr.Zero:typeRef.NativePointer),((void**)(*(void**)_nativePointer))[9]);		
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Indicates whether a class type implements an interface.</p>	
        /// </summary>	
        /// <param name="baseRef"><dd>  <p>A reference to a <strong><see cref="SharpDX.D3DCompiler.ShaderReflectionType"/> Interface</strong>.</p> </dd></param>	
        /// <returns><p>Returns <see cref="SharpDX.Result.Ok"/> if the interface is implemented; otherwise return S_FALSE.</p></returns>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflectionType::ImplementsInterface']/*"/>	
        /// <msdn-id>ff476604</msdn-id>	
        /// <unmanaged>HRESULT ID3D11ShaderReflectionType::ImplementsInterface([In] ID3D11ShaderReflectionType* pBase)</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflectionType::ImplementsInterface</unmanaged-short>	
        internal SharpDX.Result ImplementsInterface_(SharpDX.D3DCompiler.ShaderReflectionType baseRef) {
            unsafe {
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, (void*)((baseRef == null)?IntPtr.Zero:baseRef.NativePointer),((void**)(*(void**)_nativePointer))[10]);		
                return __result__;
            }
        }
    }
    /// <summary>	
    /// <p>This shader-reflection interface provides access to a variable.</p><ul> <li>Methods</li> </ul>	
    /// </summary>	
    /// <remarks>	
    /// <p>To get a shader-reflection-variable interface, call a method like <strong><see cref="SharpDX.D3DCompiler.ShaderReflection.GetVariable"/></strong>. This isn't a COM interface, so you don't need to worry about reference counts or releasing the interface when you're done with it.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflectionVariable']/*"/>	
    /// <msdn-id>ff476607</msdn-id>	
    /// <unmanaged>ID3D11ShaderReflectionVariable</unmanaged>	
    /// <unmanaged-short>ID3D11ShaderReflectionVariable</unmanaged-short>	
    [Guid("51F23923-F3E5-4BD1-91CB-606177D8DB4C")]
    public partial class ShaderReflectionVariable : SharpDX.CppObject {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharpDX.D3DCompiler.ShaderReflectionVariable"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public ShaderReflectionVariable(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.D3DCompiler.ShaderReflectionVariable"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.D3DCompiler.ShaderReflectionVariable(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.D3DCompiler.ShaderReflectionVariable(nativePointer);
		}
        
        
        /// <summary>	
        /// <p>Get a shader-variable description.</p>	
        /// </summary>	
        /// <remarks>	
        /// <p>This method can be used to determine if the <strong><see cref="SharpDX.D3DCompiler.ShaderReflectionVariable"/> Interface</strong> is valid, the method returns <strong>E_FAIL</strong> when the variable is not valid.</p><p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflectionVariable::GetDesc']/*"/>	
        /// <msdn-id>ff476608</msdn-id>	
        /// <unmanaged>GetDesc</unmanaged>	
        /// <unmanaged-short>GetDesc</unmanaged-short>	
        /// <unmanaged>HRESULT ID3D11ShaderReflectionVariable::GetDesc([Out] D3D11_SHADER_VARIABLE_DESC* pDesc)</unmanaged>
        public SharpDX.D3DCompiler.ShaderVariableDescription Description {
                get { SharpDX.D3DCompiler.ShaderVariableDescription __output__; GetDescription(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflectionVariable::GetBuffer']/*"/>	
        /// <unmanaged>GetBuffer</unmanaged>	
        /// <unmanaged-short>GetBuffer</unmanaged-short>	
        /// <unmanaged>ID3D11ShaderReflectionConstantBuffer* ID3D11ShaderReflectionVariable::GetBuffer()</unmanaged>
        public SharpDX.D3DCompiler.ConstantBuffer Buffer {
                get { return GetBuffer(); }
        }
        
        /// <summary>	
        /// <p>Get a shader-variable description.</p>	
        /// </summary>	
        /// <param name="descRef"><dd>  <p>A reference to a shader-variable description (see <strong><see cref="SharpDX.D3DCompiler.ShaderVariableDescription"/></strong>).</p> </dd></param>	
        /// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
        /// <remarks>	
        /// <p>This method can be used to determine if the <strong><see cref="SharpDX.D3DCompiler.ShaderReflectionVariable"/> Interface</strong> is valid, the method returns <strong>E_FAIL</strong> when the variable is not valid.</p><p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflectionVariable::GetDesc']/*"/>	
        /// <msdn-id>ff476608</msdn-id>	
        /// <unmanaged>HRESULT ID3D11ShaderReflectionVariable::GetDesc([Out] D3D11_SHADER_VARIABLE_DESC* pDesc)</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflectionVariable::GetDesc</unmanaged-short>	
        internal void GetDescription(out SharpDX.D3DCompiler.ShaderVariableDescription descRef) {
            unsafe {
                var descRef_ = new SharpDX.D3DCompiler.ShaderVariableDescription.__Native();
                SharpDX.Result __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, &descRef_,((void**)(*(void**)_nativePointer))[0]);		
                descRef = new SharpDX.D3DCompiler.ShaderVariableDescription();
                descRef.__MarshalFrom(ref descRef_);
                __result__.CheckError();
            }
        }
        
        /// <summary>	
        /// <p>Get a shader-variable type.</p>	
        /// </summary>	
        /// <returns><p>A reference to a <strong><see cref="SharpDX.D3DCompiler.ShaderReflectionType"/> Interface</strong>.</p></returns>	
        /// <remarks>	
        /// <p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflectionVariable::GetType']/*"/>	
        /// <msdn-id>ff476610</msdn-id>	
        /// <unmanaged>ID3D11ShaderReflectionType* ID3D11ShaderReflectionVariable::GetType()</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflectionVariable::GetType</unmanaged-short>	
        public SharpDX.D3DCompiler.ShaderReflectionType GetVariableType() {
            unsafe {
                SharpDX.D3DCompiler.ShaderReflectionType __result__;
                __result__= 
				new SharpDX.D3DCompiler.ShaderReflectionType((IntPtr)SharpDX.D3DCompiler.LocalInterop.CalliSystemIntPtr(_nativePointer,((void**)(*(void**)_nativePointer))[1]));		
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <returns>No documentation.</returns>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflectionVariable::GetBuffer']/*"/>	
        /// <unmanaged>ID3D11ShaderReflectionConstantBuffer* ID3D11ShaderReflectionVariable::GetBuffer()</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflectionVariable::GetBuffer</unmanaged-short>	
        internal SharpDX.D3DCompiler.ConstantBuffer GetBuffer() {
            unsafe {
                SharpDX.D3DCompiler.ConstantBuffer __result__;
                __result__= 
				new SharpDX.D3DCompiler.ConstantBuffer((IntPtr)SharpDX.D3DCompiler.LocalInterop.CalliSystemIntPtr(_nativePointer,((void**)(*(void**)_nativePointer))[2]));		
                return __result__;
            }
        }
        
        /// <summary>	
        /// <p>Gets the corresponding interface slot for a variable that represents an interface reference.</p>	
        /// </summary>	
        /// <param name="uArrayIndex"><dd>  <p>Index of the array element to get the slot number for.  For a non-array variable this value will be zero.</p> </dd></param>	
        /// <returns><p>Returns the index of the interface in the interface array.</p></returns>	
        /// <remarks>	
        /// <p>GetInterfaceSlot gets the corresponding slot in an dynamic linkage array for an interface instance.  The returned slot number is used to set an interface instance to a particular class instance.  See the HLSL Interfaces and Classes overview for additional information.</p><p>This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.</p>	
        /// </remarks>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3D11ShaderReflectionVariable::GetInterfaceSlot']/*"/>	
        /// <msdn-id>ff476609</msdn-id>	
        /// <unmanaged>unsigned int ID3D11ShaderReflectionVariable::GetInterfaceSlot([In] unsigned int uArrayIndex)</unmanaged>	
        /// <unmanaged-short>ID3D11ShaderReflectionVariable::GetInterfaceSlot</unmanaged-short>	
        public int GetInterfaceSlot(int uArrayIndex) {
            unsafe {
                int __result__;
                __result__= 
				SharpDX.D3DCompiler.LocalInterop.Calliint(_nativePointer, uArrayIndex,((void**)(*(void**)_nativePointer))[3]);		
                return __result__;
            }
        }
    }
}
