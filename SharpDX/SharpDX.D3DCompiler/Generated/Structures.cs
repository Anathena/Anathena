// Copyright (c) 2010-2014 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Types declaration for SharpDX.D3DCompiler namespace.
//     This code was generated by a tool.
//     Date : 6/25/2016 10:38:07 PM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
namespace SharpDX.D3DCompiler {

#pragma warning disable 282
#pragma warning disable 649
#pragma warning disable 419
#pragma warning disable 1587
#pragma warning disable 1574
    
    /// <summary>	
    /// <p>Describes a shader constant-buffer.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Constants are supplied to shaders in a shader-constant buffer. Get the description of a shader-constant-buffer by calling <strong><see cref="SharpDX.D3DCompiler.ConstantBuffer.GetDescription"/></strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_BUFFER_DESC']/*"/>	
    /// <msdn-id>ff476208</msdn-id>	
    /// <unmanaged>D3D11_SHADER_BUFFER_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_SHADER_BUFFER_DESC</unmanaged-short>	
    public  partial struct ConstantBufferDescription {	
        
        /// <summary>	
        /// <dd> <p>The name of the buffer.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_BUFFER_DESC::Name']/*"/>	
        /// <msdn-id>ff476208</msdn-id>	
        /// <unmanaged>const char* Name</unmanaged>	
        /// <unmanaged-short>char Name</unmanaged-short>	
        public string Name;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.D3DCompiler.ConstantBufferType"/></strong>-typed value that indicates the intended use of the constant data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_BUFFER_DESC::Type']/*"/>	
        /// <msdn-id>ff476208</msdn-id>	
        /// <unmanaged>D3D_CBUFFER_TYPE Type</unmanaged>	
        /// <unmanaged-short>D3D_CBUFFER_TYPE Type</unmanaged-short>	
        public SharpDX.D3DCompiler.ConstantBufferType Type;
        
        /// <summary>	
        /// <dd> <p>The number of unique variables.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_BUFFER_DESC::Variables']/*"/>	
        /// <msdn-id>ff476208</msdn-id>	
        /// <unmanaged>unsigned int Variables</unmanaged>	
        /// <unmanaged-short>unsigned int Variables</unmanaged-short>	
        public int VariableCount;
        
        /// <summary>	
        /// <dd> <p>Buffer size (in bytes).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_BUFFER_DESC::Size']/*"/>	
        /// <msdn-id>ff476208</msdn-id>	
        /// <unmanaged>unsigned int Size</unmanaged>	
        /// <unmanaged-short>unsigned int Size</unmanaged-short>	
        public int Size;
        
        /// <summary>	
        /// <dd> <p>A combination of <strong><see cref="SharpDX.D3DCompiler.ConstantBufferFlags"/></strong>-typed values that are combined by using a bitwise OR operation. The resulting value specifies properties for the shader constant-buffer.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_BUFFER_DESC::uFlags']/*"/>	
        /// <msdn-id>ff476208</msdn-id>	
        /// <unmanaged>D3D_SHADER_CBUFFER_FLAGS uFlags</unmanaged>	
        /// <unmanaged-short>D3D_SHADER_CBUFFER_FLAGS uFlags</unmanaged-short>	
        public SharpDX.D3DCompiler.ConstantBufferFlags Flags;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public System.IntPtr Name;
            public SharpDX.D3DCompiler.ConstantBufferType Type;
            public int VariableCount;
            public int Size;
            public SharpDX.D3DCompiler.ConstantBufferFlags Flags;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                if (this.Name != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.Name);		
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Name = ( @ref.Name == IntPtr.Zero )?null:Marshal.PtrToStringAnsi(@ref.Name);
            this.Type = @ref.Type;
            this.VariableCount = @ref.VariableCount;
            this.Size = @ref.Size;
            this.Flags = @ref.Flags;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Name = ( this.Name == null )?IntPtr.Zero : Utilities.StringToHGlobalAnsi(this.Name);
            @ref.Type = this.Type;
            @ref.VariableCount = this.VariableCount;
            @ref.Size = this.Size;
            @ref.Flags = this.Flags;
		
		}
    }
    
    /// <summary>	
    /// <p>Describes a function.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC']/*"/>	
    /// <msdn-id>dn280416</msdn-id>	
    /// <unmanaged>D3D11_FUNCTION_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_FUNCTION_DESC</unmanaged-short>	
    public  partial struct FunctionDescription {	
        
        /// <summary>	
        /// <dd> <p>The shader version.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::Version']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>unsigned int Version</unmanaged>	
        /// <unmanaged-short>unsigned int Version</unmanaged-short>	
        public int Version;
        
        /// <summary>	
        /// <dd> <p>The name of the originator of the function.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::Creator']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>const char* Creator</unmanaged>	
        /// <unmanaged-short>char Creator</unmanaged-short>	
        public string Creator;
        
        /// <summary>	
        /// <dd> <p>A combination of <strong>D3DCOMPILE Constants</strong> that are combined by using a bitwise OR operation. The resulting value specifies shader compilation and parsing.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::Flags']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>unsigned int Flags</unmanaged>	
        /// <unmanaged-short>unsigned int Flags</unmanaged-short>	
        public int Flags;
        
        /// <summary>	
        /// <dd> <p>The number of constant buffers for the function.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::ConstantBuffers']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>unsigned int ConstantBuffers</unmanaged>	
        /// <unmanaged-short>unsigned int ConstantBuffers</unmanaged-short>	
        public int ConstantBuffers;
        
        /// <summary>	
        /// <dd> <p>The number of bound resources for the function.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::BoundResources']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>unsigned int BoundResources</unmanaged>	
        /// <unmanaged-short>unsigned int BoundResources</unmanaged-short>	
        public int BoundResources;
        
        /// <summary>	
        /// <dd> <p>The number of emitted instructions for the function.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::InstructionCount']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>unsigned int InstructionCount</unmanaged>	
        /// <unmanaged-short>unsigned int InstructionCount</unmanaged-short>	
        public int InstructionCount;
        
        /// <summary>	
        /// <dd> <p>The number of temporary registers used by the function.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::TempRegisterCount']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>unsigned int TempRegisterCount</unmanaged>	
        /// <unmanaged-short>unsigned int TempRegisterCount</unmanaged-short>	
        public int TempRegisterCount;
        
        /// <summary>	
        /// <dd> <p>The number of temporary arrays used by the function.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::TempArrayCount']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>unsigned int TempArrayCount</unmanaged>	
        /// <unmanaged-short>unsigned int TempArrayCount</unmanaged-short>	
        public int TempArrayCount;
        
        /// <summary>	
        /// <dd> <p>The number of constant defines for the function.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::DefCount']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>unsigned int DefCount</unmanaged>	
        /// <unmanaged-short>unsigned int DefCount</unmanaged-short>	
        public int DefCount;
        
        /// <summary>	
        /// <dd> <p>The number of declarations (input + output) for the function.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::DclCount']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>unsigned int DclCount</unmanaged>	
        /// <unmanaged-short>unsigned int DclCount</unmanaged-short>	
        public int DclCount;
        
        /// <summary>	
        /// <dd> <p>The number of non-categorized texture instructions for the function.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::TextureNormalInstructions']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>unsigned int TextureNormalInstructions</unmanaged>	
        /// <unmanaged-short>unsigned int TextureNormalInstructions</unmanaged-short>	
        public int TextureNormalInstructions;
        
        /// <summary>	
        /// <dd> <p>The number of texture load instructions for the function.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::TextureLoadInstructions']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>unsigned int TextureLoadInstructions</unmanaged>	
        /// <unmanaged-short>unsigned int TextureLoadInstructions</unmanaged-short>	
        public int TextureLoadInstructions;
        
        /// <summary>	
        /// <dd> <p>The number of texture comparison instructions for the function.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::TextureCompInstructions']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>unsigned int TextureCompInstructions</unmanaged>	
        /// <unmanaged-short>unsigned int TextureCompInstructions</unmanaged-short>	
        public int TextureCompInstructions;
        
        /// <summary>	
        /// <dd> <p>The number of texture bias instructions for the function.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::TextureBiasInstructions']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>unsigned int TextureBiasInstructions</unmanaged>	
        /// <unmanaged-short>unsigned int TextureBiasInstructions</unmanaged-short>	
        public int TextureBiasInstructions;
        
        /// <summary>	
        /// <dd> <p>The number of texture gradient instructions for the function.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::TextureGradientInstructions']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>unsigned int TextureGradientInstructions</unmanaged>	
        /// <unmanaged-short>unsigned int TextureGradientInstructions</unmanaged-short>	
        public int TextureGradientInstructions;
        
        /// <summary>	
        /// <dd> <p>The number of floating point arithmetic instructions used by the function.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::FloatInstructionCount']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>unsigned int FloatInstructionCount</unmanaged>	
        /// <unmanaged-short>unsigned int FloatInstructionCount</unmanaged-short>	
        public int FloatInstructionCount;
        
        /// <summary>	
        /// <dd> <p>The number of signed integer arithmetic instructions used by the function.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::IntInstructionCount']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>unsigned int IntInstructionCount</unmanaged>	
        /// <unmanaged-short>unsigned int IntInstructionCount</unmanaged-short>	
        public int IntInstructionCount;
        
        /// <summary>	
        /// <dd> <p>The number of unsigned integer arithmetic instructions used by the function.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::UintInstructionCount']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>unsigned int UintInstructionCount</unmanaged>	
        /// <unmanaged-short>unsigned int UintInstructionCount</unmanaged-short>	
        public int UintInstructionCount;
        
        /// <summary>	
        /// <dd> <p>The number of static flow control instructions used by the function.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::StaticFlowControlCount']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>unsigned int StaticFlowControlCount</unmanaged>	
        /// <unmanaged-short>unsigned int StaticFlowControlCount</unmanaged-short>	
        public int StaticFlowControlCount;
        
        /// <summary>	
        /// <dd> <p>The number of dynamic flow control instructions used by the function.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::DynamicFlowControlCount']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>unsigned int DynamicFlowControlCount</unmanaged>	
        /// <unmanaged-short>unsigned int DynamicFlowControlCount</unmanaged-short>	
        public int DynamicFlowControlCount;
        
        /// <summary>	
        /// <dd> <p>The number of macro instructions used by the function.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::MacroInstructionCount']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>unsigned int MacroInstructionCount</unmanaged>	
        /// <unmanaged-short>unsigned int MacroInstructionCount</unmanaged-short>	
        public int MacroInstructionCount;
        
        /// <summary>	
        /// <dd> <p>The number of array instructions used by the function.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::ArrayInstructionCount']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>unsigned int ArrayInstructionCount</unmanaged>	
        /// <unmanaged-short>unsigned int ArrayInstructionCount</unmanaged-short>	
        public int ArrayInstructionCount;
        
        /// <summary>	
        /// <dd> <p>The number of mov instructions used by the function.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::MovInstructionCount']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>unsigned int MovInstructionCount</unmanaged>	
        /// <unmanaged-short>unsigned int MovInstructionCount</unmanaged-short>	
        public int MovInstructionCount;
        
        /// <summary>	
        /// <dd> <p>The number of movc instructions used by the function.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::MovcInstructionCount']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>unsigned int MovcInstructionCount</unmanaged>	
        /// <unmanaged-short>unsigned int MovcInstructionCount</unmanaged-short>	
        public int MovcInstructionCount;
        
        /// <summary>	
        /// <dd> <p>The number of type conversion instructions used by the function.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::ConversionInstructionCount']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>unsigned int ConversionInstructionCount</unmanaged>	
        /// <unmanaged-short>unsigned int ConversionInstructionCount</unmanaged-short>	
        public int ConversionInstructionCount;
        
        /// <summary>	
        /// <dd> <p>The number of bitwise arithmetic instructions used by the function.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::BitwiseInstructionCount']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>unsigned int BitwiseInstructionCount</unmanaged>	
        /// <unmanaged-short>unsigned int BitwiseInstructionCount</unmanaged-short>	
        public int BitwiseInstructionCount;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D.FeatureLevel"/></strong>-typed value that specifies the minimum Direct3D feature level target of the function byte code.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::MinFeatureLevel']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>D3D_FEATURE_LEVEL MinFeatureLevel</unmanaged>	
        /// <unmanaged-short>D3D_FEATURE_LEVEL MinFeatureLevel</unmanaged-short>	
        public SharpDX.Direct3D.FeatureLevel MinFeatureLevel;
        
        /// <summary>	
        /// <dd> <p>A value that contains a combination of one or more shader requirements flags; each flag specifies a requirement of the shader. A default value of 0 means there are no requirements. For a list of values, see <strong><see cref="SharpDX.D3DCompiler.ShaderReflection.GetRequiresFlags"/></strong>. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::RequiredFeatureFlags']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>unsigned longlong RequiredFeatureFlags</unmanaged>	
        /// <unmanaged-short>unsigned longlong RequiredFeatureFlags</unmanaged-short>	
        public long RequiredFeatureFlags;
        
        /// <summary>	
        /// <dd> <p>The name of the function.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::Name']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>const char* Name</unmanaged>	
        /// <unmanaged-short>char Name</unmanaged-short>	
        public string Name;
        
        /// <summary>	
        /// <dd> <p>The number of logical parameters in the function signature, not including the return value.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::FunctionParameterCount']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>int FunctionParameterCount</unmanaged>	
        /// <unmanaged-short>int FunctionParameterCount</unmanaged-short>	
        public int FunctionParameterCount;
        
        /// <summary>	
        /// <dd> <p>Indicates whether the function returns a value. <strong>TRUE</strong> indicates it returns a value; otherwise, <strong><see cref="SharpDX.Result.False"/></strong> (it is a subroutine).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::HasReturn']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>BOOL HasReturn</unmanaged>	
        /// <unmanaged-short>BOOL HasReturn</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool HasReturn;
        
        /// <summary>	
        /// <dd> <p>Indicates whether there is a Direct3D 10Level9 vertex shader blob. <strong>TRUE</strong> indicates there is a 10Level9 vertex shader blob; otherwise, <strong><see cref="SharpDX.Result.False"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::Has10Level9VertexShader']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>BOOL Has10Level9VertexShader</unmanaged>	
        /// <unmanaged-short>BOOL Has10Level9VertexShader</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool Has10Level9VertexShader;
        
        /// <summary>	
        /// <dd> <p>Indicates whether there is a Direct3D 10Level9 pixel shader blob. <strong>TRUE</strong> indicates there is a 10Level9 pixel shader blob; otherwise, <strong><see cref="SharpDX.Result.False"/></strong>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_FUNCTION_DESC::Has10Level9PixelShader']/*"/>	
        /// <msdn-id>dn280416</msdn-id>	
        /// <unmanaged>BOOL Has10Level9PixelShader</unmanaged>	
        /// <unmanaged-short>BOOL Has10Level9PixelShader</unmanaged-short>	
        public SharpDX.Mathematics.Interop.RawBool Has10Level9PixelShader;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public int Version;
            public System.IntPtr Creator;
            public int Flags;
            public int ConstantBuffers;
            public int BoundResources;
            public int InstructionCount;
            public int TempRegisterCount;
            public int TempArrayCount;
            public int DefCount;
            public int DclCount;
            public int TextureNormalInstructions;
            public int TextureLoadInstructions;
            public int TextureCompInstructions;
            public int TextureBiasInstructions;
            public int TextureGradientInstructions;
            public int FloatInstructionCount;
            public int IntInstructionCount;
            public int UintInstructionCount;
            public int StaticFlowControlCount;
            public int DynamicFlowControlCount;
            public int MacroInstructionCount;
            public int ArrayInstructionCount;
            public int MovInstructionCount;
            public int MovcInstructionCount;
            public int ConversionInstructionCount;
            public int BitwiseInstructionCount;
            public SharpDX.Direct3D.FeatureLevel MinFeatureLevel;
            public long RequiredFeatureFlags;
            public System.IntPtr Name;
            public int FunctionParameterCount;
            public SharpDX.Mathematics.Interop.RawBool HasReturn;
            public SharpDX.Mathematics.Interop.RawBool Has10Level9VertexShader;
            public SharpDX.Mathematics.Interop.RawBool Has10Level9PixelShader;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                if (this.Creator != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.Creator);		
                if (this.Name != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.Name);		
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Version = @ref.Version;
            this.Creator = ( @ref.Creator == IntPtr.Zero )?null:Marshal.PtrToStringAnsi(@ref.Creator);
            this.Flags = @ref.Flags;
            this.ConstantBuffers = @ref.ConstantBuffers;
            this.BoundResources = @ref.BoundResources;
            this.InstructionCount = @ref.InstructionCount;
            this.TempRegisterCount = @ref.TempRegisterCount;
            this.TempArrayCount = @ref.TempArrayCount;
            this.DefCount = @ref.DefCount;
            this.DclCount = @ref.DclCount;
            this.TextureNormalInstructions = @ref.TextureNormalInstructions;
            this.TextureLoadInstructions = @ref.TextureLoadInstructions;
            this.TextureCompInstructions = @ref.TextureCompInstructions;
            this.TextureBiasInstructions = @ref.TextureBiasInstructions;
            this.TextureGradientInstructions = @ref.TextureGradientInstructions;
            this.FloatInstructionCount = @ref.FloatInstructionCount;
            this.IntInstructionCount = @ref.IntInstructionCount;
            this.UintInstructionCount = @ref.UintInstructionCount;
            this.StaticFlowControlCount = @ref.StaticFlowControlCount;
            this.DynamicFlowControlCount = @ref.DynamicFlowControlCount;
            this.MacroInstructionCount = @ref.MacroInstructionCount;
            this.ArrayInstructionCount = @ref.ArrayInstructionCount;
            this.MovInstructionCount = @ref.MovInstructionCount;
            this.MovcInstructionCount = @ref.MovcInstructionCount;
            this.ConversionInstructionCount = @ref.ConversionInstructionCount;
            this.BitwiseInstructionCount = @ref.BitwiseInstructionCount;
            this.MinFeatureLevel = @ref.MinFeatureLevel;
            this.RequiredFeatureFlags = @ref.RequiredFeatureFlags;
            this.Name = ( @ref.Name == IntPtr.Zero )?null:Marshal.PtrToStringAnsi(@ref.Name);
            this.FunctionParameterCount = @ref.FunctionParameterCount;
            this.HasReturn = @ref.HasReturn;
            this.Has10Level9VertexShader = @ref.Has10Level9VertexShader;
            this.Has10Level9PixelShader = @ref.Has10Level9PixelShader;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Version = this.Version;
            @ref.Creator = ( this.Creator == null )?IntPtr.Zero : Utilities.StringToHGlobalAnsi(this.Creator);
            @ref.Flags = this.Flags;
            @ref.ConstantBuffers = this.ConstantBuffers;
            @ref.BoundResources = this.BoundResources;
            @ref.InstructionCount = this.InstructionCount;
            @ref.TempRegisterCount = this.TempRegisterCount;
            @ref.TempArrayCount = this.TempArrayCount;
            @ref.DefCount = this.DefCount;
            @ref.DclCount = this.DclCount;
            @ref.TextureNormalInstructions = this.TextureNormalInstructions;
            @ref.TextureLoadInstructions = this.TextureLoadInstructions;
            @ref.TextureCompInstructions = this.TextureCompInstructions;
            @ref.TextureBiasInstructions = this.TextureBiasInstructions;
            @ref.TextureGradientInstructions = this.TextureGradientInstructions;
            @ref.FloatInstructionCount = this.FloatInstructionCount;
            @ref.IntInstructionCount = this.IntInstructionCount;
            @ref.UintInstructionCount = this.UintInstructionCount;
            @ref.StaticFlowControlCount = this.StaticFlowControlCount;
            @ref.DynamicFlowControlCount = this.DynamicFlowControlCount;
            @ref.MacroInstructionCount = this.MacroInstructionCount;
            @ref.ArrayInstructionCount = this.ArrayInstructionCount;
            @ref.MovInstructionCount = this.MovInstructionCount;
            @ref.MovcInstructionCount = this.MovcInstructionCount;
            @ref.ConversionInstructionCount = this.ConversionInstructionCount;
            @ref.BitwiseInstructionCount = this.BitwiseInstructionCount;
            @ref.MinFeatureLevel = this.MinFeatureLevel;
            @ref.RequiredFeatureFlags = this.RequiredFeatureFlags;
            @ref.Name = ( this.Name == null )?IntPtr.Zero : Utilities.StringToHGlobalAnsi(this.Name);
            @ref.FunctionParameterCount = this.FunctionParameterCount;
            @ref.HasReturn = this.HasReturn;
            @ref.Has10Level9VertexShader = this.Has10Level9VertexShader;
            @ref.Has10Level9PixelShader = this.Has10Level9PixelShader;
		
		}
    }
    
    /// <summary>	
    /// <p>Describes how a shader resource is bound to a shader input.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Get a shader-input-signature description by calling <strong><see cref="SharpDX.D3DCompiler.ShaderReflection.GetResourceBindingDescription"/></strong> or <strong><see cref="SharpDX.D3DCompiler.ShaderReflection.GetResourceBindingDescription"/></strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_INPUT_BIND_DESC']/*"/>	
    /// <msdn-id>ff476210</msdn-id>	
    /// <unmanaged>D3D11_SHADER_INPUT_BIND_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_SHADER_INPUT_BIND_DESC</unmanaged-short>	
    public  partial struct InputBindingDescription {	
        
        /// <summary>	
        /// <dd> <p>Name of the shader resource.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_INPUT_BIND_DESC::Name']/*"/>	
        /// <msdn-id>ff476210</msdn-id>	
        /// <unmanaged>const char* Name</unmanaged>	
        /// <unmanaged-short>char Name</unmanaged-short>	
        public string Name;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.D3DCompiler.ShaderInputType"/></strong>-typed value that identifies the type of data in the resource.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_INPUT_BIND_DESC::Type']/*"/>	
        /// <msdn-id>ff476210</msdn-id>	
        /// <unmanaged>D3D_SHADER_INPUT_TYPE Type</unmanaged>	
        /// <unmanaged-short>D3D_SHADER_INPUT_TYPE Type</unmanaged-short>	
        public SharpDX.D3DCompiler.ShaderInputType Type;
        
        /// <summary>	
        /// <dd> <p>Starting bind point.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_INPUT_BIND_DESC::BindPoint']/*"/>	
        /// <msdn-id>ff476210</msdn-id>	
        /// <unmanaged>unsigned int BindPoint</unmanaged>	
        /// <unmanaged-short>unsigned int BindPoint</unmanaged-short>	
        public int BindPoint;
        
        /// <summary>	
        /// <dd> <p>Number of contiguous bind points for arrays.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_INPUT_BIND_DESC::BindCount']/*"/>	
        /// <msdn-id>ff476210</msdn-id>	
        /// <unmanaged>unsigned int BindCount</unmanaged>	
        /// <unmanaged-short>unsigned int BindCount</unmanaged-short>	
        public int BindCount;
        
        /// <summary>	
        /// <dd> <p>A combination of <strong><see cref="SharpDX.D3DCompiler.ShaderInputFlags"/></strong>-typed values for shader input-parameter options.  </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_INPUT_BIND_DESC::uFlags']/*"/>	
        /// <msdn-id>ff476210</msdn-id>	
        /// <unmanaged>D3D_SHADER_INPUT_FLAGS uFlags</unmanaged>	
        /// <unmanaged-short>D3D_SHADER_INPUT_FLAGS uFlags</unmanaged-short>	
        public SharpDX.D3DCompiler.ShaderInputFlags Flags;
        
        /// <summary>	
        /// <dd> <p>If the input is a texture, the <strong><see cref="SharpDX.D3DCompiler.ResourceReturnType"/></strong>-typed value that identifies the return type.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_INPUT_BIND_DESC::ReturnType']/*"/>	
        /// <msdn-id>ff476210</msdn-id>	
        /// <unmanaged>D3D_RESOURCE_RETURN_TYPE ReturnType</unmanaged>	
        /// <unmanaged-short>D3D_RESOURCE_RETURN_TYPE ReturnType</unmanaged-short>	
        public SharpDX.D3DCompiler.ResourceReturnType ReturnType;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D.ShaderResourceViewDimension"/></strong>-typed value that identifies the dimensions of the bound resource.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_INPUT_BIND_DESC::Dimension']/*"/>	
        /// <msdn-id>ff476210</msdn-id>	
        /// <unmanaged>D3D_SRV_DIMENSION Dimension</unmanaged>	
        /// <unmanaged-short>D3D_SRV_DIMENSION Dimension</unmanaged-short>	
        public SharpDX.Direct3D.ShaderResourceViewDimension Dimension;
        
        /// <summary>	
        /// <dd> <p>The number of samples for a multisampled texture; when a texture isn't multisampled, the value is set to -1 (0xFFFFFFFF). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_INPUT_BIND_DESC::NumSamples']/*"/>	
        /// <msdn-id>ff476210</msdn-id>	
        /// <unmanaged>unsigned int NumSamples</unmanaged>	
        /// <unmanaged-short>unsigned int NumSamples</unmanaged-short>	
        public int NumSamples;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public System.IntPtr Name;
            public SharpDX.D3DCompiler.ShaderInputType Type;
            public int BindPoint;
            public int BindCount;
            public SharpDX.D3DCompiler.ShaderInputFlags Flags;
            public SharpDX.D3DCompiler.ResourceReturnType ReturnType;
            public SharpDX.Direct3D.ShaderResourceViewDimension Dimension;
            public int NumSamples;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                if (this.Name != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.Name);		
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Name = ( @ref.Name == IntPtr.Zero )?null:Marshal.PtrToStringAnsi(@ref.Name);
            this.Type = @ref.Type;
            this.BindPoint = @ref.BindPoint;
            this.BindCount = @ref.BindCount;
            this.Flags = @ref.Flags;
            this.ReturnType = @ref.ReturnType;
            this.Dimension = @ref.Dimension;
            this.NumSamples = @ref.NumSamples;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Name = ( this.Name == null )?IntPtr.Zero : Utilities.StringToHGlobalAnsi(this.Name);
            @ref.Type = this.Type;
            @ref.BindPoint = this.BindPoint;
            @ref.BindCount = this.BindCount;
            @ref.Flags = this.Flags;
            @ref.ReturnType = this.ReturnType;
            @ref.Dimension = this.Dimension;
            @ref.NumSamples = this.NumSamples;
		
		}
    }
    
    /// <summary>	
    /// <p>Describes a library.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_LIBRARY_DESC']/*"/>	
    /// <msdn-id>dn280417</msdn-id>	
    /// <unmanaged>D3D11_LIBRARY_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_LIBRARY_DESC</unmanaged-short>	
    public  partial struct LibraryDescription {	
        
        /// <summary>	
        /// <dd> <p>The name of the originator of the library.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_LIBRARY_DESC::Creator']/*"/>	
        /// <msdn-id>dn280417</msdn-id>	
        /// <unmanaged>const char* Creator</unmanaged>	
        /// <unmanaged-short>char Creator</unmanaged-short>	
        public string Creator;
        
        /// <summary>	
        /// <dd> <p>A combination of <strong>D3DCOMPILE Constants</strong> that are combined by using a bitwise OR operation. The resulting value specifies how the compiler compiles.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_LIBRARY_DESC::Flags']/*"/>	
        /// <msdn-id>dn280417</msdn-id>	
        /// <unmanaged>unsigned int Flags</unmanaged>	
        /// <unmanaged-short>unsigned int Flags</unmanaged-short>	
        public int Flags;
        
        /// <summary>	
        /// <dd> <p>The number of functions exported from the library.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_LIBRARY_DESC::FunctionCount']/*"/>	
        /// <msdn-id>dn280417</msdn-id>	
        /// <unmanaged>unsigned int FunctionCount</unmanaged>	
        /// <unmanaged-short>unsigned int FunctionCount</unmanaged-short>	
        public int FunctionCount;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public System.IntPtr Creator;
            public int Flags;
            public int FunctionCount;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                if (this.Creator != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.Creator);		
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Creator = ( @ref.Creator == IntPtr.Zero )?null:Marshal.PtrToStringAnsi(@ref.Creator);
            this.Flags = @ref.Flags;
            this.FunctionCount = @ref.FunctionCount;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Creator = ( this.Creator == null )?IntPtr.Zero : Utilities.StringToHGlobalAnsi(this.Creator);
            @ref.Flags = this.Flags;
            @ref.FunctionCount = this.FunctionCount;
		
		}
    }
    
    /// <summary>	
    /// <p>Describes a function parameter. </p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Get a function-parameter description by calling <strong><see cref="SharpDX.D3DCompiler.FunctionParameterReflection.GetDescription"/></strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_PARAMETER_DESC']/*"/>	
    /// <msdn-id>dn280419</msdn-id>	
    /// <unmanaged>D3D11_PARAMETER_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_PARAMETER_DESC</unmanaged-short>	
    public  partial struct ParameterDescription {	
        
        /// <summary>	
        /// <dd> <p>The name of the function parameter.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_PARAMETER_DESC::Name']/*"/>	
        /// <msdn-id>dn280419</msdn-id>	
        /// <unmanaged>const char* Name</unmanaged>	
        /// <unmanaged-short>char Name</unmanaged-short>	
        public string Name;
        
        /// <summary>	
        /// <dd> <p>The HLSL semantic that is associated with this function parameter. This name includes the index, for example, SV_Target[n].</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_PARAMETER_DESC::SemanticName']/*"/>	
        /// <msdn-id>dn280419</msdn-id>	
        /// <unmanaged>const char* SemanticName</unmanaged>	
        /// <unmanaged-short>char SemanticName</unmanaged-short>	
        public string SemanticName;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.D3DCompiler.ShaderVariableType"/></strong>-typed value that identifies the variable type for the parameter.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_PARAMETER_DESC::Type']/*"/>	
        /// <msdn-id>dn280419</msdn-id>	
        /// <unmanaged>D3D_SHADER_VARIABLE_TYPE Type</unmanaged>	
        /// <unmanaged-short>D3D_SHADER_VARIABLE_TYPE Type</unmanaged-short>	
        public SharpDX.D3DCompiler.ShaderVariableType Type;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.D3DCompiler.ShaderVariableClass"/></strong>-typed value that identifies the variable class for the parameter as one of scalar, vector, matrix, object, and so on.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_PARAMETER_DESC::Class']/*"/>	
        /// <msdn-id>dn280419</msdn-id>	
        /// <unmanaged>D3D_SHADER_VARIABLE_CLASS Class</unmanaged>	
        /// <unmanaged-short>D3D_SHADER_VARIABLE_CLASS Class</unmanaged-short>	
        public SharpDX.D3DCompiler.ShaderVariableClass Class;
        
        /// <summary>	
        /// <dd> <p>The number of rows for a matrix parameter.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_PARAMETER_DESC::Rows']/*"/>	
        /// <msdn-id>dn280419</msdn-id>	
        /// <unmanaged>unsigned int Rows</unmanaged>	
        /// <unmanaged-short>unsigned int Rows</unmanaged-short>	
        public int Rows;
        
        /// <summary>	
        /// <dd> <p>The number of columns for a matrix parameter.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_PARAMETER_DESC::Columns']/*"/>	
        /// <msdn-id>dn280419</msdn-id>	
        /// <unmanaged>unsigned int Columns</unmanaged>	
        /// <unmanaged-short>unsigned int Columns</unmanaged-short>	
        public int Columns;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D.InterpolationMode"/></strong>-typed value that identifies the interpolation mode for the parameter.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_PARAMETER_DESC::InterpolationMode']/*"/>	
        /// <msdn-id>dn280419</msdn-id>	
        /// <unmanaged>D3D_INTERPOLATION_MODE InterpolationMode</unmanaged>	
        /// <unmanaged-short>D3D_INTERPOLATION_MODE InterpolationMode</unmanaged-short>	
        public SharpDX.Direct3D.InterpolationMode InterpolationMode;
        
        /// <summary>	
        /// <dd> <p>A combination of <strong><see cref="SharpDX.D3DCompiler.ParameterFlags"/></strong>-typed values that are combined by using a bitwise OR operation. The resulting value specifies semantic flags for the parameter.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_PARAMETER_DESC::Flags']/*"/>	
        /// <msdn-id>dn280419</msdn-id>	
        /// <unmanaged>D3D_PARAMETER_FLAGS Flags</unmanaged>	
        /// <unmanaged-short>D3D_PARAMETER_FLAGS Flags</unmanaged-short>	
        public SharpDX.D3DCompiler.ParameterFlags Flags;
        
        /// <summary>	
        /// <dd> <p>The first input register for this parameter.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_PARAMETER_DESC::FirstInRegister']/*"/>	
        /// <msdn-id>dn280419</msdn-id>	
        /// <unmanaged>unsigned int FirstInRegister</unmanaged>	
        /// <unmanaged-short>unsigned int FirstInRegister</unmanaged-short>	
        public int FirstInRegister;
        
        /// <summary>	
        /// <dd> <p>The first input register component for this parameter.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_PARAMETER_DESC::FirstInComponent']/*"/>	
        /// <msdn-id>dn280419</msdn-id>	
        /// <unmanaged>unsigned int FirstInComponent</unmanaged>	
        /// <unmanaged-short>unsigned int FirstInComponent</unmanaged-short>	
        public int FirstInComponent;
        
        /// <summary>	
        /// <dd> <p>The first output register for this parameter.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_PARAMETER_DESC::FirstOutRegister']/*"/>	
        /// <msdn-id>dn280419</msdn-id>	
        /// <unmanaged>unsigned int FirstOutRegister</unmanaged>	
        /// <unmanaged-short>unsigned int FirstOutRegister</unmanaged-short>	
        public int FirstOutRegister;
        
        /// <summary>	
        /// <dd> <p>The first output register component for this parameter.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_PARAMETER_DESC::FirstOutComponent']/*"/>	
        /// <msdn-id>dn280419</msdn-id>	
        /// <unmanaged>unsigned int FirstOutComponent</unmanaged>	
        /// <unmanaged-short>unsigned int FirstOutComponent</unmanaged-short>	
        public int FirstOutComponent;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public System.IntPtr Name;
            public System.IntPtr SemanticName;
            public SharpDX.D3DCompiler.ShaderVariableType Type;
            public SharpDX.D3DCompiler.ShaderVariableClass Class;
            public int Rows;
            public int Columns;
            public SharpDX.Direct3D.InterpolationMode InterpolationMode;
            public SharpDX.D3DCompiler.ParameterFlags Flags;
            public int FirstInRegister;
            public int FirstInComponent;
            public int FirstOutRegister;
            public int FirstOutComponent;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                if (this.Name != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.Name);		
                if (this.SemanticName != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.SemanticName);		
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Name = ( @ref.Name == IntPtr.Zero )?null:Marshal.PtrToStringAnsi(@ref.Name);
            this.SemanticName = ( @ref.SemanticName == IntPtr.Zero )?null:Marshal.PtrToStringAnsi(@ref.SemanticName);
            this.Type = @ref.Type;
            this.Class = @ref.Class;
            this.Rows = @ref.Rows;
            this.Columns = @ref.Columns;
            this.InterpolationMode = @ref.InterpolationMode;
            this.Flags = @ref.Flags;
            this.FirstInRegister = @ref.FirstInRegister;
            this.FirstInComponent = @ref.FirstInComponent;
            this.FirstOutRegister = @ref.FirstOutRegister;
            this.FirstOutComponent = @ref.FirstOutComponent;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Name = ( this.Name == null )?IntPtr.Zero : Utilities.StringToHGlobalAnsi(this.Name);
            @ref.SemanticName = ( this.SemanticName == null )?IntPtr.Zero : Utilities.StringToHGlobalAnsi(this.SemanticName);
            @ref.Type = this.Type;
            @ref.Class = this.Class;
            @ref.Rows = this.Rows;
            @ref.Columns = this.Columns;
            @ref.InterpolationMode = this.InterpolationMode;
            @ref.Flags = this.Flags;
            @ref.FirstInRegister = this.FirstInRegister;
            @ref.FirstInComponent = this.FirstInComponent;
            @ref.FirstOutRegister = this.FirstOutRegister;
            @ref.FirstOutComponent = this.FirstOutComponent;
		
		}
    }
    
    /// <summary>	
    /// <p>Describes shader data.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>An array of <strong><see cref="SharpDX.D3DCompiler.ShaderData"/></strong> structures is passed to <strong><see cref="SharpDX.D3DCompiler.D3D.CompressShaders"/></strong> to compress the shader data into a more compact form.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D_SHADER_DATA']/*"/>	
    /// <msdn-id>ff728721</msdn-id>	
    /// <unmanaged>D3D_SHADER_DATA</unmanaged>	
    /// <unmanaged-short>D3D_SHADER_DATA</unmanaged-short>	
    [StructLayout(LayoutKind.Sequential)]
    internal  partial struct ShaderData {	
        
        /// <summary>	
        /// <dd> <p>A reference to shader data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D_SHADER_DATA::pBytecode']/*"/>	
        /// <msdn-id>ff728721</msdn-id>	
        /// <unmanaged>const void* pBytecode</unmanaged>	
        /// <unmanaged-short>void pBytecode</unmanaged-short>	
        public System.IntPtr BytecodePtr;
        
        /// <summary>	
        /// <dd> <p>Length of shader data that <strong>pBytecode</strong> points to.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D_SHADER_DATA::BytecodeLength']/*"/>	
        /// <msdn-id>ff728721</msdn-id>	
        /// <unmanaged>SIZE_T BytecodeLength</unmanaged>	
        /// <unmanaged-short>SIZE_T BytecodeLength</unmanaged-short>	
        public SharpDX.PointerSize BytecodeLength;
    }
    
    /// <summary>	
    /// <p>Describes a shader.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>A shader is written in HLSL and compiled into an intermediate language by the HLSL compiler. The shader description returns information about the compiled shader. Get a shader description by calling <strong><see cref="SharpDX.D3DCompiler.ShaderReflection.GetDescription"/></strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC']/*"/>	
    /// <msdn-id>ff476209</msdn-id>	
    /// <unmanaged>D3D11_SHADER_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_SHADER_DESC</unmanaged-short>	
    public  partial struct ShaderDescription {	
        
        /// <summary>	
        /// <dd> <p>Shader version.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::Version']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>unsigned int Version</unmanaged>	
        /// <unmanaged-short>unsigned int Version</unmanaged-short>	
        public int Version;
        
        /// <summary>	
        /// <dd> <p>The name of the originator of the shader.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::Creator']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>const char* Creator</unmanaged>	
        /// <unmanaged-short>char Creator</unmanaged-short>	
        public string Creator;
        
        /// <summary>	
        /// <dd> <p>Shader compilation/parse flags.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::Flags']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>D3DCOMPILE_SHADER_FLAGS Flags</unmanaged>	
        /// <unmanaged-short>D3DCOMPILE_SHADER_FLAGS Flags</unmanaged-short>	
        public SharpDX.D3DCompiler.ShaderFlags Flags;
        
        /// <summary>	
        /// <dd> <p>The number of shader-constant buffers.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::ConstantBuffers']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>unsigned int ConstantBuffers</unmanaged>	
        /// <unmanaged-short>unsigned int ConstantBuffers</unmanaged-short>	
        public int ConstantBuffers;
        
        /// <summary>	
        /// <dd> <p>The number of resource (textures and buffers) bound to a shader.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::BoundResources']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>unsigned int BoundResources</unmanaged>	
        /// <unmanaged-short>unsigned int BoundResources</unmanaged-short>	
        public int BoundResources;
        
        /// <summary>	
        /// <dd> <p>The number of parameters in the input signature.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::InputParameters']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>unsigned int InputParameters</unmanaged>	
        /// <unmanaged-short>unsigned int InputParameters</unmanaged-short>	
        public int InputParameters;
        
        /// <summary>	
        /// <dd> <p>The number of parameters in the output signature.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::OutputParameters']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>unsigned int OutputParameters</unmanaged>	
        /// <unmanaged-short>unsigned int OutputParameters</unmanaged-short>	
        public int OutputParameters;
        
        /// <summary>	
        /// <dd> <p>The number of intermediate-language instructions in the compiled shader.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::InstructionCount']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>unsigned int InstructionCount</unmanaged>	
        /// <unmanaged-short>unsigned int InstructionCount</unmanaged-short>	
        public int InstructionCount;
        
        /// <summary>	
        /// <dd> <p>The number of temporary registers in the compiled shader.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::TempRegisterCount']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>unsigned int TempRegisterCount</unmanaged>	
        /// <unmanaged-short>unsigned int TempRegisterCount</unmanaged-short>	
        public int TempRegisterCount;
        
        /// <summary>	
        /// <dd> <p>Number of temporary arrays used.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::TempArrayCount']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>unsigned int TempArrayCount</unmanaged>	
        /// <unmanaged-short>unsigned int TempArrayCount</unmanaged-short>	
        public int TempArrayCount;
        
        /// <summary>	
        /// <dd> <p>Number of constant defines.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::DefCount']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>unsigned int DefCount</unmanaged>	
        /// <unmanaged-short>unsigned int DefCount</unmanaged-short>	
        public int DefineCount;
        
        /// <summary>	
        /// <dd> <p>Number of declarations (input + output).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::DclCount']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>unsigned int DclCount</unmanaged>	
        /// <unmanaged-short>unsigned int DclCount</unmanaged-short>	
        public int DeclarationCount;
        
        /// <summary>	
        /// <dd> <p>Number of non-categorized texture instructions.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::TextureNormalInstructions']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>unsigned int TextureNormalInstructions</unmanaged>	
        /// <unmanaged-short>unsigned int TextureNormalInstructions</unmanaged-short>	
        public int TextureNormalInstructions;
        
        /// <summary>	
        /// <dd> <p>Number of texture load instructions</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::TextureLoadInstructions']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>unsigned int TextureLoadInstructions</unmanaged>	
        /// <unmanaged-short>unsigned int TextureLoadInstructions</unmanaged-short>	
        public int TextureLoadInstructions;
        
        /// <summary>	
        /// <dd> <p>Number of texture comparison instructions</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::TextureCompInstructions']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>unsigned int TextureCompInstructions</unmanaged>	
        /// <unmanaged-short>unsigned int TextureCompInstructions</unmanaged-short>	
        public int TextureCompInstructions;
        
        /// <summary>	
        /// <dd> <p>Number of texture bias instructions</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::TextureBiasInstructions']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>unsigned int TextureBiasInstructions</unmanaged>	
        /// <unmanaged-short>unsigned int TextureBiasInstructions</unmanaged-short>	
        public int TextureBiasInstructions;
        
        /// <summary>	
        /// <dd> <p>Number of texture gradient instructions.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::TextureGradientInstructions']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>unsigned int TextureGradientInstructions</unmanaged>	
        /// <unmanaged-short>unsigned int TextureGradientInstructions</unmanaged-short>	
        public int TextureGradientInstructions;
        
        /// <summary>	
        /// <dd> <p>Number of floating point arithmetic instructions used.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::FloatInstructionCount']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>unsigned int FloatInstructionCount</unmanaged>	
        /// <unmanaged-short>unsigned int FloatInstructionCount</unmanaged-short>	
        public int FloatInstructionCount;
        
        /// <summary>	
        /// <dd> <p>Number of signed integer arithmetic instructions used.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::IntInstructionCount']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>unsigned int IntInstructionCount</unmanaged>	
        /// <unmanaged-short>unsigned int IntInstructionCount</unmanaged-short>	
        public int IntInstructionCount;
        
        /// <summary>	
        /// <dd> <p>Number of unsigned integer arithmetic instructions used.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::UintInstructionCount']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>unsigned int UintInstructionCount</unmanaged>	
        /// <unmanaged-short>unsigned int UintInstructionCount</unmanaged-short>	
        public int UintInstructionCount;
        
        /// <summary>	
        /// <dd> <p>Number of static flow control instructions used.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::StaticFlowControlCount']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>unsigned int StaticFlowControlCount</unmanaged>	
        /// <unmanaged-short>unsigned int StaticFlowControlCount</unmanaged-short>	
        public int StaticFlowControlCount;
        
        /// <summary>	
        /// <dd> <p>Number of dynamic flow control instructions used.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::DynamicFlowControlCount']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>unsigned int DynamicFlowControlCount</unmanaged>	
        /// <unmanaged-short>unsigned int DynamicFlowControlCount</unmanaged-short>	
        public int DynamicFlowControlCount;
        
        /// <summary>	
        /// <dd> <p>Number of macro instructions used.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::MacroInstructionCount']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>unsigned int MacroInstructionCount</unmanaged>	
        /// <unmanaged-short>unsigned int MacroInstructionCount</unmanaged-short>	
        public int MacroInstructionCount;
        
        /// <summary>	
        /// <dd> <p>Number of array instructions used.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::ArrayInstructionCount']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>unsigned int ArrayInstructionCount</unmanaged>	
        /// <unmanaged-short>unsigned int ArrayInstructionCount</unmanaged-short>	
        public int ArrayInstructionCount;
        
        /// <summary>	
        /// <dd> <p>Number of cut instructions used.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::CutInstructionCount']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>unsigned int CutInstructionCount</unmanaged>	
        /// <unmanaged-short>unsigned int CutInstructionCount</unmanaged-short>	
        public int CutInstructionCount;
        
        /// <summary>	
        /// <dd> <p>Number of emit instructions used.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::EmitInstructionCount']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>unsigned int EmitInstructionCount</unmanaged>	
        /// <unmanaged-short>unsigned int EmitInstructionCount</unmanaged-short>	
        public int EmitInstructionCount;
        
        /// <summary>	
        /// <dd> <p>The <strong><see cref="SharpDX.Direct3D.PrimitiveTopology"/></strong>-typed value that represents the geometry shader output topology.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::GSOutputTopology']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>D3D_PRIMITIVE_TOPOLOGY GSOutputTopology</unmanaged>	
        /// <unmanaged-short>D3D_PRIMITIVE_TOPOLOGY GSOutputTopology</unmanaged-short>	
        public SharpDX.Direct3D.PrimitiveTopology GeometryShaderOutputTopology;
        
        /// <summary>	
        /// <dd> <p>Geometry shader maximum output vertex count.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::GSMaxOutputVertexCount']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>unsigned int GSMaxOutputVertexCount</unmanaged>	
        /// <unmanaged-short>unsigned int GSMaxOutputVertexCount</unmanaged-short>	
        public int GeometryShaderMaxOutputVertexCount;
        
        /// <summary>	
        /// <dd> <p>The <strong><see cref="SharpDX.D3DCompiler.InputPrimitive"/></strong>-typed value that represents the input primitive for a  geometry shader or hull shader.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::InputPrimitive']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>D3D_PRIMITIVE InputPrimitive</unmanaged>	
        /// <unmanaged-short>D3D_PRIMITIVE InputPrimitive</unmanaged-short>	
        public SharpDX.D3DCompiler.InputPrimitive InputPrimitive;
        
        /// <summary>	
        /// <dd> <p>Number of parameters in the patch-constant signature.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::PatchConstantParameters']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>unsigned int PatchConstantParameters</unmanaged>	
        /// <unmanaged-short>unsigned int PatchConstantParameters</unmanaged-short>	
        public int PatchConstantParameters;
        
        /// <summary>	
        /// <dd> <p>Number of geometry shader instances.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::cGSInstanceCount']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>unsigned int cGSInstanceCount</unmanaged>	
        /// <unmanaged-short>unsigned int cGSInstanceCount</unmanaged-short>	
        public int GeometryShaderInstanceCount;
        
        /// <summary>	
        /// <dd> <p>Number of control points in the hull shader and domain shader.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::cControlPoints']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>unsigned int cControlPoints</unmanaged>	
        /// <unmanaged-short>unsigned int cControlPoints</unmanaged-short>	
        public int ControlPoints;
        
        /// <summary>	
        /// <dd> <p>The <strong><see cref="SharpDX.D3DCompiler.TessellatorOutputPrimitive"/></strong>-typed value that represents the tessellator output-primitive type.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::HSOutputPrimitive']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>D3D_TESSELLATOR_OUTPUT_PRIMITIVE HSOutputPrimitive</unmanaged>	
        /// <unmanaged-short>D3D_TESSELLATOR_OUTPUT_PRIMITIVE HSOutputPrimitive</unmanaged-short>	
        public SharpDX.D3DCompiler.TessellatorOutputPrimitive HullShaderOutputPrimitive;
        
        /// <summary>	
        /// <dd> <p>The <strong><see cref="SharpDX.D3DCompiler.TessellatorPartitioning"/></strong>-typed value that represents the tessellator partitioning mode.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::HSPartitioning']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>D3D_TESSELLATOR_PARTITIONING HSPartitioning</unmanaged>	
        /// <unmanaged-short>D3D_TESSELLATOR_PARTITIONING HSPartitioning</unmanaged-short>	
        public SharpDX.D3DCompiler.TessellatorPartitioning HullShaderPartitioning;
        
        /// <summary>	
        /// <dd> <p>The <strong><see cref="SharpDX.D3DCompiler.TessellatorDomain"/></strong>-typed value that represents the tessellator domain.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::TessellatorDomain']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>D3D_TESSELLATOR_DOMAIN TessellatorDomain</unmanaged>	
        /// <unmanaged-short>D3D_TESSELLATOR_DOMAIN TessellatorDomain</unmanaged-short>	
        public SharpDX.D3DCompiler.TessellatorDomain TessellatorDomain;
        
        /// <summary>	
        /// <dd> <p>Number of barrier instructions in a compute shader.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::cBarrierInstructions']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>unsigned int cBarrierInstructions</unmanaged>	
        /// <unmanaged-short>unsigned int cBarrierInstructions</unmanaged-short>	
        public int BarrierInstructions;
        
        /// <summary>	
        /// <dd> <p>Number of interlocked instructions in a compute shader.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::cInterlockedInstructions']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>unsigned int cInterlockedInstructions</unmanaged>	
        /// <unmanaged-short>unsigned int cInterlockedInstructions</unmanaged-short>	
        public int InterlockedInstructions;
        
        /// <summary>	
        /// <dd> <p>Number of texture writes in a compute shader.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_DESC::cTextureStoreInstructions']/*"/>	
        /// <msdn-id>ff476209</msdn-id>	
        /// <unmanaged>unsigned int cTextureStoreInstructions</unmanaged>	
        /// <unmanaged-short>unsigned int cTextureStoreInstructions</unmanaged-short>	
        public int TextureStoreInstructions;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public int Version;
            public System.IntPtr Creator;
            public SharpDX.D3DCompiler.ShaderFlags Flags;
            public int ConstantBuffers;
            public int BoundResources;
            public int InputParameters;
            public int OutputParameters;
            public int InstructionCount;
            public int TempRegisterCount;
            public int TempArrayCount;
            public int DefineCount;
            public int DeclarationCount;
            public int TextureNormalInstructions;
            public int TextureLoadInstructions;
            public int TextureCompInstructions;
            public int TextureBiasInstructions;
            public int TextureGradientInstructions;
            public int FloatInstructionCount;
            public int IntInstructionCount;
            public int UintInstructionCount;
            public int StaticFlowControlCount;
            public int DynamicFlowControlCount;
            public int MacroInstructionCount;
            public int ArrayInstructionCount;
            public int CutInstructionCount;
            public int EmitInstructionCount;
            public SharpDX.Direct3D.PrimitiveTopology GeometryShaderOutputTopology;
            public int GeometryShaderMaxOutputVertexCount;
            public SharpDX.D3DCompiler.InputPrimitive InputPrimitive;
            public int PatchConstantParameters;
            public int GeometryShaderInstanceCount;
            public int ControlPoints;
            public SharpDX.D3DCompiler.TessellatorOutputPrimitive HullShaderOutputPrimitive;
            public SharpDX.D3DCompiler.TessellatorPartitioning HullShaderPartitioning;
            public SharpDX.D3DCompiler.TessellatorDomain TessellatorDomain;
            public int BarrierInstructions;
            public int InterlockedInstructions;
            public int TextureStoreInstructions;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                if (this.Creator != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.Creator);		
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Version = @ref.Version;
            this.Creator = ( @ref.Creator == IntPtr.Zero )?null:Marshal.PtrToStringAnsi(@ref.Creator);
            this.Flags = @ref.Flags;
            this.ConstantBuffers = @ref.ConstantBuffers;
            this.BoundResources = @ref.BoundResources;
            this.InputParameters = @ref.InputParameters;
            this.OutputParameters = @ref.OutputParameters;
            this.InstructionCount = @ref.InstructionCount;
            this.TempRegisterCount = @ref.TempRegisterCount;
            this.TempArrayCount = @ref.TempArrayCount;
            this.DefineCount = @ref.DefineCount;
            this.DeclarationCount = @ref.DeclarationCount;
            this.TextureNormalInstructions = @ref.TextureNormalInstructions;
            this.TextureLoadInstructions = @ref.TextureLoadInstructions;
            this.TextureCompInstructions = @ref.TextureCompInstructions;
            this.TextureBiasInstructions = @ref.TextureBiasInstructions;
            this.TextureGradientInstructions = @ref.TextureGradientInstructions;
            this.FloatInstructionCount = @ref.FloatInstructionCount;
            this.IntInstructionCount = @ref.IntInstructionCount;
            this.UintInstructionCount = @ref.UintInstructionCount;
            this.StaticFlowControlCount = @ref.StaticFlowControlCount;
            this.DynamicFlowControlCount = @ref.DynamicFlowControlCount;
            this.MacroInstructionCount = @ref.MacroInstructionCount;
            this.ArrayInstructionCount = @ref.ArrayInstructionCount;
            this.CutInstructionCount = @ref.CutInstructionCount;
            this.EmitInstructionCount = @ref.EmitInstructionCount;
            this.GeometryShaderOutputTopology = @ref.GeometryShaderOutputTopology;
            this.GeometryShaderMaxOutputVertexCount = @ref.GeometryShaderMaxOutputVertexCount;
            this.InputPrimitive = @ref.InputPrimitive;
            this.PatchConstantParameters = @ref.PatchConstantParameters;
            this.GeometryShaderInstanceCount = @ref.GeometryShaderInstanceCount;
            this.ControlPoints = @ref.ControlPoints;
            this.HullShaderOutputPrimitive = @ref.HullShaderOutputPrimitive;
            this.HullShaderPartitioning = @ref.HullShaderPartitioning;
            this.TessellatorDomain = @ref.TessellatorDomain;
            this.BarrierInstructions = @ref.BarrierInstructions;
            this.InterlockedInstructions = @ref.InterlockedInstructions;
            this.TextureStoreInstructions = @ref.TextureStoreInstructions;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Version = this.Version;
            @ref.Creator = ( this.Creator == null )?IntPtr.Zero : Utilities.StringToHGlobalAnsi(this.Creator);
            @ref.Flags = this.Flags;
            @ref.ConstantBuffers = this.ConstantBuffers;
            @ref.BoundResources = this.BoundResources;
            @ref.InputParameters = this.InputParameters;
            @ref.OutputParameters = this.OutputParameters;
            @ref.InstructionCount = this.InstructionCount;
            @ref.TempRegisterCount = this.TempRegisterCount;
            @ref.TempArrayCount = this.TempArrayCount;
            @ref.DefineCount = this.DefineCount;
            @ref.DeclarationCount = this.DeclarationCount;
            @ref.TextureNormalInstructions = this.TextureNormalInstructions;
            @ref.TextureLoadInstructions = this.TextureLoadInstructions;
            @ref.TextureCompInstructions = this.TextureCompInstructions;
            @ref.TextureBiasInstructions = this.TextureBiasInstructions;
            @ref.TextureGradientInstructions = this.TextureGradientInstructions;
            @ref.FloatInstructionCount = this.FloatInstructionCount;
            @ref.IntInstructionCount = this.IntInstructionCount;
            @ref.UintInstructionCount = this.UintInstructionCount;
            @ref.StaticFlowControlCount = this.StaticFlowControlCount;
            @ref.DynamicFlowControlCount = this.DynamicFlowControlCount;
            @ref.MacroInstructionCount = this.MacroInstructionCount;
            @ref.ArrayInstructionCount = this.ArrayInstructionCount;
            @ref.CutInstructionCount = this.CutInstructionCount;
            @ref.EmitInstructionCount = this.EmitInstructionCount;
            @ref.GeometryShaderOutputTopology = this.GeometryShaderOutputTopology;
            @ref.GeometryShaderMaxOutputVertexCount = this.GeometryShaderMaxOutputVertexCount;
            @ref.InputPrimitive = this.InputPrimitive;
            @ref.PatchConstantParameters = this.PatchConstantParameters;
            @ref.GeometryShaderInstanceCount = this.GeometryShaderInstanceCount;
            @ref.ControlPoints = this.ControlPoints;
            @ref.HullShaderOutputPrimitive = this.HullShaderOutputPrimitive;
            @ref.HullShaderPartitioning = this.HullShaderPartitioning;
            @ref.TessellatorDomain = this.TessellatorDomain;
            @ref.BarrierInstructions = this.BarrierInstructions;
            @ref.InterlockedInstructions = this.InterlockedInstructions;
            @ref.TextureStoreInstructions = this.TextureStoreInstructions;
		
		}
    }
    
    /// <summary>	
    /// <p>Describes a shader signature.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>A shader can take n inputs and can produce m outputs. The order of the input (or output) parameters, their associated types, and any attached semantics make up the shader signature. Each shader has an input and an output signature.</p><p>When compiling a shader or an effect, some API calls validate shader signatures  That is, they compare the output signature of one shader (like a vertex shader) with the input signature of another shader (like a pixel shader). This ensures that a shader outputs data that is compatible with a downstream shader that is consuming that data. Compatible means that a shader signature is a exact-match subset of the preceding shader stage. Exact match means parameter types and semantics must exactly match. Subset means that a parameter that is not required by a downstream stage, does not need to include that parameter in its shader signature.</p><p>Get a shader-signature from a shader or an effect by calling APIs such as <strong><see cref="SharpDX.D3DCompiler.ShaderReflection.GetInputParameterDescription"/></strong>. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SIGNATURE_PARAMETER_DESC']/*"/>	
    /// <msdn-id>ff476215</msdn-id>	
    /// <unmanaged>D3D11_SIGNATURE_PARAMETER_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_SIGNATURE_PARAMETER_DESC</unmanaged-short>	
    public  partial struct ShaderParameterDescription {	
        
        /// <summary>	
        /// <dd> <p>A per-parameter string that identifies how the data will be used. For more info, see Semantics. </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SIGNATURE_PARAMETER_DESC::SemanticName']/*"/>	
        /// <msdn-id>ff476215</msdn-id>	
        /// <unmanaged>const char* SemanticName</unmanaged>	
        /// <unmanaged-short>char SemanticName</unmanaged-short>	
        public string SemanticName;
        
        /// <summary>	
        /// <dd> <p>Semantic index that modifies the semantic. Used to differentiate different parameters that use the same semantic.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SIGNATURE_PARAMETER_DESC::SemanticIndex']/*"/>	
        /// <msdn-id>ff476215</msdn-id>	
        /// <unmanaged>unsigned int SemanticIndex</unmanaged>	
        /// <unmanaged-short>unsigned int SemanticIndex</unmanaged-short>	
        public int SemanticIndex;
        
        /// <summary>	
        /// <dd> <p>The register that will contain this variable's data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SIGNATURE_PARAMETER_DESC::Register']/*"/>	
        /// <msdn-id>ff476215</msdn-id>	
        /// <unmanaged>unsigned int Register</unmanaged>	
        /// <unmanaged-short>unsigned int Register</unmanaged-short>	
        public int Register;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.D3DCompiler.SystemValueType"/></strong>-typed value that identifies a predefined string that determines the functionality of certain pipeline stages.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SIGNATURE_PARAMETER_DESC::SystemValueType']/*"/>	
        /// <msdn-id>ff476215</msdn-id>	
        /// <unmanaged>D3D_NAME SystemValueType</unmanaged>	
        /// <unmanaged-short>D3D_NAME SystemValueType</unmanaged-short>	
        public SharpDX.D3DCompiler.SystemValueType SystemValueType;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.D3DCompiler.RegisterComponentType"/></strong>-typed value that identifies the per-component-data type that is stored in a register.  Each register can store up to four-components of data.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SIGNATURE_PARAMETER_DESC::ComponentType']/*"/>	
        /// <msdn-id>ff476215</msdn-id>	
        /// <unmanaged>D3D_REGISTER_COMPONENT_TYPE ComponentType</unmanaged>	
        /// <unmanaged-short>D3D_REGISTER_COMPONENT_TYPE ComponentType</unmanaged-short>	
        public SharpDX.D3DCompiler.RegisterComponentType ComponentType;
        
        /// <summary>	
        /// <dd> <p>Mask which indicates which components of a register are used.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SIGNATURE_PARAMETER_DESC::Mask']/*"/>	
        /// <msdn-id>ff476215</msdn-id>	
        /// <unmanaged>D3D11_REGISTER_COMPONENT_MASK_FLAG Mask</unmanaged>	
        /// <unmanaged-short>D3D11_REGISTER_COMPONENT_MASK_FLAG Mask</unmanaged-short>	
        public SharpDX.D3DCompiler.RegisterComponentMaskFlags UsageMask;
        
        /// <summary>	
        /// <dd> <p>Mask which indicates whether a given component is never written (if the signature is an output signature) or always read (if the signature is an input signature). </p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SIGNATURE_PARAMETER_DESC::ReadWriteMask']/*"/>	
        /// <msdn-id>ff476215</msdn-id>	
        /// <unmanaged>D3D11_REGISTER_COMPONENT_MASK_FLAG ReadWriteMask</unmanaged>	
        /// <unmanaged-short>D3D11_REGISTER_COMPONENT_MASK_FLAG ReadWriteMask</unmanaged-short>	
        public SharpDX.D3DCompiler.RegisterComponentMaskFlags ReadWriteMask;
        
        /// <summary>	
        /// <dd> <p>Indicates which stream the geometry shader is using for the signature parameter.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SIGNATURE_PARAMETER_DESC::Stream']/*"/>	
        /// <msdn-id>ff476215</msdn-id>	
        /// <unmanaged>unsigned int Stream</unmanaged>	
        /// <unmanaged-short>unsigned int Stream</unmanaged-short>	
        public int Stream;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.Direct3D.MinimumPrecision"/></strong>-typed value that indicates the minimum desired interpolation precision. For more info, see Using HLSL minimum precision.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SIGNATURE_PARAMETER_DESC::MinPrecision']/*"/>	
        /// <msdn-id>ff476215</msdn-id>	
        /// <unmanaged>D3D_MIN_PRECISION MinPrecision</unmanaged>	
        /// <unmanaged-short>D3D_MIN_PRECISION MinPrecision</unmanaged-short>	
        public SharpDX.Direct3D.MinimumPrecision MinPrecision;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public System.IntPtr SemanticName;
            public int SemanticIndex;
            public int Register;
            public SharpDX.D3DCompiler.SystemValueType SystemValueType;
            public SharpDX.D3DCompiler.RegisterComponentType ComponentType;
            public SharpDX.D3DCompiler.RegisterComponentMaskFlags UsageMask;
            public SharpDX.D3DCompiler.RegisterComponentMaskFlags ReadWriteMask;
            public int Stream;
            public SharpDX.Direct3D.MinimumPrecision MinPrecision;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                if (this.SemanticName != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.SemanticName);		
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.SemanticName = ( @ref.SemanticName == IntPtr.Zero )?null:Marshal.PtrToStringAnsi(@ref.SemanticName);
            this.SemanticIndex = @ref.SemanticIndex;
            this.Register = @ref.Register;
            this.SystemValueType = @ref.SystemValueType;
            this.ComponentType = @ref.ComponentType;
            this.UsageMask = @ref.UsageMask;
            this.ReadWriteMask = @ref.ReadWriteMask;
            this.Stream = @ref.Stream;
            this.MinPrecision = @ref.MinPrecision;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.SemanticName = ( this.SemanticName == null )?IntPtr.Zero : Utilities.StringToHGlobalAnsi(this.SemanticName);
            @ref.SemanticIndex = this.SemanticIndex;
            @ref.Register = this.Register;
            @ref.SystemValueType = this.SystemValueType;
            @ref.ComponentType = this.ComponentType;
            @ref.UsageMask = this.UsageMask;
            @ref.ReadWriteMask = this.ReadWriteMask;
            @ref.Stream = this.Stream;
            @ref.MinPrecision = this.MinPrecision;
		
		}
    }
    
    /// <summary>	
    /// <p>Describes a shader-variable type.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Get a shader-variable-type description by calling <strong><see cref="SharpDX.D3DCompiler.ShaderReflectionType.GetDescription"/></strong>.</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_TYPE_DESC']/*"/>	
    /// <msdn-id>ff476212</msdn-id>	
    /// <unmanaged>D3D11_SHADER_TYPE_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_SHADER_TYPE_DESC</unmanaged-short>	
    public  partial struct ShaderTypeDescription {	
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.D3DCompiler.ShaderVariableClass"/></strong>-typed value that identifies the variable class as one of scalar, vector, matrix, object, and so on.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_TYPE_DESC::Class']/*"/>	
        /// <msdn-id>ff476212</msdn-id>	
        /// <unmanaged>D3D_SHADER_VARIABLE_CLASS Class</unmanaged>	
        /// <unmanaged-short>D3D_SHADER_VARIABLE_CLASS Class</unmanaged-short>	
        public SharpDX.D3DCompiler.ShaderVariableClass Class;
        
        /// <summary>	
        /// <dd> <p>A <strong><see cref="SharpDX.D3DCompiler.ShaderVariableType"/></strong>-typed value that identifies the variable type.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_TYPE_DESC::Type']/*"/>	
        /// <msdn-id>ff476212</msdn-id>	
        /// <unmanaged>D3D_SHADER_VARIABLE_TYPE Type</unmanaged>	
        /// <unmanaged-short>D3D_SHADER_VARIABLE_TYPE Type</unmanaged-short>	
        public SharpDX.D3DCompiler.ShaderVariableType Type;
        
        /// <summary>	
        /// <dd> <p>Number of rows in a matrix. Otherwise a numeric type returns 1, any other type returns 0.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_TYPE_DESC::Rows']/*"/>	
        /// <msdn-id>ff476212</msdn-id>	
        /// <unmanaged>unsigned int Rows</unmanaged>	
        /// <unmanaged-short>unsigned int Rows</unmanaged-short>	
        public int RowCount;
        
        /// <summary>	
        /// <dd> <p>Number of columns in a matrix. Otherwise a numeric type returns 1, any other type returns 0.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_TYPE_DESC::Columns']/*"/>	
        /// <msdn-id>ff476212</msdn-id>	
        /// <unmanaged>unsigned int Columns</unmanaged>	
        /// <unmanaged-short>unsigned int Columns</unmanaged-short>	
        public int ColumnCount;
        
        /// <summary>	
        /// <dd> <p>Number of elements in an array; otherwise 0.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_TYPE_DESC::Elements']/*"/>	
        /// <msdn-id>ff476212</msdn-id>	
        /// <unmanaged>unsigned int Elements</unmanaged>	
        /// <unmanaged-short>unsigned int Elements</unmanaged-short>	
        public int ElementCount;
        
        /// <summary>	
        /// <dd> <p>Number of members in the structure; otherwise 0.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_TYPE_DESC::Members']/*"/>	
        /// <msdn-id>ff476212</msdn-id>	
        /// <unmanaged>unsigned int Members</unmanaged>	
        /// <unmanaged-short>unsigned int Members</unmanaged-short>	
        public int MemberCount;
        
        /// <summary>	
        /// <dd> <p>Offset, in bytes, between the start of the parent structure and this variable. Can be 0 if not a structure member.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_TYPE_DESC::Offset']/*"/>	
        /// <msdn-id>ff476212</msdn-id>	
        /// <unmanaged>unsigned int Offset</unmanaged>	
        /// <unmanaged-short>unsigned int Offset</unmanaged-short>	
        public int Offset;
        
        /// <summary>	
        /// <dd> <p>Name of the shader-variable type. This member can be <strong><c>null</c></strong> if it isn't used. This member supports dynamic shader linkage interface types, which have names. For more info about dynamic shader linkage, see Dynamic Linking.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_TYPE_DESC::Name']/*"/>	
        /// <msdn-id>ff476212</msdn-id>	
        /// <unmanaged>const char* Name</unmanaged>	
        /// <unmanaged-short>char Name</unmanaged-short>	
        public string Name;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public SharpDX.D3DCompiler.ShaderVariableClass Class;
            public SharpDX.D3DCompiler.ShaderVariableType Type;
            public int RowCount;
            public int ColumnCount;
            public int ElementCount;
            public int MemberCount;
            public int Offset;
            public System.IntPtr Name;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                if (this.Name != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.Name);		
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Class = @ref.Class;
            this.Type = @ref.Type;
            this.RowCount = @ref.RowCount;
            this.ColumnCount = @ref.ColumnCount;
            this.ElementCount = @ref.ElementCount;
            this.MemberCount = @ref.MemberCount;
            this.Offset = @ref.Offset;
            this.Name = ( @ref.Name == IntPtr.Zero )?null:Marshal.PtrToStringAnsi(@ref.Name);
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Class = this.Class;
            @ref.Type = this.Type;
            @ref.RowCount = this.RowCount;
            @ref.ColumnCount = this.ColumnCount;
            @ref.ElementCount = this.ElementCount;
            @ref.MemberCount = this.MemberCount;
            @ref.Offset = this.Offset;
            @ref.Name = ( this.Name == null )?IntPtr.Zero : Utilities.StringToHGlobalAnsi(this.Name);
		
		}
    }
    
    /// <summary>	
    /// <p>Describes a shader variable.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Get a shader-variable description using reflection by calling <strong><see cref="SharpDX.D3DCompiler.ShaderReflectionVariable.GetDescription"/></strong>.</p><p>As of the June 2010 update, <strong>DefaultValue</strong> emits default values for reflection. </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_VARIABLE_DESC']/*"/>	
    /// <msdn-id>ff476213</msdn-id>	
    /// <unmanaged>D3D11_SHADER_VARIABLE_DESC</unmanaged>	
    /// <unmanaged-short>D3D11_SHADER_VARIABLE_DESC</unmanaged-short>	
    public  partial struct ShaderVariableDescription {	
        
        /// <summary>	
        /// <dd> <p>The variable name.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_VARIABLE_DESC::Name']/*"/>	
        /// <msdn-id>ff476213</msdn-id>	
        /// <unmanaged>const char* Name</unmanaged>	
        /// <unmanaged-short>char Name</unmanaged-short>	
        public string Name;
        
        /// <summary>	
        /// <dd> <p>Offset from the start of the parent structure to the beginning of the variable.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_VARIABLE_DESC::StartOffset']/*"/>	
        /// <msdn-id>ff476213</msdn-id>	
        /// <unmanaged>unsigned int StartOffset</unmanaged>	
        /// <unmanaged-short>unsigned int StartOffset</unmanaged-short>	
        public int StartOffset;
        
        /// <summary>	
        /// <dd> <p>Size of the variable (in bytes).</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_VARIABLE_DESC::Size']/*"/>	
        /// <msdn-id>ff476213</msdn-id>	
        /// <unmanaged>unsigned int Size</unmanaged>	
        /// <unmanaged-short>unsigned int Size</unmanaged-short>	
        public int Size;
        
        /// <summary>	
        /// <dd> <p>A combination of <strong><see cref="SharpDX.D3DCompiler.ShaderVariableFlags"/></strong>-typed values that are combined by using a bitwise OR operation. The resulting value identifies shader-variable properties.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_VARIABLE_DESC::uFlags']/*"/>	
        /// <msdn-id>ff476213</msdn-id>	
        /// <unmanaged>D3D_SHADER_VARIABLE_FLAGS uFlags</unmanaged>	
        /// <unmanaged-short>D3D_SHADER_VARIABLE_FLAGS uFlags</unmanaged-short>	
        public SharpDX.D3DCompiler.ShaderVariableFlags Flags;
        
        /// <summary>	
        /// <dd> <p>The default value for initializing the variable.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_VARIABLE_DESC::DefaultValue']/*"/>	
        /// <msdn-id>ff476213</msdn-id>	
        /// <unmanaged>void* DefaultValue</unmanaged>	
        /// <unmanaged-short>void DefaultValue</unmanaged-short>	
        public System.IntPtr DefaultValue;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_VARIABLE_DESC::StartTexture']/*"/>	
        /// <msdn-id>ff476213</msdn-id>	
        /// <unmanaged>unsigned int StartTexture</unmanaged>	
        /// <unmanaged-short>unsigned int StartTexture</unmanaged-short>	
        public int StartTexture;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_VARIABLE_DESC::TextureSize']/*"/>	
        /// <msdn-id>ff476213</msdn-id>	
        /// <unmanaged>unsigned int TextureSize</unmanaged>	
        /// <unmanaged-short>unsigned int TextureSize</unmanaged-short>	
        public int TextureSize;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_VARIABLE_DESC::StartSampler']/*"/>	
        /// <msdn-id>ff476213</msdn-id>	
        /// <unmanaged>unsigned int StartSampler</unmanaged>	
        /// <unmanaged-short>unsigned int StartSampler</unmanaged-short>	
        public int StartSampler;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='D3D11_SHADER_VARIABLE_DESC::SamplerSize']/*"/>	
        /// <msdn-id>ff476213</msdn-id>	
        /// <unmanaged>unsigned int SamplerSize</unmanaged>	
        /// <unmanaged-short>unsigned int SamplerSize</unmanaged-short>	
        public int SamplerSize;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential)]
        internal partial struct __Native {	
            public System.IntPtr Name;
            public int StartOffset;
            public int Size;
            public SharpDX.D3DCompiler.ShaderVariableFlags Flags;
            public System.IntPtr DefaultValue;
            public int StartTexture;
            public int TextureSize;
            public int StartSampler;
            public int SamplerSize;
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
                if (this.Name != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.Name);		
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Name = ( @ref.Name == IntPtr.Zero )?null:Marshal.PtrToStringAnsi(@ref.Name);
            this.StartOffset = @ref.StartOffset;
            this.Size = @ref.Size;
            this.Flags = @ref.Flags;
            this.DefaultValue = @ref.DefaultValue;
            this.StartTexture = @ref.StartTexture;
            this.TextureSize = @ref.TextureSize;
            this.StartSampler = @ref.StartSampler;
            this.SamplerSize = @ref.SamplerSize;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Name = ( this.Name == null )?IntPtr.Zero : Utilities.StringToHGlobalAnsi(this.Name);
            @ref.StartOffset = this.StartOffset;
            @ref.Size = this.Size;
            @ref.Flags = this.Flags;
            @ref.DefaultValue = this.DefaultValue;
            @ref.StartTexture = this.StartTexture;
            @ref.TextureSize = this.TextureSize;
            @ref.StartSampler = this.StartSampler;
            @ref.SamplerSize = this.SamplerSize;
		
		}
    }
}
