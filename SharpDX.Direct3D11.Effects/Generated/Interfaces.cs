// Copyright (c) 2010-2014 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Types declaration for SharpDX.Direct3D11 namespace.
//     This code was generated by a tool.
//     Date : 6/25/2016 10:38:11 PM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
namespace SharpDX.Direct3D11 {

// Disable warning : XML comment is not placed on a valid language element
#pragma warning disable 419
#pragma warning disable 1587
#pragma warning disable 1574
	/// <summary>	
	/// <p>An <strong><see cref="SharpDX.Direct3D11.Effect"/></strong> interface manages a set of state objects, resources, and shaders for implementing a rendering effect.</p>	
	/// </summary>	
	/// <remarks>	
	/// <p>An effect is created by calling <strong>D3DX11CreateEffectFromMemory</strong>.</p><p>The effect system groups the information required for rendering into an effect which contains:  state objects for assigning state changes in groups, resources for supplying input data and storing output data,  and programs that control how the rendering is done called shaders.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p><p><strong>Note</strong>??</p><p>If you call <strong>QueryInterface</strong> on an <strong><see cref="SharpDX.Direct3D11.Effect"/></strong> object to retrieve the <strong><see cref="SharpDX.ComObject"/></strong> interface, <strong>QueryInterface</strong> returns E_NOINTERFACE. To work around this issue, use the following code:</p><pre> <see cref="SharpDX.ComObject"/>* pIUnknown = (<see cref="SharpDX.ComObject"/>*)pEffect; pIUnknown-&gt;AddRef();	
	/// </pre>	
	/// </remarks>	
	/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11Effect']/*"/>	
	/// <msdn-id>ff476652</msdn-id>	
	/// <unmanaged>ID3DX11Effect</unmanaged>	
	/// <unmanaged-short>ID3DX11Effect</unmanaged-short>	
	[Guid("fa61ca24-e4ba-4262-9db8-b132e8cae319")]
	public partial class Effect : SharpDX.ComObject {
		/// <summary>
		/// Initializes a new instance of the <see cref="SharpDX.Direct3D11.Effect"/> class.
		/// </summary>
		/// <param name="nativePtr">The native pointer.</param>	
		public Effect(IntPtr nativePtr) : base(nativePtr) {
		}

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.Direct3D11.Effect"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.Direct3D11.Effect(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.Direct3D11.Effect(nativePointer);
		}
		
		
		/// <summary>	
		/// <p>Test an effect to see if it contains valid syntax.</p>	
		/// </summary>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11Effect::IsValid']/*"/>	
		/// <msdn-id>ff476844</msdn-id>	
		/// <unmanaged>IsValid</unmanaged>	
		/// <unmanaged-short>IsValid</unmanaged-short>	
		/// <unmanaged>BOOL ID3DX11Effect::IsValid()</unmanaged>
		public SharpDX.Mathematics.Interop.RawBool IsValid {
				get { return IsValid_(); }
		}
		
		/// <summary>	
		/// <p>Get the device that created the effect.</p>	
		/// </summary>	
		/// <remarks>	
		/// <p>An effect is created for a specific device, by calling a function such as <strong>D3DX11CreateEffectFromMemory</strong>.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11Effect::GetDevice']/*"/>	
		/// <msdn-id>ff476835</msdn-id>	
		/// <unmanaged>GetDevice</unmanaged>	
		/// <unmanaged-short>GetDevice</unmanaged-short>	
		/// <unmanaged>HRESULT ID3DX11Effect::GetDevice([Out] ID3D11Device** ppDevice)</unmanaged>
		public SharpDX.Direct3D11.Device Device {
				get { SharpDX.Direct3D11.Device __output__; GetDevice(out __output__); return __output__; }
		}
		
		/// <summary>	
		/// <p>Get an effect description.</p>	
		/// </summary>	
		/// <remarks>	
		/// <p>An effect description contains basic information about an effect such as the techniques it contains and the constant buffer resources it requires.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11Effect::GetDesc']/*"/>	
		/// <msdn-id>ff476834</msdn-id>	
		/// <unmanaged>GetDesc</unmanaged>	
		/// <unmanaged-short>GetDesc</unmanaged-short>	
		/// <unmanaged>HRESULT ID3DX11Effect::GetDesc([Out] D3DX11_EFFECT_DESC* pDesc)</unmanaged>
		public SharpDX.Direct3D11.EffectDescription Description {
				get { SharpDX.Direct3D11.EffectDescription __output__; GetDescription(out __output__); return __output__; }
		}
		
		/// <summary>	
		/// <p>Gets a class linkage interface.</p>	
		/// </summary>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11Effect::GetClassLinkage']/*"/>	
		/// <msdn-id>ff476831</msdn-id>	
		/// <unmanaged>GetClassLinkage</unmanaged>	
		/// <unmanaged-short>GetClassLinkage</unmanaged-short>	
		/// <unmanaged>ID3D11ClassLinkage* ID3DX11Effect::GetClassLinkage()</unmanaged>
		public SharpDX.Direct3D11.ClassLinkage ClassLinkage {
				get { return GetClassLinkage(); }
		}
		
		/// <summary>	
		/// <p>Test an effect to see if the reflection metadata has been removed from memory.</p>	
		/// </summary>	
		/// <remarks>	
		/// <p>An effect uses memory space two different ways: to store the information required by the runtime to execute an effect,  and to store the metadata required to reflect information back to an application using the API. You can minimize the amount of memory required by  an effect by calling <strong><see cref="SharpDX.Direct3D11.Effect.Optimize"/></strong> which removes the reflection metadata from memory. Of course, API methods to read variables  will no longer work once reflection data has been removed.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11Effect::IsOptimized']/*"/>	
		/// <msdn-id>ff476843</msdn-id>	
		/// <unmanaged>IsOptimized</unmanaged>	
		/// <unmanaged-short>IsOptimized</unmanaged-short>	
		/// <unmanaged>BOOL ID3DX11Effect::IsOptimized()</unmanaged>
		public SharpDX.Mathematics.Interop.RawBool IsOptimized {
				get { return IsOptimized_(); }
		}
		
		/// <summary>	
		/// <p>Test an effect to see if it contains valid syntax.</p>	
		/// </summary>	
		/// <returns><p><strong>TRUE</strong> if the code syntax is valid; otherwise <strong><see cref="SharpDX.Result.False"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11Effect::IsValid']/*"/>	
		/// <msdn-id>ff476844</msdn-id>	
		/// <unmanaged>BOOL ID3DX11Effect::IsValid()</unmanaged>	
		/// <unmanaged-short>ID3DX11Effect::IsValid</unmanaged-short>	
		internal SharpDX.Mathematics.Interop.RawBool IsValid_() {
			unsafe {
				SharpDX.Mathematics.Interop.RawBool __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.CalliSharpDXMathematicsInteropRawBool(_nativePointer,((void**)(*(void**)_nativePointer))[3]);		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get the device that created the effect.</p>	
		/// </summary>	
		/// <param name="deviceOut"><dd>  <p>A reference to an <strong><see cref="SharpDX.Direct3D11.Device"/></strong>.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p>An effect is created for a specific device, by calling a function such as <strong>D3DX11CreateEffectFromMemory</strong>.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11Effect::GetDevice']/*"/>	
		/// <msdn-id>ff476835</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11Effect::GetDevice([Out] ID3D11Device** ppDevice)</unmanaged>	
		/// <unmanaged-short>ID3DX11Effect::GetDevice</unmanaged-short>	
		internal void GetDevice(out SharpDX.Direct3D11.Device deviceOut) {
			unsafe {
				IntPtr deviceOut_ = IntPtr.Zero;
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, &deviceOut_,((void**)(*(void**)_nativePointer))[4]);		
				deviceOut= (deviceOut_ == IntPtr.Zero)?null:new SharpDX.Direct3D11.Device(deviceOut_);	
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get an effect description.</p>	
		/// </summary>	
		/// <param name="descRef"><dd>  <p>A reference to an effect description (see <strong><see cref="SharpDX.Direct3D11.EffectDescription"/></strong>).</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p>An effect description contains basic information about an effect such as the techniques it contains and the constant buffer resources it requires.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11Effect::GetDesc']/*"/>	
		/// <msdn-id>ff476834</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11Effect::GetDesc([Out] D3DX11_EFFECT_DESC* pDesc)</unmanaged>	
		/// <unmanaged-short>ID3DX11Effect::GetDesc</unmanaged-short>	
		internal void GetDescription(out SharpDX.Direct3D11.EffectDescription descRef) {
			unsafe {
				descRef = new SharpDX.Direct3D11.EffectDescription();
				SharpDX.Result __result__;
				fixed (void* descRef_ = &descRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, descRef_,((void**)(*(void**)_nativePointer))[5]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get a constant buffer by index.</p>	
		/// </summary>	
		/// <param name="index"><dd>  <p>A zero-based index.</p> </dd></param>	
		/// <returns><p>A reference to a <strong><see cref="SharpDX.Direct3D11.EffectConstantBuffer"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p>An effect that contains a variable that will be read/written by an application requires at least one constant buffer.  For best performance, an effect should organize variables into one or more constant buffers based on their frequency of update.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11Effect::GetConstantBufferByIndex']/*"/>	
		/// <msdn-id>ff476832</msdn-id>	
		/// <unmanaged>ID3DX11EffectConstantBuffer* ID3DX11Effect::GetConstantBufferByIndex([In] unsigned int Index)</unmanaged>	
		/// <unmanaged-short>ID3DX11Effect::GetConstantBufferByIndex</unmanaged-short>	
		public SharpDX.Direct3D11.EffectConstantBuffer GetConstantBufferByIndex(int index) {
			unsafe {
				SharpDX.Direct3D11.EffectConstantBuffer __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectConstantBuffer((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer, index,((void**)(*(void**)_nativePointer))[6]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get a constant buffer by name.</p>	
		/// </summary>	
		/// <param name="name"><dd>  <p>The constant-buffer name.</p> </dd></param>	
		/// <returns><p>A reference to the constant buffer indicated by the Name. See <strong><see cref="SharpDX.Direct3D11.EffectConstantBuffer"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p>An effect that contains a variable that will be read/written by an application requires at least one constant buffer. For best performance,  an effect should organize variables into one or more constant buffers based on their frequency of update.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11Effect::GetConstantBufferByName']/*"/>	
		/// <msdn-id>ff476833</msdn-id>	
		/// <unmanaged>ID3DX11EffectConstantBuffer* ID3DX11Effect::GetConstantBufferByName([In] const char* Name)</unmanaged>	
		/// <unmanaged-short>ID3DX11Effect::GetConstantBufferByName</unmanaged-short>	
		public SharpDX.Direct3D11.EffectConstantBuffer GetConstantBufferByName(string name) {
			unsafe {
				IntPtr name_ = Utilities.StringToHGlobalAnsi(name);
				SharpDX.Direct3D11.EffectConstantBuffer __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectConstantBuffer((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer, (void*)name_,((void**)(*(void**)_nativePointer))[7]));		
				Marshal.FreeHGlobal(name_ );
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get a variable by index.</p>	
		/// </summary>	
		/// <param name="index"><dd>  <p>A zero-based index.</p> </dd></param>	
		/// <returns><p>A reference to a <strong><see cref="SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p>An effect may contain one or more variables. Variables outside of a technique are considered global to all effects, those located inside of a technique  are local to that technique. You can access any local non-static effect variable using its name or with an index.</p><p>The method returns a reference to an <strong>effect-variable interface</strong> if a variable is not found; you can  call <strong><see cref="SharpDX.Direct3D11.Effect.IsValid_"/></strong> to verify whether or not the index exists.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11Effect::GetVariableByIndex']/*"/>	
		/// <msdn-id>ff476840</msdn-id>	
		/// <unmanaged>ID3DX11EffectVariable* ID3DX11Effect::GetVariableByIndex([In] unsigned int Index)</unmanaged>	
		/// <unmanaged-short>ID3DX11Effect::GetVariableByIndex</unmanaged-short>	
		public SharpDX.Direct3D11.EffectVariable GetVariableByIndex(int index) {
			unsafe {
				SharpDX.Direct3D11.EffectVariable __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectVariable((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer, index,((void**)(*(void**)_nativePointer))[8]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get a variable by name.</p>	
		/// </summary>	
		/// <param name="name"><dd>  <p>The variable name.</p> </dd></param>	
		/// <returns><p>A reference to an <strong><see cref="SharpDX.Direct3D11.EffectVariable"/></strong>.  Returns an invalid variable if the specified name cannot be found.</p></returns>	
		/// <remarks>	
		/// <p>An effect may contain one or more variables. Variables outside of a technique are considered global to all effects, those located inside of a  technique are local to that technique. You can access an effect variable using its name or with an index.</p><p>The method returns a reference to an <strong>effect-variable interface</strong> whether or not a variable is found. <strong><see cref="SharpDX.Direct3D11.Effect.IsValid_"/></strong> should be called to verify whether or not the name exists.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11Effect::GetVariableByName']/*"/>	
		/// <msdn-id>ff476841</msdn-id>	
		/// <unmanaged>ID3DX11EffectVariable* ID3DX11Effect::GetVariableByName([In] const char* Name)</unmanaged>	
		/// <unmanaged-short>ID3DX11Effect::GetVariableByName</unmanaged-short>	
		public SharpDX.Direct3D11.EffectVariable GetVariableByName(string name) {
			unsafe {
				IntPtr name_ = Utilities.StringToHGlobalAnsi(name);
				SharpDX.Direct3D11.EffectVariable __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectVariable((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer, (void*)name_,((void**)(*(void**)_nativePointer))[9]));		
				Marshal.FreeHGlobal(name_ );
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get a variable by semantic.</p>	
		/// </summary>	
		/// <param name="semantic"><dd>  <p>The semantic name.</p> </dd></param>	
		/// <returns><p>A reference to the effect variable indicated by the Semantic. See <strong><see cref="SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p>Each effect variable can have a semantic attached, which is a user defined metadata string. Some  system-value semantics are reserved words that trigger built in functionality by pipeline stages.</p><p>The method returns a reference to an <strong>effect-variable interface</strong> if a variable is not found; you can  call <strong><see cref="SharpDX.Direct3D11.Effect.IsValid_"/></strong> to verify whether or not the semantic exists.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11Effect::GetVariableBySemantic']/*"/>	
		/// <msdn-id>ff476842</msdn-id>	
		/// <unmanaged>ID3DX11EffectVariable* ID3DX11Effect::GetVariableBySemantic([In] const char* Semantic)</unmanaged>	
		/// <unmanaged-short>ID3DX11Effect::GetVariableBySemantic</unmanaged-short>	
		public SharpDX.Direct3D11.EffectVariable GetVariableBySemantic(string semantic) {
			unsafe {
				IntPtr semantic_ = Utilities.StringToHGlobalAnsi(semantic);
				SharpDX.Direct3D11.EffectVariable __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectVariable((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer, (void*)semantic_,((void**)(*(void**)_nativePointer))[10]));		
				Marshal.FreeHGlobal(semantic_ );
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Gets an effect group by index.</p>	
		/// </summary>	
		/// <param name="index"><dd>  <p>Index of the effect group.</p> </dd></param>	
		/// <returns><p>A reference to an <strong><see cref="SharpDX.Direct3D11.EffectGroup"/></strong> interface.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11Effect::GetGroupByIndex']/*"/>	
		/// <msdn-id>ff476836</msdn-id>	
		/// <unmanaged>ID3DX11EffectGroup* ID3DX11Effect::GetGroupByIndex([In] unsigned int Index)</unmanaged>	
		/// <unmanaged-short>ID3DX11Effect::GetGroupByIndex</unmanaged-short>	
		public SharpDX.Direct3D11.EffectGroup GetGroupByIndex(int index) {
			unsafe {
				SharpDX.Direct3D11.EffectGroup __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectGroup((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer, index,((void**)(*(void**)_nativePointer))[11]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Gets an effect group by name.</p>	
		/// </summary>	
		/// <param name="name"><dd>  <p>Name of the effect group.</p> </dd></param>	
		/// <returns><p>A reference to an <strong><see cref="SharpDX.Direct3D11.EffectGroup"/></strong> interface.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11Effect::GetGroupByName']/*"/>	
		/// <msdn-id>ff476837</msdn-id>	
		/// <unmanaged>ID3DX11EffectGroup* ID3DX11Effect::GetGroupByName([In] const char* Name)</unmanaged>	
		/// <unmanaged-short>ID3DX11Effect::GetGroupByName</unmanaged-short>	
		public SharpDX.Direct3D11.EffectGroup GetGroupByName(string name) {
			unsafe {
				IntPtr name_ = Utilities.StringToHGlobalAnsi(name);
				SharpDX.Direct3D11.EffectGroup __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectGroup((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer, (void*)name_,((void**)(*(void**)_nativePointer))[12]));		
				Marshal.FreeHGlobal(name_ );
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get a technique by index.</p>	
		/// </summary>	
		/// <param name="index"><dd>  <p>A zero-based index.</p> </dd></param>	
		/// <returns><p>A reference to an <strong><see cref="SharpDX.Direct3D11.EffectTechnique"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p>An effect contains one or more techniques; each technique contains one or more passes. You can access a technique using its name or with an index. </p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11Effect::GetTechniqueByIndex']/*"/>	
		/// <msdn-id>ff476838</msdn-id>	
		/// <unmanaged>ID3DX11EffectTechnique* ID3DX11Effect::GetTechniqueByIndex([In] unsigned int Index)</unmanaged>	
		/// <unmanaged-short>ID3DX11Effect::GetTechniqueByIndex</unmanaged-short>	
		public SharpDX.Direct3D11.EffectTechnique GetTechniqueByIndex(int index) {
			unsafe {
				SharpDX.Direct3D11.EffectTechnique __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectTechnique((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer, index,((void**)(*(void**)_nativePointer))[13]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get a technique by name.</p>	
		/// </summary>	
		/// <param name="name"><dd>  <p>The name of the technique.</p> </dd></param>	
		/// <returns><p>A reference to an <strong><see cref="SharpDX.Direct3D11.EffectTechnique"/></strong>. If a technique with the appropriate name is not found an invalid technique is returned. <strong><see cref="SharpDX.Direct3D11.EffectTechnique.IsValid_"/></strong> should be called on the returned technique to determine whether it is valid.</p></returns>	
		/// <remarks>	
		/// <p>An effect contains one or more techniques; each technique contains one or more passes. You can access a technique using its name or with an index.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11Effect::GetTechniqueByName']/*"/>	
		/// <msdn-id>ff476839</msdn-id>	
		/// <unmanaged>ID3DX11EffectTechnique* ID3DX11Effect::GetTechniqueByName([In] const char* Name)</unmanaged>	
		/// <unmanaged-short>ID3DX11Effect::GetTechniqueByName</unmanaged-short>	
		public SharpDX.Direct3D11.EffectTechnique GetTechniqueByName(string name) {
			unsafe {
				IntPtr name_ = Utilities.StringToHGlobalAnsi(name);
				SharpDX.Direct3D11.EffectTechnique __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectTechnique((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer, (void*)name_,((void**)(*(void**)_nativePointer))[14]));		
				Marshal.FreeHGlobal(name_ );
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Gets a class linkage interface.</p>	
		/// </summary>	
		/// <returns><p>Returns a reference to an <strong><see cref="SharpDX.Direct3D11.ClassLinkage"/></strong> interface.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11Effect::GetClassLinkage']/*"/>	
		/// <msdn-id>ff476831</msdn-id>	
		/// <unmanaged>ID3D11ClassLinkage* ID3DX11Effect::GetClassLinkage()</unmanaged>	
		/// <unmanaged-short>ID3DX11Effect::GetClassLinkage</unmanaged-short>	
		internal SharpDX.Direct3D11.ClassLinkage GetClassLinkage() {
			unsafe {
				SharpDX.Direct3D11.ClassLinkage __result__;
				__result__= 
				new SharpDX.Direct3D11.ClassLinkage((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer,((void**)(*(void**)_nativePointer))[15]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Creates a copy of an effect interface.</p>	
		/// </summary>	
		/// <param name="flags"><dd>  <p>Flags affecting the creation of the cloned effect. Can be 0 or one of the following values.</p> <table> <tr><th>Flag</th><th>Description</th></tr> <tr><td>D3DX11_EFFECT_CLONE_FORCE_NONSINGLE</td><td>Ignore all "single" qualifiers on cbuffers.  All cbuffers will have their own <strong><see cref="SharpDX.Direct3D11.Buffer"/></strong>s created in the cloned effect.</td></tr> </table> <p>?</p> </dd></param>	
		/// <param name="clonedEffectOut"><dd>  <p>Pointer to an <strong><see cref="SharpDX.Direct3D11.Effect"/></strong> reference that will be set to the copy of the effect.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11Effect::CloneEffect']/*"/>	
		/// <msdn-id>ff476830</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11Effect::CloneEffect([In] unsigned int Flags,[Out] ID3DX11Effect** ppClonedEffect)</unmanaged>	
		/// <unmanaged-short>ID3DX11Effect::CloneEffect</unmanaged-short>	
		public void CloneEffect(int flags, out SharpDX.Direct3D11.Effect clonedEffectOut) {
			unsafe {
				IntPtr clonedEffectOut_ = IntPtr.Zero;
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, flags, &clonedEffectOut_,((void**)(*(void**)_nativePointer))[16]);		
				clonedEffectOut= (clonedEffectOut_ == IntPtr.Zero)?null:new SharpDX.Direct3D11.Effect(clonedEffectOut_);	
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Minimize the amount of memory required for an effect.</p>	
		/// </summary>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p>An effect uses memory space two different ways: to store the information required by the runtime to execute an effect, and to store the metadata  required to reflect information back to an application using the API. You can minimize the amount of memory required by an effect by  calling <strong><see cref="SharpDX.Direct3D11.Effect.Optimize"/></strong> which removes the reflection metadata from memory. API methods to read variables will no  longer work once reflection data has been removed.</p><p>The following methods will fail after Optimize has been called on an effect.</p><ul> <li> <strong><see cref="SharpDX.Direct3D11.Effect.GetConstantBufferByIndex"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D11.Effect.GetConstantBufferByName"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D11.Effect.GetDescription"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D11.Effect.GetDevice"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D11.Effect.GetTechniqueByIndex"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D11.Effect.GetTechniqueByName"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D11.Effect.GetVariableByIndex"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D11.Effect.GetVariableByName"/></strong> </li> <li> <strong><see cref="SharpDX.Direct3D11.Effect.GetVariableBySemantic"/></strong> </li> </ul><p><strong>Note</strong>??References retrieved with these methods before calling <strong><see cref="SharpDX.Direct3D11.Effect.Optimize"/></strong> are still valid  after <strong><see cref="SharpDX.Direct3D11.Effect.Optimize"/></strong> is called.  This allows the application to get all the variables, techniques, and passes it will use,  call Optimize, and then use the effect.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11Effect::Optimize']/*"/>	
		/// <msdn-id>ff476845</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11Effect::Optimize()</unmanaged>	
		/// <unmanaged-short>ID3DX11Effect::Optimize</unmanaged-short>	
		public void Optimize() {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer,((void**)(*(void**)_nativePointer))[17]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Test an effect to see if the reflection metadata has been removed from memory.</p>	
		/// </summary>	
		/// <returns><p><strong>TRUE</strong> if the effect is optimized; otherwise <strong><see cref="SharpDX.Result.False"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p>An effect uses memory space two different ways: to store the information required by the runtime to execute an effect,  and to store the metadata required to reflect information back to an application using the API. You can minimize the amount of memory required by  an effect by calling <strong><see cref="SharpDX.Direct3D11.Effect.Optimize"/></strong> which removes the reflection metadata from memory. Of course, API methods to read variables  will no longer work once reflection data has been removed.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11Effect::IsOptimized']/*"/>	
		/// <msdn-id>ff476843</msdn-id>	
		/// <unmanaged>BOOL ID3DX11Effect::IsOptimized()</unmanaged>	
		/// <unmanaged-short>ID3DX11Effect::IsOptimized</unmanaged-short>	
		internal SharpDX.Mathematics.Interop.RawBool IsOptimized_() {
			unsafe {
				SharpDX.Mathematics.Interop.RawBool __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.CalliSharpDXMathematicsInteropRawBool(_nativePointer,((void**)(*(void**)_nativePointer))[18]);		
				return __result__;
			}
		}
	}
	/// <summary>	
	/// <p>The blend-variable interface accesses blend state.</p>	
	/// </summary>	
	/// <remarks>	
	/// <p>An <strong><see cref="SharpDX.Direct3D11.EffectVariable"/></strong> interface is created when an effect is read into memory.</p><p>Effect variables are saved in memory in the backing store; when a technique is applied, the values in the backing store are copied to the device.  You can use either of these methods to return state.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
	/// </remarks>	
	/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectBlendVariable']/*"/>	
	/// <msdn-id>ff476653</msdn-id>	
	/// <unmanaged>ID3DX11EffectBlendVariable</unmanaged>	
	/// <unmanaged-short>ID3DX11EffectBlendVariable</unmanaged-short>	
	[Guid("d664f4d7-3b81-4805-b277-c1df58c39f53")]
	public partial class EffectBlendVariable : SharpDX.Direct3D11.EffectVariable {
		/// <summary>
		/// Initializes a new instance of the <see cref="SharpDX.Direct3D11.EffectBlendVariable"/> class.
		/// </summary>
		/// <param name="nativePtr">The native pointer.</param>	
		public EffectBlendVariable(IntPtr nativePtr) : base(nativePtr) {
		}

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.Direct3D11.EffectBlendVariable"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.Direct3D11.EffectBlendVariable(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.Direct3D11.EffectBlendVariable(nativePointer);
		}
		
		
		/// <summary>	
		/// <p>Get a reference to a blend-state interface.</p>	
		/// </summary>	
		/// <param name="index"><dd>  <p>Index into an array of blend-state interfaces. If there is only one blend-state interface, use 0.</p> </dd></param>	
		/// <param name="stateOut"><dd>  <p>The address of a reference to a blend-state interface (see <strong><see cref="SharpDX.Direct3D11.BlendState"/></strong>).</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectBlendVariable::GetBlendState']/*"/>	
		/// <msdn-id>ff476655</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectBlendVariable::GetBlendState([In] unsigned int Index,[Out] ID3D11BlendState** ppState)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectBlendVariable::GetBlendState</unmanaged-short>	
		public void GetBlendState(int index, out SharpDX.Direct3D11.BlendState stateOut) {
			unsafe {
				IntPtr stateOut_ = IntPtr.Zero;
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, index, &stateOut_,((void**)(*(void**)_nativePointer))[31]);		
				stateOut= (stateOut_ == IntPtr.Zero)?null:new SharpDX.Direct3D11.BlendState(stateOut_);	
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Sets an effect's blend-state.</p>	
		/// </summary>	
		/// <param name="index"><dd>  <p>Index into an array of blend-state interfaces. If there is only one blend-state interface, use 0.</p> </dd></param>	
		/// <param name="stateRef"><dd>  <p>A reference to an <strong><see cref="SharpDX.Direct3D11.BlendState"/></strong> interface containing the blend-state to set.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectBlendVariable::SetBlendState']/*"/>	
		/// <msdn-id>ff476656</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectBlendVariable::SetBlendState([In] unsigned int Index,[In] ID3D11BlendState* pState)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectBlendVariable::SetBlendState</unmanaged-short>	
		public void SetBlendState(int index, SharpDX.Direct3D11.BlendState stateRef) {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, index, (void*)((stateRef == null)?IntPtr.Zero:stateRef.NativePointer),((void**)(*(void**)_nativePointer))[32]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Reverts a previously set blend-state.</p>	
		/// </summary>	
		/// <param name="index"><dd>  <p>Index into an array of blend-state interfaces. If there is only one blend-state interface, use 0.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectBlendVariable::UndoSetBlendState']/*"/>	
		/// <msdn-id>ff476657</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectBlendVariable::UndoSetBlendState([In] unsigned int Index)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectBlendVariable::UndoSetBlendState</unmanaged-short>	
		public void UndoSetBlendState(int index) {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, index,((void**)(*(void**)_nativePointer))[33]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get a reference to a blend-state variable.</p>	
		/// </summary>	
		/// <param name="index"><dd>  <p>Index into an array of blend-state descriptions. If there is only one blend-state variable in the effect, use 0.</p> </dd></param>	
		/// <param name="descRef"><dd>  <p>A reference to a blend-state description (see <strong><see cref="SharpDX.Direct3D11.BlendStateDescription"/></strong>).</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p>Effect variables are saved in memory in the backing store; when a technique is applied, the values in the backing store are copied to the device.  Backing store data can used to recreate the variable when necessary.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectBlendVariable::GetBackingStore']/*"/>	
		/// <msdn-id>ff476654</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectBlendVariable::GetBackingStore([In] unsigned int Index,[Out] D3D11_BLEND_DESC* pDesc)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectBlendVariable::GetBackingStore</unmanaged-short>	
		public void GetBackingStore(int index, out SharpDX.Direct3D11.BlendStateDescription descRef) {
			unsafe {
				var descRef_ = new SharpDX.Direct3D11.BlendStateDescription.__Native();
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, index, &descRef_,((void**)(*(void**)_nativePointer))[34]);		
				descRef = new SharpDX.Direct3D11.BlendStateDescription();
				descRef.__MarshalFrom(ref descRef_);
				__result__.CheckError();
			}
		}
	}
	/// <summary>	
	/// <p>Accesses a class instance.</p>	
	/// </summary>	
	/// <remarks>	
	/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
	/// </remarks>	
	/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectClassInstanceVariable']/*"/>	
	/// <msdn-id>ff476658</msdn-id>	
	/// <unmanaged>ID3DX11EffectClassInstanceVariable</unmanaged>	
	/// <unmanaged-short>ID3DX11EffectClassInstanceVariable</unmanaged-short>	
	[Guid("926a8053-2a39-4db4-9bde-cf649adebdc1")]
	public partial class EffectClassInstanceVariable : SharpDX.Direct3D11.EffectVariable {
		/// <summary>
		/// Initializes a new instance of the <see cref="SharpDX.Direct3D11.EffectClassInstanceVariable"/> class.
		/// </summary>
		/// <param name="nativePtr">The native pointer.</param>	
		public EffectClassInstanceVariable(IntPtr nativePtr) : base(nativePtr) {
		}

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.Direct3D11.EffectClassInstanceVariable"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.Direct3D11.EffectClassInstanceVariable(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.Direct3D11.EffectClassInstanceVariable(nativePointer);
		}
		
		
		/// <summary>	
		/// <p>Gets a class instance.</p>	
		/// </summary>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectClassInstanceVariable::GetClassInstance']/*"/>	
		/// <msdn-id>ff476659</msdn-id>	
		/// <unmanaged>GetClassInstance</unmanaged>	
		/// <unmanaged-short>GetClassInstance</unmanaged-short>	
		/// <unmanaged>HRESULT ID3DX11EffectClassInstanceVariable::GetClassInstance([Out] ID3D11ClassInstance** ppClassInstance)</unmanaged>
		public SharpDX.Direct3D11.ClassInstance ClassInstance {
				get { SharpDX.Direct3D11.ClassInstance __output__; GetClassInstance(out __output__); return __output__; }
		}
		
		/// <summary>	
		/// <p>Gets a class instance.</p>	
		/// </summary>	
		/// <param name="classInstanceOut"><dd>  <p>Pointer to an <strong><see cref="SharpDX.Direct3D11.ClassInstance"/></strong> reference that will be set to class instance.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectClassInstanceVariable::GetClassInstance']/*"/>	
		/// <msdn-id>ff476659</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectClassInstanceVariable::GetClassInstance([Out] ID3D11ClassInstance** ppClassInstance)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectClassInstanceVariable::GetClassInstance</unmanaged-short>	
		internal void GetClassInstance(out SharpDX.Direct3D11.ClassInstance classInstanceOut) {
			unsafe {
				IntPtr classInstanceOut_ = IntPtr.Zero;
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, &classInstanceOut_,((void**)(*(void**)_nativePointer))[31]);		
				classInstanceOut= (classInstanceOut_ == IntPtr.Zero)?null:new SharpDX.Direct3D11.ClassInstance(classInstanceOut_);	
				__result__.CheckError();
			}
		}
	}
	/// <summary>	
	/// <p>A constant-buffer interface accesses constant buffers or texture buffers.</p>	
	/// </summary>	
	/// <remarks>	
	/// <p>Use constant buffers to store many effect constants; grouping constants into buffers based on their frequency of update.  This allows you to minimize the number of state changes as well as make the fewest API calls to change state.  Both of these factors lead to better performance.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
	/// </remarks>	
	/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectConstantBuffer']/*"/>	
	/// <msdn-id>ff476670</msdn-id>	
	/// <unmanaged>ID3DX11EffectConstantBuffer</unmanaged>	
	/// <unmanaged-short>ID3DX11EffectConstantBuffer</unmanaged-short>	
	[Guid("2cb6c733-82d2-4000-b3da-6219d9a99bf2")]
	public partial class EffectConstantBuffer : SharpDX.Direct3D11.EffectVariable {
		/// <summary>
		/// Initializes a new instance of the <see cref="SharpDX.Direct3D11.EffectConstantBuffer"/> class.
		/// </summary>
		/// <param name="nativePtr">The native pointer.</param>	
		public EffectConstantBuffer(IntPtr nativePtr) : base(nativePtr) {
		}

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.Direct3D11.EffectConstantBuffer"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.Direct3D11.EffectConstantBuffer(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.Direct3D11.EffectConstantBuffer(nativePointer);
		}
		
		
		/// <summary>	
		/// <p>Set a constant-buffer.</p>	
		/// </summary>	
		/// <param name="constantBufferRef"><dd>  <p>A reference to a constant-buffer interface. See <strong><see cref="SharpDX.Direct3D11.Buffer"/></strong>.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectConstantBuffer::SetConstantBuffer']/*"/>	
		/// <msdn-id>ff476673</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectConstantBuffer::SetConstantBuffer([In] ID3D11Buffer* pConstantBuffer)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectConstantBuffer::SetConstantBuffer</unmanaged-short>	
		public void SetConstantBuffer(SharpDX.Direct3D11.Buffer constantBufferRef) {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, (void*)((constantBufferRef == null)?IntPtr.Zero:constantBufferRef.NativePointer),((void**)(*(void**)_nativePointer))[31]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Reverts a previously set constant buffer.</p>	
		/// </summary>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectConstantBuffer::UndoSetConstantBuffer']/*"/>	
		/// <msdn-id>ff476675</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectConstantBuffer::UndoSetConstantBuffer()</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectConstantBuffer::UndoSetConstantBuffer</unmanaged-short>	
		public void UndoSetConstantBuffer() {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer,((void**)(*(void**)_nativePointer))[32]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get a constant-buffer.</p>	
		/// </summary>	
		/// <returns><dd>  <p>The address of a reference to a constant-buffer interface. See <strong><see cref="SharpDX.Direct3D11.Buffer"/></strong>.</p> </dd></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectConstantBuffer::GetConstantBuffer']/*"/>	
		/// <msdn-id>ff476671</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectConstantBuffer::GetConstantBuffer([Out] ID3D11Buffer** ppConstantBuffer)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectConstantBuffer::GetConstantBuffer</unmanaged-short>	
		public SharpDX.Direct3D11.Buffer GetConstantBuffer() {
			unsafe {
				SharpDX.Direct3D11.Buffer constantBufferOut;
				IntPtr constantBufferOut_ = IntPtr.Zero;
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, &constantBufferOut_,((void**)(*(void**)_nativePointer))[33]);		
				constantBufferOut= (constantBufferOut_ == IntPtr.Zero)?null:new SharpDX.Direct3D11.Buffer(constantBufferOut_);	
				__result__.CheckError();
				return constantBufferOut;
			}
		}
		
		/// <summary>	
		/// <p>Set a texture-buffer.</p>	
		/// </summary>	
		/// <param name="textureBufferRef"><dd>  <p>A reference to a shader-resource-view interface for accessing a texture buffer.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectConstantBuffer::SetTextureBuffer']/*"/>	
		/// <msdn-id>ff476674</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectConstantBuffer::SetTextureBuffer([In] ID3D11ShaderResourceView* pTextureBuffer)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectConstantBuffer::SetTextureBuffer</unmanaged-short>	
		public void SetTextureBuffer(SharpDX.Direct3D11.ShaderResourceView textureBufferRef) {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, (void*)((textureBufferRef == null)?IntPtr.Zero:textureBufferRef.NativePointer),((void**)(*(void**)_nativePointer))[34]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Reverts a previously set texture buffer.</p>	
		/// </summary>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectConstantBuffer::UndoSetTextureBuffer']/*"/>	
		/// <msdn-id>ff476676</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectConstantBuffer::UndoSetTextureBuffer()</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectConstantBuffer::UndoSetTextureBuffer</unmanaged-short>	
		public void UndoSetTextureBuffer() {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer,((void**)(*(void**)_nativePointer))[35]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get a texture-buffer.</p>	
		/// </summary>	
		/// <returns><dd>  <p>The address of a reference to a shader-resource-view interface for accessing a texture buffer. See <strong><see cref="SharpDX.Direct3D11.ShaderResourceView"/></strong>.</p> </dd></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectConstantBuffer::GetTextureBuffer']/*"/>	
		/// <msdn-id>ff476672</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectConstantBuffer::GetTextureBuffer([Out] ID3D11ShaderResourceView** ppTextureBuffer)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectConstantBuffer::GetTextureBuffer</unmanaged-short>	
		public SharpDX.Direct3D11.ShaderResourceView GetTextureBuffer() {
			unsafe {
				SharpDX.Direct3D11.ShaderResourceView textureBufferOut;
				IntPtr textureBufferOut_ = IntPtr.Zero;
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, &textureBufferOut_,((void**)(*(void**)_nativePointer))[36]);		
				textureBufferOut= (textureBufferOut_ == IntPtr.Zero)?null:new SharpDX.Direct3D11.ShaderResourceView(textureBufferOut_);	
				__result__.CheckError();
				return textureBufferOut;
			}
		}
	}
	/// <summary>	
	/// <p>A depth-stencil-variable interface accesses depth-stencil state.</p>	
	/// </summary>	
	/// <remarks>	
	/// <p>An <strong><see cref="SharpDX.Direct3D11.EffectVariable"/></strong> interface is created when an effect is read into memory.</p><p>Effect variables are saved in memory in the backing store; when a technique is applied, the values in the backing store are copied to the device.  You can use either of these methods to return state.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
	/// </remarks>	
	/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectDepthStencilVariable']/*"/>	
	/// <msdn-id>ff476677</msdn-id>	
	/// <unmanaged>ID3DX11EffectDepthStencilVariable</unmanaged>	
	/// <unmanaged-short>ID3DX11EffectDepthStencilVariable</unmanaged-short>	
	[Guid("69b5751b-61a5-48e5-bd41-d93988111563")]
	public partial class EffectDepthStencilVariable : SharpDX.Direct3D11.EffectVariable {
		/// <summary>
		/// Initializes a new instance of the <see cref="SharpDX.Direct3D11.EffectDepthStencilVariable"/> class.
		/// </summary>
		/// <param name="nativePtr">The native pointer.</param>	
		public EffectDepthStencilVariable(IntPtr nativePtr) : base(nativePtr) {
		}

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.Direct3D11.EffectDepthStencilVariable"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.Direct3D11.EffectDepthStencilVariable(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.Direct3D11.EffectDepthStencilVariable(nativePointer);
		}
		
		
		/// <summary>	
		/// <p>Get a reference to a depth-stencil interface.</p>	
		/// </summary>	
		/// <param name="index"><dd>  <p>Index into an array of depth-stencil interfaces. If there is only one depth-stencil interface, use 0.</p> </dd></param>	
		/// <param name="stateOut"><dd>  <p>The address of a reference to a blend-state interface (see <strong><see cref="SharpDX.Direct3D11.DepthStencilState"/></strong>).</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectDepthStencilVariable::GetDepthStencilState']/*"/>	
		/// <msdn-id>ff476679</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectDepthStencilVariable::GetDepthStencilState([In] unsigned int Index,[Out] ID3D11DepthStencilState** ppState)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectDepthStencilVariable::GetDepthStencilState</unmanaged-short>	
		public void GetDepthStencilState(int index, out SharpDX.Direct3D11.DepthStencilState stateOut) {
			unsafe {
				IntPtr stateOut_ = IntPtr.Zero;
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, index, &stateOut_,((void**)(*(void**)_nativePointer))[31]);		
				stateOut= (stateOut_ == IntPtr.Zero)?null:new SharpDX.Direct3D11.DepthStencilState(stateOut_);	
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Sets the depth stencil state.</p>	
		/// </summary>	
		/// <param name="index"><dd>  <p>Index into an array of depth-stencil interfaces. If there is only one depth-stencil interface, use 0.</p> </dd></param>	
		/// <param name="stateRef"><dd>  <p>Pointer to an <strong><see cref="SharpDX.Direct3D11.DepthStencilState"/></strong> interface containing the new depth stencil state.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectDepthStencilVariable::SetDepthStencilState']/*"/>	
		/// <msdn-id>ff476680</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectDepthStencilVariable::SetDepthStencilState([In] unsigned int Index,[In] ID3D11DepthStencilState* pState)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectDepthStencilVariable::SetDepthStencilState</unmanaged-short>	
		public void SetDepthStencilState(int index, SharpDX.Direct3D11.DepthStencilState stateRef) {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, index, (void*)((stateRef == null)?IntPtr.Zero:stateRef.NativePointer),((void**)(*(void**)_nativePointer))[32]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Reverts a previously set depth stencil state.</p>	
		/// </summary>	
		/// <param name="index"><dd>  <p>Index into an array of depth-stencil interfaces. If there is only one depth-stencil interface, use 0.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectDepthStencilVariable::UndoSetDepthStencilState']/*"/>	
		/// <msdn-id>ff476681</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectDepthStencilVariable::UndoSetDepthStencilState([In] unsigned int Index)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectDepthStencilVariable::UndoSetDepthStencilState</unmanaged-short>	
		public void UndoSetDepthStencilState(int index) {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, index,((void**)(*(void**)_nativePointer))[33]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get a reference to a variable that contains depth-stencil state.</p>	
		/// </summary>	
		/// <param name="index"><dd>  <p>Index into an array of depth-stencil-state descriptions. If there is only one depth-stencil variable in the effect, use 0.</p> </dd></param>	
		/// <param name="descRef"><dd>  <p>A reference to a depth-stencil-state description (see <strong><see cref="SharpDX.Direct3D11.DepthStencilStateDescription"/></strong>).</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p>Effect variables are saved in memory in the backing store; when a technique is applied, the values in the backing store are copied to the device.  Backing store data can used to recreate the variable when necessary.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectDepthStencilVariable::GetBackingStore']/*"/>	
		/// <msdn-id>ff476678</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectDepthStencilVariable::GetBackingStore([In] unsigned int Index,[Out] D3D11_DEPTH_STENCIL_DESC* pDesc)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectDepthStencilVariable::GetBackingStore</unmanaged-short>	
		public void GetBackingStore(int index, out SharpDX.Direct3D11.DepthStencilStateDescription descRef) {
			unsafe {
				descRef = new SharpDX.Direct3D11.DepthStencilStateDescription();
				SharpDX.Result __result__;
				fixed (void* descRef_ = &descRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, index, descRef_,((void**)(*(void**)_nativePointer))[34]);		
				__result__.CheckError();
			}
		}
	}
	/// <summary>	
	/// <p>A depth-stencil-view-variable interface accesses a depth-stencil view.</p>	
	/// </summary>	
	/// <remarks>	
	/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
	/// </remarks>	
	/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectDepthStencilViewVariable']/*"/>	
	/// <msdn-id>ff476682</msdn-id>	
	/// <unmanaged>ID3DX11EffectDepthStencilViewVariable</unmanaged>	
	/// <unmanaged-short>ID3DX11EffectDepthStencilViewVariable</unmanaged-short>	
	[Guid("33c648ac-2e9e-4a2e-9cd6-de31acc5b347")]
	public partial class EffectDepthStencilViewVariable : SharpDX.Direct3D11.EffectVariable {
		/// <summary>
		/// Initializes a new instance of the <see cref="SharpDX.Direct3D11.EffectDepthStencilViewVariable"/> class.
		/// </summary>
		/// <param name="nativePtr">The native pointer.</param>	
		public EffectDepthStencilViewVariable(IntPtr nativePtr) : base(nativePtr) {
		}

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.Direct3D11.EffectDepthStencilViewVariable"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.Direct3D11.EffectDepthStencilViewVariable(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.Direct3D11.EffectDepthStencilViewVariable(nativePointer);
		}
		
		
		/// <summary>	
		/// <p>Set a depth-stencil-view resource.</p>	
		/// </summary>	
		/// <param name="resourceRef"><dd>  <p>A reference to a depth-stencil-view interface. See <strong><see cref="SharpDX.Direct3D11.DepthStencilView"/></strong>.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectDepthStencilViewVariable::SetDepthStencil']/*"/>	
		/// <msdn-id>ff476685</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectDepthStencilViewVariable::SetDepthStencil([In] ID3D11DepthStencilView* pResource)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectDepthStencilViewVariable::SetDepthStencil</unmanaged-short>	
		public void SetDepthStencil(SharpDX.Direct3D11.DepthStencilView resourceRef) {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, (void*)((resourceRef == null)?IntPtr.Zero:resourceRef.NativePointer),((void**)(*(void**)_nativePointer))[31]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get a depth-stencil-view resource.</p>	
		/// </summary>	
		/// <returns><dd>  <p>The address of a reference to a depth-stencil-view interface. See <strong><see cref="SharpDX.Direct3D11.DepthStencilView"/></strong>.</p> </dd></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectDepthStencilViewVariable::GetDepthStencil']/*"/>	
		/// <msdn-id>ff476683</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectDepthStencilViewVariable::GetDepthStencil([Out] ID3D11DepthStencilView** ppResource)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectDepthStencilViewVariable::GetDepthStencil</unmanaged-short>	
		public SharpDX.Direct3D11.DepthStencilView GetDepthStencil() {
			unsafe {
				SharpDX.Direct3D11.DepthStencilView resourceOut;
				IntPtr resourceOut_ = IntPtr.Zero;
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, &resourceOut_,((void**)(*(void**)_nativePointer))[32]);		
				resourceOut= (resourceOut_ == IntPtr.Zero)?null:new SharpDX.Direct3D11.DepthStencilView(resourceOut_);	
				__result__.CheckError();
				return resourceOut;
			}
		}
		
		/// <summary>	
		/// <p>Set an array of depth-stencil-view resources.</p>	
		/// </summary>	
		/// <param name="resourcesOut"><dd>  <p>A reference to an array of depth-stencil-view interfaces. See <strong><see cref="SharpDX.Direct3D11.DepthStencilView"/></strong>.</p> </dd></param>	
		/// <param name="offset"><dd>  <p>The zero-based array index to set the first interface.</p> </dd></param>	
		/// <param name="count"><dd>  <p>The number of elements in the array.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectDepthStencilViewVariable::SetDepthStencilArray']/*"/>	
		/// <msdn-id>ff476686</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectDepthStencilViewVariable::SetDepthStencilArray([In, Buffer] ID3D11DepthStencilView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectDepthStencilViewVariable::SetDepthStencilArray</unmanaged-short>	
		internal void SetDepthStencilArray(SharpDX.Direct3D11.DepthStencilView[] resourcesOut, int offset, int count) {
			unsafe {
				IntPtr* resourcesOut_ = (IntPtr*)0;
				if ( resourcesOut != null ) {
					IntPtr* resourcesOut__ = stackalloc IntPtr[resourcesOut.Length];
					resourcesOut_ = resourcesOut__;
					for (int i = 0; i < resourcesOut.Length; i++)                        
						resourcesOut_[i] =  (resourcesOut[i] == null)? IntPtr.Zero : resourcesOut[i].NativePointer;
				}
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, resourcesOut_, offset, count,((void**)(*(void**)_nativePointer))[33]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Set an array of depth-stencil-view resources.</p>	
		/// </summary>	
		/// <param name="resourcesOut"><dd>  <p>A reference to an array of depth-stencil-view interfaces. See <strong><see cref="SharpDX.Direct3D11.DepthStencilView"/></strong>.</p> </dd></param>	
		/// <param name="offset"><dd>  <p>The zero-based array index to set the first interface.</p> </dd></param>	
		/// <param name="count"><dd>  <p>The number of elements in the array.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectDepthStencilViewVariable::SetDepthStencilArray']/*"/>	
		/// <msdn-id>ff476686</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectDepthStencilViewVariable::SetDepthStencilArray([In, Buffer] ID3D11DepthStencilView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectDepthStencilViewVariable::SetDepthStencilArray</unmanaged-short>	
		internal void SetDepthStencilArray(SharpDX.ComArray<SharpDX.Direct3D11.DepthStencilView> resourcesOut, int offset, int count) {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, (void*)((resourcesOut == null)?IntPtr.Zero:resourcesOut.NativePointer), offset, count,((void**)(*(void**)_nativePointer))[33]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Set an array of depth-stencil-view resources.</p>	
		/// </summary>	
		/// <param name="resourcesOut"><dd>  <p>A reference to an array of depth-stencil-view interfaces. See <strong><see cref="SharpDX.Direct3D11.DepthStencilView"/></strong>.</p> </dd></param>	
		/// <param name="offset"><dd>  <p>The zero-based array index to set the first interface.</p> </dd></param>	
		/// <param name="count"><dd>  <p>The number of elements in the array.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectDepthStencilViewVariable::SetDepthStencilArray']/*"/>	
		/// <msdn-id>ff476686</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectDepthStencilViewVariable::SetDepthStencilArray([In, Buffer] ID3D11DepthStencilView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectDepthStencilViewVariable::SetDepthStencilArray</unmanaged-short>	
		private void SetDepthStencilArray(System.IntPtr resourcesOut, int offset, int count) {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, (void*)resourcesOut, offset, count,((void**)(*(void**)_nativePointer))[33]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get an array of depth-stencil-view resources.</p>	
		/// </summary>	
		/// <param name="resourcesOut"><dd>  <p>A reference to an array of depth-stencil-view interfaces. See <strong><see cref="SharpDX.Direct3D11.DepthStencilView"/></strong>.</p> </dd></param>	
		/// <param name="offset"><dd>  <p>The zero-based array index to get the first interface.</p> </dd></param>	
		/// <param name="count"><dd>  <p>The number of elements in the array.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectDepthStencilViewVariable::GetDepthStencilArray']/*"/>	
		/// <msdn-id>ff476684</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectDepthStencilViewVariable::GetDepthStencilArray([Out, Buffer] ID3D11DepthStencilView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectDepthStencilViewVariable::GetDepthStencilArray</unmanaged-short>	
		internal void GetDepthStencilArray(SharpDX.Direct3D11.DepthStencilView[] resourcesOut, int offset, int count) {
			unsafe {
				IntPtr* resourcesOut_ = stackalloc IntPtr[resourcesOut.Length];
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, resourcesOut_, offset, count,((void**)(*(void**)_nativePointer))[34]);		
				for (int i = 0; i < resourcesOut.Length; i++)
					resourcesOut[i] = (resourcesOut_[i] == IntPtr.Zero)?null:new SharpDX.Direct3D11.DepthStencilView(resourcesOut_[i]);	
				__result__.CheckError();
			}
		}
	}
	/// <summary>	
	/// <p>The <strong><see cref="SharpDX.Direct3D11.EffectGroup"/></strong> interface accesses an Effect group.</p><p>The lifetime of an <strong><see cref="SharpDX.Direct3D11.EffectGroup"/></strong> object is equal to the lifetime of its parent <strong><see cref="SharpDX.Direct3D11.Effect"/></strong> object.</p><ul> <li>Methods</li> </ul>	
	/// </summary>	
	/// <remarks>	
	/// <p>To get an <strong><see cref="SharpDX.Direct3D11.EffectGroup"/></strong> interface, call a method like <strong><see cref="SharpDX.Direct3D11.Effect.GetGroupByName"/></strong>.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
	/// </remarks>	
	/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectGroup']/*"/>	
	/// <msdn-id>ff476687</msdn-id>	
	/// <unmanaged>ID3DX11EffectGroup</unmanaged>	
	/// <unmanaged-short>ID3DX11EffectGroup</unmanaged-short>	
	[Guid("03074acf-97de-485f-b201-cb775264afd6")]
	public partial class EffectGroup : SharpDX.ComObject {
		/// <summary>
		/// Initializes a new instance of the <see cref="SharpDX.Direct3D11.EffectGroup"/> class.
		/// </summary>
		/// <param name="nativePtr">The native pointer.</param>	
		public EffectGroup(IntPtr nativePtr) : base(nativePtr) {
		}

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.Direct3D11.EffectGroup"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.Direct3D11.EffectGroup(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.Direct3D11.EffectGroup(nativePointer);
		}
		
		
		/// <summary>	
		/// <p>Test an effect to see if it contains valid syntax.</p>	
		/// </summary>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectGroup::IsValid']/*"/>	
		/// <msdn-id>ff476693</msdn-id>	
		/// <unmanaged>IsValid</unmanaged>	
		/// <unmanaged-short>IsValid</unmanaged-short>	
		/// <unmanaged>BOOL ID3DX11EffectGroup::IsValid()</unmanaged>
		public SharpDX.Mathematics.Interop.RawBool IsValid {
				get { return IsValid_(); }
		}
		
		/// <summary>	
		/// <p>Gets a group description.</p>	
		/// </summary>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectGroup::GetDesc']/*"/>	
		/// <msdn-id>ff476690</msdn-id>	
		/// <unmanaged>GetDesc</unmanaged>	
		/// <unmanaged-short>GetDesc</unmanaged-short>	
		/// <unmanaged>HRESULT ID3DX11EffectGroup::GetDesc([Out] D3DX11_GROUP_DESC* pDesc)</unmanaged>
		public SharpDX.Direct3D11.EffectGroupDescription Description {
				get { SharpDX.Direct3D11.EffectGroupDescription __output__; GetDescription(out __output__); return __output__; }
		}
		
		/// <summary>	
		/// <p>Test an effect to see if it contains valid syntax.</p>	
		/// </summary>	
		/// <returns><p><strong>TRUE</strong> if the code syntax is valid; otherwise <strong><see cref="SharpDX.Result.False"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectGroup::IsValid']/*"/>	
		/// <msdn-id>ff476693</msdn-id>	
		/// <unmanaged>BOOL ID3DX11EffectGroup::IsValid()</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectGroup::IsValid</unmanaged-short>	
		internal SharpDX.Mathematics.Interop.RawBool IsValid_() {
			unsafe {
				SharpDX.Mathematics.Interop.RawBool __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.CalliSharpDXMathematicsInteropRawBool(_nativePointer,((void**)(*(void**)_nativePointer))[3]);		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Gets a group description.</p>	
		/// </summary>	
		/// <param name="descRef"><dd>  <p>A reference to a <strong><see cref="SharpDX.Direct3D11.EffectGroupDescription"/></strong> structure.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectGroup::GetDesc']/*"/>	
		/// <msdn-id>ff476690</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectGroup::GetDesc([Out] D3DX11_GROUP_DESC* pDesc)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectGroup::GetDesc</unmanaged-short>	
		internal void GetDescription(out SharpDX.Direct3D11.EffectGroupDescription descRef) {
			unsafe {
				var descRef_ = new SharpDX.Direct3D11.EffectGroupDescription.__Native();
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, &descRef_,((void**)(*(void**)_nativePointer))[4]);		
				descRef = new SharpDX.Direct3D11.EffectGroupDescription();
				descRef.__MarshalFrom(ref descRef_);
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get an annotation by index.</p>	
		/// </summary>	
		/// <param name="index"><dd>  <p>Index of the annotation.</p> </dd></param>	
		/// <returns><p>Pointer to an <strong><see cref="SharpDX.Direct3D11.EffectVariable"/></strong> interface.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectGroup::GetAnnotationByIndex']/*"/>	
		/// <msdn-id>ff476688</msdn-id>	
		/// <unmanaged>ID3DX11EffectVariable* ID3DX11EffectGroup::GetAnnotationByIndex([In] unsigned int Index)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectGroup::GetAnnotationByIndex</unmanaged-short>	
		public SharpDX.Direct3D11.EffectVariable GetAnnotationByIndex(int index) {
			unsafe {
				SharpDX.Direct3D11.EffectVariable __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectVariable((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer, index,((void**)(*(void**)_nativePointer))[5]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get an annotation by name.</p>	
		/// </summary>	
		/// <param name="name"><dd>  <p>The name of the annotation.</p> </dd></param>	
		/// <returns><p>A reference to an <strong><see cref="SharpDX.Direct3D11.EffectVariable"/></strong>. Note that if the annotation is not found the <strong><see cref="SharpDX.Direct3D11.EffectVariable"/></strong> returned will be empty. The <strong><see cref="SharpDX.Direct3D11.EffectVariable.IsValid_"/></strong> method should be called to determine whether the annotation was found.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectGroup::GetAnnotationByName']/*"/>	
		/// <msdn-id>ff476689</msdn-id>	
		/// <unmanaged>ID3DX11EffectVariable* ID3DX11EffectGroup::GetAnnotationByName([In] const char* Name)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectGroup::GetAnnotationByName</unmanaged-short>	
		public SharpDX.Direct3D11.EffectVariable GetAnnotationByName(string name) {
			unsafe {
				IntPtr name_ = Utilities.StringToHGlobalAnsi(name);
				SharpDX.Direct3D11.EffectVariable __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectVariable((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer, (void*)name_,((void**)(*(void**)_nativePointer))[6]));		
				Marshal.FreeHGlobal(name_ );
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get a technique by index.</p>	
		/// </summary>	
		/// <param name="index"><dd>  <p>A zero-based index.</p> </dd></param>	
		/// <returns><p>A reference to an <strong><see cref="SharpDX.Direct3D11.EffectTechnique"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectGroup::GetTechniqueByIndex']/*"/>	
		/// <msdn-id>ff476691</msdn-id>	
		/// <unmanaged>ID3DX11EffectTechnique* ID3DX11EffectGroup::GetTechniqueByIndex([In] unsigned int Index)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectGroup::GetTechniqueByIndex</unmanaged-short>	
		public SharpDX.Direct3D11.EffectTechnique GetTechniqueByIndex(int index) {
			unsafe {
				SharpDX.Direct3D11.EffectTechnique __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectTechnique((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer, index,((void**)(*(void**)_nativePointer))[7]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get a technique by name.</p>	
		/// </summary>	
		/// <param name="name"><dd>  <p>The name of the technique.</p> </dd></param>	
		/// <returns><p>A reference to an <strong><see cref="SharpDX.Direct3D11.EffectTechnique"/></strong>, or <strong><c>null</c></strong> if the technique is not found.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectGroup::GetTechniqueByName']/*"/>	
		/// <msdn-id>ff476692</msdn-id>	
		/// <unmanaged>ID3DX11EffectTechnique* ID3DX11EffectGroup::GetTechniqueByName([In] const char* Name)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectGroup::GetTechniqueByName</unmanaged-short>	
		public SharpDX.Direct3D11.EffectTechnique GetTechniqueByName(string name) {
			unsafe {
				IntPtr name_ = Utilities.StringToHGlobalAnsi(name);
				SharpDX.Direct3D11.EffectTechnique __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectTechnique((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer, (void*)name_,((void**)(*(void**)_nativePointer))[8]));		
				Marshal.FreeHGlobal(name_ );
				return __result__;
			}
		}
	}
	/// <summary>	
	/// <p>Accesses an interface variable.</p>	
	/// </summary>	
	/// <remarks>	
	/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
	/// </remarks>	
	/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectInterfaceVariable']/*"/>	
	/// <msdn-id>ff476694</msdn-id>	
	/// <unmanaged>ID3DX11EffectInterfaceVariable</unmanaged>	
	/// <unmanaged-short>ID3DX11EffectInterfaceVariable</unmanaged-short>	
	[Guid("516c8cd8-1c80-40a4-b19b-0688792f11a5")]
	public partial class EffectInterfaceVariable : SharpDX.Direct3D11.EffectVariable {
		/// <summary>
		/// Initializes a new instance of the <see cref="SharpDX.Direct3D11.EffectInterfaceVariable"/> class.
		/// </summary>
		/// <param name="nativePtr">The native pointer.</param>	
		public EffectInterfaceVariable(IntPtr nativePtr) : base(nativePtr) {
		}

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.Direct3D11.EffectInterfaceVariable"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.Direct3D11.EffectInterfaceVariable(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.Direct3D11.EffectInterfaceVariable(nativePointer);
		}
		
		
		/// <summary>	
		/// <p>Get or sets a class instance.</p>	
		/// </summary>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectInterfaceVariable::GetClassInstance']/*"/>	
		/// <msdn-id>ff476695</msdn-id>	
		/// <unmanaged>GetClassInstance / SetClassInstance</unmanaged>	
		/// <unmanaged-short>GetClassInstance</unmanaged-short>	
		/// <unmanaged>HRESULT ID3DX11EffectInterfaceVariable::GetClassInstance([Out] ID3DX11EffectClassInstanceVariable** ppEffectClassInstance)</unmanaged>
		public SharpDX.Direct3D11.EffectClassInstanceVariable ClassInstance {
				get { SharpDX.Direct3D11.EffectClassInstanceVariable __output__; GetClassInstance(out __output__); return __output__; }
				set { SetClassInstance(value); }
		}
		
		/// <summary>	
		/// <p>Sets a class instance.</p>	
		/// </summary>	
		/// <param name="effectClassInstanceRef"><dd>  <p>Pointer to an <strong><see cref="SharpDX.Direct3D11.EffectClassInstanceVariable"/></strong> interface.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectInterfaceVariable::SetClassInstance']/*"/>	
		/// <msdn-id>ff476696</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectInterfaceVariable::SetClassInstance([In] ID3DX11EffectClassInstanceVariable* pEffectClassInstance)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectInterfaceVariable::SetClassInstance</unmanaged-short>	
		internal void SetClassInstance(SharpDX.Direct3D11.EffectClassInstanceVariable effectClassInstanceRef) {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, (void*)((effectClassInstanceRef == null)?IntPtr.Zero:effectClassInstanceRef.NativePointer),((void**)(*(void**)_nativePointer))[31]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get a class instance.</p>	
		/// </summary>	
		/// <param name="effectClassInstanceOut"><dd>  <p>Pointer to an <strong><see cref="SharpDX.Direct3D11.EffectClassInstanceVariable"/></strong> reference that will be set to the class instance.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectInterfaceVariable::GetClassInstance']/*"/>	
		/// <msdn-id>ff476695</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectInterfaceVariable::GetClassInstance([Out] ID3DX11EffectClassInstanceVariable** ppEffectClassInstance)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectInterfaceVariable::GetClassInstance</unmanaged-short>	
		internal void GetClassInstance(out SharpDX.Direct3D11.EffectClassInstanceVariable effectClassInstanceOut) {
			unsafe {
				IntPtr effectClassInstanceOut_ = IntPtr.Zero;
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, &effectClassInstanceOut_,((void**)(*(void**)_nativePointer))[32]);		
				effectClassInstanceOut= (effectClassInstanceOut_ == IntPtr.Zero)?null:new SharpDX.Direct3D11.EffectClassInstanceVariable(effectClassInstanceOut_);	
				__result__.CheckError();
			}
		}
	}
	/// <summary>	
	/// <p>A matrix-variable interface accesses a matrix.</p>	
	/// </summary>	
	/// <remarks>	
	/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
	/// </remarks>	
	/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectMatrixVariable']/*"/>	
	/// <msdn-id>ff476697</msdn-id>	
	/// <unmanaged>ID3DX11EffectMatrixVariable</unmanaged>	
	/// <unmanaged-short>ID3DX11EffectMatrixVariable</unmanaged-short>	
	[Guid("e1096cf4-c027-419a-8d86-d29173dc803e")]
	public partial class EffectMatrixVariable : SharpDX.Direct3D11.EffectVariable {
		/// <summary>
		/// Initializes a new instance of the <see cref="SharpDX.Direct3D11.EffectMatrixVariable"/> class.
		/// </summary>
		/// <param name="nativePtr">The native pointer.</param>	
		public EffectMatrixVariable(IntPtr nativePtr) : base(nativePtr) {
		}

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.Direct3D11.EffectMatrixVariable"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.Direct3D11.EffectMatrixVariable(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.Direct3D11.EffectMatrixVariable(nativePointer);
		}
		
		
		/// <summary>	
		/// <p>Set a floating-point matrix.</p>	
		/// </summary>	
		/// <param name="dataRef"><dd>  <p>A reference to the first element in the matrix.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectMatrixVariable::SetMatrix']/*"/>	
		/// <msdn-id>ff476702</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectMatrixVariable::SetMatrix([In] const SHARPDX_MATRIX* pData)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectMatrixVariable::SetMatrix</unmanaged-short>	
		public void SetMatrix(ref SharpDX.Mathematics.Interop.RawMatrix dataRef) {
			unsafe {
				SharpDX.Result __result__;
				fixed (void* dataRef_ = &dataRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, dataRef_,((void**)(*(void**)_nativePointer))[31]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get a matrix.</p>	
		/// </summary>	
		/// <param name="dataRef"><dd>  <p>A reference to the first element in a matrix.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectMatrixVariable::GetMatrix']/*"/>	
		/// <msdn-id>ff476698</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectMatrixVariable::GetMatrix([Out] SHARPDX_MATRIX* pData)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectMatrixVariable::GetMatrix</unmanaged-short>	
		internal void GetMatrix(out SharpDX.Mathematics.Interop.RawMatrix dataRef) {
			unsafe {
				dataRef = new SharpDX.Mathematics.Interop.RawMatrix();
				SharpDX.Result __result__;
				fixed (void* dataRef_ = &dataRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, dataRef_,((void**)(*(void**)_nativePointer))[32]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Set an array of floating-point matrices.</p>	
		/// </summary>	
		/// <param name="dataRef"><dd>  <p>A reference to the first matrix.</p> </dd></param>	
		/// <param name="offset"><dd>  <p>The number of matrix elements to skip from the start of the array.</p> </dd></param>	
		/// <param name="count"><dd>  <p>The number of elements to set.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectMatrixVariable::SetMatrixArray']/*"/>	
		/// <msdn-id>ff476703</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectMatrixVariable::SetMatrixArray([In, Buffer] const SHARPDX_MATRIX* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectMatrixVariable::SetMatrixArray</unmanaged-short>	
		internal void SetMatrixArray(SharpDX.Mathematics.Interop.RawMatrix[] dataRef, int offset, int count) {
			unsafe {
				SharpDX.Result __result__;
				fixed (void* dataRef_ = dataRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, dataRef_, offset, count,((void**)(*(void**)_nativePointer))[33]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get an array of matrices.</p>	
		/// </summary>	
		/// <param name="dataRef"><dd>  <p>A reference to the first element of the first matrix in an array of matrices.</p> </dd></param>	
		/// <param name="offset"><dd>  <p>The offset (in number of matrices) between the start of the array and the first matrix returned.</p> </dd></param>	
		/// <param name="count"><dd>  <p>The number of matrices in the returned array.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectMatrixVariable::GetMatrixArray']/*"/>	
		/// <msdn-id>ff476699</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectMatrixVariable::GetMatrixArray([Out, Buffer] SHARPDX_MATRIX* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectMatrixVariable::GetMatrixArray</unmanaged-short>	
		internal void GetMatrixArray(SharpDX.Mathematics.Interop.RawMatrix[] dataRef, int offset, int count) {
			unsafe {
				SharpDX.Result __result__;
				fixed (void* dataRef_ = dataRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, dataRef_, offset, count,((void**)(*(void**)_nativePointer))[34]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// No documentation.	
		/// </summary>	
		/// <param name="dataOut">No documentation.</param>	
		/// <param name="offset">No documentation.</param>	
		/// <param name="count">No documentation.</param>	
		/// <returns>No documentation.</returns>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectMatrixVariable::SetMatrixPointerArray']/*"/>	
		/// <unmanaged>HRESULT ID3DX11EffectMatrixVariable::SetMatrixPointerArray([In, Buffer] const float** ppData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectMatrixVariable::SetMatrixPointerArray</unmanaged-short>	
		internal void SetMatrixPointerArray(float[] dataOut, int offset, int count) {
			unsafe {
				SharpDX.Result __result__;
				fixed (void* dataOut_ = dataOut)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, dataOut_, offset, count,((void**)(*(void**)_nativePointer))[35]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// No documentation.	
		/// </summary>	
		/// <param name="dataOut">No documentation.</param>	
		/// <param name="offset">No documentation.</param>	
		/// <param name="count">No documentation.</param>	
		/// <returns>No documentation.</returns>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectMatrixVariable::GetMatrixPointerArray']/*"/>	
		/// <unmanaged>HRESULT ID3DX11EffectMatrixVariable::GetMatrixPointerArray([Out, Buffer] float** ppData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectMatrixVariable::GetMatrixPointerArray</unmanaged-short>	
		internal void GetMatrixPointerArray(float[] dataOut, int offset, int count) {
			unsafe {
				SharpDX.Result __result__;
				fixed (void* dataOut_ = dataOut)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, dataOut_, offset, count,((void**)(*(void**)_nativePointer))[36]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Transpose and set a floating-point matrix.</p>	
		/// </summary>	
		/// <param name="dataRef"><dd>  <p>A reference to the first element of a matrix.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p>Transposing a matrix will rearrange the data order from row-column order to column-row order (or vice versa).</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectMatrixVariable::SetMatrixTranspose']/*"/>	
		/// <msdn-id>ff476704</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectMatrixVariable::SetMatrixTranspose([In] const SHARPDX_MATRIX* pData)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectMatrixVariable::SetMatrixTranspose</unmanaged-short>	
		public void SetMatrixTranspose(ref SharpDX.Mathematics.Interop.RawMatrix dataRef) {
			unsafe {
				SharpDX.Result __result__;
				fixed (void* dataRef_ = &dataRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, dataRef_,((void**)(*(void**)_nativePointer))[37]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Transpose and get a floating-point matrix.</p>	
		/// </summary>	
		/// <param name="dataRef"><dd>  <p>A reference to the first element of a transposed matrix.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p>Transposing a matrix will rearrange the data order from row-column order to column-row order (or vice versa).</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectMatrixVariable::GetMatrixTranspose']/*"/>	
		/// <msdn-id>ff476700</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectMatrixVariable::GetMatrixTranspose([Out] SHARPDX_MATRIX* pData)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectMatrixVariable::GetMatrixTranspose</unmanaged-short>	
		internal void GetMatrixTranspose(out SharpDX.Mathematics.Interop.RawMatrix dataRef) {
			unsafe {
				dataRef = new SharpDX.Mathematics.Interop.RawMatrix();
				SharpDX.Result __result__;
				fixed (void* dataRef_ = &dataRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, dataRef_,((void**)(*(void**)_nativePointer))[38]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Transpose and set an array of floating-point matrices.</p>	
		/// </summary>	
		/// <param name="dataRef"><dd>  <p>A reference to an array of matrices.</p> </dd></param>	
		/// <param name="offset"><dd>  <p>The offset (in number of matrices) between the start of the array and the first matrix to set.</p> </dd></param>	
		/// <param name="count"><dd>  <p>The number of matrices in the array to set.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p>Transposing a matrix will rearrange the data order from row-column order to column-row order (or vice versa).</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectMatrixVariable::SetMatrixTransposeArray']/*"/>	
		/// <msdn-id>ff476705</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectMatrixVariable::SetMatrixTransposeArray([In, Buffer] const SHARPDX_MATRIX* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectMatrixVariable::SetMatrixTransposeArray</unmanaged-short>	
		internal void SetMatrixTransposeArray(SharpDX.Mathematics.Interop.RawMatrix[] dataRef, int offset, int count) {
			unsafe {
				SharpDX.Result __result__;
				fixed (void* dataRef_ = dataRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, dataRef_, offset, count,((void**)(*(void**)_nativePointer))[39]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Transpose and get an array of floating-point matrices.</p>	
		/// </summary>	
		/// <param name="dataRef"><dd>  <p>A reference to the first element of an array of tranposed matrices.</p> </dd></param>	
		/// <param name="offset"><dd>  <p>The offset (in number of matrices) between the start of the array and the first matrix to get.</p> </dd></param>	
		/// <param name="count"><dd>  <p>The number of matrices in the array to get.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p>Transposing a matrix will rearrange the data order from row-column order to column-row order (or vice versa).</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectMatrixVariable::GetMatrixTransposeArray']/*"/>	
		/// <msdn-id>ff476701</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectMatrixVariable::GetMatrixTransposeArray([Out, Buffer] SHARPDX_MATRIX* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectMatrixVariable::GetMatrixTransposeArray</unmanaged-short>	
		internal void GetMatrixTransposeArray(SharpDX.Mathematics.Interop.RawMatrix[] dataRef, int offset, int count) {
			unsafe {
				SharpDX.Result __result__;
				fixed (void* dataRef_ = dataRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, dataRef_, offset, count,((void**)(*(void**)_nativePointer))[40]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// No documentation.	
		/// </summary>	
		/// <param name="dataOut">No documentation.</param>	
		/// <param name="offset">No documentation.</param>	
		/// <param name="count">No documentation.</param>	
		/// <returns>No documentation.</returns>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectMatrixVariable::SetMatrixTransposePointerArray']/*"/>	
		/// <unmanaged>HRESULT ID3DX11EffectMatrixVariable::SetMatrixTransposePointerArray([In, Buffer] const float** ppData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectMatrixVariable::SetMatrixTransposePointerArray</unmanaged-short>	
		internal void SetMatrixTransposePointerArray(float[] dataOut, int offset, int count) {
			unsafe {
				SharpDX.Result __result__;
				fixed (void* dataOut_ = dataOut)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, dataOut_, offset, count,((void**)(*(void**)_nativePointer))[41]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// No documentation.	
		/// </summary>	
		/// <param name="dataOut">No documentation.</param>	
		/// <param name="offset">No documentation.</param>	
		/// <param name="count">No documentation.</param>	
		/// <returns>No documentation.</returns>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectMatrixVariable::GetMatrixTransposePointerArray']/*"/>	
		/// <unmanaged>HRESULT ID3DX11EffectMatrixVariable::GetMatrixTransposePointerArray([Out, Buffer] float** ppData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectMatrixVariable::GetMatrixTransposePointerArray</unmanaged-short>	
		internal void GetMatrixTransposePointerArray(float[] dataOut, int offset, int count) {
			unsafe {
				SharpDX.Result __result__;
				fixed (void* dataOut_ = dataOut)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, dataOut_, offset, count,((void**)(*(void**)_nativePointer))[42]);		
				__result__.CheckError();
			}
		}
	}
	/// <summary>	
	/// <p>An <strong><see cref="SharpDX.Direct3D11.EffectPass"/></strong> interface encapsulates state assignments within a technique.</p><p>The lifetime of an <strong><see cref="SharpDX.Direct3D11.EffectPass"/></strong> object is equal to the lifetime of its parent <strong><see cref="SharpDX.Direct3D11.Effect"/></strong> object.</p><ul> <li>Methods</li> </ul>	
	/// </summary>	
	/// <remarks>	
	/// <p>A pass is a block of code that sets render-state objects and shaders. A pass is declared within a technique.</p><p>To get an effect-pass interface, call a method like <strong><see cref="SharpDX.Direct3D11.EffectTechnique.GetPassByName"/></strong>.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
	/// </remarks>	
	/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectPass']/*"/>	
	/// <msdn-id>ff476706</msdn-id>	
	/// <unmanaged>ID3DX11EffectPass</unmanaged>	
	/// <unmanaged-short>ID3DX11EffectPass</unmanaged-short>	
	[Guid("3437cec4-4ac1-4d87-8916-f4bd5a41380c")]
	public partial class EffectPass : SharpDX.ComObject {
		/// <summary>
		/// Initializes a new instance of the <see cref="SharpDX.Direct3D11.EffectPass"/> class.
		/// </summary>
		/// <param name="nativePtr">The native pointer.</param>	
		public EffectPass(IntPtr nativePtr) : base(nativePtr) {
		}

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.Direct3D11.EffectPass"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.Direct3D11.EffectPass(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.Direct3D11.EffectPass(nativePointer);
		}
		
		
		/// <summary>	
		/// <p>Test a pass to see if it contains valid syntax.</p>	
		/// </summary>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectPass::IsValid']/*"/>	
		/// <msdn-id>ff476718</msdn-id>	
		/// <unmanaged>IsValid</unmanaged>	
		/// <unmanaged-short>IsValid</unmanaged-short>	
		/// <unmanaged>BOOL ID3DX11EffectPass::IsValid()</unmanaged>
		public SharpDX.Mathematics.Interop.RawBool IsValid {
				get { return IsValid_(); }
		}
		
		/// <summary>	
		/// <p>Get a pass description.</p>	
		/// </summary>	
		/// <remarks>	
		/// <p>A pass is a block of code that sets render state and shaders (which in turn sets constant buffers, samplers and textures).  An effect technique contains one or more passes.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectPass::GetDesc']/*"/>	
		/// <msdn-id>ff476712</msdn-id>	
		/// <unmanaged>GetDesc</unmanaged>	
		/// <unmanaged-short>GetDesc</unmanaged-short>	
		/// <unmanaged>HRESULT ID3DX11EffectPass::GetDesc([Out] D3DX11_PASS_DESC* pDesc)</unmanaged>
		public SharpDX.Direct3D11.EffectPassDescription Description {
				get { SharpDX.Direct3D11.EffectPassDescription __output__; GetDescription(out __output__); return __output__; }
		}
		
		/// <summary>	
		/// <p>Get a vertex-shader description.</p>	
		/// </summary>	
		/// <remarks>	
		/// <p>An effect pass can contain render state assignments and shader object assignments.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectPass::GetVertexShaderDesc']/*"/>	
		/// <msdn-id>ff476717</msdn-id>	
		/// <unmanaged>GetVertexShaderDesc</unmanaged>	
		/// <unmanaged-short>GetVertexShaderDesc</unmanaged-short>	
		/// <unmanaged>HRESULT ID3DX11EffectPass::GetVertexShaderDesc([Out] D3DX11_PASS_SHADER_DESC* pDesc)</unmanaged>
		public SharpDX.Direct3D11.EffectPassShaderDescription VertexShaderDescription {
				get { SharpDX.Direct3D11.EffectPassShaderDescription __output__; GetVertexShaderDescription(out __output__); return __output__; }
		}
		
		/// <summary>	
		/// <p>Get a geometry-shader description.</p>	
		/// </summary>	
		/// <remarks>	
		/// <p>An effect pass can contain render state assignments and shader object assignments.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectPass::GetGeometryShaderDesc']/*"/>	
		/// <msdn-id>ff476714</msdn-id>	
		/// <unmanaged>GetGeometryShaderDesc</unmanaged>	
		/// <unmanaged-short>GetGeometryShaderDesc</unmanaged-short>	
		/// <unmanaged>HRESULT ID3DX11EffectPass::GetGeometryShaderDesc([Out] D3DX11_PASS_SHADER_DESC* pDesc)</unmanaged>
		public SharpDX.Direct3D11.EffectPassShaderDescription GeometryShaderDescription {
				get { SharpDX.Direct3D11.EffectPassShaderDescription __output__; GetGeometryShaderDescription(out __output__); return __output__; }
		}
		
		/// <summary>	
		/// <p>Get a pixel-shader description.</p>	
		/// </summary>	
		/// <remarks>	
		/// <p>An effect pass can contain render state assignments and shader object assignments.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectPass::GetPixelShaderDesc']/*"/>	
		/// <msdn-id>ff476716</msdn-id>	
		/// <unmanaged>GetPixelShaderDesc</unmanaged>	
		/// <unmanaged-short>GetPixelShaderDesc</unmanaged-short>	
		/// <unmanaged>HRESULT ID3DX11EffectPass::GetPixelShaderDesc([Out] D3DX11_PASS_SHADER_DESC* pDesc)</unmanaged>
		public SharpDX.Direct3D11.EffectPassShaderDescription PixelShaderDescription {
				get { SharpDX.Direct3D11.EffectPassShaderDescription __output__; GetPixelShaderDescription(out __output__); return __output__; }
		}
		
		/// <summary>	
		/// <p>Get hull-shader description.</p>	
		/// </summary>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectPass::GetHullShaderDesc']/*"/>	
		/// <msdn-id>ff476715</msdn-id>	
		/// <unmanaged>GetHullShaderDesc</unmanaged>	
		/// <unmanaged-short>GetHullShaderDesc</unmanaged-short>	
		/// <unmanaged>HRESULT ID3DX11EffectPass::GetHullShaderDesc([Out] D3DX11_PASS_SHADER_DESC* pDesc)</unmanaged>
		public SharpDX.Direct3D11.EffectPassShaderDescription HullShaderDescription {
				get { SharpDX.Direct3D11.EffectPassShaderDescription __output__; GetHullShaderDescription(out __output__); return __output__; }
		}
		
		/// <summary>	
		/// <p>Get a domain-shader description.</p>	
		/// </summary>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectPass::GetDomainShaderDesc']/*"/>	
		/// <msdn-id>ff476713</msdn-id>	
		/// <unmanaged>GetDomainShaderDesc</unmanaged>	
		/// <unmanaged-short>GetDomainShaderDesc</unmanaged-short>	
		/// <unmanaged>HRESULT ID3DX11EffectPass::GetDomainShaderDesc([Out] D3DX11_PASS_SHADER_DESC* pDesc)</unmanaged>
		public SharpDX.Direct3D11.EffectPassShaderDescription DomainShaderDescription {
				get { SharpDX.Direct3D11.EffectPassShaderDescription __output__; GetDomainShaderDescription(out __output__); return __output__; }
		}
		
		/// <summary>	
		/// <p>Get a compute-shader description.</p>	
		/// </summary>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectPass::GetComputeShaderDesc']/*"/>	
		/// <msdn-id>ff476711</msdn-id>	
		/// <unmanaged>GetComputeShaderDesc</unmanaged>	
		/// <unmanaged-short>GetComputeShaderDesc</unmanaged-short>	
		/// <unmanaged>HRESULT ID3DX11EffectPass::GetComputeShaderDesc([Out] D3DX11_PASS_SHADER_DESC* pDesc)</unmanaged>
		public SharpDX.Direct3D11.EffectPassShaderDescription ComputeShaderDescription {
				get { SharpDX.Direct3D11.EffectPassShaderDescription __output__; GetComputeShaderDescription(out __output__); return __output__; }
		}
		
		/// <summary>	
		/// <p>Test a pass to see if it contains valid syntax.</p>	
		/// </summary>	
		/// <returns><p><strong>TRUE</strong> if the code syntax is valid; otherwise <strong><see cref="SharpDX.Result.False"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectPass::IsValid']/*"/>	
		/// <msdn-id>ff476718</msdn-id>	
		/// <unmanaged>BOOL ID3DX11EffectPass::IsValid()</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectPass::IsValid</unmanaged-short>	
		internal SharpDX.Mathematics.Interop.RawBool IsValid_() {
			unsafe {
				SharpDX.Mathematics.Interop.RawBool __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.CalliSharpDXMathematicsInteropRawBool(_nativePointer,((void**)(*(void**)_nativePointer))[3]);		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get a pass description.</p>	
		/// </summary>	
		/// <param name="descRef"><dd>  <p>A reference to a pass description (see <strong><see cref="SharpDX.Direct3D11.EffectPassDescription"/></strong>).</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p>A pass is a block of code that sets render state and shaders (which in turn sets constant buffers, samplers and textures).  An effect technique contains one or more passes.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectPass::GetDesc']/*"/>	
		/// <msdn-id>ff476712</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectPass::GetDesc([Out] D3DX11_PASS_DESC* pDesc)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectPass::GetDesc</unmanaged-short>	
		internal void GetDescription(out SharpDX.Direct3D11.EffectPassDescription descRef) {
			unsafe {
				var descRef_ = new SharpDX.Direct3D11.EffectPassDescription.__Native();
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, &descRef_,((void**)(*(void**)_nativePointer))[4]);		
				descRef = new SharpDX.Direct3D11.EffectPassDescription();
				descRef.__MarshalFrom(ref descRef_);
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get a vertex-shader description.</p>	
		/// </summary>	
		/// <param name="descRef"><dd>  <p>A reference to a vertex-shader description (see <strong><see cref="SharpDX.Direct3D11.EffectPassShaderDescription"/></strong>).</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p>An effect pass can contain render state assignments and shader object assignments.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectPass::GetVertexShaderDesc']/*"/>	
		/// <msdn-id>ff476717</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectPass::GetVertexShaderDesc([Out] D3DX11_PASS_SHADER_DESC* pDesc)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectPass::GetVertexShaderDesc</unmanaged-short>	
		internal void GetVertexShaderDescription(out SharpDX.Direct3D11.EffectPassShaderDescription descRef) {
			unsafe {
				descRef = new SharpDX.Direct3D11.EffectPassShaderDescription();
				SharpDX.Result __result__;
				fixed (void* descRef_ = &descRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, descRef_,((void**)(*(void**)_nativePointer))[5]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get a geometry-shader description.</p>	
		/// </summary>	
		/// <param name="descRef"><dd>  <p>A reference to a geometry-shader description (see <strong><see cref="SharpDX.Direct3D11.EffectPassShaderDescription"/></strong>).</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p>An effect pass can contain render state assignments and shader object assignments.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectPass::GetGeometryShaderDesc']/*"/>	
		/// <msdn-id>ff476714</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectPass::GetGeometryShaderDesc([Out] D3DX11_PASS_SHADER_DESC* pDesc)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectPass::GetGeometryShaderDesc</unmanaged-short>	
		internal void GetGeometryShaderDescription(out SharpDX.Direct3D11.EffectPassShaderDescription descRef) {
			unsafe {
				descRef = new SharpDX.Direct3D11.EffectPassShaderDescription();
				SharpDX.Result __result__;
				fixed (void* descRef_ = &descRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, descRef_,((void**)(*(void**)_nativePointer))[6]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get a pixel-shader description.</p>	
		/// </summary>	
		/// <param name="descRef"><dd>  <p>A reference to a pixel-shader description (see <strong><see cref="SharpDX.Direct3D11.EffectPassShaderDescription"/></strong>).</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p>An effect pass can contain render state assignments and shader object assignments.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectPass::GetPixelShaderDesc']/*"/>	
		/// <msdn-id>ff476716</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectPass::GetPixelShaderDesc([Out] D3DX11_PASS_SHADER_DESC* pDesc)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectPass::GetPixelShaderDesc</unmanaged-short>	
		internal void GetPixelShaderDescription(out SharpDX.Direct3D11.EffectPassShaderDescription descRef) {
			unsafe {
				descRef = new SharpDX.Direct3D11.EffectPassShaderDescription();
				SharpDX.Result __result__;
				fixed (void* descRef_ = &descRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, descRef_,((void**)(*(void**)_nativePointer))[7]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get hull-shader description.</p>	
		/// </summary>	
		/// <param name="descRef"><dd>  <p>A reference to a hull-shader description (see <strong><see cref="SharpDX.Direct3D11.EffectPassShaderDescription"/></strong>).</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectPass::GetHullShaderDesc']/*"/>	
		/// <msdn-id>ff476715</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectPass::GetHullShaderDesc([Out] D3DX11_PASS_SHADER_DESC* pDesc)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectPass::GetHullShaderDesc</unmanaged-short>	
		internal void GetHullShaderDescription(out SharpDX.Direct3D11.EffectPassShaderDescription descRef) {
			unsafe {
				descRef = new SharpDX.Direct3D11.EffectPassShaderDescription();
				SharpDX.Result __result__;
				fixed (void* descRef_ = &descRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, descRef_,((void**)(*(void**)_nativePointer))[8]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get a domain-shader description.</p>	
		/// </summary>	
		/// <param name="descRef"><dd>  <p>A reference to a domain-shader description (see <strong><see cref="SharpDX.Direct3D11.EffectPassShaderDescription"/></strong>).</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectPass::GetDomainShaderDesc']/*"/>	
		/// <msdn-id>ff476713</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectPass::GetDomainShaderDesc([Out] D3DX11_PASS_SHADER_DESC* pDesc)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectPass::GetDomainShaderDesc</unmanaged-short>	
		internal void GetDomainShaderDescription(out SharpDX.Direct3D11.EffectPassShaderDescription descRef) {
			unsafe {
				descRef = new SharpDX.Direct3D11.EffectPassShaderDescription();
				SharpDX.Result __result__;
				fixed (void* descRef_ = &descRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, descRef_,((void**)(*(void**)_nativePointer))[9]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get a compute-shader description.</p>	
		/// </summary>	
		/// <param name="descRef"><dd>  <p>A reference to a compute-shader description (see <strong><see cref="SharpDX.Direct3D11.EffectPassShaderDescription"/></strong>).</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectPass::GetComputeShaderDesc']/*"/>	
		/// <msdn-id>ff476711</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectPass::GetComputeShaderDesc([Out] D3DX11_PASS_SHADER_DESC* pDesc)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectPass::GetComputeShaderDesc</unmanaged-short>	
		internal void GetComputeShaderDescription(out SharpDX.Direct3D11.EffectPassShaderDescription descRef) {
			unsafe {
				descRef = new SharpDX.Direct3D11.EffectPassShaderDescription();
				SharpDX.Result __result__;
				fixed (void* descRef_ = &descRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, descRef_,((void**)(*(void**)_nativePointer))[10]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get an annotation by index.</p>	
		/// </summary>	
		/// <param name="index"><dd>  <p>A zero-based index.</p> </dd></param>	
		/// <returns><p>A reference to an <strong><see cref="SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectPass::GetAnnotationByIndex']/*"/>	
		/// <msdn-id>ff476709</msdn-id>	
		/// <unmanaged>ID3DX11EffectVariable* ID3DX11EffectPass::GetAnnotationByIndex([In] unsigned int Index)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectPass::GetAnnotationByIndex</unmanaged-short>	
		public SharpDX.Direct3D11.EffectVariable GetAnnotationByIndex(int index) {
			unsafe {
				SharpDX.Direct3D11.EffectVariable __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectVariable((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer, index,((void**)(*(void**)_nativePointer))[11]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get an annotation by name.</p>	
		/// </summary>	
		/// <param name="name"><dd>  <p>The name of the annotation.</p> </dd></param>	
		/// <returns><p>A reference to an <strong><see cref="SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectPass::GetAnnotationByName']/*"/>	
		/// <msdn-id>ff476710</msdn-id>	
		/// <unmanaged>ID3DX11EffectVariable* ID3DX11EffectPass::GetAnnotationByName([In] const char* Name)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectPass::GetAnnotationByName</unmanaged-short>	
		public SharpDX.Direct3D11.EffectVariable GetAnnotationByName(string name) {
			unsafe {
				IntPtr name_ = Utilities.StringToHGlobalAnsi(name);
				SharpDX.Direct3D11.EffectVariable __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectVariable((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer, (void*)name_,((void**)(*(void**)_nativePointer))[12]));		
				Marshal.FreeHGlobal(name_ );
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Set the state contained in a pass to the device.</p>	
		/// </summary>	
		/// <param name="flags"><dd>  <p>Unused.</p> </dd></param>	
		/// <param name="contextRef"><dd>  <p>The <strong><see cref="SharpDX.Direct3D11.DeviceContext"/></strong> to apply the pass to.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectPass::Apply']/*"/>	
		/// <msdn-id>ff476707</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectPass::Apply([In] unsigned int Flags,[In] ID3D11DeviceContext* pContext)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectPass::Apply</unmanaged-short>	
		internal void Apply(int flags, SharpDX.Direct3D11.DeviceContext contextRef) {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, flags, (void*)((contextRef == null)?IntPtr.Zero:contextRef.NativePointer),((void**)(*(void**)_nativePointer))[13]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Generate a mask for allowing/preventing state changes.</p>	
		/// </summary>	
		/// <param name="stateBlockMaskRef"><dd>  <p>A reference to a state-block mask (see <strong><see cref="SharpDX.Direct3D11.StateBlockMask"/></strong>).</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectPass::ComputeStateBlockMask']/*"/>	
		/// <msdn-id>ff476708</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectPass::ComputeStateBlockMask([InOut] D3DX11_STATE_BLOCK_MASK* pStateBlockMask)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectPass::ComputeStateBlockMask</unmanaged-short>	
		public void ComputeStateBlockMask(ref SharpDX.Direct3D11.StateBlockMask stateBlockMaskRef) {
			unsafe {
				var stateBlockMaskRef_ = new SharpDX.Direct3D11.StateBlockMask.__Native();
				stateBlockMaskRef.__MarshalTo(ref stateBlockMaskRef_);
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, &stateBlockMaskRef_,((void**)(*(void**)_nativePointer))[14]);		
				stateBlockMaskRef.__MarshalFrom(ref stateBlockMaskRef_);
				stateBlockMaskRef.__MarshalFree(ref stateBlockMaskRef_);
				__result__.CheckError();
			}
		}
	}
	/// <summary>	
	/// <p>A rasterizer-variable interface accesses rasterizer state.</p>	
	/// </summary>	
	/// <remarks>	
	/// <p>An <strong><see cref="SharpDX.Direct3D11.EffectVariable"/></strong> interface is created when an effect is read into memory.</p><p>Effect variables are saved in memory in the backing store; when a technique is applied, the values in the backing store are copied to the device.  You can use either of these methods to return state.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
	/// </remarks>	
	/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectRasterizerVariable']/*"/>	
	/// <msdn-id>ff476719</msdn-id>	
	/// <unmanaged>ID3DX11EffectRasterizerVariable</unmanaged>	
	/// <unmanaged-short>ID3DX11EffectRasterizerVariable</unmanaged-short>	
	[Guid("53a262f6-5f74-4151-a132-e3dd19a62c9d")]
	public partial class EffectRasterizerVariable : SharpDX.Direct3D11.EffectVariable {
		/// <summary>
		/// Initializes a new instance of the <see cref="SharpDX.Direct3D11.EffectRasterizerVariable"/> class.
		/// </summary>
		/// <param name="nativePtr">The native pointer.</param>	
		public EffectRasterizerVariable(IntPtr nativePtr) : base(nativePtr) {
		}

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.Direct3D11.EffectRasterizerVariable"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.Direct3D11.EffectRasterizerVariable(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.Direct3D11.EffectRasterizerVariable(nativePointer);
		}
		
		
		/// <summary>	
		/// <p>Get a reference to a rasterizer interface.</p>	
		/// </summary>	
		/// <param name="index"><dd>  <p>Index into an array of rasterizer interfaces. If there is only one rasterizer interface, use 0.</p> </dd></param>	
		/// <param name="stateOut"><dd>  <p>The address of a reference to a rasterizer interface (see <strong><see cref="SharpDX.Direct3D11.RasterizerState"/></strong>).</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectRasterizerVariable::GetRasterizerState']/*"/>	
		/// <msdn-id>ff476721</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectRasterizerVariable::GetRasterizerState([In] unsigned int Index,[Out] ID3D11RasterizerState** ppState)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectRasterizerVariable::GetRasterizerState</unmanaged-short>	
		public void GetRasterizerState(int index, out SharpDX.Direct3D11.RasterizerState stateOut) {
			unsafe {
				IntPtr stateOut_ = IntPtr.Zero;
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, index, &stateOut_,((void**)(*(void**)_nativePointer))[31]);		
				stateOut= (stateOut_ == IntPtr.Zero)?null:new SharpDX.Direct3D11.RasterizerState(stateOut_);	
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Sets the rasterizer state.</p>	
		/// </summary>	
		/// <param name="index"><dd>  <p>Index into an array of rasterizer interfaces. If there is only one rasterizer interface, use 0. </p> </dd></param>	
		/// <param name="stateRef"><dd>  <p>Pointer to an <strong><see cref="SharpDX.Direct3D11.RasterizerState"/></strong> interface.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectRasterizerVariable::SetRasterizerState']/*"/>	
		/// <msdn-id>ff476722</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectRasterizerVariable::SetRasterizerState([In] unsigned int Index,[In] ID3D11RasterizerState* pState)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectRasterizerVariable::SetRasterizerState</unmanaged-short>	
		public void SetRasterizerState(int index, SharpDX.Direct3D11.RasterizerState stateRef) {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, index, (void*)((stateRef == null)?IntPtr.Zero:stateRef.NativePointer),((void**)(*(void**)_nativePointer))[32]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Reverts a previously set rasterizer state.</p>	
		/// </summary>	
		/// <param name="index"><dd>  <p>Index into an array of rasterizer interfaces. If there is only one rasterizer interface, use 0. </p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectRasterizerVariable::UndoSetRasterizerState']/*"/>	
		/// <msdn-id>ff476723</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectRasterizerVariable::UndoSetRasterizerState([In] unsigned int Index)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectRasterizerVariable::UndoSetRasterizerState</unmanaged-short>	
		public void UndoSetRasterizerState(int index) {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, index,((void**)(*(void**)_nativePointer))[33]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get a reference to a variable that contains rasteriser state.</p>	
		/// </summary>	
		/// <param name="index"><dd>  <p>Index into an array of rasteriser-state descriptions. If there is only one rasteriser variable in the effect, use 0.</p> </dd></param>	
		/// <param name="descRef"><dd>  <p>A reference to a rasteriser-state description (see <strong><see cref="SharpDX.Direct3D11.RasterizerStateDescription"/></strong>).</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p>Effect variables are saved in memory in the backing store; when a technique is applied, the values in the backing store are copied to the device.  Backing store data can used to recreate the variable when necessary.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectRasterizerVariable::GetBackingStore']/*"/>	
		/// <msdn-id>ff476720</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectRasterizerVariable::GetBackingStore([In] unsigned int Index,[Out] D3D11_RASTERIZER_DESC* pDesc)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectRasterizerVariable::GetBackingStore</unmanaged-short>	
		public void GetBackingStore(int index, out SharpDX.Direct3D11.RasterizerStateDescription descRef) {
			unsafe {
				descRef = new SharpDX.Direct3D11.RasterizerStateDescription();
				SharpDX.Result __result__;
				fixed (void* descRef_ = &descRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, index, descRef_,((void**)(*(void**)_nativePointer))[34]);		
				__result__.CheckError();
			}
		}
	}
	/// <summary>	
	/// <p>A render-target-view interface accesses a render target.</p>	
	/// </summary>	
	/// <remarks>	
	/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
	/// </remarks>	
	/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectRenderTargetViewVariable']/*"/>	
	/// <msdn-id>ff476724</msdn-id>	
	/// <unmanaged>ID3DX11EffectRenderTargetViewVariable</unmanaged>	
	/// <unmanaged-short>ID3DX11EffectRenderTargetViewVariable</unmanaged-short>	
	[Guid("d5066909-f40c-43f8-9db5-057c2a208552")]
	public partial class EffectRenderTargetViewVariable : SharpDX.Direct3D11.EffectVariable {
		/// <summary>
		/// Initializes a new instance of the <see cref="SharpDX.Direct3D11.EffectRenderTargetViewVariable"/> class.
		/// </summary>
		/// <param name="nativePtr">The native pointer.</param>	
		public EffectRenderTargetViewVariable(IntPtr nativePtr) : base(nativePtr) {
		}

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.Direct3D11.EffectRenderTargetViewVariable"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.Direct3D11.EffectRenderTargetViewVariable(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.Direct3D11.EffectRenderTargetViewVariable(nativePointer);
		}
		
		
		/// <summary>	
		/// <p>Set a render-target.</p>	
		/// </summary>	
		/// <param name="resourceRef"><dd>  <p>A reference to a render-target-view interface. See <strong><see cref="SharpDX.Direct3D11.RenderTargetView"/></strong>.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectRenderTargetViewVariable::SetRenderTarget']/*"/>	
		/// <msdn-id>ff476727</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectRenderTargetViewVariable::SetRenderTarget([In] ID3D11RenderTargetView* pResource)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectRenderTargetViewVariable::SetRenderTarget</unmanaged-short>	
		public void SetRenderTarget(SharpDX.Direct3D11.RenderTargetView resourceRef) {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, (void*)((resourceRef == null)?IntPtr.Zero:resourceRef.NativePointer),((void**)(*(void**)_nativePointer))[31]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get a render-target.</p>	
		/// </summary>	
		/// <returns><dd>  <p>The address of a reference to a render-target-view interface. See <strong><see cref="SharpDX.Direct3D11.RenderTargetView"/></strong>.</p> </dd></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectRenderTargetViewVariable::GetRenderTarget']/*"/>	
		/// <msdn-id>ff476725</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectRenderTargetViewVariable::GetRenderTarget([Out] ID3D11RenderTargetView** ppResource)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectRenderTargetViewVariable::GetRenderTarget</unmanaged-short>	
		public SharpDX.Direct3D11.RenderTargetView GetRenderTarget() {
			unsafe {
				SharpDX.Direct3D11.RenderTargetView resourceOut;
				IntPtr resourceOut_ = IntPtr.Zero;
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, &resourceOut_,((void**)(*(void**)_nativePointer))[32]);		
				resourceOut= (resourceOut_ == IntPtr.Zero)?null:new SharpDX.Direct3D11.RenderTargetView(resourceOut_);	
				__result__.CheckError();
				return resourceOut;
			}
		}
		
		/// <summary>	
		/// <p>Set an array of render-targets.</p>	
		/// </summary>	
		/// <param name="resourcesOut"><dd>  <p>Set an array of render-target-view interfaces. See <strong><see cref="SharpDX.Direct3D11.RenderTargetView"/></strong>.</p> </dd></param>	
		/// <param name="offset"><dd>  <p>The zero-based array index to store the first interface.</p> </dd></param>	
		/// <param name="count"><dd>  <p>The number of elements in the array.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectRenderTargetViewVariable::SetRenderTargetArray']/*"/>	
		/// <msdn-id>ff476728</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectRenderTargetViewVariable::SetRenderTargetArray([In, Buffer] ID3D11RenderTargetView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectRenderTargetViewVariable::SetRenderTargetArray</unmanaged-short>	
		internal void SetRenderTargetArray(SharpDX.Direct3D11.RenderTargetView[] resourcesOut, int offset, int count) {
			unsafe {
				IntPtr* resourcesOut_ = (IntPtr*)0;
				if ( resourcesOut != null ) {
					IntPtr* resourcesOut__ = stackalloc IntPtr[resourcesOut.Length];
					resourcesOut_ = resourcesOut__;
					for (int i = 0; i < resourcesOut.Length; i++)                        
						resourcesOut_[i] =  (resourcesOut[i] == null)? IntPtr.Zero : resourcesOut[i].NativePointer;
				}
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, resourcesOut_, offset, count,((void**)(*(void**)_nativePointer))[33]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Set an array of render-targets.</p>	
		/// </summary>	
		/// <param name="resourcesOut"><dd>  <p>Set an array of render-target-view interfaces. See <strong><see cref="SharpDX.Direct3D11.RenderTargetView"/></strong>.</p> </dd></param>	
		/// <param name="offset"><dd>  <p>The zero-based array index to store the first interface.</p> </dd></param>	
		/// <param name="count"><dd>  <p>The number of elements in the array.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectRenderTargetViewVariable::SetRenderTargetArray']/*"/>	
		/// <msdn-id>ff476728</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectRenderTargetViewVariable::SetRenderTargetArray([In, Buffer] ID3D11RenderTargetView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectRenderTargetViewVariable::SetRenderTargetArray</unmanaged-short>	
		internal void SetRenderTargetArray(SharpDX.ComArray<SharpDX.Direct3D11.RenderTargetView> resourcesOut, int offset, int count) {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, (void*)((resourcesOut == null)?IntPtr.Zero:resourcesOut.NativePointer), offset, count,((void**)(*(void**)_nativePointer))[33]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Set an array of render-targets.</p>	
		/// </summary>	
		/// <param name="resourcesOut"><dd>  <p>Set an array of render-target-view interfaces. See <strong><see cref="SharpDX.Direct3D11.RenderTargetView"/></strong>.</p> </dd></param>	
		/// <param name="offset"><dd>  <p>The zero-based array index to store the first interface.</p> </dd></param>	
		/// <param name="count"><dd>  <p>The number of elements in the array.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectRenderTargetViewVariable::SetRenderTargetArray']/*"/>	
		/// <msdn-id>ff476728</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectRenderTargetViewVariable::SetRenderTargetArray([In, Buffer] ID3D11RenderTargetView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectRenderTargetViewVariable::SetRenderTargetArray</unmanaged-short>	
		private void SetRenderTargetArray(System.IntPtr resourcesOut, int offset, int count) {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, (void*)resourcesOut, offset, count,((void**)(*(void**)_nativePointer))[33]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get an array of render-targets.</p>	
		/// </summary>	
		/// <param name="resourcesOut"><dd>  <p>A reference to an array of render-target-view interfaces. See <strong><see cref="SharpDX.Direct3D11.RenderTargetView"/></strong>.</p> </dd></param>	
		/// <param name="offset"><dd>  <p>The zero-based array index to get the first interface.</p> </dd></param>	
		/// <param name="count"><dd>  <p>The number of elements in the array.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectRenderTargetViewVariable::GetRenderTargetArray']/*"/>	
		/// <msdn-id>ff476726</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectRenderTargetViewVariable::GetRenderTargetArray([Out, Buffer] ID3D11RenderTargetView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectRenderTargetViewVariable::GetRenderTargetArray</unmanaged-short>	
		internal void GetRenderTargetArray(SharpDX.Direct3D11.RenderTargetView[] resourcesOut, int offset, int count) {
			unsafe {
				IntPtr* resourcesOut_ = stackalloc IntPtr[resourcesOut.Length];
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, resourcesOut_, offset, count,((void**)(*(void**)_nativePointer))[34]);		
				for (int i = 0; i < resourcesOut.Length; i++)
					resourcesOut[i] = (resourcesOut_[i] == IntPtr.Zero)?null:new SharpDX.Direct3D11.RenderTargetView(resourcesOut_[i]);	
				__result__.CheckError();
			}
		}
	}
	/// <summary>	
	/// <p>Revert a previously set sampler state.</p>	
	/// </summary>	
	/// <remarks>	
	/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
	/// </remarks>	
	/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectSamplerVariable']/*"/>	
	/// <msdn-id>ff476733</msdn-id>	
	/// <unmanaged>ID3DX11EffectSamplerVariable</unmanaged>	
	/// <unmanaged-short>ID3DX11EffectSamplerVariable</unmanaged-short>	
	[Guid("c6402e55-1095-4d95-8931-f92660513dd9")]
	public partial class EffectSamplerVariable : SharpDX.Direct3D11.EffectVariable {
		/// <summary>
		/// Initializes a new instance of the <see cref="SharpDX.Direct3D11.EffectSamplerVariable"/> class.
		/// </summary>
		/// <param name="nativePtr">The native pointer.</param>	
		public EffectSamplerVariable(IntPtr nativePtr) : base(nativePtr) {
		}

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.Direct3D11.EffectSamplerVariable"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.Direct3D11.EffectSamplerVariable(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.Direct3D11.EffectSamplerVariable(nativePointer);
		}
		
		
		/// <summary>	
		/// <p>Get a reference to a sampler interface.</p>	
		/// </summary>	
		/// <param name="index"><dd>  <p>Index into an array of sampler interfaces. If there is only one sampler interface, use 0.</p> </dd></param>	
		/// <returns><dd>  <p>The address of a reference to a sampler interface (see <strong><see cref="SharpDX.Direct3D11.SamplerState"/></strong>).</p> </dd></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectSamplerVariable::GetSampler']/*"/>	
		/// <msdn-id>ff476731</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectSamplerVariable::GetSampler([In] unsigned int Index,[Out] ID3D11SamplerState** ppSampler)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectSamplerVariable::GetSampler</unmanaged-short>	
		public SharpDX.Direct3D11.SamplerState GetSampler(int index) {
			unsafe {
				SharpDX.Direct3D11.SamplerState samplerOut;
				IntPtr samplerOut_ = IntPtr.Zero;
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, index, &samplerOut_,((void**)(*(void**)_nativePointer))[31]);		
				samplerOut= (samplerOut_ == IntPtr.Zero)?null:new SharpDX.Direct3D11.SamplerState(samplerOut_);	
				__result__.CheckError();
				return samplerOut;
			}
		}
		
		/// <summary>	
		/// <p>Set sampler state.</p>	
		/// </summary>	
		/// <param name="index"><dd>  <p>Index into an array of sampler interfaces. If there is only one sampler interface, use 0. </p> </dd></param>	
		/// <param name="samplerRef"><dd>  <p>Pointer to an <strong><see cref="SharpDX.Direct3D11.SamplerState"/></strong> interface containing the sampler state.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectSamplerVariable::SetSampler']/*"/>	
		/// <msdn-id>ff476732</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectSamplerVariable::SetSampler([In] unsigned int Index,[In] ID3D11SamplerState* pSampler)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectSamplerVariable::SetSampler</unmanaged-short>	
		public void SetSampler(int index, SharpDX.Direct3D11.SamplerState samplerRef) {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, index, (void*)((samplerRef == null)?IntPtr.Zero:samplerRef.NativePointer),((void**)(*(void**)_nativePointer))[32]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Revert a previously set sampler state.</p>	
		/// </summary>	
		/// <param name="index"><dd>  <p>Index into an array of sampler interfaces. If there is only one sampler interface, use 0. </p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectSamplerVariable::UndoSetSampler']/*"/>	
		/// <msdn-id>ff476733</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectSamplerVariable::UndoSetSampler([In] unsigned int Index)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectSamplerVariable::UndoSetSampler</unmanaged-short>	
		public void UndoSetSampler(int index) {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, index,((void**)(*(void**)_nativePointer))[33]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get a reference to a variable that contains sampler state.</p>	
		/// </summary>	
		/// <param name="index"><dd>  <p>Index into an array of sampler descriptions. If there is only one sampler variable in the effect, use 0.</p> </dd></param>	
		/// <param name="descRef"><dd>  <p>A reference to a sampler description (see <strong><see cref="SharpDX.Direct3D11.SamplerStateDescription"/></strong>).</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectSamplerVariable::GetBackingStore']/*"/>	
		/// <msdn-id>ff476730</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectSamplerVariable::GetBackingStore([In] unsigned int Index,[Out] D3D11_SAMPLER_DESC* pDesc)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectSamplerVariable::GetBackingStore</unmanaged-short>	
		public void GetBackingStore(int index, out SharpDX.Direct3D11.SamplerStateDescription descRef) {
			unsafe {
				descRef = new SharpDX.Direct3D11.SamplerStateDescription();
				SharpDX.Result __result__;
				fixed (void* descRef_ = &descRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, index, descRef_,((void**)(*(void**)_nativePointer))[34]);		
				__result__.CheckError();
			}
		}
	}
	/// <summary>	
	/// <p>An effect-scalar-variable interface accesses scalar values.</p>	
	/// </summary>	
	/// <remarks>	
	/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
	/// </remarks>	
	/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectScalarVariable']/*"/>	
	/// <msdn-id>ff476734</msdn-id>	
	/// <unmanaged>ID3DX11EffectScalarVariable</unmanaged>	
	/// <unmanaged-short>ID3DX11EffectScalarVariable</unmanaged-short>	
	[Guid("921ef2e5-a65d-4e92-9fc6-4e9cc09a4ade")]
	public partial class EffectScalarVariable : SharpDX.Direct3D11.EffectVariable {
		/// <summary>
		/// Initializes a new instance of the <see cref="SharpDX.Direct3D11.EffectScalarVariable"/> class.
		/// </summary>
		/// <param name="nativePtr">The native pointer.</param>	
		public EffectScalarVariable(IntPtr nativePtr) : base(nativePtr) {
		}

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.Direct3D11.EffectScalarVariable"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.Direct3D11.EffectScalarVariable(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.Direct3D11.EffectScalarVariable(nativePointer);
		}
		
		
		/// <summary>	
		/// <p>Set a floating-point variable.</p>	
		/// </summary>	
		/// <param name="value"><dd>  <p>A reference to the variable.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectScalarVariable::SetFloat']/*"/>	
		/// <msdn-id>ff476743</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectScalarVariable::SetFloat([In] const float Value)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectScalarVariable::SetFloat</unmanaged-short>	
		internal void SetFloat(float value) {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, value,((void**)(*(void**)_nativePointer))[31]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get a floating-point variable.</p>	
		/// </summary>	
		/// <returns><dd>  <p>A reference to the variable.</p> </dd></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectScalarVariable::GetFloat']/*"/>	
		/// <msdn-id>ff476737</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectScalarVariable::GetFloat([Out] float* pValue)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectScalarVariable::GetFloat</unmanaged-short>	
		public float GetFloat() {
			unsafe {
				float valueRef;
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, &valueRef,((void**)(*(void**)_nativePointer))[32]);		
				__result__.CheckError();
				return valueRef;
			}
		}
		
		/// <summary>	
		/// <p>Set an array of floating-point variables.</p>	
		/// </summary>	
		/// <param name="dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>	
		/// <param name="offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>	
		/// <param name="count"><dd>  <p>The number of array elements to set.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectScalarVariable::SetFloatArray']/*"/>	
		/// <msdn-id>ff476744</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectScalarVariable::SetFloatArray([In, Buffer] const float* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectScalarVariable::SetFloatArray</unmanaged-short>	
		internal void SetFloatArray(float[] dataRef, int offset, int count) {
			unsafe {
				SharpDX.Result __result__;
				fixed (void* dataRef_ = dataRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, dataRef_, offset, count,((void**)(*(void**)_nativePointer))[33]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get an array of floating-point variables.</p>	
		/// </summary>	
		/// <param name="dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>	
		/// <param name="offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>	
		/// <param name="count"><dd>  <p>The number of array elements to set.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectScalarVariable::GetFloatArray']/*"/>	
		/// <msdn-id>ff476738</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectScalarVariable::GetFloatArray([Out, Buffer] float* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectScalarVariable::GetFloatArray</unmanaged-short>	
		internal void GetFloatArray(float[] dataRef, int offset, int count) {
			unsafe {
				SharpDX.Result __result__;
				fixed (void* dataRef_ = dataRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, dataRef_, offset, count,((void**)(*(void**)_nativePointer))[34]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Set an integer variable.</p>	
		/// </summary>	
		/// <param name="value"><dd>  <p>A reference to the variable.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectScalarVariable::SetInt']/*"/>	
		/// <msdn-id>ff476745</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectScalarVariable::SetInt([In] const int Value)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectScalarVariable::SetInt</unmanaged-short>	
		internal void SetInt(int value) {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, value,((void**)(*(void**)_nativePointer))[35]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get an integer variable.</p>	
		/// </summary>	
		/// <returns><dd>  <p>A reference to the variable.</p> </dd></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectScalarVariable::GetInt']/*"/>	
		/// <msdn-id>ff476739</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectScalarVariable::GetInt([Out] int* pValue)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectScalarVariable::GetInt</unmanaged-short>	
		public int GetInt() {
			unsafe {
				int valueRef;
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, &valueRef,((void**)(*(void**)_nativePointer))[36]);		
				__result__.CheckError();
				return valueRef;
			}
		}
		
		/// <summary>	
		/// <p>Set an array of integer variables.</p>	
		/// </summary>	
		/// <param name="dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>	
		/// <param name="offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>	
		/// <param name="count"><dd>  <p>The number of array elements to set.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectScalarVariable::SetIntArray']/*"/>	
		/// <msdn-id>ff476746</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectScalarVariable::SetIntArray([In, Buffer] const int* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectScalarVariable::SetIntArray</unmanaged-short>	
		internal void SetIntArray(int[] dataRef, int offset, int count) {
			unsafe {
				SharpDX.Result __result__;
				fixed (void* dataRef_ = dataRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, dataRef_, offset, count,((void**)(*(void**)_nativePointer))[37]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get an array of integer variables.</p>	
		/// </summary>	
		/// <param name="dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>	
		/// <param name="offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>	
		/// <param name="count"><dd>  <p>The number of array elements to set.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectScalarVariable::GetIntArray']/*"/>	
		/// <msdn-id>ff476740</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectScalarVariable::GetIntArray([Out, Buffer] int* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectScalarVariable::GetIntArray</unmanaged-short>	
		internal void GetIntArray(int[] dataRef, int offset, int count) {
			unsafe {
				SharpDX.Result __result__;
				fixed (void* dataRef_ = dataRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, dataRef_, offset, count,((void**)(*(void**)_nativePointer))[38]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Set a boolean variable.</p>	
		/// </summary>	
		/// <param name="value"><dd>  <p>A reference to the variable.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectScalarVariable::SetBool']/*"/>	
		/// <msdn-id>ff476741</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectScalarVariable::SetBool([In] const BOOL Value)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectScalarVariable::SetBool</unmanaged-short>	
		internal void SetBool(SharpDX.Mathematics.Interop.RawBool value) {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint8(_nativePointer, value,((void**)(*(void**)_nativePointer))[39]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get a boolean variable.</p>	
		/// </summary>	
		/// <param name="valueRef"><dd>  <p>A reference to the variable.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectScalarVariable::GetBool']/*"/>	
		/// <msdn-id>ff476735</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectScalarVariable::GetBool([Out] BOOL* pValue)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectScalarVariable::GetBool</unmanaged-short>	
		internal void GetBool(out SharpDX.Mathematics.Interop.RawBool valueRef) {
			unsafe {
				valueRef = new SharpDX.Mathematics.Interop.RawBool();
				SharpDX.Result __result__;
				fixed (void* valueRef_ = &valueRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, valueRef_,((void**)(*(void**)_nativePointer))[40]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Set an array of boolean variables.</p>	
		/// </summary>	
		/// <param name="dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>	
		/// <param name="offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>	
		/// <param name="count"><dd>  <p>The number of array elements to set.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectScalarVariable::SetBoolArray']/*"/>	
		/// <msdn-id>ff476742</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectScalarVariable::SetBoolArray([In, Buffer] const BOOL* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectScalarVariable::SetBoolArray</unmanaged-short>	
		internal void SetBoolArray(SharpDX.Mathematics.Interop.RawBool[] dataRef, int offset, int count) {
			unsafe {
				SharpDX.Result __result__;
				fixed (void* dataRef_ = dataRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, dataRef_, offset, count,((void**)(*(void**)_nativePointer))[41]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get an array of boolean variables.</p>	
		/// </summary>	
		/// <param name="dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>	
		/// <param name="offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>	
		/// <param name="count"><dd>  <p>The number of array elements to set.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectScalarVariable::GetBoolArray']/*"/>	
		/// <msdn-id>ff476736</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectScalarVariable::GetBoolArray([Out, Buffer] BOOL* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectScalarVariable::GetBoolArray</unmanaged-short>	
		internal void GetBoolArray(SharpDX.Mathematics.Interop.RawBool[] dataRef, int offset, int count) {
			unsafe {
				SharpDX.Result __result__;
				fixed (void* dataRef_ = dataRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, dataRef_, offset, count,((void**)(*(void**)_nativePointer))[42]);		
				__result__.CheckError();
			}
		}
	}
	/// <summary>	
	/// <p>A shader-resource interface accesses a shader resource.</p>	
	/// </summary>	
	/// <remarks>	
	/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
	/// </remarks>	
	/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectShaderResourceVariable']/*"/>	
	/// <msdn-id>ff476747</msdn-id>	
	/// <unmanaged>ID3DX11EffectShaderResourceVariable</unmanaged>	
	/// <unmanaged-short>ID3DX11EffectShaderResourceVariable</unmanaged-short>	
	[Guid("350db233-bbe0-485c-9bfe-c0026b844f89")]
	public partial class EffectShaderResourceVariable : SharpDX.Direct3D11.EffectVariable {
		/// <summary>
		/// Initializes a new instance of the <see cref="SharpDX.Direct3D11.EffectShaderResourceVariable"/> class.
		/// </summary>
		/// <param name="nativePtr">The native pointer.</param>	
		public EffectShaderResourceVariable(IntPtr nativePtr) : base(nativePtr) {
		}

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.Direct3D11.EffectShaderResourceVariable"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.Direct3D11.EffectShaderResourceVariable(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.Direct3D11.EffectShaderResourceVariable(nativePointer);
		}
		
		
		/// <summary>	
		/// <p>Set a shader resource.</p>	
		/// </summary>	
		/// <param name="resourceRef"><dd>  <p>The address of a reference to a shader-resource-view interface. See <strong><see cref="SharpDX.Direct3D11.ShaderResourceView"/></strong>.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectShaderResourceVariable::SetResource']/*"/>	
		/// <msdn-id>ff476750</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectShaderResourceVariable::SetResource([In] ID3D11ShaderResourceView* pResource)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectShaderResourceVariable::SetResource</unmanaged-short>	
		public void SetResource(SharpDX.Direct3D11.ShaderResourceView resourceRef) {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, (void*)((resourceRef == null)?IntPtr.Zero:resourceRef.NativePointer),((void**)(*(void**)_nativePointer))[31]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get a shader resource.</p>	
		/// </summary>	
		/// <returns><dd>  <p>The address of a reference to a shader-resource-view interface. See <strong><see cref="SharpDX.Direct3D11.ShaderResourceView"/></strong>.</p> </dd></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectShaderResourceVariable::GetResource']/*"/>	
		/// <msdn-id>ff476748</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectShaderResourceVariable::GetResource([Out] ID3D11ShaderResourceView** ppResource)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectShaderResourceVariable::GetResource</unmanaged-short>	
		public SharpDX.Direct3D11.ShaderResourceView GetResource() {
			unsafe {
				SharpDX.Direct3D11.ShaderResourceView resourceOut;
				IntPtr resourceOut_ = IntPtr.Zero;
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, &resourceOut_,((void**)(*(void**)_nativePointer))[32]);		
				resourceOut= (resourceOut_ == IntPtr.Zero)?null:new SharpDX.Direct3D11.ShaderResourceView(resourceOut_);	
				__result__.CheckError();
				return resourceOut;
			}
		}
		
		/// <summary>	
		/// <p>Set an array of shader resources.</p>	
		/// </summary>	
		/// <param name="resourcesOut"><dd>  <p>The address of an array of shader-resource-view interfaces. See <strong><see cref="SharpDX.Direct3D11.ShaderResourceView"/></strong>.</p> </dd></param>	
		/// <param name="offset"><dd>  <p>The zero-based array index to get the first interface.</p> </dd></param>	
		/// <param name="count"><dd>  <p>The number of elements in the array.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectShaderResourceVariable::SetResourceArray']/*"/>	
		/// <msdn-id>ff476751</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectShaderResourceVariable::SetResourceArray([In, Buffer] ID3D11ShaderResourceView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectShaderResourceVariable::SetResourceArray</unmanaged-short>	
		internal void SetResourceArray(SharpDX.Direct3D11.ShaderResourceView[] resourcesOut, int offset, int count) {
			unsafe {
				IntPtr* resourcesOut_ = (IntPtr*)0;
				if ( resourcesOut != null ) {
					IntPtr* resourcesOut__ = stackalloc IntPtr[resourcesOut.Length];
					resourcesOut_ = resourcesOut__;
					for (int i = 0; i < resourcesOut.Length; i++)                        
						resourcesOut_[i] =  (resourcesOut[i] == null)? IntPtr.Zero : resourcesOut[i].NativePointer;
				}
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, resourcesOut_, offset, count,((void**)(*(void**)_nativePointer))[33]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Set an array of shader resources.</p>	
		/// </summary>	
		/// <param name="resourcesOut"><dd>  <p>The address of an array of shader-resource-view interfaces. See <strong><see cref="SharpDX.Direct3D11.ShaderResourceView"/></strong>.</p> </dd></param>	
		/// <param name="offset"><dd>  <p>The zero-based array index to get the first interface.</p> </dd></param>	
		/// <param name="count"><dd>  <p>The number of elements in the array.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectShaderResourceVariable::SetResourceArray']/*"/>	
		/// <msdn-id>ff476751</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectShaderResourceVariable::SetResourceArray([In, Buffer] ID3D11ShaderResourceView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectShaderResourceVariable::SetResourceArray</unmanaged-short>	
		internal void SetResourceArray(SharpDX.ComArray<SharpDX.Direct3D11.ShaderResourceView> resourcesOut, int offset, int count) {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, (void*)((resourcesOut == null)?IntPtr.Zero:resourcesOut.NativePointer), offset, count,((void**)(*(void**)_nativePointer))[33]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Set an array of shader resources.</p>	
		/// </summary>	
		/// <param name="resourcesOut"><dd>  <p>The address of an array of shader-resource-view interfaces. See <strong><see cref="SharpDX.Direct3D11.ShaderResourceView"/></strong>.</p> </dd></param>	
		/// <param name="offset"><dd>  <p>The zero-based array index to get the first interface.</p> </dd></param>	
		/// <param name="count"><dd>  <p>The number of elements in the array.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectShaderResourceVariable::SetResourceArray']/*"/>	
		/// <msdn-id>ff476751</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectShaderResourceVariable::SetResourceArray([In, Buffer] ID3D11ShaderResourceView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectShaderResourceVariable::SetResourceArray</unmanaged-short>	
		private void SetResourceArray(System.IntPtr resourcesOut, int offset, int count) {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, (void*)resourcesOut, offset, count,((void**)(*(void**)_nativePointer))[33]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get an array of shader resources.</p>	
		/// </summary>	
		/// <param name="resourcesOut"><dd>  <p>The address of an array of shader-resource-view interfaces. See <strong><see cref="SharpDX.Direct3D11.ShaderResourceView"/></strong>.</p> </dd></param>	
		/// <param name="offset"><dd>  <p>The zero-based array index to get the first interface.</p> </dd></param>	
		/// <param name="count"><dd>  <p>The number of elements in the array.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectShaderResourceVariable::GetResourceArray']/*"/>	
		/// <msdn-id>ff476749</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectShaderResourceVariable::GetResourceArray([Out, Buffer] ID3D11ShaderResourceView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectShaderResourceVariable::GetResourceArray</unmanaged-short>	
		internal void GetResourceArray(SharpDX.Direct3D11.ShaderResourceView[] resourcesOut, int offset, int count) {
			unsafe {
				IntPtr* resourcesOut_ = stackalloc IntPtr[resourcesOut.Length];
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, resourcesOut_, offset, count,((void**)(*(void**)_nativePointer))[34]);		
				for (int i = 0; i < resourcesOut.Length; i++)
					resourcesOut[i] = (resourcesOut_[i] == IntPtr.Zero)?null:new SharpDX.Direct3D11.ShaderResourceView(resourcesOut_[i]);	
				__result__.CheckError();
			}
		}
	}
	/// <summary>	
	/// <p>A shader-variable interface accesses a shader variable.</p>	
	/// </summary>	
	/// <remarks>	
	/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
	/// </remarks>	
	/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectShaderVariable']/*"/>	
	/// <msdn-id>ff476752</msdn-id>	
	/// <unmanaged>ID3DX11EffectShaderVariable</unmanaged>	
	/// <unmanaged-short>ID3DX11EffectShaderVariable</unmanaged-short>	
	[Guid("7508b344-020a-4ec7-9118-62cdd36c88d7")]
	public partial class EffectShaderVariable : SharpDX.Direct3D11.EffectVariable {
		/// <summary>
		/// Initializes a new instance of the <see cref="SharpDX.Direct3D11.EffectShaderVariable"/> class.
		/// </summary>
		/// <param name="nativePtr">The native pointer.</param>	
		public EffectShaderVariable(IntPtr nativePtr) : base(nativePtr) {
		}

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.Direct3D11.EffectShaderVariable"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.Direct3D11.EffectShaderVariable(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.Direct3D11.EffectShaderVariable(nativePointer);
		}
		
		
		/// <summary>	
		/// <p>Get a shader description.</p>	
		/// </summary>	
		/// <param name="shaderIndex"><dd>  <p>A zero-based index.</p> </dd></param>	
		/// <returns><dd>  <p>A reference to a shader description (see <strong><see cref="SharpDX.Direct3D11.EffectShaderDescription"/></strong>).</p> </dd></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectShaderVariable::GetShaderDesc']/*"/>	
		/// <msdn-id>ff476761</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectShaderVariable::GetShaderDesc([In] unsigned int ShaderIndex,[Out] D3DX11_EFFECT_SHADER_DESC* pDesc)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectShaderVariable::GetShaderDesc</unmanaged-short>	
		public SharpDX.Direct3D11.EffectShaderDescription GetShaderDescription(int shaderIndex) {
			unsafe {
				SharpDX.Direct3D11.EffectShaderDescription descRef;
				var descRef_ = new SharpDX.Direct3D11.EffectShaderDescription.__Native();
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, shaderIndex, &descRef_,((void**)(*(void**)_nativePointer))[31]);		
				descRef = new SharpDX.Direct3D11.EffectShaderDescription();
				descRef.__MarshalFrom(ref descRef_);
				__result__.CheckError();
				return descRef;
			}
		}
		
		/// <summary>	
		/// <p>Get a vertex shader.</p>	
		/// </summary>	
		/// <param name="shaderIndex"><dd>  <p>A zero-based index.</p> </dd></param>	
		/// <returns><dd>  <p>A reference to an <strong><see cref="SharpDX.Direct3D11.VertexShader"/></strong> reference that will be set to the vertex shader on return.</p> </dd></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectShaderVariable::GetVertexShader']/*"/>	
		/// <msdn-id>ff476762</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectShaderVariable::GetVertexShader([In] unsigned int ShaderIndex,[Out] ID3D11VertexShader** ppVS)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectShaderVariable::GetVertexShader</unmanaged-short>	
		public SharpDX.Direct3D11.VertexShader GetVertexShader(int shaderIndex) {
			unsafe {
				SharpDX.Direct3D11.VertexShader vSOut;
				IntPtr vSOut_ = IntPtr.Zero;
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, shaderIndex, &vSOut_,((void**)(*(void**)_nativePointer))[32]);		
				vSOut= (vSOut_ == IntPtr.Zero)?null:new SharpDX.Direct3D11.VertexShader(vSOut_);	
				__result__.CheckError();
				return vSOut;
			}
		}
		
		/// <summary>	
		/// <p>Get a geometry shader.</p>	
		/// </summary>	
		/// <param name="shaderIndex"><dd>  <p>A zero-based index.</p> </dd></param>	
		/// <returns><dd>  <p>A reference to an <strong><see cref="SharpDX.Direct3D11.GeometryShader"/></strong> reference that will be set to the geometry shader on return.</p> </dd></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectShaderVariable::GetGeometryShader']/*"/>	
		/// <msdn-id>ff476755</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectShaderVariable::GetGeometryShader([In] unsigned int ShaderIndex,[Out] ID3D11GeometryShader** ppGS)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectShaderVariable::GetGeometryShader</unmanaged-short>	
		public SharpDX.Direct3D11.GeometryShader GetGeometryShader(int shaderIndex) {
			unsafe {
				SharpDX.Direct3D11.GeometryShader gSOut;
				IntPtr gSOut_ = IntPtr.Zero;
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, shaderIndex, &gSOut_,((void**)(*(void**)_nativePointer))[33]);		
				gSOut= (gSOut_ == IntPtr.Zero)?null:new SharpDX.Direct3D11.GeometryShader(gSOut_);	
				__result__.CheckError();
				return gSOut;
			}
		}
		
		/// <summary>	
		/// <p>Get a pixel shader.</p>	
		/// </summary>	
		/// <param name="shaderIndex"><dd>  <p>A zero-based index.</p> </dd></param>	
		/// <returns><dd>  <p>A reference to an <strong><see cref="SharpDX.Direct3D11.PixelShader"/></strong> reference that will be set to the pixel shader on return.</p> </dd></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectShaderVariable::GetPixelShader']/*"/>	
		/// <msdn-id>ff476760</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectShaderVariable::GetPixelShader([In] unsigned int ShaderIndex,[Out] ID3D11PixelShader** ppPS)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectShaderVariable::GetPixelShader</unmanaged-short>	
		public SharpDX.Direct3D11.PixelShader GetPixelShader(int shaderIndex) {
			unsafe {
				SharpDX.Direct3D11.PixelShader pSOut;
				IntPtr pSOut_ = IntPtr.Zero;
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, shaderIndex, &pSOut_,((void**)(*(void**)_nativePointer))[34]);		
				pSOut= (pSOut_ == IntPtr.Zero)?null:new SharpDX.Direct3D11.PixelShader(pSOut_);	
				__result__.CheckError();
				return pSOut;
			}
		}
		
		/// <summary>	
		/// <p>Get a hull shader.</p>	
		/// </summary>	
		/// <param name="shaderIndex"><dd>  <p>Index of the shader.</p> </dd></param>	
		/// <param name="hSOut"><dd>  <p>A reference to an <strong><see cref="SharpDX.Direct3D11.HullShader"/></strong> reference that will be set to the hull shader on return.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectShaderVariable::GetHullShader']/*"/>	
		/// <msdn-id>ff476756</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectShaderVariable::GetHullShader([In] unsigned int ShaderIndex,[Out] ID3D11HullShader** ppHS)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectShaderVariable::GetHullShader</unmanaged-short>	
		public void GetHullShader(int shaderIndex, out SharpDX.Direct3D11.HullShader hSOut) {
			unsafe {
				IntPtr hSOut_ = IntPtr.Zero;
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, shaderIndex, &hSOut_,((void**)(*(void**)_nativePointer))[35]);		
				hSOut= (hSOut_ == IntPtr.Zero)?null:new SharpDX.Direct3D11.HullShader(hSOut_);	
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get a domain shader.</p>	
		/// </summary>	
		/// <param name="shaderIndex"><dd>  <p>Index of the domain shader.</p> </dd></param>	
		/// <param name="dSOut"><dd>  <p>Pointer to an <strong><see cref="SharpDX.Direct3D11.DomainShader"/></strong> reference that will be set to the domain shader on return.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectShaderVariable::GetDomainShader']/*"/>	
		/// <msdn-id>ff476754</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectShaderVariable::GetDomainShader([In] unsigned int ShaderIndex,[Out] ID3D11DomainShader** ppDS)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectShaderVariable::GetDomainShader</unmanaged-short>	
		public void GetDomainShader(int shaderIndex, out SharpDX.Direct3D11.DomainShader dSOut) {
			unsafe {
				IntPtr dSOut_ = IntPtr.Zero;
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, shaderIndex, &dSOut_,((void**)(*(void**)_nativePointer))[36]);		
				dSOut= (dSOut_ == IntPtr.Zero)?null:new SharpDX.Direct3D11.DomainShader(dSOut_);	
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get a compute shader.</p>	
		/// </summary>	
		/// <param name="shaderIndex"><dd>  <p>Index of the compute shader.</p> </dd></param>	
		/// <param name="cSOut"><dd>  <p>Pointer to an <strong><see cref="SharpDX.Direct3D11.ComputeShader"/></strong> reference that will be set to the compute shader on return.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectShaderVariable::GetComputeShader']/*"/>	
		/// <msdn-id>ff476753</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectShaderVariable::GetComputeShader([In] unsigned int ShaderIndex,[Out] ID3D11ComputeShader** ppCS)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectShaderVariable::GetComputeShader</unmanaged-short>	
		public void GetComputeShader(int shaderIndex, out SharpDX.Direct3D11.ComputeShader cSOut) {
			unsafe {
				IntPtr cSOut_ = IntPtr.Zero;
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, shaderIndex, &cSOut_,((void**)(*(void**)_nativePointer))[37]);		
				cSOut= (cSOut_ == IntPtr.Zero)?null:new SharpDX.Direct3D11.ComputeShader(cSOut_);	
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get an input-signature description.</p>	
		/// </summary>	
		/// <param name="shaderIndex"><dd>  <p>A zero-based shader index.</p> </dd></param>	
		/// <param name="element"><dd>  <p>A zero-based shader-element index.</p> </dd></param>	
		/// <returns><dd>  <p>A reference to a parameter description (see <strong><see cref="SharpDX.D3DCompiler.ShaderParameterDescription"/></strong>).</p> </dd></returns>	
		/// <remarks>	
		/// <p>An effect contains one or more shaders; each shader has an input and output signature; each signature contains one or more elements (or parameters).  The shader index identifies the shader and the element index identifies the element (or parameter) in the shader signature.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectShaderVariable::GetInputSignatureElementDesc']/*"/>	
		/// <msdn-id>ff476757</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectShaderVariable::GetInputSignatureElementDesc([In] unsigned int ShaderIndex,[In] unsigned int Element,[Out] D3D11_SIGNATURE_PARAMETER_DESC* pDesc)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectShaderVariable::GetInputSignatureElementDesc</unmanaged-short>	
		public SharpDX.D3DCompiler.ShaderParameterDescription GetInputSignatureElementDescription(int shaderIndex, int element) {
			unsafe {
				SharpDX.D3DCompiler.ShaderParameterDescription etInputParameterDescriptionRef;
				var etInputParameterDescriptionRef_ = new SharpDX.D3DCompiler.ShaderParameterDescription.__Native();
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, shaderIndex, element, &etInputParameterDescriptionRef_,((void**)(*(void**)_nativePointer))[38]);		
				etInputParameterDescriptionRef = new SharpDX.D3DCompiler.ShaderParameterDescription();
				etInputParameterDescriptionRef.__MarshalFrom(ref etInputParameterDescriptionRef_);
				__result__.CheckError();
				return etInputParameterDescriptionRef;
			}
		}
		
		/// <summary>	
		/// <p>Get an output-signature description.</p>	
		/// </summary>	
		/// <param name="shaderIndex"><dd>  <p>A zero-based shader index.</p> </dd></param>	
		/// <param name="element"><dd>  <p>A zero-based element index.</p> </dd></param>	
		/// <returns><dd>  <p>A reference to a parameter description (see <strong><see cref="SharpDX.D3DCompiler.ShaderParameterDescription"/></strong>).</p> </dd></returns>	
		/// <remarks>	
		/// <p>An effect contains one or more shaders; each shader has an input and output signature; each signature contains one or more elements (or parameters).  The shader index identifies the shader and the element index identifies the element (or parameter) in the shader signature.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectShaderVariable::GetOutputSignatureElementDesc']/*"/>	
		/// <msdn-id>ff476758</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectShaderVariable::GetOutputSignatureElementDesc([In] unsigned int ShaderIndex,[In] unsigned int Element,[Out] D3D11_SIGNATURE_PARAMETER_DESC* pDesc)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectShaderVariable::GetOutputSignatureElementDesc</unmanaged-short>	
		public SharpDX.D3DCompiler.ShaderParameterDescription GetOutputSignatureElementDescription(int shaderIndex, int element) {
			unsafe {
				SharpDX.D3DCompiler.ShaderParameterDescription etOutputParameterDescriptionRef;
				var etOutputParameterDescriptionRef_ = new SharpDX.D3DCompiler.ShaderParameterDescription.__Native();
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, shaderIndex, element, &etOutputParameterDescriptionRef_,((void**)(*(void**)_nativePointer))[39]);		
				etOutputParameterDescriptionRef = new SharpDX.D3DCompiler.ShaderParameterDescription();
				etOutputParameterDescriptionRef.__MarshalFrom(ref etOutputParameterDescriptionRef_);
				__result__.CheckError();
				return etOutputParameterDescriptionRef;
			}
		}
		
		/// <summary>	
		/// <p>Get a patch constant signature description.</p>	
		/// </summary>	
		/// <param name="shaderIndex"><dd>  <p>A zero-based shader index. </p> </dd></param>	
		/// <param name="element"><dd>  <p>A zero-based element index. </p> </dd></param>	
		/// <param name="descRef"><dd>  <p>A reference to a parameter description (see <strong><see cref="SharpDX.D3DCompiler.ShaderParameterDescription"/></strong>).</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectShaderVariable::GetPatchConstantSignatureElementDesc']/*"/>	
		/// <msdn-id>ff476759</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectShaderVariable::GetPatchConstantSignatureElementDesc([In] unsigned int ShaderIndex,[In] unsigned int Element,[Out] D3D11_SIGNATURE_PARAMETER_DESC* pDesc)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectShaderVariable::GetPatchConstantSignatureElementDesc</unmanaged-short>	
		public void GetPatchConstantSignatureElementDescription(int shaderIndex, int element, out SharpDX.D3DCompiler.ShaderParameterDescription descRef) {
			unsafe {
				var descRef_ = new SharpDX.D3DCompiler.ShaderParameterDescription.__Native();
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, shaderIndex, element, &descRef_,((void**)(*(void**)_nativePointer))[40]);		
				descRef = new SharpDX.D3DCompiler.ShaderParameterDescription();
				descRef.__MarshalFrom(ref descRef_);
				__result__.CheckError();
			}
		}
	}
	/// <summary>	
	/// <p>A string-variable interface accesses a string variable.</p>	
	/// </summary>	
	/// <remarks>	
	/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
	/// </remarks>	
	/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectStringVariable']/*"/>	
	/// <msdn-id>ff476763</msdn-id>	
	/// <unmanaged>ID3DX11EffectStringVariable</unmanaged>	
	/// <unmanaged-short>ID3DX11EffectStringVariable</unmanaged-short>	
	[Guid("f355c818-01be-4653-a7cc-60fffeddc76d")]
	public partial class EffectStringVariable : SharpDX.Direct3D11.EffectVariable {
		/// <summary>
		/// Initializes a new instance of the <see cref="SharpDX.Direct3D11.EffectStringVariable"/> class.
		/// </summary>
		/// <param name="nativePtr">The native pointer.</param>	
		public EffectStringVariable(IntPtr nativePtr) : base(nativePtr) {
		}

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.Direct3D11.EffectStringVariable"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.Direct3D11.EffectStringVariable(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.Direct3D11.EffectStringVariable(nativePointer);
		}
		
		
		/// <summary>	
		/// <p>Get the string.</p>	
		/// </summary>	
		/// <param name="stringOut"><dd>  <p>A reference to the string.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectStringVariable::GetString']/*"/>	
		/// <msdn-id>ff476764</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectStringVariable::GetString([Out] const void** ppString)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectStringVariable::GetString</unmanaged-short>	
		internal void GetString(out System.IntPtr stringOut) {
			unsafe {
				SharpDX.Result __result__;
				fixed (void* stringOut_ = &stringOut)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, stringOut_,((void**)(*(void**)_nativePointer))[31]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get an array of strings.</p>	
		/// </summary>	
		/// <param name="stringsOut"><dd>  <p>A reference to the first string in the array.</p> </dd></param>	
		/// <param name="offset"><dd>  <p>The offset (in number of strings) between the start of the array and the first string to get.</p> </dd></param>	
		/// <param name="count"><dd>  <p>The number of strings in the returned array.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectStringVariable::GetStringArray']/*"/>	
		/// <msdn-id>ff476765</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectStringVariable::GetStringArray([Out, Buffer] const void** ppStrings,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectStringVariable::GetStringArray</unmanaged-short>	
		internal void GetStringArray(System.IntPtr stringsOut, int offset, int count) {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, (void*)stringsOut, offset, count,((void**)(*(void**)_nativePointer))[32]);		
				__result__.CheckError();
			}
		}
	}
	/// <summary>	
	/// <p>An <strong><see cref="SharpDX.Direct3D11.EffectTechnique"/></strong> interface is a collection of passes.</p><p>The lifetime of an <strong><see cref="SharpDX.Direct3D11.EffectTechnique"/></strong> object is equal to the lifetime of its parent <strong><see cref="SharpDX.Direct3D11.Effect"/></strong> object.</p><ul> <li>Methods</li> </ul>	
	/// </summary>	
	/// <remarks>	
	/// <p>An effect contains one or more techniques; each technique contains one or more passes; each pass contains state assignments.</p><p>To get an effect-technique interface, call a method such as <strong><see cref="SharpDX.Direct3D11.Effect.GetTechniqueByName"/></strong>.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
	/// </remarks>	
	/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectTechnique']/*"/>	
	/// <msdn-id>ff476766</msdn-id>	
	/// <unmanaged>ID3DX11EffectTechnique</unmanaged>	
	/// <unmanaged-short>ID3DX11EffectTechnique</unmanaged-short>	
	[Guid("51198831-1f1d-4f47-bd76-41cb0835b1de")]
	public partial class EffectTechnique : SharpDX.ComObject {
		/// <summary>
		/// Initializes a new instance of the <see cref="SharpDX.Direct3D11.EffectTechnique"/> class.
		/// </summary>
		/// <param name="nativePtr">The native pointer.</param>	
		public EffectTechnique(IntPtr nativePtr) : base(nativePtr) {
		}

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.Direct3D11.EffectTechnique"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.Direct3D11.EffectTechnique(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.Direct3D11.EffectTechnique(nativePointer);
		}
		
		
		/// <summary>	
		/// <p>Test a technique to see if it contains valid syntax.</p>	
		/// </summary>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectTechnique::IsValid']/*"/>	
		/// <msdn-id>ff476773</msdn-id>	
		/// <unmanaged>IsValid</unmanaged>	
		/// <unmanaged-short>IsValid</unmanaged-short>	
		/// <unmanaged>BOOL ID3DX11EffectTechnique::IsValid()</unmanaged>
		public SharpDX.Mathematics.Interop.RawBool IsValid {
				get { return IsValid_(); }
		}
		
		/// <summary>	
		/// <p>Get a technique description.</p>	
		/// </summary>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectTechnique::GetDesc']/*"/>	
		/// <msdn-id>ff476770</msdn-id>	
		/// <unmanaged>GetDesc</unmanaged>	
		/// <unmanaged-short>GetDesc</unmanaged-short>	
		/// <unmanaged>HRESULT ID3DX11EffectTechnique::GetDesc([Out] D3DX11_TECHNIQUE_DESC* pDesc)</unmanaged>
		public SharpDX.Direct3D11.EffectTechniqueDescription Description {
				get { SharpDX.Direct3D11.EffectTechniqueDescription __output__; GetDescription(out __output__); return __output__; }
		}
		
		/// <summary>	
		/// <p>Test a technique to see if it contains valid syntax.</p>	
		/// </summary>	
		/// <returns><p><strong>TRUE</strong> if the code syntax is valid; otherwise <strong><see cref="SharpDX.Result.False"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectTechnique::IsValid']/*"/>	
		/// <msdn-id>ff476773</msdn-id>	
		/// <unmanaged>BOOL ID3DX11EffectTechnique::IsValid()</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectTechnique::IsValid</unmanaged-short>	
		internal SharpDX.Mathematics.Interop.RawBool IsValid_() {
			unsafe {
				SharpDX.Mathematics.Interop.RawBool __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.CalliSharpDXMathematicsInteropRawBool(_nativePointer,((void**)(*(void**)_nativePointer))[3]);		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get a technique description.</p>	
		/// </summary>	
		/// <param name="descRef"><dd>  <p>A reference to a technique description (see <strong><see cref="SharpDX.Direct3D11.EffectTechniqueDescription"/></strong>).</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectTechnique::GetDesc']/*"/>	
		/// <msdn-id>ff476770</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectTechnique::GetDesc([Out] D3DX11_TECHNIQUE_DESC* pDesc)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectTechnique::GetDesc</unmanaged-short>	
		internal void GetDescription(out SharpDX.Direct3D11.EffectTechniqueDescription descRef) {
			unsafe {
				var descRef_ = new SharpDX.Direct3D11.EffectTechniqueDescription.__Native();
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, &descRef_,((void**)(*(void**)_nativePointer))[4]);		
				descRef = new SharpDX.Direct3D11.EffectTechniqueDescription();
				descRef.__MarshalFrom(ref descRef_);
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get an annotation by index.</p>	
		/// </summary>	
		/// <param name="index"><dd>  <p>The zero-based index of the interface reference.</p> </dd></param>	
		/// <returns><p>A reference to an <strong><see cref="SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p>Use an annotation to attach a piece of metadata to a technique.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectTechnique::GetAnnotationByIndex']/*"/>	
		/// <msdn-id>ff476768</msdn-id>	
		/// <unmanaged>ID3DX11EffectVariable* ID3DX11EffectTechnique::GetAnnotationByIndex([In] unsigned int Index)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectTechnique::GetAnnotationByIndex</unmanaged-short>	
		public SharpDX.Direct3D11.EffectVariable GetAnnotationByIndex(int index) {
			unsafe {
				SharpDX.Direct3D11.EffectVariable __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectVariable((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer, index,((void**)(*(void**)_nativePointer))[5]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get an annotation by name.</p>	
		/// </summary>	
		/// <param name="name"><dd>  <p>Name of the annotation.</p> </dd></param>	
		/// <returns><p>A reference to an <strong><see cref="SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p>Use an annotation to attach a piece of metadata to a technique.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectTechnique::GetAnnotationByName']/*"/>	
		/// <msdn-id>ff476769</msdn-id>	
		/// <unmanaged>ID3DX11EffectVariable* ID3DX11EffectTechnique::GetAnnotationByName([In] const char* Name)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectTechnique::GetAnnotationByName</unmanaged-short>	
		public SharpDX.Direct3D11.EffectVariable GetAnnotationByName(string name) {
			unsafe {
				IntPtr name_ = Utilities.StringToHGlobalAnsi(name);
				SharpDX.Direct3D11.EffectVariable __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectVariable((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer, (void*)name_,((void**)(*(void**)_nativePointer))[6]));		
				Marshal.FreeHGlobal(name_ );
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get a pass by index.</p>	
		/// </summary>	
		/// <param name="index"><dd>  <p>A zero-based index.</p> </dd></param>	
		/// <returns><p>A reference to a <strong><see cref="SharpDX.Direct3D11.EffectPass"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p>A technique contains one or more passes; get a pass using a name or an index.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectTechnique::GetPassByIndex']/*"/>	
		/// <msdn-id>ff476771</msdn-id>	
		/// <unmanaged>ID3DX11EffectPass* ID3DX11EffectTechnique::GetPassByIndex([In] unsigned int Index)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectTechnique::GetPassByIndex</unmanaged-short>	
		public SharpDX.Direct3D11.EffectPass GetPassByIndex(int index) {
			unsafe {
				SharpDX.Direct3D11.EffectPass __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectPass((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer, index,((void**)(*(void**)_nativePointer))[7]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get a pass by name.</p>	
		/// </summary>	
		/// <param name="name"><dd>  <p>The name of the pass.</p> </dd></param>	
		/// <returns><p>A reference to an <strong><see cref="SharpDX.Direct3D11.EffectPass"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p>A technique contains one or more passes; get a pass using a name or an index.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectTechnique::GetPassByName']/*"/>	
		/// <msdn-id>ff476772</msdn-id>	
		/// <unmanaged>ID3DX11EffectPass* ID3DX11EffectTechnique::GetPassByName([In] const char* Name)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectTechnique::GetPassByName</unmanaged-short>	
		public SharpDX.Direct3D11.EffectPass GetPassByName(string name) {
			unsafe {
				IntPtr name_ = Utilities.StringToHGlobalAnsi(name);
				SharpDX.Direct3D11.EffectPass __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectPass((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer, (void*)name_,((void**)(*(void**)_nativePointer))[8]));		
				Marshal.FreeHGlobal(name_ );
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Compute a state-block mask to allow/prevent state changes.</p>	
		/// </summary>	
		/// <param name="stateBlockMaskRef"><dd>  <p>A reference to a state-block mask (see <strong><see cref="SharpDX.Direct3D11.StateBlockMask"/></strong>).</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectTechnique::ComputeStateBlockMask']/*"/>	
		/// <msdn-id>ff476767</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectTechnique::ComputeStateBlockMask([InOut] D3DX11_STATE_BLOCK_MASK* pStateBlockMask)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectTechnique::ComputeStateBlockMask</unmanaged-short>	
		public void ComputeStateBlockMask(ref SharpDX.Direct3D11.StateBlockMask stateBlockMaskRef) {
			unsafe {
				var stateBlockMaskRef_ = new SharpDX.Direct3D11.StateBlockMask.__Native();
				stateBlockMaskRef.__MarshalTo(ref stateBlockMaskRef_);
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, &stateBlockMaskRef_,((void**)(*(void**)_nativePointer))[9]);		
				stateBlockMaskRef.__MarshalFrom(ref stateBlockMaskRef_);
				stateBlockMaskRef.__MarshalFree(ref stateBlockMaskRef_);
				__result__.CheckError();
			}
		}
	}
	/// <summary>	
	/// <p>The <strong><see cref="SharpDX.Direct3D11.EffectType"/></strong> interface accesses effect variables by type.</p><p>The lifetime of an <strong><see cref="SharpDX.Direct3D11.EffectType"/></strong> object is equal to the lifetime of its parent <strong><see cref="SharpDX.Direct3D11.Effect"/></strong> object.</p><ul> <li>Methods</li> </ul>	
	/// </summary>	
	/// <remarks>	
	/// <p>To get information about an effect type from an effect variable, call <strong><see cref="SharpDX.Direct3D11.EffectVariable.GetTypeInfo"/></strong>.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
	/// </remarks>	
	/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectType']/*"/>	
	/// <msdn-id>ff476774</msdn-id>	
	/// <unmanaged>ID3DX11EffectType</unmanaged>	
	/// <unmanaged-short>ID3DX11EffectType</unmanaged-short>	
	[Guid("4250d721-d5e5-491f-b62b-587c43186285")]
	public partial class EffectType : SharpDX.ComObject {
		/// <summary>
		/// Initializes a new instance of the <see cref="SharpDX.Direct3D11.EffectType"/> class.
		/// </summary>
		/// <param name="nativePtr">The native pointer.</param>	
		public EffectType(IntPtr nativePtr) : base(nativePtr) {
		}

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.Direct3D11.EffectType"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.Direct3D11.EffectType(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.Direct3D11.EffectType(nativePointer);
		}
		
		
		/// <summary>	
		/// <p>Tests that the effect type is valid.</p>	
		/// </summary>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectType::IsValid']/*"/>	
		/// <msdn-id>ff476782</msdn-id>	
		/// <unmanaged>IsValid</unmanaged>	
		/// <unmanaged-short>IsValid</unmanaged-short>	
		/// <unmanaged>BOOL ID3DX11EffectType::IsValid()</unmanaged>
		public SharpDX.Mathematics.Interop.RawBool IsValid {
				get { return IsValid_(); }
		}
		
		/// <summary>	
		/// <p>Get an effect-type description.</p>	
		/// </summary>	
		/// <remarks>	
		/// <p>The effect-variable description contains data about the name, annotations, semantic, flags and buffer offset of the effect type.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectType::GetDesc']/*"/>	
		/// <msdn-id>ff476775</msdn-id>	
		/// <unmanaged>GetDesc</unmanaged>	
		/// <unmanaged-short>GetDesc</unmanaged-short>	
		/// <unmanaged>HRESULT ID3DX11EffectType::GetDesc([Out] D3DX11_EFFECT_TYPE_DESC* pDesc)</unmanaged>
		public SharpDX.Direct3D11.EffectTypeDescription Description {
				get { SharpDX.Direct3D11.EffectTypeDescription __output__; GetDescription(out __output__); return __output__; }
		}
		
		/// <summary>	
		/// <p>Tests that the effect type is valid.</p>	
		/// </summary>	
		/// <returns><p><strong>TRUE</strong> if it is valid; otherwise <strong><see cref="SharpDX.Result.False"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectType::IsValid']/*"/>	
		/// <msdn-id>ff476782</msdn-id>	
		/// <unmanaged>BOOL ID3DX11EffectType::IsValid()</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectType::IsValid</unmanaged-short>	
		internal SharpDX.Mathematics.Interop.RawBool IsValid_() {
			unsafe {
				SharpDX.Mathematics.Interop.RawBool __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.CalliSharpDXMathematicsInteropRawBool(_nativePointer,((void**)(*(void**)_nativePointer))[3]);		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get an effect-type description.</p>	
		/// </summary>	
		/// <param name="descRef"><dd>  <p>A reference to an effect-type description. See <strong><see cref="SharpDX.Direct3D11.EffectTypeDescription"/></strong>.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p>The effect-variable description contains data about the name, annotations, semantic, flags and buffer offset of the effect type.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectType::GetDesc']/*"/>	
		/// <msdn-id>ff476775</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectType::GetDesc([Out] D3DX11_EFFECT_TYPE_DESC* pDesc)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectType::GetDesc</unmanaged-short>	
		internal void GetDescription(out SharpDX.Direct3D11.EffectTypeDescription descRef) {
			unsafe {
				var descRef_ = new SharpDX.Direct3D11.EffectTypeDescription.__Native();
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, &descRef_,((void**)(*(void**)_nativePointer))[4]);		
				descRef = new SharpDX.Direct3D11.EffectTypeDescription();
				descRef.__MarshalFrom(ref descRef_);
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get a member type by index.</p>	
		/// </summary>	
		/// <param name="index"><dd>  <p>A zero-based index.</p> </dd></param>	
		/// <returns><p>A reference to an <strong><see cref="SharpDX.Direct3D11.EffectType"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectType::GetMemberTypeByIndex']/*"/>	
		/// <msdn-id>ff476779</msdn-id>	
		/// <unmanaged>ID3DX11EffectType* ID3DX11EffectType::GetMemberTypeByIndex([In] unsigned int Index)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectType::GetMemberTypeByIndex</unmanaged-short>	
		public SharpDX.Direct3D11.EffectType GetMemberTypeByIndex(int index) {
			unsafe {
				SharpDX.Direct3D11.EffectType __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectType((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer, index,((void**)(*(void**)_nativePointer))[5]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get an member type by name.</p>	
		/// </summary>	
		/// <param name="name"><dd>  <p>A member's name.</p> </dd></param>	
		/// <returns><p>A reference to an <strong><see cref="SharpDX.Direct3D11.EffectType"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectType::GetMemberTypeByName']/*"/>	
		/// <msdn-id>ff476780</msdn-id>	
		/// <unmanaged>ID3DX11EffectType* ID3DX11EffectType::GetMemberTypeByName([In] const char* Name)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectType::GetMemberTypeByName</unmanaged-short>	
		public SharpDX.Direct3D11.EffectType GetMemberTypeByName(string name) {
			unsafe {
				IntPtr name_ = Utilities.StringToHGlobalAnsi(name);
				SharpDX.Direct3D11.EffectType __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectType((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer, (void*)name_,((void**)(*(void**)_nativePointer))[6]));		
				Marshal.FreeHGlobal(name_ );
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get a member type by semantic.</p>	
		/// </summary>	
		/// <param name="semantic"><dd>  <p>A semantic.</p> </dd></param>	
		/// <returns><p>A reference to an <strong><see cref="SharpDX.Direct3D11.EffectType"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectType::GetMemberTypeBySemantic']/*"/>	
		/// <msdn-id>ff476781</msdn-id>	
		/// <unmanaged>ID3DX11EffectType* ID3DX11EffectType::GetMemberTypeBySemantic([In] const char* Semantic)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectType::GetMemberTypeBySemantic</unmanaged-short>	
		public SharpDX.Direct3D11.EffectType GetMemberTypeBySemantic(string semantic) {
			unsafe {
				IntPtr semantic_ = Utilities.StringToHGlobalAnsi(semantic);
				SharpDX.Direct3D11.EffectType __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectType((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer, (void*)semantic_,((void**)(*(void**)_nativePointer))[7]));		
				Marshal.FreeHGlobal(semantic_ );
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get the name of a member.</p>	
		/// </summary>	
		/// <param name="index"><dd>  <p>A zero-based index.</p> </dd></param>	
		/// <returns><p>The name of the member.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectType::GetMemberName']/*"/>	
		/// <msdn-id>ff476776</msdn-id>	
		/// <unmanaged>const char* ID3DX11EffectType::GetMemberName([In] unsigned int Index)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectType::GetMemberName</unmanaged-short>	
		public string GetMemberName(int index) {
			unsafe {
				string __result__;
				__result__= 
				Marshal.PtrToStringAnsi(SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer, index,((void**)(*(void**)_nativePointer))[8]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get the semantic attached to a member.</p>	
		/// </summary>	
		/// <param name="index"><dd>  <p>A zero-based index.</p> </dd></param>	
		/// <returns><p>A string that contains the semantic.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectType::GetMemberSemantic']/*"/>	
		/// <msdn-id>ff476778</msdn-id>	
		/// <unmanaged>const char* ID3DX11EffectType::GetMemberSemantic([In] unsigned int Index)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectType::GetMemberSemantic</unmanaged-short>	
		public string GetMemberSemantic(int index) {
			unsafe {
				string __result__;
				__result__= 
				Marshal.PtrToStringAnsi(SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer, index,((void**)(*(void**)_nativePointer))[9]));		
				return __result__;
			}
		}
	}
	/// <summary>	
	/// <p>Accesses an unordered access view.</p>	
	/// </summary>	
	/// <remarks>	
	/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
	/// </remarks>	
	/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectUnorderedAccessViewVariable']/*"/>	
	/// <msdn-id>ff476783</msdn-id>	
	/// <unmanaged>ID3DX11EffectUnorderedAccessViewVariable</unmanaged>	
	/// <unmanaged-short>ID3DX11EffectUnorderedAccessViewVariable</unmanaged-short>	
	[Guid("79b4ac8c-870a-47d2-b05a-8bd5cc3ee6c9")]
	public partial class EffectUnorderedAccessViewVariable : SharpDX.Direct3D11.EffectVariable {
		/// <summary>
		/// Initializes a new instance of the <see cref="SharpDX.Direct3D11.EffectUnorderedAccessViewVariable"/> class.
		/// </summary>
		/// <param name="nativePtr">The native pointer.</param>	
		public EffectUnorderedAccessViewVariable(IntPtr nativePtr) : base(nativePtr) {
		}

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.Direct3D11.EffectUnorderedAccessViewVariable"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.Direct3D11.EffectUnorderedAccessViewVariable(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.Direct3D11.EffectUnorderedAccessViewVariable(nativePointer);
		}
		
		
		/// <summary>	
		/// <p>Set an unordered-access-view.</p>	
		/// </summary>	
		/// <param name="resourceRef"><dd>  <p>Pointer to an <strong><see cref="SharpDX.Direct3D11.UnorderedAccessView"/></strong>.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectUnorderedAccessViewVariable::SetUnorderedAccessView']/*"/>	
		/// <msdn-id>ff476786</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectUnorderedAccessViewVariable::SetUnorderedAccessView([In] ID3D11UnorderedAccessView* pResource)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectUnorderedAccessViewVariable::SetUnorderedAccessView</unmanaged-short>	
		public void Set(SharpDX.Direct3D11.UnorderedAccessView resourceRef) {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, (void*)((resourceRef == null)?IntPtr.Zero:resourceRef.NativePointer),((void**)(*(void**)_nativePointer))[31]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get an unordered-access-view.</p>	
		/// </summary>	
		/// <returns><dd>  <p>Pointer to an <strong><see cref="SharpDX.Direct3D11.UnorderedAccessView"/></strong> reference that will be set on return.</p> </dd></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectUnorderedAccessViewVariable::GetUnorderedAccessView']/*"/>	
		/// <msdn-id>ff476784</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectUnorderedAccessViewVariable::GetUnorderedAccessView([Out] ID3D11UnorderedAccessView** ppResource)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectUnorderedAccessViewVariable::GetUnorderedAccessView</unmanaged-short>	
		public SharpDX.Direct3D11.UnorderedAccessView GetUnorderedAccessView() {
			unsafe {
				SharpDX.Direct3D11.UnorderedAccessView resourceOut;
				IntPtr resourceOut_ = IntPtr.Zero;
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, &resourceOut_,((void**)(*(void**)_nativePointer))[32]);		
				resourceOut= (resourceOut_ == IntPtr.Zero)?null:new SharpDX.Direct3D11.UnorderedAccessView(resourceOut_);	
				__result__.CheckError();
				return resourceOut;
			}
		}
		
		/// <summary>	
		/// <p>Set an array of unordered-access-views.</p>	
		/// </summary>	
		/// <param name="resourcesOut"><dd>  <p>An array of <strong><see cref="SharpDX.Direct3D11.UnorderedAccessView"/></strong> references.</p> </dd></param>	
		/// <param name="offset"><dd>  <p>Index of the first unordered-access-view.</p> </dd></param>	
		/// <param name="count"><dd>  <p>Number of elements in the array.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectUnorderedAccessViewVariable::SetUnorderedAccessViewArray']/*"/>	
		/// <msdn-id>ff476787</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectUnorderedAccessViewVariable::SetUnorderedAccessViewArray([In, Buffer] ID3D11UnorderedAccessView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectUnorderedAccessViewVariable::SetUnorderedAccessViewArray</unmanaged-short>	
		internal void Set(SharpDX.Direct3D11.UnorderedAccessView[] resourcesOut, int offset, int count) {
			unsafe {
				IntPtr* resourcesOut_ = (IntPtr*)0;
				if ( resourcesOut != null ) {
					IntPtr* resourcesOut__ = stackalloc IntPtr[resourcesOut.Length];
					resourcesOut_ = resourcesOut__;
					for (int i = 0; i < resourcesOut.Length; i++)                        
						resourcesOut_[i] =  (resourcesOut[i] == null)? IntPtr.Zero : resourcesOut[i].NativePointer;
				}
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, resourcesOut_, offset, count,((void**)(*(void**)_nativePointer))[33]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Set an array of unordered-access-views.</p>	
		/// </summary>	
		/// <param name="resourcesOut"><dd>  <p>An array of <strong><see cref="SharpDX.Direct3D11.UnorderedAccessView"/></strong> references.</p> </dd></param>	
		/// <param name="offset"><dd>  <p>Index of the first unordered-access-view.</p> </dd></param>	
		/// <param name="count"><dd>  <p>Number of elements in the array.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectUnorderedAccessViewVariable::SetUnorderedAccessViewArray']/*"/>	
		/// <msdn-id>ff476787</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectUnorderedAccessViewVariable::SetUnorderedAccessViewArray([In, Buffer] ID3D11UnorderedAccessView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectUnorderedAccessViewVariable::SetUnorderedAccessViewArray</unmanaged-short>	
		internal void Set(SharpDX.ComArray<SharpDX.Direct3D11.UnorderedAccessView> resourcesOut, int offset, int count) {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, (void*)((resourcesOut == null)?IntPtr.Zero:resourcesOut.NativePointer), offset, count,((void**)(*(void**)_nativePointer))[33]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Set an array of unordered-access-views.</p>	
		/// </summary>	
		/// <param name="resourcesOut"><dd>  <p>An array of <strong><see cref="SharpDX.Direct3D11.UnorderedAccessView"/></strong> references.</p> </dd></param>	
		/// <param name="offset"><dd>  <p>Index of the first unordered-access-view.</p> </dd></param>	
		/// <param name="count"><dd>  <p>Number of elements in the array.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectUnorderedAccessViewVariable::SetUnorderedAccessViewArray']/*"/>	
		/// <msdn-id>ff476787</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectUnorderedAccessViewVariable::SetUnorderedAccessViewArray([In, Buffer] ID3D11UnorderedAccessView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectUnorderedAccessViewVariable::SetUnorderedAccessViewArray</unmanaged-short>	
		private void Set(System.IntPtr resourcesOut, int offset, int count) {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, (void*)resourcesOut, offset, count,((void**)(*(void**)_nativePointer))[33]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get an array of unordered-access-views.</p>	
		/// </summary>	
		/// <param name="resourcesOut"><dd>  <p>Pointer to an <strong><see cref="SharpDX.Direct3D11.UnorderedAccessView"/></strong> reference that will be set to the UAV array on return. </p> </dd></param>	
		/// <param name="offset"><dd>  <p>Index of the first interface.</p> </dd></param>	
		/// <param name="count"><dd>  <p>Number of elements in the array.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectUnorderedAccessViewVariable::GetUnorderedAccessViewArray']/*"/>	
		/// <msdn-id>ff476785</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectUnorderedAccessViewVariable::GetUnorderedAccessViewArray([Out, Buffer] ID3D11UnorderedAccessView** ppResources,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectUnorderedAccessViewVariable::GetUnorderedAccessViewArray</unmanaged-short>	
		internal void GetUnorderedAccessViewArray(SharpDX.Direct3D11.UnorderedAccessView[] resourcesOut, int offset, int count) {
			unsafe {
				IntPtr* resourcesOut_ = stackalloc IntPtr[resourcesOut.Length];
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, resourcesOut_, offset, count,((void**)(*(void**)_nativePointer))[34]);		
				for (int i = 0; i < resourcesOut.Length; i++)
					resourcesOut[i] = (resourcesOut_[i] == IntPtr.Zero)?null:new SharpDX.Direct3D11.UnorderedAccessView(resourcesOut_[i]);	
				__result__.CheckError();
			}
		}
	}
	/// <summary>	
	/// <p>The <strong><see cref="SharpDX.Direct3D11.EffectVariable"/></strong> interface is the base class for all effect variables.</p><p>The lifetime of an <strong><see cref="SharpDX.Direct3D11.EffectVariable"/></strong> object is equal to the lifetime of its parent <strong><see cref="SharpDX.Direct3D11.Effect"/></strong> object.</p><ul> <li>Methods</li> </ul>	
	/// </summary>	
	/// <remarks>	
	/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
	/// </remarks>	
	/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable']/*"/>	
	/// <msdn-id>ff476788</msdn-id>	
	/// <unmanaged>ID3DX11EffectVariable</unmanaged>	
	/// <unmanaged-short>ID3DX11EffectVariable</unmanaged-short>	
	[Guid("036a777d-b56e-4b25-b313-cc3ddab71873")]
	public partial class EffectVariable : SharpDX.ComObject {
		/// <summary>
		/// Initializes a new instance of the <see cref="SharpDX.Direct3D11.EffectVariable"/> class.
		/// </summary>
		/// <param name="nativePtr">The native pointer.</param>	
		public EffectVariable(IntPtr nativePtr) : base(nativePtr) {
		}

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.Direct3D11.EffectVariable"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.Direct3D11.EffectVariable(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.Direct3D11.EffectVariable(nativePointer);
		}
		
		
		/// <summary>	
		/// <p>Compare the data type with the data stored.</p>	
		/// </summary>	
		/// <remarks>	
		/// <p>This method checks that the data type matches the data stored after casting one interface to another (using any of the As methods).</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable::IsValid']/*"/>	
		/// <msdn-id>ff476815</msdn-id>	
		/// <unmanaged>IsValid</unmanaged>	
		/// <unmanaged-short>IsValid</unmanaged-short>	
		/// <unmanaged>BOOL ID3DX11EffectVariable::IsValid()</unmanaged>
		public SharpDX.Mathematics.Interop.RawBool IsValid {
				get { return IsValid_(); }
		}
		
		/// <summary>	
		/// <p>Get type information.</p>	
		/// </summary>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable::GetType']/*"/>	
		/// <msdn-id>ff476814</msdn-id>	
		/// <unmanaged>GetType</unmanaged>	
		/// <unmanaged-short>GetType</unmanaged-short>	
		/// <unmanaged>ID3DX11EffectType* ID3DX11EffectVariable::GetType()</unmanaged>
		public SharpDX.Direct3D11.EffectType TypeInfo {
				get { return GetTypeInfo(); }
		}
		
		/// <summary>	
		/// <p>Get a description.</p>	
		/// </summary>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable::GetDesc']/*"/>	
		/// <msdn-id>ff476807</msdn-id>	
		/// <unmanaged>GetDesc</unmanaged>	
		/// <unmanaged-short>GetDesc</unmanaged-short>	
		/// <unmanaged>HRESULT ID3DX11EffectVariable::GetDesc([Out] D3DX11_EFFECT_VARIABLE_DESC* pDesc)</unmanaged>
		public SharpDX.Direct3D11.EffectVariableDescription Description {
				get { SharpDX.Direct3D11.EffectVariableDescription __output__; GetDescription(out __output__); return __output__; }
		}
		
		/// <summary>	
		/// <p>Get a constant buffer.</p>	
		/// </summary>	
		/// <remarks>	
		/// <p>Effect variables are read-from or written-to a constant buffer.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable::GetParentConstantBuffer']/*"/>	
		/// <msdn-id>ff476812</msdn-id>	
		/// <unmanaged>GetParentConstantBuffer</unmanaged>	
		/// <unmanaged-short>GetParentConstantBuffer</unmanaged-short>	
		/// <unmanaged>ID3DX11EffectConstantBuffer* ID3DX11EffectVariable::GetParentConstantBuffer()</unmanaged>
		public SharpDX.Direct3D11.EffectConstantBuffer ParentConstantBuffer {
				get { return GetParentConstantBuffer(); }
		}
		
		/// <summary>	
		/// <p>Compare the data type with the data stored.</p>	
		/// </summary>	
		/// <returns><p><strong>TRUE</strong> if the syntax is valid; otherwise <strong><see cref="SharpDX.Result.False"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p>This method checks that the data type matches the data stored after casting one interface to another (using any of the As methods).</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable::IsValid']/*"/>	
		/// <msdn-id>ff476815</msdn-id>	
		/// <unmanaged>BOOL ID3DX11EffectVariable::IsValid()</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVariable::IsValid</unmanaged-short>	
		internal SharpDX.Mathematics.Interop.RawBool IsValid_() {
			unsafe {
				SharpDX.Mathematics.Interop.RawBool __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.CalliSharpDXMathematicsInteropRawBool(_nativePointer,((void**)(*(void**)_nativePointer))[3]);		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get type information.</p>	
		/// </summary>	
		/// <returns><p>A reference to an <strong><see cref="SharpDX.Direct3D11.EffectType"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable::GetType']/*"/>	
		/// <msdn-id>ff476814</msdn-id>	
		/// <unmanaged>ID3DX11EffectType* ID3DX11EffectVariable::GetType()</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVariable::GetType</unmanaged-short>	
		internal SharpDX.Direct3D11.EffectType GetTypeInfo() {
			unsafe {
				SharpDX.Direct3D11.EffectType __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectType((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer,((void**)(*(void**)_nativePointer))[4]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get a description.</p>	
		/// </summary>	
		/// <param name="descRef"><dd>  <p>A reference to an effect-variable description (see <strong><see cref="SharpDX.Direct3D11.EffectVariableDescription"/></strong>).</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable::GetDesc']/*"/>	
		/// <msdn-id>ff476807</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectVariable::GetDesc([Out] D3DX11_EFFECT_VARIABLE_DESC* pDesc)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVariable::GetDesc</unmanaged-short>	
		internal void GetDescription(out SharpDX.Direct3D11.EffectVariableDescription descRef) {
			unsafe {
				var descRef_ = new SharpDX.Direct3D11.EffectVariableDescription.__Native();
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, &descRef_,((void**)(*(void**)_nativePointer))[5]);		
				descRef = new SharpDX.Direct3D11.EffectVariableDescription();
				descRef.__MarshalFrom(ref descRef_);
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get an annotation by index.</p>	
		/// </summary>	
		/// <param name="index"><dd>  <p>A zero-based index.</p> </dd></param>	
		/// <returns><p>A reference to an <strong><see cref="SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p>Annonations can be attached to a technique, a pass, or a global variable.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable::GetAnnotationByIndex']/*"/>	
		/// <msdn-id>ff476805</msdn-id>	
		/// <unmanaged>ID3DX11EffectVariable* ID3DX11EffectVariable::GetAnnotationByIndex([In] unsigned int Index)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVariable::GetAnnotationByIndex</unmanaged-short>	
		public SharpDX.Direct3D11.EffectVariable GetAnnotationByIndex(int index) {
			unsafe {
				SharpDX.Direct3D11.EffectVariable __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectVariable((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer, index,((void**)(*(void**)_nativePointer))[6]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get an annotation by name.</p>	
		/// </summary>	
		/// <param name="name"><dd>  <p>The annotation name.</p> </dd></param>	
		/// <returns><p>A reference to an <strong><see cref="SharpDX.Direct3D11.EffectVariable"/></strong>.  Note that if the annotation is not found the <strong><see cref="SharpDX.Direct3D11.EffectVariable"/></strong> returned  will be empty. The <strong><see cref="SharpDX.Direct3D11.EffectVariable.IsValid_"/></strong> method should be called to determine whether the annotation was found.</p></returns>	
		/// <remarks>	
		/// <p>Annonations can be attached to a technique, a pass, or a global variable.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable::GetAnnotationByName']/*"/>	
		/// <msdn-id>ff476806</msdn-id>	
		/// <unmanaged>ID3DX11EffectVariable* ID3DX11EffectVariable::GetAnnotationByName([In] const char* Name)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVariable::GetAnnotationByName</unmanaged-short>	
		public SharpDX.Direct3D11.EffectVariable GetAnnotationByName(string name) {
			unsafe {
				IntPtr name_ = Utilities.StringToHGlobalAnsi(name);
				SharpDX.Direct3D11.EffectVariable __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectVariable((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer, (void*)name_,((void**)(*(void**)_nativePointer))[7]));		
				Marshal.FreeHGlobal(name_ );
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get a structure member by index.</p>	
		/// </summary>	
		/// <param name="index"><dd>  <p>A zero-based index.</p> </dd></param>	
		/// <returns><p>A reference to an <strong><see cref="SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p>If the effect variable is an structure, use this method to look up a member by index.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable::GetMemberByIndex']/*"/>	
		/// <msdn-id>ff476809</msdn-id>	
		/// <unmanaged>ID3DX11EffectVariable* ID3DX11EffectVariable::GetMemberByIndex([In] unsigned int Index)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVariable::GetMemberByIndex</unmanaged-short>	
		public SharpDX.Direct3D11.EffectVariable GetMemberByIndex(int index) {
			unsafe {
				SharpDX.Direct3D11.EffectVariable __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectVariable((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer, index,((void**)(*(void**)_nativePointer))[8]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get a structure member by name.</p>	
		/// </summary>	
		/// <param name="name"><dd>  <p>Member name.</p> </dd></param>	
		/// <returns><p>A reference to an <strong><see cref="SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p>If the effect variable is an structure, use this method to look up a member by name.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable::GetMemberByName']/*"/>	
		/// <msdn-id>ff476810</msdn-id>	
		/// <unmanaged>ID3DX11EffectVariable* ID3DX11EffectVariable::GetMemberByName([In] const char* Name)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVariable::GetMemberByName</unmanaged-short>	
		public SharpDX.Direct3D11.EffectVariable GetMemberByName(string name) {
			unsafe {
				IntPtr name_ = Utilities.StringToHGlobalAnsi(name);
				SharpDX.Direct3D11.EffectVariable __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectVariable((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer, (void*)name_,((void**)(*(void**)_nativePointer))[9]));		
				Marshal.FreeHGlobal(name_ );
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get a structure member by semantic.</p>	
		/// </summary>	
		/// <param name="semantic"><dd>  <p>The semantic.</p> </dd></param>	
		/// <returns><p>A reference to an <strong><see cref="SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p>If the effect variable is an structure, use this method to look up a member by attached semantic.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable::GetMemberBySemantic']/*"/>	
		/// <msdn-id>ff476811</msdn-id>	
		/// <unmanaged>ID3DX11EffectVariable* ID3DX11EffectVariable::GetMemberBySemantic([In] const char* Semantic)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVariable::GetMemberBySemantic</unmanaged-short>	
		public SharpDX.Direct3D11.EffectVariable GetMemberBySemantic(string semantic) {
			unsafe {
				IntPtr semantic_ = Utilities.StringToHGlobalAnsi(semantic);
				SharpDX.Direct3D11.EffectVariable __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectVariable((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer, (void*)semantic_,((void**)(*(void**)_nativePointer))[10]));		
				Marshal.FreeHGlobal(semantic_ );
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get an array element.</p>	
		/// </summary>	
		/// <param name="index"><dd>  <p>A zero-based index; otherwise 0.</p> </dd></param>	
		/// <returns><p>A reference to an <strong><see cref="SharpDX.Direct3D11.EffectVariable"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p>If the effect variable is an array, use this method to return one of the elements.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable::GetElement']/*"/>	
		/// <msdn-id>ff476808</msdn-id>	
		/// <unmanaged>ID3DX11EffectVariable* ID3DX11EffectVariable::GetElement([In] unsigned int Index)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVariable::GetElement</unmanaged-short>	
		public SharpDX.Direct3D11.EffectVariable GetElement(int index) {
			unsafe {
				SharpDX.Direct3D11.EffectVariable __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectVariable((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer, index,((void**)(*(void**)_nativePointer))[11]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get a constant buffer.</p>	
		/// </summary>	
		/// <returns><p>A reference to a <strong><see cref="SharpDX.Direct3D11.EffectConstantBuffer"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p>Effect variables are read-from or written-to a constant buffer.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable::GetParentConstantBuffer']/*"/>	
		/// <msdn-id>ff476812</msdn-id>	
		/// <unmanaged>ID3DX11EffectConstantBuffer* ID3DX11EffectVariable::GetParentConstantBuffer()</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVariable::GetParentConstantBuffer</unmanaged-short>	
		internal SharpDX.Direct3D11.EffectConstantBuffer GetParentConstantBuffer() {
			unsafe {
				SharpDX.Direct3D11.EffectConstantBuffer __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectConstantBuffer((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer,((void**)(*(void**)_nativePointer))[12]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get a scalar variable.</p>	
		/// </summary>	
		/// <returns><p>A reference to a scalar variable. See <strong><see cref="SharpDX.Direct3D11.EffectScalarVariable"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p>AsScalar returns a version of the effect variable that has been specialized to a scalar variable. Similar to a cast,  this specialization will return an invalid object if the effect variable does not contain scalar data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable::AsScalar']/*"/>	
		/// <msdn-id>ff476799</msdn-id>	
		/// <unmanaged>ID3DX11EffectScalarVariable* ID3DX11EffectVariable::AsScalar()</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVariable::AsScalar</unmanaged-short>	
		internal SharpDX.Direct3D11.EffectScalarVariable AsScalar_() {
			unsafe {
				SharpDX.Direct3D11.EffectScalarVariable __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectScalarVariable((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer,((void**)(*(void**)_nativePointer))[13]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get a vector variable.</p>	
		/// </summary>	
		/// <returns><p>A reference to a vector variable. See <strong><see cref="SharpDX.Direct3D11.EffectVectorVariable"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p>AsVector returns a version of the effect variable that has been specialized to a vector variable. Similar to a cast,  this specialization will return an invalid object if the effect variable does not contain vector data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable::AsVector']/*"/>	
		/// <msdn-id>ff476804</msdn-id>	
		/// <unmanaged>ID3DX11EffectVectorVariable* ID3DX11EffectVariable::AsVector()</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVariable::AsVector</unmanaged-short>	
		internal SharpDX.Direct3D11.EffectVectorVariable AsVector_() {
			unsafe {
				SharpDX.Direct3D11.EffectVectorVariable __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectVectorVariable((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer,((void**)(*(void**)_nativePointer))[14]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get a matrix variable.</p>	
		/// </summary>	
		/// <returns><p>A reference to a matrix variable. See <strong><see cref="SharpDX.Direct3D11.EffectMatrixVariable"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p>AsMatrix returns a version of the effect variable that has been specialized to a matrix variable. Similar to a cast, this specialization will  return an invalid object if the effect variable does not contain matrix data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable::AsMatrix']/*"/>	
		/// <msdn-id>ff476795</msdn-id>	
		/// <unmanaged>ID3DX11EffectMatrixVariable* ID3DX11EffectVariable::AsMatrix()</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVariable::AsMatrix</unmanaged-short>	
		internal SharpDX.Direct3D11.EffectMatrixVariable AsMatrix_() {
			unsafe {
				SharpDX.Direct3D11.EffectMatrixVariable __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectMatrixVariable((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer,((void**)(*(void**)_nativePointer))[15]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get a string variable.</p>	
		/// </summary>	
		/// <returns><p>A reference to a string variable. See <strong><see cref="SharpDX.Direct3D11.EffectStringVariable"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p>AsString returns a version of the effect variable that has been specialized to a string variable. Similar to a cast,  this specialization will return an invalid object if the effect variable does not contain string data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable::AsString']/*"/>	
		/// <msdn-id>ff476802</msdn-id>	
		/// <unmanaged>ID3DX11EffectStringVariable* ID3DX11EffectVariable::AsString()</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVariable::AsString</unmanaged-short>	
		internal SharpDX.Direct3D11.EffectStringVariable AsString_() {
			unsafe {
				SharpDX.Direct3D11.EffectStringVariable __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectStringVariable((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer,((void**)(*(void**)_nativePointer))[16]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get a class-instance variable.</p>	
		/// </summary>	
		/// <returns><p>A reference to class-instance variable. See <strong><see cref="SharpDX.Direct3D11.EffectClassInstanceVariable"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable::AsClassInstance']/*"/>	
		/// <msdn-id>ff476790</msdn-id>	
		/// <unmanaged>ID3DX11EffectClassInstanceVariable* ID3DX11EffectVariable::AsClassInstance()</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVariable::AsClassInstance</unmanaged-short>	
		internal SharpDX.Direct3D11.EffectClassInstanceVariable AsClassInstance_() {
			unsafe {
				SharpDX.Direct3D11.EffectClassInstanceVariable __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectClassInstanceVariable((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer,((void**)(*(void**)_nativePointer))[17]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get an interface variable.</p>	
		/// </summary>	
		/// <returns><p>A reference to an interface variable.  See <strong><see cref="SharpDX.Direct3D11.EffectInterfaceVariable"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable::AsInterface']/*"/>	
		/// <msdn-id>ff476794</msdn-id>	
		/// <unmanaged>ID3DX11EffectInterfaceVariable* ID3DX11EffectVariable::AsInterface()</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVariable::AsInterface</unmanaged-short>	
		internal SharpDX.Direct3D11.EffectInterfaceVariable AsInterface_() {
			unsafe {
				SharpDX.Direct3D11.EffectInterfaceVariable __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectInterfaceVariable((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer,((void**)(*(void**)_nativePointer))[18]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get a shader-resource variable.</p>	
		/// </summary>	
		/// <returns><p>A reference to a shader-resource variable. See <strong><see cref="SharpDX.Direct3D11.EffectShaderResourceVariable"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p>AsShaderResource returns a version of the effect variable that has been specialized to a shader-resource variable.  Similar to a cast, this specialization will return an invalid object if the effect variable does not contain shader-resource data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable::AsShaderResource']/*"/>	
		/// <msdn-id>ff476801</msdn-id>	
		/// <unmanaged>ID3DX11EffectShaderResourceVariable* ID3DX11EffectVariable::AsShaderResource()</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVariable::AsShaderResource</unmanaged-short>	
		internal SharpDX.Direct3D11.EffectShaderResourceVariable AsShaderResource_() {
			unsafe {
				SharpDX.Direct3D11.EffectShaderResourceVariable __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectShaderResourceVariable((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer,((void**)(*(void**)_nativePointer))[19]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get an unordered-access-view variable.</p>	
		/// </summary>	
		/// <returns><p>A reference to an unordered-access-view variable.  See <strong><see cref="SharpDX.Direct3D11.EffectUnorderedAccessViewVariable"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable::AsUnorderedAccessView']/*"/>	
		/// <msdn-id>ff476803</msdn-id>	
		/// <unmanaged>ID3DX11EffectUnorderedAccessViewVariable* ID3DX11EffectVariable::AsUnorderedAccessView()</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVariable::AsUnorderedAccessView</unmanaged-short>	
		internal SharpDX.Direct3D11.EffectUnorderedAccessViewVariable AsUnorderedAccessView_() {
			unsafe {
				SharpDX.Direct3D11.EffectUnorderedAccessViewVariable __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectUnorderedAccessViewVariable((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer,((void**)(*(void**)_nativePointer))[20]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get a render-target-view variable.</p>	
		/// </summary>	
		/// <returns><p>A reference to a render-target-view variable. See <strong><see cref="SharpDX.Direct3D11.EffectRenderTargetViewVariable"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p>This method returns a version of the effect variable that has been specialized to a render-target-view variable.  Similar to a cast, this specialization will return an invalid object if the effect variable does not contain render-target-view data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable::AsRenderTargetView']/*"/>	
		/// <msdn-id>ff476797</msdn-id>	
		/// <unmanaged>ID3DX11EffectRenderTargetViewVariable* ID3DX11EffectVariable::AsRenderTargetView()</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVariable::AsRenderTargetView</unmanaged-short>	
		internal SharpDX.Direct3D11.EffectRenderTargetViewVariable AsRenderTargetView_() {
			unsafe {
				SharpDX.Direct3D11.EffectRenderTargetViewVariable __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectRenderTargetViewVariable((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer,((void**)(*(void**)_nativePointer))[21]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get a depth-stencil-view variable.</p>	
		/// </summary>	
		/// <returns><p>A reference to a depth-stencil-view variable. See <strong><see cref="SharpDX.Direct3D11.EffectDepthStencilViewVariable"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p>This method returns a version of the effect variable that has been specialized to a depth-stencil-view variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain depth-stencil-view data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable::AsDepthStencilView']/*"/>	
		/// <msdn-id>ff476793</msdn-id>	
		/// <unmanaged>ID3DX11EffectDepthStencilViewVariable* ID3DX11EffectVariable::AsDepthStencilView()</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVariable::AsDepthStencilView</unmanaged-short>	
		internal SharpDX.Direct3D11.EffectDepthStencilViewVariable AsDepthStencilView_() {
			unsafe {
				SharpDX.Direct3D11.EffectDepthStencilViewVariable __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectDepthStencilViewVariable((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer,((void**)(*(void**)_nativePointer))[22]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get a constant buffer.</p>	
		/// </summary>	
		/// <returns><p>A reference to a constant buffer. See <strong><see cref="SharpDX.Direct3D11.EffectConstantBuffer"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p>AsConstantBuffer returns a version of the effect variable that has been specialized to a constant buffer.  Similar to a cast, this specialization will return an invalid object if the effect variable does not contain constant buffer data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable::AsConstantBuffer']/*"/>	
		/// <msdn-id>ff476791</msdn-id>	
		/// <unmanaged>ID3DX11EffectConstantBuffer* ID3DX11EffectVariable::AsConstantBuffer()</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVariable::AsConstantBuffer</unmanaged-short>	
		internal SharpDX.Direct3D11.EffectConstantBuffer AsConstantBuffer_() {
			unsafe {
				SharpDX.Direct3D11.EffectConstantBuffer __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectConstantBuffer((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer,((void**)(*(void**)_nativePointer))[23]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get a shader variable.</p>	
		/// </summary>	
		/// <returns><p>A reference to a shader variable. See <strong><see cref="SharpDX.Direct3D11.EffectShaderVariable"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p>AsShader returns a version of the effect variable that has been specialized to a shader variable. Similar to a cast,  this specialization will return an invalid object if the effect variable does not contain shader data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable::AsShader']/*"/>	
		/// <msdn-id>ff476800</msdn-id>	
		/// <unmanaged>ID3DX11EffectShaderVariable* ID3DX11EffectVariable::AsShader()</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVariable::AsShader</unmanaged-short>	
		internal SharpDX.Direct3D11.EffectShaderVariable AsShader_() {
			unsafe {
				SharpDX.Direct3D11.EffectShaderVariable __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectShaderVariable((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer,((void**)(*(void**)_nativePointer))[24]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get a effect-blend variable.</p>	
		/// </summary>	
		/// <returns><p>A reference to an effect blend variable. See <strong><see cref="SharpDX.Direct3D11.EffectBlendVariable"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p>AsBlend returns a version of the effect variable that has been specialized to an effect-blend variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain effect-blend data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable::AsBlend']/*"/>	
		/// <msdn-id>ff476789</msdn-id>	
		/// <unmanaged>ID3DX11EffectBlendVariable* ID3DX11EffectVariable::AsBlend()</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVariable::AsBlend</unmanaged-short>	
		internal SharpDX.Direct3D11.EffectBlendVariable AsBlend_() {
			unsafe {
				SharpDX.Direct3D11.EffectBlendVariable __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectBlendVariable((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer,((void**)(*(void**)_nativePointer))[25]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get a depth-stencil variable.</p>	
		/// </summary>	
		/// <returns><p>A reference to a depth-stencil variable. See <strong><see cref="SharpDX.Direct3D11.EffectDepthStencilVariable"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p>AsDepthStencil returns a version of the effect variable that has been specialized to a depth-stencil variable. Similar to a cast, this specialization will return an invalid object if the effect variable does not contain depth-stencil data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable::AsDepthStencil']/*"/>	
		/// <msdn-id>ff476792</msdn-id>	
		/// <unmanaged>ID3DX11EffectDepthStencilVariable* ID3DX11EffectVariable::AsDepthStencil()</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVariable::AsDepthStencil</unmanaged-short>	
		internal SharpDX.Direct3D11.EffectDepthStencilVariable AsDepthStencil_() {
			unsafe {
				SharpDX.Direct3D11.EffectDepthStencilVariable __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectDepthStencilVariable((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer,((void**)(*(void**)_nativePointer))[26]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get a rasterizer variable.</p>	
		/// </summary>	
		/// <returns><p>A reference to a rasterizer variable. See <strong><see cref="SharpDX.Direct3D11.EffectRasterizerVariable"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p>AsRasterizer returns a version of the effect variable that has been specialized to a rasterizer variable. Similar to a cast, this specialization  will return an invalid object if the effect variable does not contain rasterizer data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable::AsRasterizer']/*"/>	
		/// <msdn-id>ff476796</msdn-id>	
		/// <unmanaged>ID3DX11EffectRasterizerVariable* ID3DX11EffectVariable::AsRasterizer()</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVariable::AsRasterizer</unmanaged-short>	
		internal SharpDX.Direct3D11.EffectRasterizerVariable AsRasterizer_() {
			unsafe {
				SharpDX.Direct3D11.EffectRasterizerVariable __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectRasterizerVariable((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer,((void**)(*(void**)_nativePointer))[27]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Get a sampler variable.</p>	
		/// </summary>	
		/// <returns><p>A reference to a sampler variable. See <strong><see cref="SharpDX.Direct3D11.EffectSamplerVariable"/></strong>.</p></returns>	
		/// <remarks>	
		/// <p>AsSampler returns a version of the effect variable that has been specialized to a sampler variable. Similar to a cast, this specialization will  return an invalid object if the effect variable does not contain sampler data.</p><p>Applications can test the returned object for validity by calling <strong>IsValid</strong>.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable::AsSampler']/*"/>	
		/// <msdn-id>ff476798</msdn-id>	
		/// <unmanaged>ID3DX11EffectSamplerVariable* ID3DX11EffectVariable::AsSampler()</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVariable::AsSampler</unmanaged-short>	
		internal SharpDX.Direct3D11.EffectSamplerVariable AsSampler_() {
			unsafe {
				SharpDX.Direct3D11.EffectSamplerVariable __result__;
				__result__= 
				new SharpDX.Direct3D11.EffectSamplerVariable((IntPtr)SharpDX.Direct3D11.Effects.LocalInterop.CalliSystemIntPtr(_nativePointer,((void**)(*(void**)_nativePointer))[28]));		
				return __result__;
			}
		}
		
		/// <summary>	
		/// <p>Set data.</p>	
		/// </summary>	
		/// <param name="dataRef"><dd>  <p>A reference to the variable.</p> </dd></param>	
		/// <param name="byteOffset"><dd>  <p>The offset (in bytes) from the beginning of the reference to the data.</p> </dd></param>	
		/// <param name="byteCount"><dd>  <p>The number of bytes to set.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p>This method does no conversion or type checking; it is therefore a very quick way to access array items.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable::SetRawValue']/*"/>	
		/// <msdn-id>ff476816</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectVariable::SetRawValue([In, Buffer] const void* pData,[In] unsigned int ByteOffset,[In] unsigned int ByteCount)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVariable::SetRawValue</unmanaged-short>	
		public void SetRawValue(System.IntPtr dataRef, int byteOffset, int byteCount) {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, (void*)dataRef, byteOffset, byteCount,((void**)(*(void**)_nativePointer))[29]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get data.</p>	
		/// </summary>	
		/// <param name="dataRef"><dd>  <p>A reference to the variable.</p> </dd></param>	
		/// <param name="byteOffset"><dd>  <p>The offset (in bytes) from the beginning of the reference to the data.</p> </dd></param>	
		/// <param name="byteCount"><dd>  <p>The number of bytes to get.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p>This method does no conversion or type checking; it is therefore a very quick way to access array items.</p><p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVariable::GetRawValue']/*"/>	
		/// <msdn-id>ff476813</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectVariable::GetRawValue([Out, Buffer] void* pData,[In] unsigned int ByteOffset,[In] unsigned int ByteCount)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVariable::GetRawValue</unmanaged-short>	
		public void GetRawValue(System.IntPtr dataRef, int byteOffset, int byteCount) {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, (void*)dataRef, byteOffset, byteCount,((void**)(*(void**)_nativePointer))[30]);		
				__result__.CheckError();
			}
		}
	}
	/// <summary>	
	/// <p>A vector-variable interface accesses a four-component vector.</p>	
	/// </summary>	
	/// <remarks>	
	/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
	/// </remarks>	
	/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVectorVariable']/*"/>	
	/// <msdn-id>ff476817</msdn-id>	
	/// <unmanaged>ID3DX11EffectVectorVariable</unmanaged>	
	/// <unmanaged-short>ID3DX11EffectVectorVariable</unmanaged-short>	
	[Guid("5e785d4a-d87b-48d8-b6e6-0f8ca7e7467a")]
	public partial class EffectVectorVariable : SharpDX.Direct3D11.EffectVariable {
		/// <summary>
		/// Initializes a new instance of the <see cref="SharpDX.Direct3D11.EffectVectorVariable"/> class.
		/// </summary>
		/// <param name="nativePtr">The native pointer.</param>	
		public EffectVectorVariable(IntPtr nativePtr) : base(nativePtr) {
		}

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="SharpDX.Direct3D11.EffectVectorVariable"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator SharpDX.Direct3D11.EffectVectorVariable(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new SharpDX.Direct3D11.EffectVectorVariable(nativePointer);
		}
		
		
		/// <summary>	
		/// <p>Set a four-component vector that contains boolean data.</p>	
		/// </summary>	
		/// <param name="dataRef"><dd>  <p>A reference to the first component.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVectorVariable::SetBoolVector']/*"/>	
		/// <msdn-id>ff476824</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectVectorVariable::SetBoolVector([In] const SHARPDX_BOOL4* pData)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVectorVariable::SetBoolVector</unmanaged-short>	
		public void Set(SharpDX.Mathematics.Interop.RawBool4 dataRef) {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, &dataRef,((void**)(*(void**)_nativePointer))[31]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Set a four-component vector that contains integer data.</p>	
		/// </summary>	
		/// <param name="dataRef"><dd>  <p>A reference to the first component.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVectorVariable::SetIntVector']/*"/>	
		/// <msdn-id>ff476828</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectVectorVariable::SetIntVector([In] const SHARPDX_INT4* pData)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVectorVariable::SetIntVector</unmanaged-short>	
		public void Set(SharpDX.Mathematics.Interop.RawInt4 dataRef) {
			unsafe {
				SharpDX.Result __result__;
				__result__= 
				SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, &dataRef,((void**)(*(void**)_nativePointer))[32]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Set a four-component vector that contains floating-point data.</p>	
		/// </summary>	
		/// <param name="dataRef"><dd>  <p>A reference to the first component.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVectorVariable::SetFloatVector']/*"/>	
		/// <msdn-id>ff476826</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectVectorVariable::SetFloatVector([In, Buffer] const float* pData)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVectorVariable::SetFloatVector</unmanaged-short>	
		public void Set(float[] dataRef) {
			unsafe {
				SharpDX.Result __result__;
				fixed (void* dataRef_ = dataRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, dataRef_,((void**)(*(void**)_nativePointer))[33]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get a four-component vector that contains boolean data.</p>	
		/// </summary>	
		/// <param name="dataRef"><dd>  <p>A reference to the first component.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVectorVariable::GetBoolVector']/*"/>	
		/// <msdn-id>ff476818</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectVectorVariable::GetBoolVector([Out] SHARPDX_BOOL4* pData)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVectorVariable::GetBoolVector</unmanaged-short>	
		internal void GetBoolVector(out SharpDX.Mathematics.Interop.RawBool4 dataRef) {
			unsafe {
				dataRef = new SharpDX.Mathematics.Interop.RawBool4();
				SharpDX.Result __result__;
				fixed (void* dataRef_ = &dataRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, dataRef_,((void**)(*(void**)_nativePointer))[34]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get a four-component vector that contains integer data.</p>	
		/// </summary>	
		/// <param name="dataRef"><dd>  <p>A reference to the first component.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVectorVariable::GetIntVector']/*"/>	
		/// <msdn-id>ff476822</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectVectorVariable::GetIntVector([Out] SHARPDX_INT4* pData)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVectorVariable::GetIntVector</unmanaged-short>	
		internal void GetIntVector(out SharpDX.Mathematics.Interop.RawInt4 dataRef) {
			unsafe {
				dataRef = new SharpDX.Mathematics.Interop.RawInt4();
				SharpDX.Result __result__;
				fixed (void* dataRef_ = &dataRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, dataRef_,((void**)(*(void**)_nativePointer))[35]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get a four-component vector that contains floating-point data.</p>	
		/// </summary>	
		/// <param name="dataRef"><dd>  <p>A reference to the first component.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVectorVariable::GetFloatVector']/*"/>	
		/// <msdn-id>ff476820</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectVectorVariable::GetFloatVector([Out] SHARPDX_VECTOR4* pData)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVectorVariable::GetFloatVector</unmanaged-short>	
		internal void GetFloatVector(out SharpDX.Mathematics.Interop.RawVector4 dataRef) {
			unsafe {
				dataRef = new SharpDX.Mathematics.Interop.RawVector4();
				SharpDX.Result __result__;
				fixed (void* dataRef_ = &dataRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, dataRef_,((void**)(*(void**)_nativePointer))[36]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Set an array of four-component vectors that contain boolean data.</p>	
		/// </summary>	
		/// <param name="dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>	
		/// <param name="offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>	
		/// <param name="count"><dd>  <p>The number of array elements to set.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVectorVariable::SetBoolVectorArray']/*"/>	
		/// <msdn-id>ff476825</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectVectorVariable::SetBoolVectorArray([In, Buffer] const SHARPDX_BOOL4* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVectorVariable::SetBoolVectorArray</unmanaged-short>	
		internal void Set(SharpDX.Mathematics.Interop.RawBool4[] dataRef, int offset, int count) {
			unsafe {
				SharpDX.Result __result__;
				fixed (void* dataRef_ = dataRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, dataRef_, offset, count,((void**)(*(void**)_nativePointer))[37]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Set an array of four-component vectors that contain integer data.</p>	
		/// </summary>	
		/// <param name="dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>	
		/// <param name="offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>	
		/// <param name="count"><dd>  <p>The number of array elements to set.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVectorVariable::SetIntVectorArray']/*"/>	
		/// <msdn-id>ff476829</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectVectorVariable::SetIntVectorArray([In, Buffer] const SHARPDX_INT4* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVectorVariable::SetIntVectorArray</unmanaged-short>	
		internal void Set(SharpDX.Mathematics.Interop.RawInt4[] dataRef, int offset, int count) {
			unsafe {
				SharpDX.Result __result__;
				fixed (void* dataRef_ = dataRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, dataRef_, offset, count,((void**)(*(void**)_nativePointer))[38]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Set an array of four-component vectors that contain floating-point data.</p>	
		/// </summary>	
		/// <param name="dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>	
		/// <param name="offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>	
		/// <param name="count"><dd>  <p>The number of array elements to set.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVectorVariable::SetFloatVectorArray']/*"/>	
		/// <msdn-id>ff476827</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectVectorVariable::SetFloatVectorArray([In, Buffer] const SHARPDX_VECTOR4* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVectorVariable::SetFloatVectorArray</unmanaged-short>	
		internal void Set(SharpDX.Mathematics.Interop.RawVector4[] dataRef, int offset, int count) {
			unsafe {
				SharpDX.Result __result__;
				fixed (void* dataRef_ = dataRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, dataRef_, offset, count,((void**)(*(void**)_nativePointer))[39]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get an array of four-component vectors that contain boolean data.</p>	
		/// </summary>	
		/// <param name="dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>	
		/// <param name="offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>	
		/// <param name="count"><dd>  <p>The number of array elements to set.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVectorVariable::GetBoolVectorArray']/*"/>	
		/// <msdn-id>ff476819</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectVectorVariable::GetBoolVectorArray([Out, Buffer] SHARPDX_BOOL4* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVectorVariable::GetBoolVectorArray</unmanaged-short>	
		internal void GetBoolVectorArray(SharpDX.Mathematics.Interop.RawBool4[] dataRef, int offset, int count) {
			unsafe {
				SharpDX.Result __result__;
				fixed (void* dataRef_ = dataRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, dataRef_, offset, count,((void**)(*(void**)_nativePointer))[40]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get an array of four-component vectors that contain integer data.</p>	
		/// </summary>	
		/// <param name="dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>	
		/// <param name="offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>	
		/// <param name="count"><dd>  <p>The number of array elements to set.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVectorVariable::GetIntVectorArray']/*"/>	
		/// <msdn-id>ff476823</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectVectorVariable::GetIntVectorArray([Out, Buffer] SHARPDX_INT4* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVectorVariable::GetIntVectorArray</unmanaged-short>	
		internal void GetIntVectorArray(SharpDX.Mathematics.Interop.RawInt4[] dataRef, int offset, int count) {
			unsafe {
				SharpDX.Result __result__;
				fixed (void* dataRef_ = dataRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, dataRef_, offset, count,((void**)(*(void**)_nativePointer))[41]);		
				__result__.CheckError();
			}
		}
		
		/// <summary>	
		/// <p>Get an array of four-component vectors that contain floating-point data.</p>	
		/// </summary>	
		/// <param name="dataRef"><dd>  <p>A reference to the start of the data to set.</p> </dd></param>	
		/// <param name="offset"><dd>  <p>Must be set to 0; this is reserved for future use. </p> </dd></param>	
		/// <param name="count"><dd>  <p>The number of array elements to set.</p> </dd></param>	
		/// <returns><p>Returns one of the following Direct3D 11 Return Codes.</p></returns>	
		/// <remarks>	
		/// <p><strong>Note</strong>??The DirectX SDK does not supply any compiled binaries for effects. You must use Effects 11 source to build  your effects-type application. For more information about using Effects 11 source, see Differences Between Effects 10 and Effects 11.</p>	
		/// </remarks>	
		/// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='ID3DX11EffectVectorVariable::GetFloatVectorArray']/*"/>	
		/// <msdn-id>ff476821</msdn-id>	
		/// <unmanaged>HRESULT ID3DX11EffectVectorVariable::GetFloatVectorArray([Out, Buffer] SHARPDX_VECTOR4* pData,[In] unsigned int Offset,[In] unsigned int Count)</unmanaged>	
		/// <unmanaged-short>ID3DX11EffectVectorVariable::GetFloatVectorArray</unmanaged-short>	
		internal void GetFloatVectorArray(SharpDX.Mathematics.Interop.RawVector4[] dataRef, int offset, int count) {
			unsafe {
				SharpDX.Result __result__;
				fixed (void* dataRef_ = dataRef)
					__result__= 
					SharpDX.Direct3D11.Effects.LocalInterop.Calliint(_nativePointer, dataRef_, offset, count,((void**)(*(void**)_nativePointer))[42]);		
				__result__.CheckError();
			}
		}
	}
}
