// Copyright (c) 2010-2014 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Types declaration for SharpDX.XAudio2 namespace.
//     This code was generated by a tool.
//     Date : 6/25/2016 10:38:06 PM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
namespace SharpDX.XAudio2 {

#pragma warning disable 419
#pragma warning disable 1587
#pragma warning disable 1574
    
    /// <summary>	
    /// <p>XAudio2 constants that specify default parameters, maximum values, and flags.</p><p> </p><p><strong>XAudio2 boundary values</strong></p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_BUFFER_FLAGS']/*"/>	
    /// <msdn-id>ee419230</msdn-id>	
    /// <unmanaged>XAUDIO2_BUFFER_FLAGS</unmanaged>	
    /// <unmanaged-short>XAUDIO2_BUFFER_FLAGS</unmanaged-short>	
    [Flags]
    public enum BufferFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_END_OF_STREAM']/*"/>	
        /// <msdn-id>ee419230</msdn-id>	
        /// <unmanaged>XAUDIO2_END_OF_STREAM</unmanaged>	
        /// <unmanaged-short>XAUDIO2_END_OF_STREAM</unmanaged-short>	
        EndOfStream = unchecked((int)64),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Indicates the filter type.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p><strong>Note</strong>??Note that the DirectX SDK versions of XAUDIO2 do not support the <strong>LowPassOnePoleFilter</strong> or the <strong>HighPassOnePoleFilter</strong>.    </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_FILTER_TYPE']/*"/>	
    /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_filter_type</msdn-id>	
    /// <unmanaged>XAUDIO2_FILTER_TYPE</unmanaged>	
    /// <unmanaged-short>XAUDIO2_FILTER_TYPE</unmanaged-short>	
    public enum FilterType : int {	
        
        /// <summary>	
        /// <dd> <p>Attenuates (reduces) frequencies above the cutoff frequency.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='LowPassFilter']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_filter_type</msdn-id>	
        /// <unmanaged>LowPassFilter</unmanaged>	
        /// <unmanaged-short>LowPassFilter</unmanaged-short>	
        LowPassFilter = unchecked((int)0),			
        
        /// <summary>	
        /// <dd> <p>Attenuates frequencies outside a given range.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='BandPassFilter']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_filter_type</msdn-id>	
        /// <unmanaged>BandPassFilter</unmanaged>	
        /// <unmanaged-short>BandPassFilter</unmanaged-short>	
        BandPassFilter = unchecked((int)1),			
        
        /// <summary>	
        /// <dd> <p>Attenuates frequencies below the cutoff frequency.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='HighPassFilter']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_filter_type</msdn-id>	
        /// <unmanaged>HighPassFilter</unmanaged>	
        /// <unmanaged-short>HighPassFilter</unmanaged-short>	
        HighPassFilter = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Attenuates frequencies inside a given range.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='NotchFilter']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_filter_type</msdn-id>	
        /// <unmanaged>NotchFilter</unmanaged>	
        /// <unmanaged-short>NotchFilter</unmanaged-short>	
        NotchFilter = unchecked((int)3),			
        
        /// <summary>	
        /// <dd> <p>Attenuates frequencies above the cutoff frequency. This is a one-pole filter, and <strong><see cref="SharpDX.XAudio2.FilterParameters"/></strong>.<strong>OneOverQ</strong> has no effect.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='LowPassOnePoleFilter']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_filter_type</msdn-id>	
        /// <unmanaged>LowPassOnePoleFilter</unmanaged>	
        /// <unmanaged-short>LowPassOnePoleFilter</unmanaged-short>	
        LowPassOnePoleFilter = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Attenuates frequencies below the cutoff frequency. This is a one-pole filter, and <strong><see cref="SharpDX.XAudio2.FilterParameters"/></strong>.<strong>OneOverQ</strong> has no effect.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='HighPassOnePoleFilter']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_filter_type</msdn-id>	
        /// <unmanaged>HighPassOnePoleFilter</unmanaged>	
        /// <unmanaged-short>HighPassOnePoleFilter</unmanaged-short>	
        HighPassOnePoleFilter = unchecked((int)5),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_LOG_TYPE']/*"/>	
    /// <unmanaged>XAUDIO2_LOG_TYPE</unmanaged>	
    /// <unmanaged-short>XAUDIO2_LOG_TYPE</unmanaged-short>	
    [Flags]
    public enum LogType : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_LOG_ERRORS']/*"/>	
        /// <unmanaged>XAUDIO2_LOG_ERRORS</unmanaged>	
        /// <unmanaged-short>XAUDIO2_LOG_ERRORS</unmanaged-short>	
        Errors = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_LOG_WARNINGS']/*"/>	
        /// <unmanaged>XAUDIO2_LOG_WARNINGS</unmanaged>	
        /// <unmanaged-short>XAUDIO2_LOG_WARNINGS</unmanaged-short>	
        Warnings = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_LOG_INFO']/*"/>	
        /// <unmanaged>XAUDIO2_LOG_INFO</unmanaged>	
        /// <unmanaged-short>XAUDIO2_LOG_INFO</unmanaged-short>	
        Information = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_LOG_DETAIL']/*"/>	
        /// <unmanaged>XAUDIO2_LOG_DETAIL</unmanaged>	
        /// <unmanaged-short>XAUDIO2_LOG_DETAIL</unmanaged-short>	
        Detail = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_LOG_API_CALLS']/*"/>	
        /// <unmanaged>XAUDIO2_LOG_API_CALLS</unmanaged>	
        /// <unmanaged-short>XAUDIO2_LOG_API_CALLS</unmanaged-short>	
        ApiCalls = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_LOG_FUNC_CALLS']/*"/>	
        /// <unmanaged>XAUDIO2_LOG_FUNC_CALLS</unmanaged>	
        /// <unmanaged-short>XAUDIO2_LOG_FUNC_CALLS</unmanaged-short>	
        FunctionCalls = unchecked((int)32),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_LOG_TIMING']/*"/>	
        /// <unmanaged>XAUDIO2_LOG_TIMING</unmanaged>	
        /// <unmanaged-short>XAUDIO2_LOG_TIMING</unmanaged-short>	
        Timing = unchecked((int)64),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_LOG_LOCKS']/*"/>	
        /// <unmanaged>XAUDIO2_LOG_LOCKS</unmanaged>	
        /// <unmanaged-short>XAUDIO2_LOG_LOCKS</unmanaged-short>	
        Locks = unchecked((int)128),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_LOG_MEMORY']/*"/>	
        /// <unmanaged>XAUDIO2_LOG_MEMORY</unmanaged>	
        /// <unmanaged-short>XAUDIO2_LOG_MEMORY</unmanaged-short>	
        Memory = unchecked((int)256),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_LOG_STREAMING']/*"/>	
        /// <unmanaged>XAUDIO2_LOG_STREAMING</unmanaged>	
        /// <unmanaged-short>XAUDIO2_LOG_STREAMING</unmanaged-short>	
        Streaming = unchecked((int)4096),			
    }
    
    /// <summary>	
    /// <p>Stops consumption of audio by the current voice.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>All source buffers that are queued on the voice and the current cursor position are preserved. This allows the voice to continue from where it left off, when it is restarted. The <strong><see cref="SharpDX.XAudio2.SourceVoice.FlushSourceBuffers"/></strong> method can be used to flush queued source buffers. </p><p>By default, any pending output from voice effects?for example, reverb tails?is not played. Instead, the voice is immediately rendered silent. The <see cref="SharpDX.XAudio2.PlayFlags.Tails"/> flag can be used to continue emitting effect output after the voice stops running. </p><p>A voice stopped with the <see cref="SharpDX.XAudio2.PlayFlags.Tails"/> flag stops consuming source buffers, but continues to process its effects and send audio to its destination voices. A voice in this state can later be stopped completely by calling <strong>Stop</strong> again with the Flags argument set to 0. This enables stopping a voice with <see cref="SharpDX.XAudio2.PlayFlags.Tails"/>, waiting sufficient time for any audio being produced by its effects to finish, and then fully stopping the voice by calling <strong>Stop</strong> again without <see cref="SharpDX.XAudio2.PlayFlags.Tails"/>. This technique allows voices with effects to be stopped gracefully while ensuring idle voices will not continue to be processed after they have finished producing audio. </p><p><strong>Stop</strong> is always asynchronous, even if called within a callback. </p><p><strong>Note</strong>??XAudio2 never calls any voice callbacks for a voice if the voice is stopped (even if it was stopped with <see cref="SharpDX.XAudio2.PlayFlags.Tails"/>).</p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_PLAY_FLAGS']/*"/>	
    /// <msdn-id>microsoft.directx_sdk.ixaudio2sourcevoice.ixaudio2sourcevoice.stop</msdn-id>	
    /// <unmanaged>XAUDIO2_PLAY_FLAGS</unmanaged>	
    /// <unmanaged-short>XAUDIO2_PLAY_FLAGS</unmanaged-short>	
    [Flags]
    public enum PlayFlags : int {	
        
        /// <summary>	
        /// <dd> <p> Flags that control how the voice is stopped. Can be 0 or the following: 	
        /// </p> <table> <tr><th>Value</th><th>Description</th></tr> <tr><td><see cref="SharpDX.XAudio2.PlayFlags.Tails"/></td><td>Continue emitting effect output after the voice is stopped.?</td></tr> </table> <p>?</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_PLAY_TAILS']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.ixaudio2sourcevoice.ixaudio2sourcevoice.stop</msdn-id>	
        /// <unmanaged>XAUDIO2_PLAY_TAILS</unmanaged>	
        /// <unmanaged-short>XAUDIO2_PLAY_TAILS</unmanaged-short>	
        Tails = unchecked((int)32),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_WINDOWS_PROCESSOR_SPECIFIER']/*"/>	
    /// <unmanaged>XAUDIO2_WINDOWS_PROCESSOR_SPECIFIER</unmanaged>	
    /// <unmanaged-short>XAUDIO2_WINDOWS_PROCESSOR_SPECIFIER</unmanaged-short>	
    public enum ProcessorSpecifier : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='Processor1']/*"/>	
        /// <unmanaged>Processor1</unmanaged>	
        /// <unmanaged-short>Processor1</unmanaged-short>	
        Processor1 = unchecked((int)1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='Processor2']/*"/>	
        /// <unmanaged>Processor2</unmanaged>	
        /// <unmanaged-short>Processor2</unmanaged-short>	
        Processor2 = unchecked((int)2),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='Processor3']/*"/>	
        /// <unmanaged>Processor3</unmanaged>	
        /// <unmanaged-short>Processor3</unmanaged-short>	
        Processor3 = unchecked((int)4),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='Processor4']/*"/>	
        /// <unmanaged>Processor4</unmanaged>	
        /// <unmanaged-short>Processor4</unmanaged-short>	
        Processor4 = unchecked((int)8),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='Processor5']/*"/>	
        /// <unmanaged>Processor5</unmanaged>	
        /// <unmanaged-short>Processor5</unmanaged-short>	
        Processor5 = unchecked((int)16),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='Processor6']/*"/>	
        /// <unmanaged>Processor6</unmanaged>	
        /// <unmanaged-short>Processor6</unmanaged-short>	
        Processor6 = unchecked((int)32),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='Processor7']/*"/>	
        /// <unmanaged>Processor7</unmanaged>	
        /// <unmanaged-short>Processor7</unmanaged-short>	
        Processor7 = unchecked((int)64),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='Processor8']/*"/>	
        /// <unmanaged>Processor8</unmanaged>	
        /// <unmanaged-short>Processor8</unmanaged-short>	
        Processor8 = unchecked((int)128),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='Processor9']/*"/>	
        /// <unmanaged>Processor9</unmanaged>	
        /// <unmanaged-short>Processor9</unmanaged-short>	
        Processor9 = unchecked((int)256),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='Processor10']/*"/>	
        /// <unmanaged>Processor10</unmanaged>	
        /// <unmanaged-short>Processor10</unmanaged-short>	
        Processor10 = unchecked((int)512),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='Processor11']/*"/>	
        /// <unmanaged>Processor11</unmanaged>	
        /// <unmanaged-short>Processor11</unmanaged-short>	
        Processor11 = unchecked((int)1024),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='Processor12']/*"/>	
        /// <unmanaged>Processor12</unmanaged>	
        /// <unmanaged-short>Processor12</unmanaged-short>	
        Processor12 = unchecked((int)2048),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='Processor13']/*"/>	
        /// <unmanaged>Processor13</unmanaged>	
        /// <unmanaged-short>Processor13</unmanaged-short>	
        Processor13 = unchecked((int)4096),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='Processor14']/*"/>	
        /// <unmanaged>Processor14</unmanaged>	
        /// <unmanaged-short>Processor14</unmanaged-short>	
        Processor14 = unchecked((int)8192),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='Processor15']/*"/>	
        /// <unmanaged>Processor15</unmanaged>	
        /// <unmanaged-short>Processor15</unmanaged-short>	
        Processor15 = unchecked((int)16384),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='Processor16']/*"/>	
        /// <unmanaged>Processor16</unmanaged>	
        /// <unmanaged-short>Processor16</unmanaged-short>	
        Processor16 = unchecked((int)32768),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='Processor17']/*"/>	
        /// <unmanaged>Processor17</unmanaged>	
        /// <unmanaged-short>Processor17</unmanaged-short>	
        Processor17 = unchecked((int)65536),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='Processor18']/*"/>	
        /// <unmanaged>Processor18</unmanaged>	
        /// <unmanaged-short>Processor18</unmanaged-short>	
        Processor18 = unchecked((int)131072),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='Processor19']/*"/>	
        /// <unmanaged>Processor19</unmanaged>	
        /// <unmanaged-short>Processor19</unmanaged-short>	
        Processor19 = unchecked((int)262144),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='Processor20']/*"/>	
        /// <unmanaged>Processor20</unmanaged>	
        /// <unmanaged-short>Processor20</unmanaged-short>	
        Processor20 = unchecked((int)524288),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='Processor21']/*"/>	
        /// <unmanaged>Processor21</unmanaged>	
        /// <unmanaged-short>Processor21</unmanaged-short>	
        Processor21 = unchecked((int)1048576),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='Processor22']/*"/>	
        /// <unmanaged>Processor22</unmanaged>	
        /// <unmanaged-short>Processor22</unmanaged-short>	
        Processor22 = unchecked((int)2097152),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='Processor23']/*"/>	
        /// <unmanaged>Processor23</unmanaged>	
        /// <unmanaged-short>Processor23</unmanaged-short>	
        Processor23 = unchecked((int)4194304),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='Processor24']/*"/>	
        /// <unmanaged>Processor24</unmanaged>	
        /// <unmanaged-short>Processor24</unmanaged-short>	
        Processor24 = unchecked((int)8388608),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='Processor25']/*"/>	
        /// <unmanaged>Processor25</unmanaged>	
        /// <unmanaged-short>Processor25</unmanaged-short>	
        Processor25 = unchecked((int)16777216),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='Processor26']/*"/>	
        /// <unmanaged>Processor26</unmanaged>	
        /// <unmanaged-short>Processor26</unmanaged-short>	
        Processor26 = unchecked((int)33554432),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='Processor27']/*"/>	
        /// <unmanaged>Processor27</unmanaged>	
        /// <unmanaged-short>Processor27</unmanaged-short>	
        Processor27 = unchecked((int)67108864),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='Processor28']/*"/>	
        /// <unmanaged>Processor28</unmanaged>	
        /// <unmanaged-short>Processor28</unmanaged-short>	
        Processor28 = unchecked((int)134217728),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='Processor29']/*"/>	
        /// <unmanaged>Processor29</unmanaged>	
        /// <unmanaged-short>Processor29</unmanaged-short>	
        Processor29 = unchecked((int)268435456),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='Processor30']/*"/>	
        /// <unmanaged>Processor30</unmanaged>	
        /// <unmanaged-short>Processor30</unmanaged-short>	
        Processor30 = unchecked((int)536870912),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='Processor31']/*"/>	
        /// <unmanaged>Processor31</unmanaged>	
        /// <unmanaged-short>Processor31</unmanaged-short>	
        Processor31 = unchecked((int)1073741824),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='Processor32']/*"/>	
        /// <unmanaged>Processor32</unmanaged>	
        /// <unmanaged-short>Processor32</unmanaged-short>	
        Processor32 = unchecked((int)-2147483648),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_ANY_PROCESSOR']/*"/>	
        /// <unmanaged>XAUDIO2_ANY_PROCESSOR</unmanaged>	
        /// <unmanaged-short>XAUDIO2_ANY_PROCESSOR</unmanaged-short>	
        AnyProcessor = unchecked((int)-1),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_DEFAULT_PROCESSOR']/*"/>	
        /// <unmanaged>XAUDIO2_DEFAULT_PROCESSOR</unmanaged>	
        /// <unmanaged-short>XAUDIO2_DEFAULT_PROCESSOR</unmanaged-short>	
        DefaultProcessor = unchecked((int)1),			
    }
    
    /// <summary>	
    /// <p>Creates and configures a source voice.</p>	
    /// </summary>	
    /// <remarks>	
    /// <p>Source voices read audio data from the client. They process the data and send it to the XAudio2 processing graph. </p><p>A source voice includes a variable-rate sample rate conversion, to convert data from the source format sample rate to the output rate required for the voice send list. If you use a <c>null</c> send list, the target sample rate will be the mastering voice's input sample rate. If you provide a single voice in pSendList, that voice's input sample rate is the target rate. If you provide multiple voices in the pSendList, all the source voice's output voices must be running at the same input sample rate. </p><p>You cannot create any source or submix voices until a mastering voice exists, and you cannot destory a mastering voice if any source or submix voices still exist. </p><p>Source voices are always processed before any submix or mastering voices. This means that you do not need a ProcessingStage parameter to control the processing order. </p><p>When first created, source voices are in the stopped state. </p><p>XAudio2 uses an internal memory pooler for voices with the same format. This means memory allocation for voices will occur less frequently as more voices are created and then destroyed. To minimize just-in-time allocations, a title can create the anticipated maximum number of voices needed up front, and then delete them as necessary. Voices will then be reused from the XAudio2 pool. The memory pool is tied to an XAudio2 engine instance. You can reclaim all the memory used by an instance of the XAudio2 engine by destroying the XAudio2 object and recreating it as necessary (forcing the memory pool to grow via preallocation would have to be reapplied as needed). </p><p>It is invalid to call <strong>CreateSourceVoice</strong> from within a callback (that is, <strong><see cref="SharpDX.XAudio2.EngineCallback"/></strong> or <strong><see cref="SharpDX.XAudio2.VoiceCallback"/></strong>). If you call <strong>CreateSourceVoice</strong> within a callback, it returns <see cref="SharpDX.XAudio2.ResultCode.InvalidCall"/>. </p><p>The <strong><see cref="SharpDX.XAudio2.EffectChain"/></strong> that is passed in as the pEffectChain argument and any <strong><see cref="SharpDX.XAudio2.EffectDescriptor"/></strong> information contained within it are no longer needed after <strong>CreateSourceVoice</strong> successfully completes, and may be deleted immediately after <strong>CreateSourceVoice</strong> is called.	
    /// </p>	
    /// </remarks>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_VOICE_FLAGS']/*"/>	
    /// <msdn-id>microsoft.directx_sdk.ixaudio2.ixaudio2.createsourcevoice</msdn-id>	
    /// <unmanaged>XAUDIO2_VOICE_FLAGS</unmanaged>	
    /// <unmanaged-short>XAUDIO2_VOICE_FLAGS</unmanaged-short>	
    [Flags]
    public enum VoiceFlags : int {	
        
        /// <summary>	
        /// <dd> <p>If successful, returns a reference to the new <strong><see cref="SharpDX.XAudio2.SourceVoice"/></strong> object.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_VOICE_NOPITCH']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.ixaudio2.ixaudio2.createsourcevoice</msdn-id>	
        /// <unmanaged>XAUDIO2_VOICE_NOPITCH</unmanaged>	
        /// <unmanaged-short>XAUDIO2_VOICE_NOPITCH</unmanaged-short>	
        NoPitch = unchecked((int)2),			
        
        /// <summary>	
        /// <dd> <p>Pointer to a one of the structures in the table below. This structure contains the expected format for all audio buffers submitted to the source voice. 	
        /// XAudio2 supports PCM and ADPCM voice types. </p> <table> <tr><th>Format tag</th><th>Wave format structure</th><th>Size (in bytes)</th></tr> <tr><td><see cref="SharpDX.Multimedia.WaveFormatEncoding.Pcm"/> (0x0001) </td><td> <strong>PCMWAVEFORMAT</strong> </td><td>16</td></tr> <tr><td>-or-</td><td> <strong><see cref="SharpDX.Multimedia.WaveFormat"/></strong> </td><td>18</td></tr> <tr><td><see cref="SharpDX.Multimedia.WaveFormatEncoding.IeeeFloat"/> (0x0003) [32-bit]</td><td> <strong>PCMWAVEFORMAT</strong> </td><td>18</td></tr> <tr><td><see cref="SharpDX.Multimedia.WaveFormatEncoding.Adpcm"/> (0x0002) [MS-ADPCM]</td><td> <strong>ADPCMWAVEFORMAT</strong> </td><td>50</td></tr> <tr><td><see cref="SharpDX.Multimedia.WaveFormatEncoding.Extensible"/> (0xFFFE)</td><td> <strong><see cref="SharpDX.Multimedia.WaveFormatExtensible"/></strong> </td><td>40</td></tr> </table> <p>?</p> <p>XAudio2 supports the following PCM formats.	
        /// </p> <ul> <li>8-bit (unsigned) integer PCM </li> <li>16-bit integer PCM (optimal format for XAudio2) </li> <li>20-bit integer PCM (either in 24 or 32 bit containers) </li> <li>24-bit integer PCM (either in 24 or 32 bit containers) </li> <li>32-bit integer PCM </li> <li>32-bit float PCM (preferred format after 16-bit integer)	
        /// </li> </ul> <p>The number of channels in a source voice must be less than or equal to <see cref="SharpDX.XAudio2.XAudio2.MaximumAudioChannels"/>. The sample rate of a source voice must be between <see cref="SharpDX.XAudio2.XAudio2.MinimumSampleRate"/> and <see cref="SharpDX.XAudio2.XAudio2.MaximumSampleRate"/>.</p> <p><strong>Note</strong>??PCM data formats such as <strong>PCMWAVEFORMAT</strong> and  <strong>ADPCMWAVEFORMAT</strong> that require more information than provided by <strong><see cref="SharpDX.Multimedia.WaveFormat"/></strong> have a <strong><see cref="SharpDX.Multimedia.WaveFormat"/></strong> structure as the first member in their format structures. When you create a source voice with one of those formats, cast the format's structure as a <strong><see cref="SharpDX.Multimedia.WaveFormat"/></strong> structure and use it as the value for <em>pSourceFormat</em>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_VOICE_NOSRC']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.ixaudio2.ixaudio2.createsourcevoice</msdn-id>	
        /// <unmanaged>XAUDIO2_VOICE_NOSRC</unmanaged>	
        /// <unmanaged-short>XAUDIO2_VOICE_NOSRC</unmanaged-short>	
        NoSampleRateConversion = unchecked((int)4),			
        
        /// <summary>	
        /// <dd> <p>Flags that specify the behavior of the source voice. A flag can be 0 or a combination of one or more of the following:</p> <table> <tr><th>Value</th><th>Description</th></tr> <tr><td><see cref="SharpDX.XAudio2.VoiceFlags.NoPitch"/></td><td>No pitch control is available on the voice.?</td></tr> <tr><td><see cref="SharpDX.XAudio2.VoiceFlags.NoSampleRateConversion"/></td><td>No sample rate conversion is available on the voice.  The voice's outputs must have the same sample rate.<p><strong>Note</strong>??The <see cref="SharpDX.XAudio2.VoiceFlags.NoSampleRateConversion"/> flag causes the voice to behave as though the <see cref="SharpDX.XAudio2.VoiceFlags.NoPitch"/> flag also is specified.</p> </td></tr> <tr><td><see cref="SharpDX.XAudio2.VoiceFlags.UseFilter"/></td><td>The filter effect should be available on this voice.?</td></tr> </table> <p>?</p> <p><strong>Note</strong>??The XAUDIO2_VOICE_MUSIC flag is not supported on Windows.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_VOICE_USEFILTER']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.ixaudio2.ixaudio2.createsourcevoice</msdn-id>	
        /// <unmanaged>XAUDIO2_VOICE_USEFILTER</unmanaged>	
        /// <unmanaged-short>XAUDIO2_VOICE_USEFILTER</unmanaged-short>	
        UseFilter = unchecked((int)8),			
        
        /// <summary>	
        /// <dd> <p>Highest allowable frequency ratio that can be set on this voice. The value for this argument must be between <see cref="SharpDX.XAudio2.XAudio2.MinimumFrequencyRatio"/> and <see cref="SharpDX.XAudio2.XAudio2.MaximumFrequencyRatio"/>. Subsequent calls to <strong><see cref="SharpDX.XAudio2.SourceVoice.SetFrequencyRatio"/></strong> are clamped between <see cref="SharpDX.XAudio2.XAudio2.MinimumFrequencyRatio"/> and <strong>MaxFrequencyRatio</strong>. 	
        /// The maximum value for this argument is defined as <see cref="SharpDX.XAudio2.XAudio2.MaximumFrequencyRatio"/>, which allows pitch to be raised by up to 10 octaves. </p> <p>If <em>MaxFrequencyRatio</em> is less than 1.0, the voice will use that ratio immediately after being created (rather than the default of 1.0). </p> <p> </p><table> <tr><th>Xbox 360</th></tr> <tr><td>For XMA voices, there is one more restriction on the <em>MaxFrequencyRatio</em> argument and the voice's sample rate. The product of these two numbers cannot exceed XAUDIO2_MAX_RATIO_TIMES_RATE_XMA_MONO for one-channel voices or XAUDIO2_MAX_RATIO_TIMES_RATE_XMA_MULTICHANNEL for voices with any other number of channels. If the value specified for <em>MaxFrequencyRatio</em> is too high for the specified format, the call to <strong>CreateSourceVoice</strong> fails and produces a debug message.	
        /// </td></tr> </table> <p>?</p> <p><strong>Note</strong>??You can use the lowest possible <em>MaxFrequencyRatio</em> value to reduce XAudio2's memory usage.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_VOICE_NOSAMPLESPLAYED']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.ixaudio2.ixaudio2.createsourcevoice</msdn-id>	
        /// <unmanaged>XAUDIO2_VOICE_NOSAMPLESPLAYED</unmanaged>	
        /// <unmanaged-short>XAUDIO2_VOICE_NOSAMPLESPLAYED</unmanaged-short>	
        Nosamplesplayed = unchecked((int)256),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>Defines a destination voice that is the target of a send from another voice and specifies whether a filter should be used.</p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_VOICE_SEND_FLAGS']/*"/>	
    /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_send_descriptor</msdn-id>	
    /// <unmanaged>XAUDIO2_VOICE_SEND_FLAGS</unmanaged>	
    /// <unmanaged-short>XAUDIO2_VOICE_SEND_FLAGS</unmanaged-short>	
    [Flags]
    public enum VoiceSendFlags : int {	
        
        /// <summary>	
        /// <dd> <p>Indicates whether a filter should be used on data sent to the voice pointed to by <strong>pOutputVoice</strong>. Flags can be 0 or <see cref="SharpDX.XAudio2.VoiceSendFlags.UseFilter"/>.</p> </dd>	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_SEND_USEFILTER']/*"/>	
        /// <msdn-id>microsoft.directx_sdk.xaudio2.xaudio2_send_descriptor</msdn-id>	
        /// <unmanaged>XAUDIO2_SEND_USEFILTER</unmanaged>	
        /// <unmanaged-short>XAUDIO2_SEND_USEFILTER</unmanaged-short>	
        UseFilter = unchecked((int)128),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// <p>XAudio2 constants that specify default parameters, maximum values, and flags.</p><p> </p><p><strong>XAudio2 boundary values</strong></p>	
    /// </summary>	
    /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_FLAGS']/*"/>	
    /// <msdn-id>ee419230</msdn-id>	
    /// <unmanaged>XAUDIO2_FLAGS</unmanaged>	
    /// <unmanaged-short>XAUDIO2_FLAGS</unmanaged-short>	
    [Flags]
    public enum XAudio2Flags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='XAUDIO2_DEBUG_ENGINE']/*"/>	
        /// <msdn-id>ee419230</msdn-id>	
        /// <unmanaged>XAUDIO2_DEBUG_ENGINE</unmanaged>	
        /// <unmanaged-short>XAUDIO2_DEBUG_ENGINE</unmanaged-short>	
        DebugEngine = unchecked((int)1),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <include file='.\..\Documentation\CodeComments.xml' path="/comments/comment[@id='']/*"/>	
        /// <unmanaged>None</unmanaged>	
        /// <unmanaged-short>None</unmanaged-short>	
        None = unchecked((int)0),			
    }
}
