// Copyright (c) 2010-2014 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Types declaration for SharpDX.DirectWrite namespace.
//     This code was generated by a tool.
//     Date : 6/25/2016 10:38:16 PM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
namespace SharpDX.DirectWrite {

#pragma warning disable 419
#pragma warning disable 1587
#pragma warning disable 1574

        /// <summary>	
        /// Functions	
        /// </summary>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='SharpDX.DirectWrite.DWrite']/*"/>	
    static  partial class DWrite {   
        
        /// <summary>	
        /// <p>Creates a DirectWrite factory object that is used for subsequent creation of individual DirectWrite objects.</p>	
        /// </summary>	
        /// <param name="factoryType"><dd>  <p>A value that specifies whether the factory object will be shared or isolated.</p> </dd></param>	
        /// <param name="iid"><dd>  <p>A <see cref="System.Guid"/> value that identifies the DirectWrite factory interface, such as __uuidof(<strong><see cref="SharpDX.DirectWrite.Factory"/></strong>).</p> </dd></param>	
        /// <param name="factory"><dd>  <p>An address of a reference to the newly created DirectWrite factory object.</p> </dd></param>	
        /// <returns><p>If this function succeeds, it returns <strong><see cref="SharpDX.Result.Ok"/></strong>. Otherwise, it returns an <strong><see cref="SharpDX.Result"/></strong> error code.</p></returns>	
        /// <remarks>	
        /// <p>This function creates a DirectWrite factory object that is used for subsequent creation of individual DirectWrite objects. DirectWrite factory contains internal state data such as font loader registration and cached font data. In most cases it is recommended you use the shared factory object, because it allows multiple components that use DirectWrite to share internal DirectWrite state data, and thereby reduce memory usage. However, there are cases when it is desirable to reduce the impact of a component, such as a plug-in from an untrusted source, on the rest of the process, by sandboxing and isolating it from the rest of the process components. In such cases, it is recommended you use an isolated factory for the sandboxed component.</p><p>The following example shows how to create a shared DirectWrite factory.</p><pre> if (SUCCEEDED(hr))	
        /// { hr = <see cref="SharpDX.DirectWrite.DWrite.CreateFactory"/>( <see cref="SharpDX.DirectWrite.FactoryType.Shared"/>, __uuidof(<see cref="SharpDX.DirectWrite.Factory"/>), reinterpret_cast&lt;<see cref="SharpDX.ComObject"/>**&gt;(&amp;pDWriteFactory_) );	
        /// } </pre><p><strong>Windows Phone 8.1:</strong> This API is supported.</p>	
        /// </remarks>	
        /// <include file='..\..\Documentation\CodeComments.xml' path="/comments/comment[@id='DWriteCreateFactory']/*"/>	
        /// <msdn-id>dd368040</msdn-id>	
        /// <unmanaged>HRESULT DWriteCreateFactory([In] DWRITE_FACTORY_TYPE factoryType,[In] const GUID&amp; iid,[Out, Fast] IUnknown** factory)</unmanaged>	
        /// <unmanaged-short>DWriteCreateFactory</unmanaged-short>	
        public static void CreateFactory(SharpDX.DirectWrite.FactoryType factoryType, System.Guid iid, SharpDX.ComObject factory) {
            unsafe {
                IntPtr factory_ = IntPtr.Zero;
                SharpDX.Result __result__;
                __result__= 
				DWriteCreateFactory_(unchecked((int)factoryType), &iid, &factory_);		
                ((SharpDX.ComObject)factory).NativePointer = factory_;
                __result__.CheckError();
            }
        }
        [DllImport("dwrite.dll", EntryPoint = "DWriteCreateFactory", CallingConvention = CallingConvention.StdCall)]
        private unsafe static extern int DWriteCreateFactory_(int arg0,void* arg1,void* arg2);
    }
}
