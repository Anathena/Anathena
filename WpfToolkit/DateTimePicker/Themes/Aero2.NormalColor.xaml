<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:chrome="clr-namespace:Xceed.Wpf.Toolkit.Chromes"
                    xmlns:conv="clr-namespace:Xceed.Wpf.Toolkit.Core.Converters"
                    xmlns:local="clr-namespace:Xceed.Wpf.Toolkit"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:themes="clr-namespace:Xceed.Wpf.Toolkit.Themes">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../../Themes/Aero2/Common.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <conv:InverseBoolConverter x:Key="InverseBoolConverter" />
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

    <DataTemplate x:Key="DefaultWatermarkTemplate">
        <ContentControl Margin="0,0,3,0"
                        Content="{Binding}"
                        Focusable="False"
                        Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
    </DataTemplate>

    <Style x:Key="DateTimePickerToggleButtonStyle" TargetType="ToggleButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid SnapsToDevicePixels="True">
                        <chrome:ButtonChrome x:Name="ToggleButtonChrome"
                                             CornerRadius="0"
                                             RenderChecked="{Binding IsOpen,
                                                                     RelativeSource={RelativeSource Mode=FindAncestor,
                                                                                                    AncestorType=local:DateTimePicker}}"
                                             RenderEnabled="{Binding IsEnabled,
                                                                     RelativeSource={RelativeSource Mode=FindAncestor,
                                                                                                    AncestorType=local:DateTimePicker}}"
                                             RenderMouseOver="{TemplateBinding IsMouseOver}"
                                             RenderPressed="{TemplateBinding IsPressed}">

                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>

                                <ContentPresenter HorizontalAlignment="Stretch"
                                                  VerticalAlignment="Stretch"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                                <Grid x:Name="arrowGlyph"
                                      Grid.Column="1"
                                      Margin="5"
                                      IsHitTestVisible="False">
                                    <Path x:Name="Arrow"
                                          Width="7"
                                          Height="4"
                                          Data="M 0,1 C0,1 0,0 0,0 0,0 3,0 3,0 3,0 3,1 3,1 3,1 4,1 4,1 4,1 4,0 4,0 4,0 7,0 7,0 7,0 7,1 7,1 7,1 6,1 6,1 6,1 6,2 6,2 6,2 5,2 5,2 5,2 5,3 5,3 5,3 4,3 4,3 4,3 4,4 4,4 4,4 3,4 3,4 3,4 3,3 3,3 3,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1 z"
                                          Fill="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                                </Grid>
                            </Grid>
                        </chrome:ButtonChrome>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Arrow" Property="Fill" Value="#AFAFAF" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--  ===============================================================================  -->
    <!--  DateTimePicker  -->
    <!--  ===============================================================================  -->

    <Style TargetType="{x:Type local:DateTimePicker}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:ResourceKeys.ControlNormalBorderKey}}" />
        <Setter Property="BorderThickness" Value="1,1,0,1" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="TimeWatermarkTemplate" Value="{StaticResource DefaultWatermarkTemplate}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="WatermarkTemplate" Value="{StaticResource DefaultWatermarkTemplate}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:DateTimePicker}">
                    <Border>
                        <Grid>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <local:ButtonSpinner x:Name="PART_Spinner"
                                                     HorizontalContentAlignment="Stretch"
                                                     VerticalContentAlignment="Stretch"
                                                     AllowSpin="{TemplateBinding AllowSpin}"
                                                     Background="{TemplateBinding Background}"
                                                     BorderBrush="{TemplateBinding BorderBrush}"
                                                     BorderThickness="{TemplateBinding BorderThickness}"
                                                     ButtonSpinnerLocation="{TemplateBinding ButtonSpinnerLocation}"
                                                     IsTabStop="False"
                                                     ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}">
                                    <local:WatermarkTextBox x:Name="PART_TextBox"
                                                            MinWidth="20"
                                                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                            AcceptsReturn="False"
                                                            Background="Transparent"
                                                            BorderThickness="0"
                                                            FontFamily="{TemplateBinding FontFamily}"
                                                            FontSize="{TemplateBinding FontSize}"
                                                            FontStretch="{TemplateBinding FontStretch}"
                                                            FontStyle="{TemplateBinding FontStyle}"
                                                            FontWeight="{TemplateBinding FontWeight}"
                                                            Foreground="{TemplateBinding Foreground}"
                                                            IsTabStop="{TemplateBinding IsTabStop}"
                                                            IsUndoEnabled="{Binding IsUndoEnabled,
                                                                                    RelativeSource={RelativeSource TemplatedParent}}"
                                                            Padding="{TemplateBinding Padding}"
                                                            TabIndex="{TemplateBinding TabIndex}"
                                                            Text="{Binding Text,
                                                                           RelativeSource={RelativeSource TemplatedParent}}"
                                                            TextAlignment="{TemplateBinding TextAlignment}"
                                                            TextWrapping="NoWrap"
                                                            Watermark="{TemplateBinding Watermark}"
                                                            WatermarkTemplate="{TemplateBinding WatermarkTemplate}" />
                                </local:ButtonSpinner>
                                <ToggleButton x:Name="_calendarToggleButton"
                                              Grid.Column="1"
                                              Background="White"
                                              Focusable="False"
                                              IsChecked="{Binding IsOpen,
                                                                  RelativeSource={RelativeSource TemplatedParent}}"
                                              IsEnabled="{Binding IsReadOnly,
                                                                  RelativeSource={RelativeSource TemplatedParent},
                                                                  Converter={StaticResource InverseBoolConverter}}"
                                              IsHitTestVisible="{Binding IsOpen,
                                                                         RelativeSource={RelativeSource TemplatedParent},
                                                                         Converter={StaticResource InverseBoolConverter}}"
                                              Style="{StaticResource DateTimePickerToggleButtonStyle}"
                                              Visibility="{TemplateBinding ShowDropDownButton,
                                                                           Converter={StaticResource BooleanToVisibilityConverter}}" />
                            </Grid>
                            <Popup x:Name="PART_Popup"
                                   IsOpen="{Binding IsChecked,
                                                    ElementName=_calendarToggleButton}"
                                   StaysOpen="False"
                                   ToolTip="{x:Static sys:String.Empty}">
                                <Popup.Resources>
                                    <Style TargetType="ToolTip">
                                        <Style.Triggers>
                                            <Trigger Property="Content" Value="{x:Static sys:String.Empty}">
                                                <Setter Property="Visibility" Value="Collapsed" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Popup.Resources>
                                <Border Background="{StaticResource PanelBackgroundBrush}"
                                        BorderBrush="{StaticResource PopupDarkBorderBrush}"
                                        BorderThickness="1"
                                        Padding="3">
                                    <StackPanel>
                                        <Calendar x:Name="PART_Calendar"
                                                  BorderThickness="0"
                                                  DisplayMode="{Binding CalendarDisplayMode,
                                                                        RelativeSource={RelativeSource TemplatedParent}}" />
                                        <local:TimePicker x:Name="PART_TimeUpDown"
                                                          AllowSpin="{TemplateBinding TimePickerAllowSpin}"
                                                          Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                                                          ClipValueToMinMax="{Binding ClipValueToMinMax,
                                                                                      RelativeSource={RelativeSource TemplatedParent}}"
                                                          Foreground="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"
                                                          Format="{TemplateBinding TimeFormat}"
                                                          FormatString="{TemplateBinding TimeFormatString}"
                                                          IsUndoEnabled="{Binding IsUndoEnabled,
                                                                                  RelativeSource={RelativeSource TemplatedParent}}"
                                                          Kind="{Binding Kind,
                                                                         RelativeSource={RelativeSource TemplatedParent}}"
                                                          Maximum="{Binding Maximum,
                                                                            RelativeSource={RelativeSource TemplatedParent}}"
                                                          Minimum="{Binding Minimum,
                                                                            RelativeSource={RelativeSource TemplatedParent}}"
                                                          ShowButtonSpinner="{TemplateBinding TimePickerShowButtonSpinner}"
                                                          Visibility="{TemplateBinding TimePickerVisibility}"
                                                          Watermark="{TemplateBinding TimeWatermark}"
                                                          WatermarkTemplate="{TemplateBinding TimeWatermarkTemplate}"
                                                          Value="{Binding Value,
                                                                          RelativeSource={RelativeSource TemplatedParent}}" />
                                    </StackPanel>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:ResourceKeys.ControlMouseOverBorderKey}}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="False" />
                                <Condition Binding="{Binding AllowTextInput, RelativeSource={RelativeSource Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_TextBox" Property="IsReadOnly" Value="True" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="PART_TextBox" Property="IsReadOnly" Value="True" />
                        </DataTrigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:ResourceKeys.ControlSelectedBorderKey}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="PART_TextBox" Property="FocusManager.FocusedElement" Value="{Binding ElementName=PART_TextBox}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
