<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:chrome="clr-namespace:Xceed.Wpf.Toolkit.Chromes"
                    xmlns:conv="clr-namespace:Xceed.Wpf.Toolkit.Core.Converters"
                    xmlns:local="clr-namespace:Xceed.Wpf.Toolkit"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:themes="clr-namespace:Xceed.Wpf.Toolkit.Themes">

    <conv:InverseBoolConverter x:Key="InverseBoolConverter" />

    <LinearGradientBrush x:Key="PopupDarkBorderBrush" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Offset="0" Color="#FFA3AEB9" />
        <GradientStop Offset="0.375" Color="#FF8399A9" />
        <GradientStop Offset="0.375" Color="#FF718597" />
        <GradientStop Offset="1" Color="#FF617584" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PopupBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Offset="0" Color="#FFffffff" />
                <GradientStop Offset="1" Color="#FFE8EBED" />
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <Style TargetType="{x:Type local:DropDownButton}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource {x:Static themes:ResourceKeys.ButtonNormalBackgroundKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:ResourceKeys.ButtonNormalOuterBorderKey}}" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:DropDownButton}">
                    <Grid x:Name="MainGrid" SnapsToDevicePixels="True">

                        <Popup x:Name="PART_Popup"
                               AllowsTransparency="True"
                               Focusable="False"
                               HorizontalOffset="1"
                               IsOpen="{Binding IsChecked,
                                                ElementName=PART_DropDownButton}"
                               Placement="Bottom"
                               StaysOpen="False"
                               ToolTip="{x:Static sys:String.Empty}"
                               VerticalOffset="1">
                            <Popup.Resources>
                                <Style TargetType="ToolTip">
                                    <Style.Triggers>
                                        <Trigger Property="Content" Value="{x:Static sys:String.Empty}">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Popup.Resources>
                            <Border MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                    Background="{StaticResource PopupBackgroundBrush}"
                                    BorderBrush="{StaticResource PopupDarkBorderBrush}"
                                    BorderThickness="1">
                                <ScrollViewer x:Name="DropDownScrollViewer" VerticalScrollBarVisibility="Auto">
                                    <ContentPresenter x:Name="PART_ContentPresenter" Content="{TemplateBinding DropDownContent}" />
                                </ScrollViewer>
                            </Border>
                        </Popup>
                        <ToggleButton x:Name="PART_DropDownButton"
                                      Grid.Column="1"
                                      IsChecked="{Binding IsOpen,
                                                          RelativeSource={RelativeSource TemplatedParent},
                                                          Mode=TwoWay}"
                                      IsHitTestVisible="{Binding IsOpen,
                                                                 RelativeSource={RelativeSource TemplatedParent},
                                                                 Converter={StaticResource InverseBoolConverter}}">
                            <ToggleButton.Template>
                                <ControlTemplate TargetType="ToggleButton">
                                    <ContentPresenter />
                                </ControlTemplate>
                            </ToggleButton.Template>
                            <Grid>
                                <chrome:ButtonChrome x:Name="ToggleButtonChrome"
                                                     Background="{TemplateBinding Background}"
                                                     BorderBrush="{TemplateBinding BorderBrush}"
                                                     BorderThickness="{TemplateBinding BorderThickness}"
                                                     CornerRadius="2.75"
                                                     Foreground="{TemplateBinding Foreground}"
                                                     RenderChecked="{TemplateBinding IsOpen}"
                                                     RenderEnabled="{TemplateBinding IsEnabled}"
                                                     RenderMouseOver="{Binding IsMouseOver,
                                                                               ElementName=PART_DropDownButton}"
                                                     RenderPressed="{Binding IsPressed,
                                                                             ElementName=PART_DropDownButton}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                          Content="{TemplateBinding Content}"
                                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                                          RecognizesAccessKey="true" />
                                        <Grid x:Name="arrowGlyph"
                                              Grid.Column="1"
                                              Margin="4,3,4,3"
                                              IsHitTestVisible="False">
                                            <Path x:Name="Arrow"
                                                  Width="7"
                                                  Height="4"
                                                  Data="M 0,1 C0,1 0,0 0,0 0,0 3,0 3,0 3,0 3,1 3,1 3,1 4,1 4,1 4,1 4,0 4,0 4,0 7,0 7,0 7,0 7,1 7,1 7,1 6,1 6,1 6,1 6,2 6,2 6,2 5,2 5,2 5,2 5,3 5,3 5,3 4,3 4,3 4,3 4,4 4,4 4,4 3,4 3,4 3,4 3,3 3,3 3,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1 z"
                                                  Fill="#FF000000" />
                                        </Grid>
                                    </Grid>
                                </chrome:ButtonChrome>
                            </Grid>
                        </ToggleButton>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Arrow" Property="Fill" Value="#AFAFAF" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
